
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f4c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00405f4c  00405f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00405f54  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000284  204009c0  00406914  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400c44  00406b98  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402c48  00408b9c  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f6fa  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000041f1  00000000  00000000  00040141  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f98  00000000  00000000  00044332  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001238  00000000  00000000  000452ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000245c5  00000000  00000000  00046502  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011a3d  00000000  00000000  0006aac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009f979  00000000  00000000  0007c504  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003210  00000000  00000000  0011be80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00009f3d  00000000  00000000  0011f090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 2c 40 20 9d 0a 40 00 9b 0a 40 00 9b 0a 40 00     H,@ ..@...@...@.
  400010:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	91 0e 40 00 9b 0a 40 00 00 00 00 00 31 0f 40 00     ..@...@.....1.@.
  40003c:	95 0f 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40004c:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40005c:	9b 0a 40 00 9b 0a 40 00 00 00 00 00 8d 05 40 00     ..@...@.......@.
  40006c:	a1 05 40 00 b5 05 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40007c:	9b 0a 40 00 c9 05 40 00 dd 05 40 00 9b 0a 40 00     ..@...@...@...@.
  40008c:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40009c:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  4000ac:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  4000bc:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  4000cc:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  4000dc:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  4000ec:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  4000fc:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40010c:	9b 0a 40 00 9b 0a 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ......@...@...@.
  40012c:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40013c:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40014c:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00 9b 0a 40 00     ..@...@...@...@.
  40015c:	9b 0a 40 00 9b 0a 40 00 9b 0a 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00405f54 	.word	0x00405f54

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405f54 	.word	0x00405f54
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00405f54 	.word	0x00405f54
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400c71 	.word	0x00400c71
  400220:	0040068d 	.word	0x0040068d
  400224:	004006e1 	.word	0x004006e1
  400228:	004006f1 	.word	0x004006f1
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400701 	.word	0x00400701
  400238:	004005f1 	.word	0x004005f1
  40023c:	00400629 	.word	0x00400629
  400240:	00400b65 	.word	0x00400b65

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400bd8 	.word	0x20400bd8
  40027c:	20400bd0 	.word	0x20400bd0

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400bd4 	.word	0x20400bd4
  4002cc:	20400bd8 	.word	0x20400bd8

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	00400711 	.word	0x00400711
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400464:	6301      	str	r1, [r0, #48]	; 0x30
  400466:	4770      	bx	lr

00400468 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400468:	6341      	str	r1, [r0, #52]	; 0x34
  40046a:	4770      	bx	lr

0040046c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40046c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40046e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400472:	d03a      	beq.n	4004ea <pio_set_peripheral+0x7e>
  400474:	d813      	bhi.n	40049e <pio_set_peripheral+0x32>
  400476:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40047a:	d025      	beq.n	4004c8 <pio_set_peripheral+0x5c>
  40047c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400480:	d10a      	bne.n	400498 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400482:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400484:	4313      	orrs	r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40048a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40048c:	400b      	ands	r3, r1
  40048e:	ea23 0302 	bic.w	r3, r3, r2
  400492:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400494:	6042      	str	r2, [r0, #4]
  400496:	4770      	bx	lr
	switch (ul_type) {
  400498:	2900      	cmp	r1, #0
  40049a:	d1fb      	bne.n	400494 <pio_set_peripheral+0x28>
  40049c:	4770      	bx	lr
  40049e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004a2:	d021      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004a4:	d809      	bhi.n	4004ba <pio_set_peripheral+0x4e>
  4004a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004aa:	d1f3      	bne.n	400494 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004ae:	4313      	orrs	r3, r2
  4004b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004b4:	4313      	orrs	r3, r2
  4004b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004b8:	e7ec      	b.n	400494 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004be:	d013      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004c4:	d010      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c6:	e7e5      	b.n	400494 <pio_set_peripheral+0x28>
{
  4004c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004ce:	43d3      	mvns	r3, r2
  4004d0:	4021      	ands	r1, r4
  4004d2:	461c      	mov	r4, r3
  4004d4:	4019      	ands	r1, r3
  4004d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004dc:	400b      	ands	r3, r1
  4004de:	4023      	ands	r3, r4
  4004e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004e2:	6042      	str	r2, [r0, #4]
}
  4004e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004ee:	400b      	ands	r3, r1
  4004f0:	ea23 0302 	bic.w	r3, r3, r2
  4004f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004f8:	4313      	orrs	r3, r2
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004fc:	e7ca      	b.n	400494 <pio_set_peripheral+0x28>

004004fe <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4004fe:	b410      	push	{r4}
  400500:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400502:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400504:	b94c      	cbnz	r4, 40051a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400506:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400508:	b14b      	cbz	r3, 40051e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40050a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40050c:	b94a      	cbnz	r2, 400522 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40050e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400510:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400512:	6001      	str	r1, [r0, #0]
}
  400514:	f85d 4b04 	ldr.w	r4, [sp], #4
  400518:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40051a:	6641      	str	r1, [r0, #100]	; 0x64
  40051c:	e7f4      	b.n	400508 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40051e:	6541      	str	r1, [r0, #84]	; 0x54
  400520:	e7f4      	b.n	40050c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400522:	6301      	str	r1, [r0, #48]	; 0x30
  400524:	e7f4      	b.n	400510 <pio_set_output+0x12>

00400526 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400526:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400528:	420b      	tst	r3, r1
}
  40052a:	bf14      	ite	ne
  40052c:	2001      	movne	r0, #1
  40052e:	2000      	moveq	r0, #0
  400530:	4770      	bx	lr

00400532 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400532:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400534:	4770      	bx	lr

00400536 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400536:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400538:	4770      	bx	lr
	...

0040053c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400540:	4604      	mov	r4, r0
  400542:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400544:	4b0e      	ldr	r3, [pc, #56]	; (400580 <pio_handler_process+0x44>)
  400546:	4798      	blx	r3
  400548:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40054a:	4620      	mov	r0, r4
  40054c:	4b0d      	ldr	r3, [pc, #52]	; (400584 <pio_handler_process+0x48>)
  40054e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400550:	4005      	ands	r5, r0
  400552:	d013      	beq.n	40057c <pio_handler_process+0x40>
  400554:	4c0c      	ldr	r4, [pc, #48]	; (400588 <pio_handler_process+0x4c>)
  400556:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40055a:	e003      	b.n	400564 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40055c:	42b4      	cmp	r4, r6
  40055e:	d00d      	beq.n	40057c <pio_handler_process+0x40>
  400560:	3410      	adds	r4, #16
		while (status != 0) {
  400562:	b15d      	cbz	r5, 40057c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400564:	6820      	ldr	r0, [r4, #0]
  400566:	4540      	cmp	r0, r8
  400568:	d1f8      	bne.n	40055c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40056a:	6861      	ldr	r1, [r4, #4]
  40056c:	4229      	tst	r1, r5
  40056e:	d0f5      	beq.n	40055c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400570:	68e3      	ldr	r3, [r4, #12]
  400572:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400574:	6863      	ldr	r3, [r4, #4]
  400576:	ea25 0503 	bic.w	r5, r5, r3
  40057a:	e7ef      	b.n	40055c <pio_handler_process+0x20>
  40057c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400580:	00400533 	.word	0x00400533
  400584:	00400537 	.word	0x00400537
  400588:	204009dc 	.word	0x204009dc

0040058c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40058c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40058e:	210a      	movs	r1, #10
  400590:	4801      	ldr	r0, [pc, #4]	; (400598 <PIOA_Handler+0xc>)
  400592:	4b02      	ldr	r3, [pc, #8]	; (40059c <PIOA_Handler+0x10>)
  400594:	4798      	blx	r3
  400596:	bd08      	pop	{r3, pc}
  400598:	400e0e00 	.word	0x400e0e00
  40059c:	0040053d 	.word	0x0040053d

004005a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4005a0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4005a2:	210b      	movs	r1, #11
  4005a4:	4801      	ldr	r0, [pc, #4]	; (4005ac <PIOB_Handler+0xc>)
  4005a6:	4b02      	ldr	r3, [pc, #8]	; (4005b0 <PIOB_Handler+0x10>)
  4005a8:	4798      	blx	r3
  4005aa:	bd08      	pop	{r3, pc}
  4005ac:	400e1000 	.word	0x400e1000
  4005b0:	0040053d 	.word	0x0040053d

004005b4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4005b4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4005b6:	210c      	movs	r1, #12
  4005b8:	4801      	ldr	r0, [pc, #4]	; (4005c0 <PIOC_Handler+0xc>)
  4005ba:	4b02      	ldr	r3, [pc, #8]	; (4005c4 <PIOC_Handler+0x10>)
  4005bc:	4798      	blx	r3
  4005be:	bd08      	pop	{r3, pc}
  4005c0:	400e1200 	.word	0x400e1200
  4005c4:	0040053d 	.word	0x0040053d

004005c8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4005c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4005ca:	2110      	movs	r1, #16
  4005cc:	4801      	ldr	r0, [pc, #4]	; (4005d4 <PIOD_Handler+0xc>)
  4005ce:	4b02      	ldr	r3, [pc, #8]	; (4005d8 <PIOD_Handler+0x10>)
  4005d0:	4798      	blx	r3
  4005d2:	bd08      	pop	{r3, pc}
  4005d4:	400e1400 	.word	0x400e1400
  4005d8:	0040053d 	.word	0x0040053d

004005dc <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4005dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4005de:	2111      	movs	r1, #17
  4005e0:	4801      	ldr	r0, [pc, #4]	; (4005e8 <PIOE_Handler+0xc>)
  4005e2:	4b02      	ldr	r3, [pc, #8]	; (4005ec <PIOE_Handler+0x10>)
  4005e4:	4798      	blx	r3
  4005e6:	bd08      	pop	{r3, pc}
  4005e8:	400e1600 	.word	0x400e1600
  4005ec:	0040053d 	.word	0x0040053d

004005f0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4005f0:	2803      	cmp	r0, #3
  4005f2:	d011      	beq.n	400618 <pmc_mck_set_division+0x28>
  4005f4:	2804      	cmp	r0, #4
  4005f6:	d012      	beq.n	40061e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4005f8:	2802      	cmp	r0, #2
  4005fa:	bf0c      	ite	eq
  4005fc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400600:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400602:	4a08      	ldr	r2, [pc, #32]	; (400624 <pmc_mck_set_division+0x34>)
  400604:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40060a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40060c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40060e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400610:	f013 0f08 	tst.w	r3, #8
  400614:	d0fb      	beq.n	40060e <pmc_mck_set_division+0x1e>
}
  400616:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400618:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40061c:	e7f1      	b.n	400602 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40061e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400622:	e7ee      	b.n	400602 <pmc_mck_set_division+0x12>
  400624:	400e0600 	.word	0x400e0600

00400628 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400628:	4a17      	ldr	r2, [pc, #92]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  40062a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40062c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400630:	4318      	orrs	r0, r3
  400632:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400634:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400636:	f013 0f08 	tst.w	r3, #8
  40063a:	d10a      	bne.n	400652 <pmc_switch_mck_to_pllack+0x2a>
  40063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400640:	4911      	ldr	r1, [pc, #68]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  400642:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400644:	f012 0f08 	tst.w	r2, #8
  400648:	d103      	bne.n	400652 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40064a:	3b01      	subs	r3, #1
  40064c:	d1f9      	bne.n	400642 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40064e:	2001      	movs	r0, #1
  400650:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400652:	4a0d      	ldr	r2, [pc, #52]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  400654:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400656:	f023 0303 	bic.w	r3, r3, #3
  40065a:	f043 0302 	orr.w	r3, r3, #2
  40065e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400660:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400662:	f013 0f08 	tst.w	r3, #8
  400666:	d10a      	bne.n	40067e <pmc_switch_mck_to_pllack+0x56>
  400668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40066c:	4906      	ldr	r1, [pc, #24]	; (400688 <pmc_switch_mck_to_pllack+0x60>)
  40066e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400670:	f012 0f08 	tst.w	r2, #8
  400674:	d105      	bne.n	400682 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400676:	3b01      	subs	r3, #1
  400678:	d1f9      	bne.n	40066e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40067a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40067c:	4770      	bx	lr
	return 0;
  40067e:	2000      	movs	r0, #0
  400680:	4770      	bx	lr
  400682:	2000      	movs	r0, #0
  400684:	4770      	bx	lr
  400686:	bf00      	nop
  400688:	400e0600 	.word	0x400e0600

0040068c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40068c:	b9a0      	cbnz	r0, 4006b8 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40068e:	480e      	ldr	r0, [pc, #56]	; (4006c8 <pmc_switch_mainck_to_xtal+0x3c>)
  400690:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400692:	0209      	lsls	r1, r1, #8
  400694:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400696:	4a0d      	ldr	r2, [pc, #52]	; (4006cc <pmc_switch_mainck_to_xtal+0x40>)
  400698:	401a      	ands	r2, r3
  40069a:	4b0d      	ldr	r3, [pc, #52]	; (4006d0 <pmc_switch_mainck_to_xtal+0x44>)
  40069c:	4313      	orrs	r3, r2
  40069e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4006a0:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4006a2:	4602      	mov	r2, r0
  4006a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006a6:	f013 0f01 	tst.w	r3, #1
  4006aa:	d0fb      	beq.n	4006a4 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4006ac:	4a06      	ldr	r2, [pc, #24]	; (4006c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4006ae:	6a11      	ldr	r1, [r2, #32]
  4006b0:	4b08      	ldr	r3, [pc, #32]	; (4006d4 <pmc_switch_mainck_to_xtal+0x48>)
  4006b2:	430b      	orrs	r3, r1
  4006b4:	6213      	str	r3, [r2, #32]
  4006b6:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006b8:	4903      	ldr	r1, [pc, #12]	; (4006c8 <pmc_switch_mainck_to_xtal+0x3c>)
  4006ba:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4006bc:	4a06      	ldr	r2, [pc, #24]	; (4006d8 <pmc_switch_mainck_to_xtal+0x4c>)
  4006be:	401a      	ands	r2, r3
  4006c0:	4b06      	ldr	r3, [pc, #24]	; (4006dc <pmc_switch_mainck_to_xtal+0x50>)
  4006c2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006c4:	620b      	str	r3, [r1, #32]
  4006c6:	4770      	bx	lr
  4006c8:	400e0600 	.word	0x400e0600
  4006cc:	ffc8fffc 	.word	0xffc8fffc
  4006d0:	00370001 	.word	0x00370001
  4006d4:	01370000 	.word	0x01370000
  4006d8:	fec8fffc 	.word	0xfec8fffc
  4006dc:	01370002 	.word	0x01370002

004006e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4006e0:	4b02      	ldr	r3, [pc, #8]	; (4006ec <pmc_osc_is_ready_mainck+0xc>)
  4006e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4006e8:	4770      	bx	lr
  4006ea:	bf00      	nop
  4006ec:	400e0600 	.word	0x400e0600

004006f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4006f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4006f4:	4b01      	ldr	r3, [pc, #4]	; (4006fc <pmc_disable_pllack+0xc>)
  4006f6:	629a      	str	r2, [r3, #40]	; 0x28
  4006f8:	4770      	bx	lr
  4006fa:	bf00      	nop
  4006fc:	400e0600 	.word	0x400e0600

00400700 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400700:	4b02      	ldr	r3, [pc, #8]	; (40070c <pmc_is_locked_pllack+0xc>)
  400702:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400704:	f000 0002 	and.w	r0, r0, #2
  400708:	4770      	bx	lr
  40070a:	bf00      	nop
  40070c:	400e0600 	.word	0x400e0600

00400710 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400710:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400714:	4b05      	ldr	r3, [pc, #20]	; (40072c <pmc_enable_periph_clk+0x1c>)
  400716:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40071a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40071e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400722:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400726:	2000      	movs	r0, #0
  400728:	4770      	bx	lr
  40072a:	bf00      	nop
  40072c:	400e0600 	.word	0x400e0600

00400730 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400730:	4b28      	ldr	r3, [pc, #160]	; (4007d4 <twihs_set_speed+0xa4>)
  400732:	4299      	cmp	r1, r3
  400734:	d84b      	bhi.n	4007ce <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400736:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  40073a:	4299      	cmp	r1, r3
  40073c:	d92d      	bls.n	40079a <twihs_set_speed+0x6a>
{
  40073e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400740:	4c25      	ldr	r4, [pc, #148]	; (4007d8 <twihs_set_speed+0xa8>)
  400742:	fba4 3402 	umull	r3, r4, r4, r2
  400746:	0ba4      	lsrs	r4, r4, #14
  400748:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40074a:	4b24      	ldr	r3, [pc, #144]	; (4007dc <twihs_set_speed+0xac>)
  40074c:	440b      	add	r3, r1
  40074e:	009b      	lsls	r3, r3, #2
  400750:	fbb2 f2f3 	udiv	r2, r2, r3
  400754:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400756:	2cff      	cmp	r4, #255	; 0xff
  400758:	d91d      	bls.n	400796 <twihs_set_speed+0x66>
  40075a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  40075c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  40075e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400760:	2cff      	cmp	r4, #255	; 0xff
  400762:	d901      	bls.n	400768 <twihs_set_speed+0x38>
  400764:	2906      	cmp	r1, #6
  400766:	d9f9      	bls.n	40075c <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400768:	2aff      	cmp	r2, #255	; 0xff
  40076a:	d907      	bls.n	40077c <twihs_set_speed+0x4c>
  40076c:	2906      	cmp	r1, #6
  40076e:	d805      	bhi.n	40077c <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  400770:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  400772:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  400774:	2aff      	cmp	r2, #255	; 0xff
  400776:	d901      	bls.n	40077c <twihs_set_speed+0x4c>
  400778:	2906      	cmp	r1, #6
  40077a:	d9f9      	bls.n	400770 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  40077c:	0213      	lsls	r3, r2, #8
  40077e:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  400780:	0409      	lsls	r1, r1, #16
  400782:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  400786:	430b      	orrs	r3, r1
  400788:	b2e4      	uxtb	r4, r4
  40078a:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  40078c:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40078e:	2000      	movs	r0, #0
}
  400790:	f85d 4b04 	ldr.w	r4, [sp], #4
  400794:	4770      	bx	lr
	uint32_t ckdiv = 0;
  400796:	2100      	movs	r1, #0
  400798:	e7e6      	b.n	400768 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40079a:	0049      	lsls	r1, r1, #1
  40079c:	fbb2 f2f1 	udiv	r2, r2, r1
  4007a0:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4007a2:	2aff      	cmp	r2, #255	; 0xff
  4007a4:	d911      	bls.n	4007ca <twihs_set_speed+0x9a>
  4007a6:	2300      	movs	r3, #0
			ckdiv++;
  4007a8:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4007aa:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4007ac:	2aff      	cmp	r2, #255	; 0xff
  4007ae:	d901      	bls.n	4007b4 <twihs_set_speed+0x84>
  4007b0:	2b06      	cmp	r3, #6
  4007b2:	d9f9      	bls.n	4007a8 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4007b4:	0211      	lsls	r1, r2, #8
  4007b6:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  4007b8:	041b      	lsls	r3, r3, #16
  4007ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4007be:	430b      	orrs	r3, r1
  4007c0:	b2d2      	uxtb	r2, r2
  4007c2:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  4007c4:	6102      	str	r2, [r0, #16]
	return PASS;
  4007c6:	2000      	movs	r0, #0
  4007c8:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4007ca:	2300      	movs	r3, #0
  4007cc:	e7f2      	b.n	4007b4 <twihs_set_speed+0x84>
		return FAIL;
  4007ce:	2001      	movs	r0, #1
  4007d0:	4770      	bx	lr
  4007d2:	bf00      	nop
  4007d4:	00061a80 	.word	0x00061a80
  4007d8:	057619f1 	.word	0x057619f1
  4007dc:	3ffd1200 	.word	0x3ffd1200

004007e0 <twihs_master_init>:
{
  4007e0:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4007e2:	f04f 32ff 	mov.w	r2, #4294967295
  4007e6:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4007e8:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4007ea:	2280      	movs	r2, #128	; 0x80
  4007ec:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4007ee:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4007f0:	2208      	movs	r2, #8
  4007f2:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4007f4:	2220      	movs	r2, #32
  4007f6:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4007f8:	2204      	movs	r2, #4
  4007fa:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4007fc:	680a      	ldr	r2, [r1, #0]
  4007fe:	6849      	ldr	r1, [r1, #4]
  400800:	4b03      	ldr	r3, [pc, #12]	; (400810 <twihs_master_init+0x30>)
  400802:	4798      	blx	r3
}
  400804:	2801      	cmp	r0, #1
  400806:	bf14      	ite	ne
  400808:	2000      	movne	r0, #0
  40080a:	2001      	moveq	r0, #1
  40080c:	bd08      	pop	{r3, pc}
  40080e:	bf00      	nop
  400810:	00400731 	.word	0x00400731

00400814 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  400814:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  400816:	2b00      	cmp	r3, #0
  400818:	d04b      	beq.n	4008b2 <twihs_master_read+0x9e>
{
  40081a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  40081c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40081e:	2600      	movs	r6, #0
  400820:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  400822:	684a      	ldr	r2, [r1, #4]
  400824:	0212      	lsls	r2, r2, #8
  400826:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40082a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  40082e:	7c0d      	ldrb	r5, [r1, #16]
  400830:	042d      	lsls	r5, r5, #16
  400832:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  400836:	432a      	orrs	r2, r5
  400838:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  40083a:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40083c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40083e:	b15d      	cbz	r5, 400858 <twihs_master_read+0x44>
	val = addr[0];
  400840:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  400842:	2d01      	cmp	r5, #1
  400844:	dd02      	ble.n	40084c <twihs_master_read+0x38>
		val |= addr[1];
  400846:	784e      	ldrb	r6, [r1, #1]
  400848:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  40084c:	2d02      	cmp	r5, #2
  40084e:	dd04      	ble.n	40085a <twihs_master_read+0x46>
		val |= addr[2];
  400850:	7889      	ldrb	r1, [r1, #2]
  400852:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400856:	e000      	b.n	40085a <twihs_master_read+0x46>
		return 0;
  400858:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40085a:	60c2      	str	r2, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  40085c:	2201      	movs	r2, #1
  40085e:	6002      	str	r2, [r0, #0]
  400860:	e006      	b.n	400870 <twihs_master_read+0x5c>
		if (cnt == 1) {
  400862:	2b01      	cmp	r3, #1
  400864:	d019      	beq.n	40089a <twihs_master_read+0x86>
		*buffer++ = p_twihs->TWIHS_RHR;
  400866:	6b02      	ldr	r2, [r0, #48]	; 0x30
  400868:	f804 2b01 	strb.w	r2, [r4], #1
	while (cnt > 0) {
  40086c:	3b01      	subs	r3, #1
  40086e:	d018      	beq.n	4008a2 <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  400870:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400872:	f412 7f80 	tst.w	r2, #256	; 0x100
  400876:	d122      	bne.n	4008be <twihs_master_read+0xaa>
		if (!(status & TWIHS_SR_RXRDY)) {
  400878:	f012 0f02 	tst.w	r2, #2
  40087c:	d1f1      	bne.n	400862 <twihs_master_read+0x4e>
  40087e:	f247 5230 	movw	r2, #30000	; 0x7530
		status = p_twihs->TWIHS_SR;
  400882:	6a01      	ldr	r1, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400884:	f411 7f80 	tst.w	r1, #256	; 0x100
  400888:	d115      	bne.n	4008b6 <twihs_master_read+0xa2>
		if (!timeout--) {
  40088a:	3a01      	subs	r2, #1
  40088c:	d015      	beq.n	4008ba <twihs_master_read+0xa6>
		if (!(status & TWIHS_SR_RXRDY)) {
  40088e:	f011 0f02 	tst.w	r1, #2
  400892:	d1e6      	bne.n	400862 <twihs_master_read+0x4e>
	while (cnt > 0) {
  400894:	2b00      	cmp	r3, #0
  400896:	d1f4      	bne.n	400882 <twihs_master_read+0x6e>
  400898:	e003      	b.n	4008a2 <twihs_master_read+0x8e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40089a:	2302      	movs	r3, #2
  40089c:	6003      	str	r3, [r0, #0]
		*buffer++ = p_twihs->TWIHS_RHR;
  40089e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4008a0:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4008a2:	6a03      	ldr	r3, [r0, #32]
  4008a4:	f013 0f01 	tst.w	r3, #1
  4008a8:	d0fb      	beq.n	4008a2 <twihs_master_read+0x8e>
	p_twihs->TWIHS_SR;
  4008aa:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4008ac:	2000      	movs	r0, #0
}
  4008ae:	bc70      	pop	{r4, r5, r6}
  4008b0:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  4008b2:	2001      	movs	r0, #1
  4008b4:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4008b6:	2005      	movs	r0, #5
  4008b8:	e7f9      	b.n	4008ae <twihs_master_read+0x9a>
			return TWIHS_ERROR_TIMEOUT;
  4008ba:	2009      	movs	r0, #9
  4008bc:	e7f7      	b.n	4008ae <twihs_master_read+0x9a>
			return TWIHS_RECEIVE_NACK;
  4008be:	2005      	movs	r0, #5
  4008c0:	e7f5      	b.n	4008ae <twihs_master_read+0x9a>

004008c2 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  4008c2:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4008c4:	2b00      	cmp	r3, #0
  4008c6:	d043      	beq.n	400950 <twihs_master_write+0x8e>
{
  4008c8:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4008ca:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4008cc:	2600      	movs	r6, #0
  4008ce:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4008d0:	7c0a      	ldrb	r2, [r1, #16]
  4008d2:	0412      	lsls	r2, r2, #16
  4008d4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4008d8:	684d      	ldr	r5, [r1, #4]
  4008da:	022d      	lsls	r5, r5, #8
  4008dc:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4008e0:	432a      	orrs	r2, r5
  4008e2:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4008e4:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4008e6:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4008e8:	b15d      	cbz	r5, 400902 <twihs_master_write+0x40>
	val = addr[0];
  4008ea:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4008ec:	2d01      	cmp	r5, #1
  4008ee:	dd02      	ble.n	4008f6 <twihs_master_write+0x34>
		val |= addr[1];
  4008f0:	784e      	ldrb	r6, [r1, #1]
  4008f2:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4008f6:	2d02      	cmp	r5, #2
  4008f8:	dd04      	ble.n	400904 <twihs_master_write+0x42>
		val |= addr[2];
  4008fa:	7889      	ldrb	r1, [r1, #2]
  4008fc:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  400900:	e000      	b.n	400904 <twihs_master_write+0x42>
		return 0;
  400902:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  400904:	60c2      	str	r2, [r0, #12]
  400906:	e004      	b.n	400912 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  400908:	f814 2b01 	ldrb.w	r2, [r4], #1
  40090c:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  40090e:	3b01      	subs	r3, #1
  400910:	d00f      	beq.n	400932 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  400912:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400914:	f412 7f80 	tst.w	r2, #256	; 0x100
  400918:	d11e      	bne.n	400958 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  40091a:	f012 0f04 	tst.w	r2, #4
  40091e:	d1f3      	bne.n	400908 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  400920:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400922:	f412 7f80 	tst.w	r2, #256	; 0x100
  400926:	d115      	bne.n	400954 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  400928:	f012 0f04 	tst.w	r2, #4
  40092c:	d1ec      	bne.n	400908 <twihs_master_write+0x46>
	while (cnt > 0) {
  40092e:	2b00      	cmp	r3, #0
  400930:	d1f6      	bne.n	400920 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  400932:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  400934:	f413 7f80 	tst.w	r3, #256	; 0x100
  400938:	d111      	bne.n	40095e <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  40093a:	f013 0f04 	tst.w	r3, #4
  40093e:	d0f8      	beq.n	400932 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  400940:	2302      	movs	r3, #2
  400942:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  400944:	6a03      	ldr	r3, [r0, #32]
  400946:	f013 0f01 	tst.w	r3, #1
  40094a:	d0fb      	beq.n	400944 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  40094c:	2000      	movs	r0, #0
  40094e:	e004      	b.n	40095a <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  400950:	2001      	movs	r0, #1
  400952:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  400954:	2005      	movs	r0, #5
  400956:	e000      	b.n	40095a <twihs_master_write+0x98>
  400958:	2005      	movs	r0, #5
}
  40095a:	bc70      	pop	{r4, r5, r6}
  40095c:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40095e:	2005      	movs	r0, #5
  400960:	e7fb      	b.n	40095a <twihs_master_write+0x98>

00400962 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400962:	6943      	ldr	r3, [r0, #20]
  400964:	f013 0f02 	tst.w	r3, #2
  400968:	d002      	beq.n	400970 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40096a:	61c1      	str	r1, [r0, #28]
	return 0;
  40096c:	2000      	movs	r0, #0
  40096e:	4770      	bx	lr
		return 1;
  400970:	2001      	movs	r0, #1
}
  400972:	4770      	bx	lr

00400974 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400974:	6943      	ldr	r3, [r0, #20]
  400976:	f013 0f01 	tst.w	r3, #1
  40097a:	d003      	beq.n	400984 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40097c:	6983      	ldr	r3, [r0, #24]
  40097e:	700b      	strb	r3, [r1, #0]
	return 0;
  400980:	2000      	movs	r0, #0
  400982:	4770      	bx	lr
		return 1;
  400984:	2001      	movs	r0, #1
}
  400986:	4770      	bx	lr

00400988 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400988:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40098a:	010b      	lsls	r3, r1, #4
  40098c:	4293      	cmp	r3, r2
  40098e:	d914      	bls.n	4009ba <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400990:	00c9      	lsls	r1, r1, #3
  400992:	084b      	lsrs	r3, r1, #1
  400994:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400998:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  40099c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40099e:	1e5c      	subs	r4, r3, #1
  4009a0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4009a4:	428c      	cmp	r4, r1
  4009a6:	d901      	bls.n	4009ac <usart_set_async_baudrate+0x24>
		return 1;
  4009a8:	2001      	movs	r0, #1
  4009aa:	e017      	b.n	4009dc <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4009ac:	6841      	ldr	r1, [r0, #4]
  4009ae:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4009b2:	6041      	str	r1, [r0, #4]
  4009b4:	e00c      	b.n	4009d0 <usart_set_async_baudrate+0x48>
		return 1;
  4009b6:	2001      	movs	r0, #1
  4009b8:	e010      	b.n	4009dc <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4009ba:	0859      	lsrs	r1, r3, #1
  4009bc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4009c0:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4009c4:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4009c6:	1e5c      	subs	r4, r3, #1
  4009c8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4009cc:	428c      	cmp	r4, r1
  4009ce:	d8f2      	bhi.n	4009b6 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4009d0:	0412      	lsls	r2, r2, #16
  4009d2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4009d6:	431a      	orrs	r2, r3
  4009d8:	6202      	str	r2, [r0, #32]

	return 0;
  4009da:	2000      	movs	r0, #0
}
  4009dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4009e0:	4770      	bx	lr
	...

004009e4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4009e4:	4b08      	ldr	r3, [pc, #32]	; (400a08 <usart_reset+0x24>)
  4009e6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4009ea:	2300      	movs	r3, #0
  4009ec:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4009ee:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4009f0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4009f2:	2388      	movs	r3, #136	; 0x88
  4009f4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4009f6:	2324      	movs	r3, #36	; 0x24
  4009f8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4009fa:	f44f 7380 	mov.w	r3, #256	; 0x100
  4009fe:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400a00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400a04:	6003      	str	r3, [r0, #0]
  400a06:	4770      	bx	lr
  400a08:	55534100 	.word	0x55534100

00400a0c <usart_init_rs232>:
{
  400a0c:	b570      	push	{r4, r5, r6, lr}
  400a0e:	4605      	mov	r5, r0
  400a10:	460c      	mov	r4, r1
  400a12:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400a14:	4b0f      	ldr	r3, [pc, #60]	; (400a54 <usart_init_rs232+0x48>)
  400a16:	4798      	blx	r3
	ul_reg_val = 0;
  400a18:	2200      	movs	r2, #0
  400a1a:	4b0f      	ldr	r3, [pc, #60]	; (400a58 <usart_init_rs232+0x4c>)
  400a1c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400a1e:	b1a4      	cbz	r4, 400a4a <usart_init_rs232+0x3e>
  400a20:	4632      	mov	r2, r6
  400a22:	6821      	ldr	r1, [r4, #0]
  400a24:	4628      	mov	r0, r5
  400a26:	4b0d      	ldr	r3, [pc, #52]	; (400a5c <usart_init_rs232+0x50>)
  400a28:	4798      	blx	r3
  400a2a:	4602      	mov	r2, r0
  400a2c:	b978      	cbnz	r0, 400a4e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a2e:	6863      	ldr	r3, [r4, #4]
  400a30:	68a1      	ldr	r1, [r4, #8]
  400a32:	430b      	orrs	r3, r1
  400a34:	6921      	ldr	r1, [r4, #16]
  400a36:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400a38:	68e1      	ldr	r1, [r4, #12]
  400a3a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400a3c:	4906      	ldr	r1, [pc, #24]	; (400a58 <usart_init_rs232+0x4c>)
  400a3e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400a40:	6869      	ldr	r1, [r5, #4]
  400a42:	430b      	orrs	r3, r1
  400a44:	606b      	str	r3, [r5, #4]
}
  400a46:	4610      	mov	r0, r2
  400a48:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400a4a:	2201      	movs	r2, #1
  400a4c:	e7fb      	b.n	400a46 <usart_init_rs232+0x3a>
  400a4e:	2201      	movs	r2, #1
  400a50:	e7f9      	b.n	400a46 <usart_init_rs232+0x3a>
  400a52:	bf00      	nop
  400a54:	004009e5 	.word	0x004009e5
  400a58:	20400a4c 	.word	0x20400a4c
  400a5c:	00400989 	.word	0x00400989

00400a60 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400a60:	2340      	movs	r3, #64	; 0x40
  400a62:	6003      	str	r3, [r0, #0]
  400a64:	4770      	bx	lr

00400a66 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400a66:	2310      	movs	r3, #16
  400a68:	6003      	str	r3, [r0, #0]
  400a6a:	4770      	bx	lr

00400a6c <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400a6c:	6943      	ldr	r3, [r0, #20]
  400a6e:	f013 0f02 	tst.w	r3, #2
  400a72:	d004      	beq.n	400a7e <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400a74:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400a78:	61c1      	str	r1, [r0, #28]
	return 0;
  400a7a:	2000      	movs	r0, #0
  400a7c:	4770      	bx	lr
		return 1;
  400a7e:	2001      	movs	r0, #1
}
  400a80:	4770      	bx	lr

00400a82 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400a82:	6943      	ldr	r3, [r0, #20]
  400a84:	f013 0f01 	tst.w	r3, #1
  400a88:	d005      	beq.n	400a96 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400a8a:	6983      	ldr	r3, [r0, #24]
  400a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400a90:	600b      	str	r3, [r1, #0]
	return 0;
  400a92:	2000      	movs	r0, #0
  400a94:	4770      	bx	lr
		return 1;
  400a96:	2001      	movs	r0, #1
}
  400a98:	4770      	bx	lr

00400a9a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400a9a:	e7fe      	b.n	400a9a <Dummy_Handler>

00400a9c <Reset_Handler>:
{
  400a9c:	b500      	push	{lr}
  400a9e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400aa0:	4b25      	ldr	r3, [pc, #148]	; (400b38 <Reset_Handler+0x9c>)
  400aa2:	4a26      	ldr	r2, [pc, #152]	; (400b3c <Reset_Handler+0xa0>)
  400aa4:	429a      	cmp	r2, r3
  400aa6:	d010      	beq.n	400aca <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400aa8:	4b25      	ldr	r3, [pc, #148]	; (400b40 <Reset_Handler+0xa4>)
  400aaa:	4a23      	ldr	r2, [pc, #140]	; (400b38 <Reset_Handler+0x9c>)
  400aac:	429a      	cmp	r2, r3
  400aae:	d20c      	bcs.n	400aca <Reset_Handler+0x2e>
  400ab0:	3b01      	subs	r3, #1
  400ab2:	1a9b      	subs	r3, r3, r2
  400ab4:	f023 0303 	bic.w	r3, r3, #3
  400ab8:	3304      	adds	r3, #4
  400aba:	4413      	add	r3, r2
  400abc:	491f      	ldr	r1, [pc, #124]	; (400b3c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400abe:	f851 0b04 	ldr.w	r0, [r1], #4
  400ac2:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400ac6:	429a      	cmp	r2, r3
  400ac8:	d1f9      	bne.n	400abe <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400aca:	4b1e      	ldr	r3, [pc, #120]	; (400b44 <Reset_Handler+0xa8>)
  400acc:	4a1e      	ldr	r2, [pc, #120]	; (400b48 <Reset_Handler+0xac>)
  400ace:	429a      	cmp	r2, r3
  400ad0:	d20a      	bcs.n	400ae8 <Reset_Handler+0x4c>
  400ad2:	3b01      	subs	r3, #1
  400ad4:	1a9b      	subs	r3, r3, r2
  400ad6:	f023 0303 	bic.w	r3, r3, #3
  400ada:	3304      	adds	r3, #4
  400adc:	4413      	add	r3, r2
                *pDest++ = 0;
  400ade:	2100      	movs	r1, #0
  400ae0:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400ae4:	4293      	cmp	r3, r2
  400ae6:	d1fb      	bne.n	400ae0 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ae8:	4a18      	ldr	r2, [pc, #96]	; (400b4c <Reset_Handler+0xb0>)
  400aea:	4b19      	ldr	r3, [pc, #100]	; (400b50 <Reset_Handler+0xb4>)
  400aec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400af0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400af2:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400af6:	fab3 f383 	clz	r3, r3
  400afa:	095b      	lsrs	r3, r3, #5
  400afc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400afe:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400b00:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400b04:	2200      	movs	r2, #0
  400b06:	4b13      	ldr	r3, [pc, #76]	; (400b54 <Reset_Handler+0xb8>)
  400b08:	701a      	strb	r2, [r3, #0]
	return flags;
  400b0a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400b0c:	4a12      	ldr	r2, [pc, #72]	; (400b58 <Reset_Handler+0xbc>)
  400b0e:	6813      	ldr	r3, [r2, #0]
  400b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400b14:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400b16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b1a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400b1e:	b129      	cbz	r1, 400b2c <Reset_Handler+0x90>
		cpu_irq_enable();
  400b20:	2201      	movs	r2, #1
  400b22:	4b0c      	ldr	r3, [pc, #48]	; (400b54 <Reset_Handler+0xb8>)
  400b24:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400b26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400b2a:	b662      	cpsie	i
        __libc_init_array();
  400b2c:	4b0b      	ldr	r3, [pc, #44]	; (400b5c <Reset_Handler+0xc0>)
  400b2e:	4798      	blx	r3
        main();
  400b30:	4b0b      	ldr	r3, [pc, #44]	; (400b60 <Reset_Handler+0xc4>)
  400b32:	4798      	blx	r3
  400b34:	e7fe      	b.n	400b34 <Reset_Handler+0x98>
  400b36:	bf00      	nop
  400b38:	20400000 	.word	0x20400000
  400b3c:	00405f54 	.word	0x00405f54
  400b40:	204009c0 	.word	0x204009c0
  400b44:	20400c44 	.word	0x20400c44
  400b48:	204009c0 	.word	0x204009c0
  400b4c:	e000ed00 	.word	0xe000ed00
  400b50:	00400000 	.word	0x00400000
  400b54:	2040000a 	.word	0x2040000a
  400b58:	e000ed88 	.word	0xe000ed88
  400b5c:	00402d35 	.word	0x00402d35
  400b60:	00402c01 	.word	0x00402c01

00400b64 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400b64:	4b3b      	ldr	r3, [pc, #236]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b68:	f003 0303 	and.w	r3, r3, #3
  400b6c:	2b01      	cmp	r3, #1
  400b6e:	d01d      	beq.n	400bac <SystemCoreClockUpdate+0x48>
  400b70:	b183      	cbz	r3, 400b94 <SystemCoreClockUpdate+0x30>
  400b72:	2b02      	cmp	r3, #2
  400b74:	d036      	beq.n	400be4 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400b76:	4b37      	ldr	r3, [pc, #220]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b7e:	2b70      	cmp	r3, #112	; 0x70
  400b80:	d05f      	beq.n	400c42 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b82:	4b34      	ldr	r3, [pc, #208]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400b86:	4934      	ldr	r1, [pc, #208]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400b88:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400b8c:	680b      	ldr	r3, [r1, #0]
  400b8e:	40d3      	lsrs	r3, r2
  400b90:	600b      	str	r3, [r1, #0]
  400b92:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400b94:	4b31      	ldr	r3, [pc, #196]	; (400c5c <SystemCoreClockUpdate+0xf8>)
  400b96:	695b      	ldr	r3, [r3, #20]
  400b98:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b9c:	bf14      	ite	ne
  400b9e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400ba2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400ba6:	4b2c      	ldr	r3, [pc, #176]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400ba8:	601a      	str	r2, [r3, #0]
  400baa:	e7e4      	b.n	400b76 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400bac:	4b29      	ldr	r3, [pc, #164]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400bae:	6a1b      	ldr	r3, [r3, #32]
  400bb0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bb4:	d003      	beq.n	400bbe <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400bb6:	4a2a      	ldr	r2, [pc, #168]	; (400c60 <SystemCoreClockUpdate+0xfc>)
  400bb8:	4b27      	ldr	r3, [pc, #156]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400bba:	601a      	str	r2, [r3, #0]
  400bbc:	e7db      	b.n	400b76 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400bbe:	4a29      	ldr	r2, [pc, #164]	; (400c64 <SystemCoreClockUpdate+0x100>)
  400bc0:	4b25      	ldr	r3, [pc, #148]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400bc2:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400bc4:	4b23      	ldr	r3, [pc, #140]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400bc6:	6a1b      	ldr	r3, [r3, #32]
  400bc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bcc:	2b10      	cmp	r3, #16
  400bce:	d005      	beq.n	400bdc <SystemCoreClockUpdate+0x78>
  400bd0:	2b20      	cmp	r3, #32
  400bd2:	d1d0      	bne.n	400b76 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400bd4:	4a22      	ldr	r2, [pc, #136]	; (400c60 <SystemCoreClockUpdate+0xfc>)
  400bd6:	4b20      	ldr	r3, [pc, #128]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400bd8:	601a      	str	r2, [r3, #0]
          break;
  400bda:	e7cc      	b.n	400b76 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400bdc:	4a22      	ldr	r2, [pc, #136]	; (400c68 <SystemCoreClockUpdate+0x104>)
  400bde:	4b1e      	ldr	r3, [pc, #120]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400be0:	601a      	str	r2, [r3, #0]
          break;
  400be2:	e7c8      	b.n	400b76 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400be4:	4b1b      	ldr	r3, [pc, #108]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400be6:	6a1b      	ldr	r3, [r3, #32]
  400be8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bec:	d016      	beq.n	400c1c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400bee:	4a1c      	ldr	r2, [pc, #112]	; (400c60 <SystemCoreClockUpdate+0xfc>)
  400bf0:	4b19      	ldr	r3, [pc, #100]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400bf2:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400bf4:	4b17      	ldr	r3, [pc, #92]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400bf8:	f003 0303 	and.w	r3, r3, #3
  400bfc:	2b02      	cmp	r3, #2
  400bfe:	d1ba      	bne.n	400b76 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400c00:	4a14      	ldr	r2, [pc, #80]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400c02:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400c04:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400c06:	4814      	ldr	r0, [pc, #80]	; (400c58 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400c08:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400c0c:	6803      	ldr	r3, [r0, #0]
  400c0e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400c12:	b2d2      	uxtb	r2, r2
  400c14:	fbb3 f3f2 	udiv	r3, r3, r2
  400c18:	6003      	str	r3, [r0, #0]
  400c1a:	e7ac      	b.n	400b76 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c1c:	4a11      	ldr	r2, [pc, #68]	; (400c64 <SystemCoreClockUpdate+0x100>)
  400c1e:	4b0e      	ldr	r3, [pc, #56]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400c20:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c22:	4b0c      	ldr	r3, [pc, #48]	; (400c54 <SystemCoreClockUpdate+0xf0>)
  400c24:	6a1b      	ldr	r3, [r3, #32]
  400c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c2a:	2b10      	cmp	r3, #16
  400c2c:	d005      	beq.n	400c3a <SystemCoreClockUpdate+0xd6>
  400c2e:	2b20      	cmp	r3, #32
  400c30:	d1e0      	bne.n	400bf4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400c32:	4a0b      	ldr	r2, [pc, #44]	; (400c60 <SystemCoreClockUpdate+0xfc>)
  400c34:	4b08      	ldr	r3, [pc, #32]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400c36:	601a      	str	r2, [r3, #0]
          break;
  400c38:	e7dc      	b.n	400bf4 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400c3a:	4a0b      	ldr	r2, [pc, #44]	; (400c68 <SystemCoreClockUpdate+0x104>)
  400c3c:	4b06      	ldr	r3, [pc, #24]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400c3e:	601a      	str	r2, [r3, #0]
          break;
  400c40:	e7d8      	b.n	400bf4 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400c42:	4a05      	ldr	r2, [pc, #20]	; (400c58 <SystemCoreClockUpdate+0xf4>)
  400c44:	6813      	ldr	r3, [r2, #0]
  400c46:	4909      	ldr	r1, [pc, #36]	; (400c6c <SystemCoreClockUpdate+0x108>)
  400c48:	fba1 1303 	umull	r1, r3, r1, r3
  400c4c:	085b      	lsrs	r3, r3, #1
  400c4e:	6013      	str	r3, [r2, #0]
  400c50:	4770      	bx	lr
  400c52:	bf00      	nop
  400c54:	400e0600 	.word	0x400e0600
  400c58:	2040000c 	.word	0x2040000c
  400c5c:	400e1810 	.word	0x400e1810
  400c60:	00b71b00 	.word	0x00b71b00
  400c64:	003d0900 	.word	0x003d0900
  400c68:	007a1200 	.word	0x007a1200
  400c6c:	aaaaaaab 	.word	0xaaaaaaab

00400c70 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400c70:	4b16      	ldr	r3, [pc, #88]	; (400ccc <system_init_flash+0x5c>)
  400c72:	4298      	cmp	r0, r3
  400c74:	d913      	bls.n	400c9e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400c76:	4b16      	ldr	r3, [pc, #88]	; (400cd0 <system_init_flash+0x60>)
  400c78:	4298      	cmp	r0, r3
  400c7a:	d915      	bls.n	400ca8 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400c7c:	4b15      	ldr	r3, [pc, #84]	; (400cd4 <system_init_flash+0x64>)
  400c7e:	4298      	cmp	r0, r3
  400c80:	d916      	bls.n	400cb0 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400c82:	4b15      	ldr	r3, [pc, #84]	; (400cd8 <system_init_flash+0x68>)
  400c84:	4298      	cmp	r0, r3
  400c86:	d917      	bls.n	400cb8 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400c88:	4b14      	ldr	r3, [pc, #80]	; (400cdc <system_init_flash+0x6c>)
  400c8a:	4298      	cmp	r0, r3
  400c8c:	d918      	bls.n	400cc0 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400c8e:	4b14      	ldr	r3, [pc, #80]	; (400ce0 <system_init_flash+0x70>)
  400c90:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c92:	bf94      	ite	ls
  400c94:	4a13      	ldrls	r2, [pc, #76]	; (400ce4 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400c96:	4a14      	ldrhi	r2, [pc, #80]	; (400ce8 <system_init_flash+0x78>)
  400c98:	4b14      	ldr	r3, [pc, #80]	; (400cec <system_init_flash+0x7c>)
  400c9a:	601a      	str	r2, [r3, #0]
  400c9c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400ca2:	4b12      	ldr	r3, [pc, #72]	; (400cec <system_init_flash+0x7c>)
  400ca4:	601a      	str	r2, [r3, #0]
  400ca6:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ca8:	4a11      	ldr	r2, [pc, #68]	; (400cf0 <system_init_flash+0x80>)
  400caa:	4b10      	ldr	r3, [pc, #64]	; (400cec <system_init_flash+0x7c>)
  400cac:	601a      	str	r2, [r3, #0]
  400cae:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400cb0:	4a10      	ldr	r2, [pc, #64]	; (400cf4 <system_init_flash+0x84>)
  400cb2:	4b0e      	ldr	r3, [pc, #56]	; (400cec <system_init_flash+0x7c>)
  400cb4:	601a      	str	r2, [r3, #0]
  400cb6:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400cb8:	4a0f      	ldr	r2, [pc, #60]	; (400cf8 <system_init_flash+0x88>)
  400cba:	4b0c      	ldr	r3, [pc, #48]	; (400cec <system_init_flash+0x7c>)
  400cbc:	601a      	str	r2, [r3, #0]
  400cbe:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400cc0:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400cc4:	4b09      	ldr	r3, [pc, #36]	; (400cec <system_init_flash+0x7c>)
  400cc6:	601a      	str	r2, [r3, #0]
  400cc8:	4770      	bx	lr
  400cca:	bf00      	nop
  400ccc:	015ef3bf 	.word	0x015ef3bf
  400cd0:	02bde77f 	.word	0x02bde77f
  400cd4:	041cdb3f 	.word	0x041cdb3f
  400cd8:	057bceff 	.word	0x057bceff
  400cdc:	06dac2bf 	.word	0x06dac2bf
  400ce0:	0839b67f 	.word	0x0839b67f
  400ce4:	04000500 	.word	0x04000500
  400ce8:	04000600 	.word	0x04000600
  400cec:	400e0c00 	.word	0x400e0c00
  400cf0:	04000100 	.word	0x04000100
  400cf4:	04000200 	.word	0x04000200
  400cf8:	04000300 	.word	0x04000300

00400cfc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400cfc:	4b0a      	ldr	r3, [pc, #40]	; (400d28 <_sbrk+0x2c>)
  400cfe:	681b      	ldr	r3, [r3, #0]
  400d00:	b153      	cbz	r3, 400d18 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400d02:	4b09      	ldr	r3, [pc, #36]	; (400d28 <_sbrk+0x2c>)
  400d04:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400d06:	181a      	adds	r2, r3, r0
  400d08:	4908      	ldr	r1, [pc, #32]	; (400d2c <_sbrk+0x30>)
  400d0a:	4291      	cmp	r1, r2
  400d0c:	db08      	blt.n	400d20 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400d0e:	4610      	mov	r0, r2
  400d10:	4a05      	ldr	r2, [pc, #20]	; (400d28 <_sbrk+0x2c>)
  400d12:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400d14:	4618      	mov	r0, r3
  400d16:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400d18:	4a05      	ldr	r2, [pc, #20]	; (400d30 <_sbrk+0x34>)
  400d1a:	4b03      	ldr	r3, [pc, #12]	; (400d28 <_sbrk+0x2c>)
  400d1c:	601a      	str	r2, [r3, #0]
  400d1e:	e7f0      	b.n	400d02 <_sbrk+0x6>
		return (caddr_t) -1;	
  400d20:	f04f 30ff 	mov.w	r0, #4294967295
}
  400d24:	4770      	bx	lr
  400d26:	bf00      	nop
  400d28:	20400a50 	.word	0x20400a50
  400d2c:	2045fffc 	.word	0x2045fffc
  400d30:	20402e48 	.word	0x20402e48

00400d34 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400d34:	f04f 30ff 	mov.w	r0, #4294967295
  400d38:	4770      	bx	lr

00400d3a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400d3e:	604b      	str	r3, [r1, #4]

	return 0;
}
  400d40:	2000      	movs	r0, #0
  400d42:	4770      	bx	lr

00400d44 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400d44:	2001      	movs	r0, #1
  400d46:	4770      	bx	lr

00400d48 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400d48:	2000      	movs	r0, #0
  400d4a:	4770      	bx	lr

00400d4c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d4c:	f100 0308 	add.w	r3, r0, #8
  400d50:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400d52:	f04f 32ff 	mov.w	r2, #4294967295
  400d56:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d58:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d5a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400d5c:	2300      	movs	r3, #0
  400d5e:	6003      	str	r3, [r0, #0]
  400d60:	4770      	bx	lr

00400d62 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400d62:	2300      	movs	r3, #0
  400d64:	6103      	str	r3, [r0, #16]
  400d66:	4770      	bx	lr

00400d68 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400d68:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400d6a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400d6c:	689a      	ldr	r2, [r3, #8]
  400d6e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400d70:	689a      	ldr	r2, [r3, #8]
  400d72:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400d74:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400d76:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400d78:	6803      	ldr	r3, [r0, #0]
  400d7a:	3301      	adds	r3, #1
  400d7c:	6003      	str	r3, [r0, #0]
  400d7e:	4770      	bx	lr

00400d80 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400d80:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400d82:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400d84:	f1b5 3fff 	cmp.w	r5, #4294967295
  400d88:	d002      	beq.n	400d90 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d8a:	f100 0208 	add.w	r2, r0, #8
  400d8e:	e002      	b.n	400d96 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400d90:	6902      	ldr	r2, [r0, #16]
  400d92:	e004      	b.n	400d9e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400d94:	461a      	mov	r2, r3
  400d96:	6853      	ldr	r3, [r2, #4]
  400d98:	681c      	ldr	r4, [r3, #0]
  400d9a:	42a5      	cmp	r5, r4
  400d9c:	d2fa      	bcs.n	400d94 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400d9e:	6853      	ldr	r3, [r2, #4]
  400da0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400da2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400da4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400da6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400da8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400daa:	6803      	ldr	r3, [r0, #0]
  400dac:	3301      	adds	r3, #1
  400dae:	6003      	str	r3, [r0, #0]
}
  400db0:	bc30      	pop	{r4, r5}
  400db2:	4770      	bx	lr

00400db4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400db4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400db6:	6842      	ldr	r2, [r0, #4]
  400db8:	6881      	ldr	r1, [r0, #8]
  400dba:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400dbc:	6882      	ldr	r2, [r0, #8]
  400dbe:	6841      	ldr	r1, [r0, #4]
  400dc0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400dc2:	685a      	ldr	r2, [r3, #4]
  400dc4:	4290      	cmp	r0, r2
  400dc6:	d006      	beq.n	400dd6 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400dc8:	2200      	movs	r2, #0
  400dca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400dcc:	681a      	ldr	r2, [r3, #0]
  400dce:	3a01      	subs	r2, #1
  400dd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400dd2:	6818      	ldr	r0, [r3, #0]
}
  400dd4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400dd6:	6882      	ldr	r2, [r0, #8]
  400dd8:	605a      	str	r2, [r3, #4]
  400dda:	e7f5      	b.n	400dc8 <uxListRemove+0x14>

00400ddc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400ddc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400dde:	2300      	movs	r3, #0
  400de0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400de2:	4b0f      	ldr	r3, [pc, #60]	; (400e20 <prvTaskExitError+0x44>)
  400de4:	681b      	ldr	r3, [r3, #0]
  400de6:	f1b3 3fff 	cmp.w	r3, #4294967295
  400dea:	d00a      	beq.n	400e02 <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400dec:	f04f 0380 	mov.w	r3, #128	; 0x80
  400df0:	b672      	cpsid	i
  400df2:	f383 8811 	msr	BASEPRI, r3
  400df6:	f3bf 8f6f 	isb	sy
  400dfa:	f3bf 8f4f 	dsb	sy
  400dfe:	b662      	cpsie	i
  400e00:	e7fe      	b.n	400e00 <prvTaskExitError+0x24>
  400e02:	f04f 0380 	mov.w	r3, #128	; 0x80
  400e06:	b672      	cpsid	i
  400e08:	f383 8811 	msr	BASEPRI, r3
  400e0c:	f3bf 8f6f 	isb	sy
  400e10:	f3bf 8f4f 	dsb	sy
  400e14:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  400e16:	9b01      	ldr	r3, [sp, #4]
  400e18:	2b00      	cmp	r3, #0
  400e1a:	d0fc      	beq.n	400e16 <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  400e1c:	b002      	add	sp, #8
  400e1e:	4770      	bx	lr
  400e20:	20400010 	.word	0x20400010

00400e24 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  400e24:	4808      	ldr	r0, [pc, #32]	; (400e48 <prvPortStartFirstTask+0x24>)
  400e26:	6800      	ldr	r0, [r0, #0]
  400e28:	6800      	ldr	r0, [r0, #0]
  400e2a:	f380 8808 	msr	MSP, r0
  400e2e:	f04f 0000 	mov.w	r0, #0
  400e32:	f380 8814 	msr	CONTROL, r0
  400e36:	b662      	cpsie	i
  400e38:	b661      	cpsie	f
  400e3a:	f3bf 8f4f 	dsb	sy
  400e3e:	f3bf 8f6f 	isb	sy
  400e42:	df00      	svc	0
  400e44:	bf00      	nop
  400e46:	0000      	.short	0x0000
  400e48:	e000ed08 	.word	0xe000ed08

00400e4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400e4c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400e5c <vPortEnableVFP+0x10>
  400e50:	6801      	ldr	r1, [r0, #0]
  400e52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400e56:	6001      	str	r1, [r0, #0]
  400e58:	4770      	bx	lr
  400e5a:	0000      	.short	0x0000
  400e5c:	e000ed88 	.word	0xe000ed88

00400e60 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400e60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400e64:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  400e68:	f021 0101 	bic.w	r1, r1, #1
  400e6c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400e70:	4b05      	ldr	r3, [pc, #20]	; (400e88 <pxPortInitialiseStack+0x28>)
  400e72:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400e76:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  400e7a:	f06f 0302 	mvn.w	r3, #2
  400e7e:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400e82:	3844      	subs	r0, #68	; 0x44
  400e84:	4770      	bx	lr
  400e86:	bf00      	nop
  400e88:	00400ddd 	.word	0x00400ddd
  400e8c:	00000000 	.word	0x00000000

00400e90 <SVC_Handler>:
	__asm volatile (
  400e90:	4b07      	ldr	r3, [pc, #28]	; (400eb0 <pxCurrentTCBConst2>)
  400e92:	6819      	ldr	r1, [r3, #0]
  400e94:	6808      	ldr	r0, [r1, #0]
  400e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400e9a:	f380 8809 	msr	PSP, r0
  400e9e:	f3bf 8f6f 	isb	sy
  400ea2:	f04f 0000 	mov.w	r0, #0
  400ea6:	f380 8811 	msr	BASEPRI, r0
  400eaa:	4770      	bx	lr
  400eac:	f3af 8000 	nop.w

00400eb0 <pxCurrentTCBConst2>:
  400eb0:	20400a5c 	.word	0x20400a5c

00400eb4 <vPortEnterCritical>:
  400eb4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400eb8:	b672      	cpsid	i
  400eba:	f383 8811 	msr	BASEPRI, r3
  400ebe:	f3bf 8f6f 	isb	sy
  400ec2:	f3bf 8f4f 	dsb	sy
  400ec6:	b662      	cpsie	i
	uxCriticalNesting++;
  400ec8:	4a0b      	ldr	r2, [pc, #44]	; (400ef8 <vPortEnterCritical+0x44>)
  400eca:	6813      	ldr	r3, [r2, #0]
  400ecc:	3301      	adds	r3, #1
  400ece:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400ed0:	2b01      	cmp	r3, #1
  400ed2:	d10f      	bne.n	400ef4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400ed4:	4b09      	ldr	r3, [pc, #36]	; (400efc <vPortEnterCritical+0x48>)
  400ed6:	681b      	ldr	r3, [r3, #0]
  400ed8:	f013 0fff 	tst.w	r3, #255	; 0xff
  400edc:	d00a      	beq.n	400ef4 <vPortEnterCritical+0x40>
  400ede:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ee2:	b672      	cpsid	i
  400ee4:	f383 8811 	msr	BASEPRI, r3
  400ee8:	f3bf 8f6f 	isb	sy
  400eec:	f3bf 8f4f 	dsb	sy
  400ef0:	b662      	cpsie	i
  400ef2:	e7fe      	b.n	400ef2 <vPortEnterCritical+0x3e>
  400ef4:	4770      	bx	lr
  400ef6:	bf00      	nop
  400ef8:	20400010 	.word	0x20400010
  400efc:	e000ed04 	.word	0xe000ed04

00400f00 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400f00:	4b0a      	ldr	r3, [pc, #40]	; (400f2c <vPortExitCritical+0x2c>)
  400f02:	681b      	ldr	r3, [r3, #0]
  400f04:	b953      	cbnz	r3, 400f1c <vPortExitCritical+0x1c>
  400f06:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f0a:	b672      	cpsid	i
  400f0c:	f383 8811 	msr	BASEPRI, r3
  400f10:	f3bf 8f6f 	isb	sy
  400f14:	f3bf 8f4f 	dsb	sy
  400f18:	b662      	cpsie	i
  400f1a:	e7fe      	b.n	400f1a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400f1c:	3b01      	subs	r3, #1
  400f1e:	4a03      	ldr	r2, [pc, #12]	; (400f2c <vPortExitCritical+0x2c>)
  400f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400f22:	b90b      	cbnz	r3, 400f28 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400f24:	f383 8811 	msr	BASEPRI, r3
  400f28:	4770      	bx	lr
  400f2a:	bf00      	nop
  400f2c:	20400010 	.word	0x20400010

00400f30 <PendSV_Handler>:
	__asm volatile
  400f30:	f3ef 8009 	mrs	r0, PSP
  400f34:	f3bf 8f6f 	isb	sy
  400f38:	4b15      	ldr	r3, [pc, #84]	; (400f90 <pxCurrentTCBConst>)
  400f3a:	681a      	ldr	r2, [r3, #0]
  400f3c:	f01e 0f10 	tst.w	lr, #16
  400f40:	bf08      	it	eq
  400f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f4a:	6010      	str	r0, [r2, #0]
  400f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
  400f50:	f04f 0080 	mov.w	r0, #128	; 0x80
  400f54:	b672      	cpsid	i
  400f56:	f380 8811 	msr	BASEPRI, r0
  400f5a:	f3bf 8f4f 	dsb	sy
  400f5e:	f3bf 8f6f 	isb	sy
  400f62:	b662      	cpsie	i
  400f64:	f001 f882 	bl	40206c <vTaskSwitchContext>
  400f68:	f04f 0000 	mov.w	r0, #0
  400f6c:	f380 8811 	msr	BASEPRI, r0
  400f70:	bc09      	pop	{r0, r3}
  400f72:	6819      	ldr	r1, [r3, #0]
  400f74:	6808      	ldr	r0, [r1, #0]
  400f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f7a:	f01e 0f10 	tst.w	lr, #16
  400f7e:	bf08      	it	eq
  400f80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  400f84:	f380 8809 	msr	PSP, r0
  400f88:	f3bf 8f6f 	isb	sy
  400f8c:	4770      	bx	lr
  400f8e:	bf00      	nop

00400f90 <pxCurrentTCBConst>:
  400f90:	20400a5c 	.word	0x20400a5c

00400f94 <SysTick_Handler>:
{
  400f94:	b508      	push	{r3, lr}
	__asm volatile
  400f96:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f9a:	b672      	cpsid	i
  400f9c:	f383 8811 	msr	BASEPRI, r3
  400fa0:	f3bf 8f6f 	isb	sy
  400fa4:	f3bf 8f4f 	dsb	sy
  400fa8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  400faa:	4b05      	ldr	r3, [pc, #20]	; (400fc0 <SysTick_Handler+0x2c>)
  400fac:	4798      	blx	r3
  400fae:	b118      	cbz	r0, 400fb8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  400fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400fb4:	4b03      	ldr	r3, [pc, #12]	; (400fc4 <SysTick_Handler+0x30>)
  400fb6:	601a      	str	r2, [r3, #0]
	__asm volatile
  400fb8:	2300      	movs	r3, #0
  400fba:	f383 8811 	msr	BASEPRI, r3
  400fbe:	bd08      	pop	{r3, pc}
  400fc0:	00401db1 	.word	0x00401db1
  400fc4:	e000ed04 	.word	0xe000ed04

00400fc8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  400fc8:	4b05      	ldr	r3, [pc, #20]	; (400fe0 <vPortSetupTimerInterrupt+0x18>)
  400fca:	2200      	movs	r2, #0
  400fcc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  400fce:	4905      	ldr	r1, [pc, #20]	; (400fe4 <vPortSetupTimerInterrupt+0x1c>)
  400fd0:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  400fd2:	4905      	ldr	r1, [pc, #20]	; (400fe8 <vPortSetupTimerInterrupt+0x20>)
  400fd4:	4a05      	ldr	r2, [pc, #20]	; (400fec <vPortSetupTimerInterrupt+0x24>)
  400fd6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  400fd8:	2207      	movs	r2, #7
  400fda:	601a      	str	r2, [r3, #0]
  400fdc:	4770      	bx	lr
  400fde:	bf00      	nop
  400fe0:	e000e010 	.word	0xe000e010
  400fe4:	e000e018 	.word	0xe000e018
  400fe8:	000927bf 	.word	0x000927bf
  400fec:	e000e014 	.word	0xe000e014

00400ff0 <xPortStartScheduler>:
{
  400ff0:	b510      	push	{r4, lr}
  400ff2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  400ff4:	4b2e      	ldr	r3, [pc, #184]	; (4010b0 <xPortStartScheduler+0xc0>)
  400ff6:	781a      	ldrb	r2, [r3, #0]
  400ff8:	b2d2      	uxtb	r2, r2
  400ffa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  400ffc:	22ff      	movs	r2, #255	; 0xff
  400ffe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401000:	781b      	ldrb	r3, [r3, #0]
  401002:	b2db      	uxtb	r3, r3
  401004:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401008:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40100c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401010:	4a28      	ldr	r2, [pc, #160]	; (4010b4 <xPortStartScheduler+0xc4>)
  401012:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401014:	2207      	movs	r2, #7
  401016:	4b28      	ldr	r3, [pc, #160]	; (4010b8 <xPortStartScheduler+0xc8>)
  401018:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40101a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40101e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401022:	d012      	beq.n	40104a <xPortStartScheduler+0x5a>
  401024:	2306      	movs	r3, #6
  401026:	e000      	b.n	40102a <xPortStartScheduler+0x3a>
  401028:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40102a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40102e:	0052      	lsls	r2, r2, #1
  401030:	b2d2      	uxtb	r2, r2
  401032:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401036:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40103a:	1e59      	subs	r1, r3, #1
  40103c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401040:	d1f2      	bne.n	401028 <xPortStartScheduler+0x38>
  401042:	4a1d      	ldr	r2, [pc, #116]	; (4010b8 <xPortStartScheduler+0xc8>)
  401044:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401046:	2b04      	cmp	r3, #4
  401048:	d00a      	beq.n	401060 <xPortStartScheduler+0x70>
	__asm volatile
  40104a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40104e:	b672      	cpsid	i
  401050:	f383 8811 	msr	BASEPRI, r3
  401054:	f3bf 8f6f 	isb	sy
  401058:	f3bf 8f4f 	dsb	sy
  40105c:	b662      	cpsie	i
  40105e:	e7fe      	b.n	40105e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401060:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401062:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401066:	4a14      	ldr	r2, [pc, #80]	; (4010b8 <xPortStartScheduler+0xc8>)
  401068:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40106a:	9b01      	ldr	r3, [sp, #4]
  40106c:	b2db      	uxtb	r3, r3
  40106e:	4a10      	ldr	r2, [pc, #64]	; (4010b0 <xPortStartScheduler+0xc0>)
  401070:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401072:	4b12      	ldr	r3, [pc, #72]	; (4010bc <xPortStartScheduler+0xcc>)
  401074:	681a      	ldr	r2, [r3, #0]
  401076:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40107a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40107c:	681a      	ldr	r2, [r3, #0]
  40107e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401082:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401084:	4b0e      	ldr	r3, [pc, #56]	; (4010c0 <xPortStartScheduler+0xd0>)
  401086:	4798      	blx	r3
	uxCriticalNesting = 0;
  401088:	2400      	movs	r4, #0
  40108a:	4b0e      	ldr	r3, [pc, #56]	; (4010c4 <xPortStartScheduler+0xd4>)
  40108c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40108e:	4b0e      	ldr	r3, [pc, #56]	; (4010c8 <xPortStartScheduler+0xd8>)
  401090:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401092:	4a0e      	ldr	r2, [pc, #56]	; (4010cc <xPortStartScheduler+0xdc>)
  401094:	6813      	ldr	r3, [r2, #0]
  401096:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40109a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40109c:	4b0c      	ldr	r3, [pc, #48]	; (4010d0 <xPortStartScheduler+0xe0>)
  40109e:	4798      	blx	r3
	vTaskSwitchContext();
  4010a0:	4b0c      	ldr	r3, [pc, #48]	; (4010d4 <xPortStartScheduler+0xe4>)
  4010a2:	4798      	blx	r3
	prvTaskExitError();
  4010a4:	4b0c      	ldr	r3, [pc, #48]	; (4010d8 <xPortStartScheduler+0xe8>)
  4010a6:	4798      	blx	r3
}
  4010a8:	4620      	mov	r0, r4
  4010aa:	b002      	add	sp, #8
  4010ac:	bd10      	pop	{r4, pc}
  4010ae:	bf00      	nop
  4010b0:	e000e400 	.word	0xe000e400
  4010b4:	20400a54 	.word	0x20400a54
  4010b8:	20400a58 	.word	0x20400a58
  4010bc:	e000ed20 	.word	0xe000ed20
  4010c0:	00400fc9 	.word	0x00400fc9
  4010c4:	20400010 	.word	0x20400010
  4010c8:	00400e4d 	.word	0x00400e4d
  4010cc:	e000ef34 	.word	0xe000ef34
  4010d0:	00400e25 	.word	0x00400e25
  4010d4:	0040206d 	.word	0x0040206d
  4010d8:	00400ddd 	.word	0x00400ddd

004010dc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4010dc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4010e0:	2b0f      	cmp	r3, #15
  4010e2:	d911      	bls.n	401108 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4010e4:	4a12      	ldr	r2, [pc, #72]	; (401130 <vPortValidateInterruptPriority+0x54>)
  4010e6:	5c9b      	ldrb	r3, [r3, r2]
  4010e8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4010ea:	4a12      	ldr	r2, [pc, #72]	; (401134 <vPortValidateInterruptPriority+0x58>)
  4010ec:	7812      	ldrb	r2, [r2, #0]
  4010ee:	429a      	cmp	r2, r3
  4010f0:	d90a      	bls.n	401108 <vPortValidateInterruptPriority+0x2c>
  4010f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010f6:	b672      	cpsid	i
  4010f8:	f383 8811 	msr	BASEPRI, r3
  4010fc:	f3bf 8f6f 	isb	sy
  401100:	f3bf 8f4f 	dsb	sy
  401104:	b662      	cpsie	i
  401106:	e7fe      	b.n	401106 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401108:	4b0b      	ldr	r3, [pc, #44]	; (401138 <vPortValidateInterruptPriority+0x5c>)
  40110a:	681b      	ldr	r3, [r3, #0]
  40110c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401110:	4a0a      	ldr	r2, [pc, #40]	; (40113c <vPortValidateInterruptPriority+0x60>)
  401112:	6812      	ldr	r2, [r2, #0]
  401114:	4293      	cmp	r3, r2
  401116:	d90a      	bls.n	40112e <vPortValidateInterruptPriority+0x52>
  401118:	f04f 0380 	mov.w	r3, #128	; 0x80
  40111c:	b672      	cpsid	i
  40111e:	f383 8811 	msr	BASEPRI, r3
  401122:	f3bf 8f6f 	isb	sy
  401126:	f3bf 8f4f 	dsb	sy
  40112a:	b662      	cpsie	i
  40112c:	e7fe      	b.n	40112c <vPortValidateInterruptPriority+0x50>
  40112e:	4770      	bx	lr
  401130:	e000e3f0 	.word	0xe000e3f0
  401134:	20400a54 	.word	0x20400a54
  401138:	e000ed0c 	.word	0xe000ed0c
  40113c:	20400a58 	.word	0x20400a58

00401140 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401140:	b510      	push	{r4, lr}
  401142:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401144:	4b06      	ldr	r3, [pc, #24]	; (401160 <pvPortMalloc+0x20>)
  401146:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401148:	4620      	mov	r0, r4
  40114a:	4b06      	ldr	r3, [pc, #24]	; (401164 <pvPortMalloc+0x24>)
  40114c:	4798      	blx	r3
  40114e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401150:	4b05      	ldr	r3, [pc, #20]	; (401168 <pvPortMalloc+0x28>)
  401152:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401154:	b10c      	cbz	r4, 40115a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401156:	4620      	mov	r0, r4
  401158:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40115a:	4b04      	ldr	r3, [pc, #16]	; (40116c <pvPortMalloc+0x2c>)
  40115c:	4798      	blx	r3
	return pvReturn;
  40115e:	e7fa      	b.n	401156 <pvPortMalloc+0x16>
  401160:	00401d95 	.word	0x00401d95
  401164:	00402dad 	.word	0x00402dad
  401168:	00401ef9 	.word	0x00401ef9
  40116c:	00402a05 	.word	0x00402a05

00401170 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401170:	b148      	cbz	r0, 401186 <vPortFree+0x16>
{
  401172:	b510      	push	{r4, lr}
  401174:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401176:	4b04      	ldr	r3, [pc, #16]	; (401188 <vPortFree+0x18>)
  401178:	4798      	blx	r3
		{
			free( pv );
  40117a:	4620      	mov	r0, r4
  40117c:	4b03      	ldr	r3, [pc, #12]	; (40118c <vPortFree+0x1c>)
  40117e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401180:	4b03      	ldr	r3, [pc, #12]	; (401190 <vPortFree+0x20>)
  401182:	4798      	blx	r3
  401184:	bd10      	pop	{r4, pc}
  401186:	4770      	bx	lr
  401188:	00401d95 	.word	0x00401d95
  40118c:	00402dbd 	.word	0x00402dbd
  401190:	00401ef9 	.word	0x00401ef9

00401194 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  401194:	b510      	push	{r4, lr}
  401196:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401198:	4b04      	ldr	r3, [pc, #16]	; (4011ac <prvIsQueueEmpty+0x18>)
  40119a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40119c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40119e:	4b04      	ldr	r3, [pc, #16]	; (4011b0 <prvIsQueueEmpty+0x1c>)
  4011a0:	4798      	blx	r3

	return xReturn;
}
  4011a2:	fab4 f084 	clz	r0, r4
  4011a6:	0940      	lsrs	r0, r0, #5
  4011a8:	bd10      	pop	{r4, pc}
  4011aa:	bf00      	nop
  4011ac:	00400eb5 	.word	0x00400eb5
  4011b0:	00400f01 	.word	0x00400f01

004011b4 <prvCopyDataToQueue>:
{
  4011b4:	b570      	push	{r4, r5, r6, lr}
  4011b6:	4604      	mov	r4, r0
  4011b8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4011ba:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4011bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4011be:	b952      	cbnz	r2, 4011d6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4011c0:	6803      	ldr	r3, [r0, #0]
  4011c2:	2b00      	cmp	r3, #0
  4011c4:	d12a      	bne.n	40121c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4011c6:	6840      	ldr	r0, [r0, #4]
  4011c8:	4b17      	ldr	r3, [pc, #92]	; (401228 <prvCopyDataToQueue+0x74>)
  4011ca:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4011cc:	2300      	movs	r3, #0
  4011ce:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4011d0:	3501      	adds	r5, #1
  4011d2:	63a5      	str	r5, [r4, #56]	; 0x38
}
  4011d4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4011d6:	b96e      	cbnz	r6, 4011f4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4011d8:	6880      	ldr	r0, [r0, #8]
  4011da:	4b14      	ldr	r3, [pc, #80]	; (40122c <prvCopyDataToQueue+0x78>)
  4011dc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4011de:	68a3      	ldr	r3, [r4, #8]
  4011e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4011e2:	4413      	add	r3, r2
  4011e4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4011e6:	6862      	ldr	r2, [r4, #4]
  4011e8:	4293      	cmp	r3, r2
  4011ea:	d319      	bcc.n	401220 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4011ec:	6823      	ldr	r3, [r4, #0]
  4011ee:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4011f0:	2000      	movs	r0, #0
  4011f2:	e7ed      	b.n	4011d0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4011f4:	68c0      	ldr	r0, [r0, #12]
  4011f6:	4b0d      	ldr	r3, [pc, #52]	; (40122c <prvCopyDataToQueue+0x78>)
  4011f8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4011fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4011fc:	425b      	negs	r3, r3
  4011fe:	68e2      	ldr	r2, [r4, #12]
  401200:	441a      	add	r2, r3
  401202:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401204:	6821      	ldr	r1, [r4, #0]
  401206:	428a      	cmp	r2, r1
  401208:	d202      	bcs.n	401210 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40120a:	6862      	ldr	r2, [r4, #4]
  40120c:	4413      	add	r3, r2
  40120e:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401210:	b145      	cbz	r5, 401224 <prvCopyDataToQueue+0x70>
  401212:	2e02      	cmp	r6, #2
  401214:	d106      	bne.n	401224 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401216:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401218:	2000      	movs	r0, #0
  40121a:	e7d9      	b.n	4011d0 <prvCopyDataToQueue+0x1c>
  40121c:	2000      	movs	r0, #0
  40121e:	e7d7      	b.n	4011d0 <prvCopyDataToQueue+0x1c>
  401220:	2000      	movs	r0, #0
  401222:	e7d5      	b.n	4011d0 <prvCopyDataToQueue+0x1c>
  401224:	2000      	movs	r0, #0
  401226:	e7d3      	b.n	4011d0 <prvCopyDataToQueue+0x1c>
  401228:	00402331 	.word	0x00402331
  40122c:	0040332d 	.word	0x0040332d

00401230 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401230:	b570      	push	{r4, r5, r6, lr}
  401232:	b082      	sub	sp, #8
  401234:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401236:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401238:	b174      	cbz	r4, 401258 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40123a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40123c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40123e:	429a      	cmp	r2, r3
  401240:	d315      	bcc.n	40126e <prvNotifyQueueSetContainer+0x3e>
  401242:	f04f 0380 	mov.w	r3, #128	; 0x80
  401246:	b672      	cpsid	i
  401248:	f383 8811 	msr	BASEPRI, r3
  40124c:	f3bf 8f6f 	isb	sy
  401250:	f3bf 8f4f 	dsb	sy
  401254:	b662      	cpsie	i
  401256:	e7fe      	b.n	401256 <prvNotifyQueueSetContainer+0x26>
  401258:	f04f 0380 	mov.w	r3, #128	; 0x80
  40125c:	b672      	cpsid	i
  40125e:	f383 8811 	msr	BASEPRI, r3
  401262:	f3bf 8f6f 	isb	sy
  401266:	f3bf 8f4f 	dsb	sy
  40126a:	b662      	cpsie	i
  40126c:	e7fe      	b.n	40126c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40126e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401270:	4293      	cmp	r3, r2
  401272:	d803      	bhi.n	40127c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401274:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401276:	4630      	mov	r0, r6
  401278:	b002      	add	sp, #8
  40127a:	bd70      	pop	{r4, r5, r6, pc}
  40127c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40127e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401282:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401284:	a901      	add	r1, sp, #4
  401286:	4620      	mov	r0, r4
  401288:	4b0a      	ldr	r3, [pc, #40]	; (4012b4 <prvNotifyQueueSetContainer+0x84>)
  40128a:	4798      	blx	r3
  40128c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40128e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401292:	d10a      	bne.n	4012aa <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401294:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401296:	2b00      	cmp	r3, #0
  401298:	d0ed      	beq.n	401276 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40129a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40129e:	4b06      	ldr	r3, [pc, #24]	; (4012b8 <prvNotifyQueueSetContainer+0x88>)
  4012a0:	4798      	blx	r3
  4012a2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4012a4:	bf18      	it	ne
  4012a6:	2601      	movne	r6, #1
  4012a8:	e7e5      	b.n	401276 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4012aa:	1c6b      	adds	r3, r5, #1
  4012ac:	b25b      	sxtb	r3, r3
  4012ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4012b2:	e7e0      	b.n	401276 <prvNotifyQueueSetContainer+0x46>
  4012b4:	004011b5 	.word	0x004011b5
  4012b8:	004021c1 	.word	0x004021c1

004012bc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4012bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4012be:	b172      	cbz	r2, 4012de <prvCopyDataFromQueue+0x22>
{
  4012c0:	b510      	push	{r4, lr}
  4012c2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4012c4:	68c4      	ldr	r4, [r0, #12]
  4012c6:	4414      	add	r4, r2
  4012c8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4012ca:	6840      	ldr	r0, [r0, #4]
  4012cc:	4284      	cmp	r4, r0
  4012ce:	d301      	bcc.n	4012d4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4012d0:	6818      	ldr	r0, [r3, #0]
  4012d2:	60d8      	str	r0, [r3, #12]
  4012d4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4012d6:	68d9      	ldr	r1, [r3, #12]
  4012d8:	4b01      	ldr	r3, [pc, #4]	; (4012e0 <prvCopyDataFromQueue+0x24>)
  4012da:	4798      	blx	r3
  4012dc:	bd10      	pop	{r4, pc}
  4012de:	4770      	bx	lr
  4012e0:	0040332d 	.word	0x0040332d

004012e4 <prvUnlockQueue>:
{
  4012e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012e8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4012ea:	4b23      	ldr	r3, [pc, #140]	; (401378 <prvUnlockQueue+0x94>)
  4012ec:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4012ee:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4012f2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4012f4:	2c00      	cmp	r4, #0
  4012f6:	dd19      	ble.n	40132c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4012f8:	4e20      	ldr	r6, [pc, #128]	; (40137c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  4012fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401388 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4012fe:	4f20      	ldr	r7, [pc, #128]	; (401380 <prvUnlockQueue+0x9c>)
  401300:	e008      	b.n	401314 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401304:	b193      	cbz	r3, 40132c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401306:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40130a:	47b8      	blx	r7
  40130c:	b960      	cbnz	r0, 401328 <prvUnlockQueue+0x44>
  40130e:	3c01      	subs	r4, #1
  401310:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401312:	b15c      	cbz	r4, 40132c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401314:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401316:	2b00      	cmp	r3, #0
  401318:	d0f3      	beq.n	401302 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40131a:	2100      	movs	r1, #0
  40131c:	4628      	mov	r0, r5
  40131e:	47b0      	blx	r6
  401320:	2800      	cmp	r0, #0
  401322:	d0f4      	beq.n	40130e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401324:	47c0      	blx	r8
  401326:	e7f2      	b.n	40130e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401328:	47c0      	blx	r8
  40132a:	e7f0      	b.n	40130e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40132c:	23ff      	movs	r3, #255	; 0xff
  40132e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401332:	4b14      	ldr	r3, [pc, #80]	; (401384 <prvUnlockQueue+0xa0>)
  401334:	4798      	blx	r3
	taskENTER_CRITICAL();
  401336:	4b10      	ldr	r3, [pc, #64]	; (401378 <prvUnlockQueue+0x94>)
  401338:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40133a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40133e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401340:	2c00      	cmp	r4, #0
  401342:	dd12      	ble.n	40136a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401344:	692b      	ldr	r3, [r5, #16]
  401346:	b183      	cbz	r3, 40136a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401348:	f105 0710 	add.w	r7, r5, #16
  40134c:	4e0c      	ldr	r6, [pc, #48]	; (401380 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40134e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401388 <prvUnlockQueue+0xa4>
  401352:	e004      	b.n	40135e <prvUnlockQueue+0x7a>
  401354:	3c01      	subs	r4, #1
  401356:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401358:	b13c      	cbz	r4, 40136a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40135a:	692b      	ldr	r3, [r5, #16]
  40135c:	b12b      	cbz	r3, 40136a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40135e:	4638      	mov	r0, r7
  401360:	47b0      	blx	r6
  401362:	2800      	cmp	r0, #0
  401364:	d0f6      	beq.n	401354 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401366:	47c0      	blx	r8
  401368:	e7f4      	b.n	401354 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40136a:	23ff      	movs	r3, #255	; 0xff
  40136c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401370:	4b04      	ldr	r3, [pc, #16]	; (401384 <prvUnlockQueue+0xa0>)
  401372:	4798      	blx	r3
  401374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401378:	00400eb5 	.word	0x00400eb5
  40137c:	00401231 	.word	0x00401231
  401380:	004021c1 	.word	0x004021c1
  401384:	00400f01 	.word	0x00400f01
  401388:	00402305 	.word	0x00402305

0040138c <xQueueGenericReset>:
{
  40138c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40138e:	b330      	cbz	r0, 4013de <xQueueGenericReset+0x52>
  401390:	4604      	mov	r4, r0
  401392:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401394:	4b1d      	ldr	r3, [pc, #116]	; (40140c <xQueueGenericReset+0x80>)
  401396:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401398:	6822      	ldr	r2, [r4, #0]
  40139a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40139c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40139e:	fb03 f301 	mul.w	r3, r3, r1
  4013a2:	18d0      	adds	r0, r2, r3
  4013a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4013a6:	2000      	movs	r0, #0
  4013a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4013aa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4013ac:	1a5b      	subs	r3, r3, r1
  4013ae:	4413      	add	r3, r2
  4013b0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  4013b2:	23ff      	movs	r3, #255	; 0xff
  4013b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  4013b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  4013bc:	b9d5      	cbnz	r5, 4013f4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013be:	6923      	ldr	r3, [r4, #16]
  4013c0:	b1fb      	cbz	r3, 401402 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013c2:	f104 0010 	add.w	r0, r4, #16
  4013c6:	4b12      	ldr	r3, [pc, #72]	; (401410 <xQueueGenericReset+0x84>)
  4013c8:	4798      	blx	r3
  4013ca:	b1d0      	cbz	r0, 401402 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4013cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4013d0:	4b10      	ldr	r3, [pc, #64]	; (401414 <xQueueGenericReset+0x88>)
  4013d2:	601a      	str	r2, [r3, #0]
  4013d4:	f3bf 8f4f 	dsb	sy
  4013d8:	f3bf 8f6f 	isb	sy
  4013dc:	e011      	b.n	401402 <xQueueGenericReset+0x76>
  4013de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4013e2:	b672      	cpsid	i
  4013e4:	f383 8811 	msr	BASEPRI, r3
  4013e8:	f3bf 8f6f 	isb	sy
  4013ec:	f3bf 8f4f 	dsb	sy
  4013f0:	b662      	cpsie	i
  4013f2:	e7fe      	b.n	4013f2 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4013f4:	f104 0010 	add.w	r0, r4, #16
  4013f8:	4d07      	ldr	r5, [pc, #28]	; (401418 <xQueueGenericReset+0x8c>)
  4013fa:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4013fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401400:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401402:	4b06      	ldr	r3, [pc, #24]	; (40141c <xQueueGenericReset+0x90>)
  401404:	4798      	blx	r3
}
  401406:	2001      	movs	r0, #1
  401408:	bd38      	pop	{r3, r4, r5, pc}
  40140a:	bf00      	nop
  40140c:	00400eb5 	.word	0x00400eb5
  401410:	004021c1 	.word	0x004021c1
  401414:	e000ed04 	.word	0xe000ed04
  401418:	00400d4d 	.word	0x00400d4d
  40141c:	00400f01 	.word	0x00400f01

00401420 <xQueueGenericCreate>:
	{
  401420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401422:	b950      	cbnz	r0, 40143a <xQueueGenericCreate+0x1a>
  401424:	f04f 0380 	mov.w	r3, #128	; 0x80
  401428:	b672      	cpsid	i
  40142a:	f383 8811 	msr	BASEPRI, r3
  40142e:	f3bf 8f6f 	isb	sy
  401432:	f3bf 8f4f 	dsb	sy
  401436:	b662      	cpsie	i
  401438:	e7fe      	b.n	401438 <xQueueGenericCreate+0x18>
  40143a:	4606      	mov	r6, r0
  40143c:	4617      	mov	r7, r2
  40143e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401440:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401444:	3054      	adds	r0, #84	; 0x54
  401446:	4b0b      	ldr	r3, [pc, #44]	; (401474 <xQueueGenericCreate+0x54>)
  401448:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40144a:	4604      	mov	r4, r0
  40144c:	b178      	cbz	r0, 40146e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40144e:	b11d      	cbz	r5, 401458 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401450:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401454:	6003      	str	r3, [r0, #0]
  401456:	e000      	b.n	40145a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401458:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40145a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40145c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40145e:	2101      	movs	r1, #1
  401460:	4620      	mov	r0, r4
  401462:	4b05      	ldr	r3, [pc, #20]	; (401478 <xQueueGenericCreate+0x58>)
  401464:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401466:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40146a:	2300      	movs	r3, #0
  40146c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40146e:	4620      	mov	r0, r4
  401470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401472:	bf00      	nop
  401474:	00401141 	.word	0x00401141
  401478:	0040138d 	.word	0x0040138d

0040147c <xQueueGenericSend>:
{
  40147c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401480:	b085      	sub	sp, #20
  401482:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401484:	b1b8      	cbz	r0, 4014b6 <xQueueGenericSend+0x3a>
  401486:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401488:	b301      	cbz	r1, 4014cc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40148a:	2b02      	cmp	r3, #2
  40148c:	d02c      	beq.n	4014e8 <xQueueGenericSend+0x6c>
  40148e:	461e      	mov	r6, r3
  401490:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401492:	4b69      	ldr	r3, [pc, #420]	; (401638 <xQueueGenericSend+0x1bc>)
  401494:	4798      	blx	r3
  401496:	2800      	cmp	r0, #0
  401498:	d134      	bne.n	401504 <xQueueGenericSend+0x88>
  40149a:	9b01      	ldr	r3, [sp, #4]
  40149c:	2b00      	cmp	r3, #0
  40149e:	d039      	beq.n	401514 <xQueueGenericSend+0x98>
  4014a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014a4:	b672      	cpsid	i
  4014a6:	f383 8811 	msr	BASEPRI, r3
  4014aa:	f3bf 8f6f 	isb	sy
  4014ae:	f3bf 8f4f 	dsb	sy
  4014b2:	b662      	cpsie	i
  4014b4:	e7fe      	b.n	4014b4 <xQueueGenericSend+0x38>
  4014b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014ba:	b672      	cpsid	i
  4014bc:	f383 8811 	msr	BASEPRI, r3
  4014c0:	f3bf 8f6f 	isb	sy
  4014c4:	f3bf 8f4f 	dsb	sy
  4014c8:	b662      	cpsie	i
  4014ca:	e7fe      	b.n	4014ca <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4014cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014ce:	2a00      	cmp	r2, #0
  4014d0:	d0db      	beq.n	40148a <xQueueGenericSend+0xe>
  4014d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d6:	b672      	cpsid	i
  4014d8:	f383 8811 	msr	BASEPRI, r3
  4014dc:	f3bf 8f6f 	isb	sy
  4014e0:	f3bf 8f4f 	dsb	sy
  4014e4:	b662      	cpsie	i
  4014e6:	e7fe      	b.n	4014e6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4014e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4014ea:	2a01      	cmp	r2, #1
  4014ec:	d0cf      	beq.n	40148e <xQueueGenericSend+0x12>
  4014ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014f2:	b672      	cpsid	i
  4014f4:	f383 8811 	msr	BASEPRI, r3
  4014f8:	f3bf 8f6f 	isb	sy
  4014fc:	f3bf 8f4f 	dsb	sy
  401500:	b662      	cpsie	i
  401502:	e7fe      	b.n	401502 <xQueueGenericSend+0x86>
  401504:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401506:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401664 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40150a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401668 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  40150e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401644 <xQueueGenericSend+0x1c8>
  401512:	e041      	b.n	401598 <xQueueGenericSend+0x11c>
  401514:	2500      	movs	r5, #0
  401516:	e7f6      	b.n	401506 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401518:	4632      	mov	r2, r6
  40151a:	4639      	mov	r1, r7
  40151c:	4620      	mov	r0, r4
  40151e:	4b47      	ldr	r3, [pc, #284]	; (40163c <xQueueGenericSend+0x1c0>)
  401520:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401522:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401524:	b193      	cbz	r3, 40154c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401526:	4631      	mov	r1, r6
  401528:	4620      	mov	r0, r4
  40152a:	4b45      	ldr	r3, [pc, #276]	; (401640 <xQueueGenericSend+0x1c4>)
  40152c:	4798      	blx	r3
  40152e:	b138      	cbz	r0, 401540 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401534:	4b43      	ldr	r3, [pc, #268]	; (401644 <xQueueGenericSend+0x1c8>)
  401536:	601a      	str	r2, [r3, #0]
  401538:	f3bf 8f4f 	dsb	sy
  40153c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401540:	4b41      	ldr	r3, [pc, #260]	; (401648 <xQueueGenericSend+0x1cc>)
  401542:	4798      	blx	r3
				return pdPASS;
  401544:	2001      	movs	r0, #1
}
  401546:	b005      	add	sp, #20
  401548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40154c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40154e:	b173      	cbz	r3, 40156e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401550:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401554:	4b3d      	ldr	r3, [pc, #244]	; (40164c <xQueueGenericSend+0x1d0>)
  401556:	4798      	blx	r3
  401558:	2800      	cmp	r0, #0
  40155a:	d0f1      	beq.n	401540 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40155c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401560:	4b38      	ldr	r3, [pc, #224]	; (401644 <xQueueGenericSend+0x1c8>)
  401562:	601a      	str	r2, [r3, #0]
  401564:	f3bf 8f4f 	dsb	sy
  401568:	f3bf 8f6f 	isb	sy
  40156c:	e7e8      	b.n	401540 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40156e:	2800      	cmp	r0, #0
  401570:	d0e6      	beq.n	401540 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401576:	4b33      	ldr	r3, [pc, #204]	; (401644 <xQueueGenericSend+0x1c8>)
  401578:	601a      	str	r2, [r3, #0]
  40157a:	f3bf 8f4f 	dsb	sy
  40157e:	f3bf 8f6f 	isb	sy
  401582:	e7dd      	b.n	401540 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401584:	4b30      	ldr	r3, [pc, #192]	; (401648 <xQueueGenericSend+0x1cc>)
  401586:	4798      	blx	r3
					return errQUEUE_FULL;
  401588:	2000      	movs	r0, #0
  40158a:	e7dc      	b.n	401546 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40158c:	4620      	mov	r0, r4
  40158e:	4b30      	ldr	r3, [pc, #192]	; (401650 <xQueueGenericSend+0x1d4>)
  401590:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401592:	4b30      	ldr	r3, [pc, #192]	; (401654 <xQueueGenericSend+0x1d8>)
  401594:	4798      	blx	r3
  401596:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  401598:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40159a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40159c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40159e:	429a      	cmp	r2, r3
  4015a0:	d3ba      	bcc.n	401518 <xQueueGenericSend+0x9c>
  4015a2:	2e02      	cmp	r6, #2
  4015a4:	d0b8      	beq.n	401518 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4015a6:	9b01      	ldr	r3, [sp, #4]
  4015a8:	2b00      	cmp	r3, #0
  4015aa:	d0eb      	beq.n	401584 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4015ac:	b90d      	cbnz	r5, 4015b2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4015ae:	a802      	add	r0, sp, #8
  4015b0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4015b2:	4b25      	ldr	r3, [pc, #148]	; (401648 <xQueueGenericSend+0x1cc>)
  4015b4:	4798      	blx	r3
		vTaskSuspendAll();
  4015b6:	4b28      	ldr	r3, [pc, #160]	; (401658 <xQueueGenericSend+0x1dc>)
  4015b8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4015ba:	47c0      	blx	r8
  4015bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4015c0:	b25b      	sxtb	r3, r3
  4015c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015c6:	d102      	bne.n	4015ce <xQueueGenericSend+0x152>
  4015c8:	2300      	movs	r3, #0
  4015ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4015ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4015d2:	b25b      	sxtb	r3, r3
  4015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4015d8:	d102      	bne.n	4015e0 <xQueueGenericSend+0x164>
  4015da:	2300      	movs	r3, #0
  4015dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4015e0:	4b19      	ldr	r3, [pc, #100]	; (401648 <xQueueGenericSend+0x1cc>)
  4015e2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4015e4:	a901      	add	r1, sp, #4
  4015e6:	a802      	add	r0, sp, #8
  4015e8:	4b1c      	ldr	r3, [pc, #112]	; (40165c <xQueueGenericSend+0x1e0>)
  4015ea:	4798      	blx	r3
  4015ec:	b9e0      	cbnz	r0, 401628 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  4015ee:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4015f0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4015f4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4015f6:	4b14      	ldr	r3, [pc, #80]	; (401648 <xQueueGenericSend+0x1cc>)
  4015f8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4015fa:	45ab      	cmp	fp, r5
  4015fc:	d1c6      	bne.n	40158c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4015fe:	9901      	ldr	r1, [sp, #4]
  401600:	f104 0010 	add.w	r0, r4, #16
  401604:	4b16      	ldr	r3, [pc, #88]	; (401660 <xQueueGenericSend+0x1e4>)
  401606:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401608:	4620      	mov	r0, r4
  40160a:	4b11      	ldr	r3, [pc, #68]	; (401650 <xQueueGenericSend+0x1d4>)
  40160c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40160e:	4b11      	ldr	r3, [pc, #68]	; (401654 <xQueueGenericSend+0x1d8>)
  401610:	4798      	blx	r3
  401612:	2800      	cmp	r0, #0
  401614:	d1bf      	bne.n	401596 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401616:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40161a:	f8c9 3000 	str.w	r3, [r9]
  40161e:	f3bf 8f4f 	dsb	sy
  401622:	f3bf 8f6f 	isb	sy
  401626:	e7b6      	b.n	401596 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401628:	4620      	mov	r0, r4
  40162a:	4b09      	ldr	r3, [pc, #36]	; (401650 <xQueueGenericSend+0x1d4>)
  40162c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40162e:	4b09      	ldr	r3, [pc, #36]	; (401654 <xQueueGenericSend+0x1d8>)
  401630:	4798      	blx	r3
			return errQUEUE_FULL;
  401632:	2000      	movs	r0, #0
  401634:	e787      	b.n	401546 <xQueueGenericSend+0xca>
  401636:	bf00      	nop
  401638:	00402311 	.word	0x00402311
  40163c:	004011b5 	.word	0x004011b5
  401640:	00401231 	.word	0x00401231
  401644:	e000ed04 	.word	0xe000ed04
  401648:	00400f01 	.word	0x00400f01
  40164c:	004021c1 	.word	0x004021c1
  401650:	004012e5 	.word	0x004012e5
  401654:	00401ef9 	.word	0x00401ef9
  401658:	00401d95 	.word	0x00401d95
  40165c:	00402271 	.word	0x00402271
  401660:	0040213d 	.word	0x0040213d
  401664:	00400eb5 	.word	0x00400eb5
  401668:	00402259 	.word	0x00402259

0040166c <xQueueGenericSendFromISR>:
{
  40166c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401670:	2800      	cmp	r0, #0
  401672:	d039      	beq.n	4016e8 <xQueueGenericSendFromISR+0x7c>
  401674:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401676:	2900      	cmp	r1, #0
  401678:	d041      	beq.n	4016fe <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40167a:	2b02      	cmp	r3, #2
  40167c:	d04d      	beq.n	40171a <xQueueGenericSendFromISR+0xae>
  40167e:	461f      	mov	r7, r3
  401680:	4690      	mov	r8, r2
  401682:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401684:	4b3a      	ldr	r3, [pc, #232]	; (401770 <xQueueGenericSendFromISR+0x104>)
  401686:	4798      	blx	r3
	__asm volatile
  401688:	f3ef 8611 	mrs	r6, BASEPRI
  40168c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401690:	b672      	cpsid	i
  401692:	f383 8811 	msr	BASEPRI, r3
  401696:	f3bf 8f6f 	isb	sy
  40169a:	f3bf 8f4f 	dsb	sy
  40169e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4016a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4016a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4016a4:	429a      	cmp	r2, r3
  4016a6:	d301      	bcc.n	4016ac <xQueueGenericSendFromISR+0x40>
  4016a8:	2f02      	cmp	r7, #2
  4016aa:	d158      	bne.n	40175e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  4016ac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4016b0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4016b2:	463a      	mov	r2, r7
  4016b4:	4649      	mov	r1, r9
  4016b6:	4620      	mov	r0, r4
  4016b8:	4b2e      	ldr	r3, [pc, #184]	; (401774 <xQueueGenericSendFromISR+0x108>)
  4016ba:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4016bc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4016c0:	d147      	bne.n	401752 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4016c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4016c4:	2b00      	cmp	r3, #0
  4016c6:	d036      	beq.n	401736 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4016c8:	4639      	mov	r1, r7
  4016ca:	4620      	mov	r0, r4
  4016cc:	4b2a      	ldr	r3, [pc, #168]	; (401778 <xQueueGenericSendFromISR+0x10c>)
  4016ce:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4016d0:	f1b8 0f00 	cmp.w	r8, #0
  4016d4:	d045      	beq.n	401762 <xQueueGenericSendFromISR+0xf6>
  4016d6:	2800      	cmp	r0, #0
  4016d8:	d043      	beq.n	401762 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4016da:	2001      	movs	r0, #1
  4016dc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  4016e0:	f386 8811 	msr	BASEPRI, r6
}
  4016e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  4016e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ec:	b672      	cpsid	i
  4016ee:	f383 8811 	msr	BASEPRI, r3
  4016f2:	f3bf 8f6f 	isb	sy
  4016f6:	f3bf 8f4f 	dsb	sy
  4016fa:	b662      	cpsie	i
  4016fc:	e7fe      	b.n	4016fc <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016fe:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401700:	2800      	cmp	r0, #0
  401702:	d0ba      	beq.n	40167a <xQueueGenericSendFromISR+0xe>
  401704:	f04f 0380 	mov.w	r3, #128	; 0x80
  401708:	b672      	cpsid	i
  40170a:	f383 8811 	msr	BASEPRI, r3
  40170e:	f3bf 8f6f 	isb	sy
  401712:	f3bf 8f4f 	dsb	sy
  401716:	b662      	cpsie	i
  401718:	e7fe      	b.n	401718 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40171a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40171c:	2801      	cmp	r0, #1
  40171e:	d0ae      	beq.n	40167e <xQueueGenericSendFromISR+0x12>
  401720:	f04f 0380 	mov.w	r3, #128	; 0x80
  401724:	b672      	cpsid	i
  401726:	f383 8811 	msr	BASEPRI, r3
  40172a:	f3bf 8f6f 	isb	sy
  40172e:	f3bf 8f4f 	dsb	sy
  401732:	b662      	cpsie	i
  401734:	e7fe      	b.n	401734 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401736:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401738:	b1ab      	cbz	r3, 401766 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40173a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40173e:	4b0f      	ldr	r3, [pc, #60]	; (40177c <xQueueGenericSendFromISR+0x110>)
  401740:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401742:	f1b8 0f00 	cmp.w	r8, #0
  401746:	d010      	beq.n	40176a <xQueueGenericSendFromISR+0xfe>
  401748:	b178      	cbz	r0, 40176a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40174a:	2001      	movs	r0, #1
  40174c:	f8c8 0000 	str.w	r0, [r8]
  401750:	e7c6      	b.n	4016e0 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401752:	1c6b      	adds	r3, r5, #1
  401754:	b25b      	sxtb	r3, r3
  401756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40175a:	2001      	movs	r0, #1
  40175c:	e7c0      	b.n	4016e0 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40175e:	2000      	movs	r0, #0
  401760:	e7be      	b.n	4016e0 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401762:	2001      	movs	r0, #1
  401764:	e7bc      	b.n	4016e0 <xQueueGenericSendFromISR+0x74>
  401766:	2001      	movs	r0, #1
  401768:	e7ba      	b.n	4016e0 <xQueueGenericSendFromISR+0x74>
  40176a:	2001      	movs	r0, #1
  40176c:	e7b8      	b.n	4016e0 <xQueueGenericSendFromISR+0x74>
  40176e:	bf00      	nop
  401770:	004010dd 	.word	0x004010dd
  401774:	004011b5 	.word	0x004011b5
  401778:	00401231 	.word	0x00401231
  40177c:	004021c1 	.word	0x004021c1

00401780 <xQueueReceive>:
{
  401780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401784:	b084      	sub	sp, #16
  401786:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401788:	b190      	cbz	r0, 4017b0 <xQueueReceive+0x30>
  40178a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40178c:	b1d9      	cbz	r1, 4017c6 <xQueueReceive+0x46>
  40178e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401790:	4b54      	ldr	r3, [pc, #336]	; (4018e4 <xQueueReceive+0x164>)
  401792:	4798      	blx	r3
  401794:	bb28      	cbnz	r0, 4017e2 <xQueueReceive+0x62>
  401796:	9b01      	ldr	r3, [sp, #4]
  401798:	b35b      	cbz	r3, 4017f2 <xQueueReceive+0x72>
  40179a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40179e:	b672      	cpsid	i
  4017a0:	f383 8811 	msr	BASEPRI, r3
  4017a4:	f3bf 8f6f 	isb	sy
  4017a8:	f3bf 8f4f 	dsb	sy
  4017ac:	b662      	cpsie	i
  4017ae:	e7fe      	b.n	4017ae <xQueueReceive+0x2e>
  4017b0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017b4:	b672      	cpsid	i
  4017b6:	f383 8811 	msr	BASEPRI, r3
  4017ba:	f3bf 8f6f 	isb	sy
  4017be:	f3bf 8f4f 	dsb	sy
  4017c2:	b662      	cpsie	i
  4017c4:	e7fe      	b.n	4017c4 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4017c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4017c8:	2b00      	cmp	r3, #0
  4017ca:	d0e0      	beq.n	40178e <xQueueReceive+0xe>
  4017cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017d0:	b672      	cpsid	i
  4017d2:	f383 8811 	msr	BASEPRI, r3
  4017d6:	f3bf 8f6f 	isb	sy
  4017da:	f3bf 8f4f 	dsb	sy
  4017de:	b662      	cpsie	i
  4017e0:	e7fe      	b.n	4017e0 <xQueueReceive+0x60>
  4017e2:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4017e4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401910 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4017e8:	f8df a128 	ldr.w	sl, [pc, #296]	; 401914 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  4017ec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 4018f0 <xQueueReceive+0x170>
  4017f0:	e031      	b.n	401856 <xQueueReceive+0xd6>
  4017f2:	2700      	movs	r7, #0
  4017f4:	e7f6      	b.n	4017e4 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4017f6:	4631      	mov	r1, r6
  4017f8:	4620      	mov	r0, r4
  4017fa:	4b3b      	ldr	r3, [pc, #236]	; (4018e8 <xQueueReceive+0x168>)
  4017fc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  4017fe:	3d01      	subs	r5, #1
  401800:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401802:	6923      	ldr	r3, [r4, #16]
  401804:	b163      	cbz	r3, 401820 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401806:	f104 0010 	add.w	r0, r4, #16
  40180a:	4b38      	ldr	r3, [pc, #224]	; (4018ec <xQueueReceive+0x16c>)
  40180c:	4798      	blx	r3
  40180e:	b138      	cbz	r0, 401820 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  401810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401814:	4b36      	ldr	r3, [pc, #216]	; (4018f0 <xQueueReceive+0x170>)
  401816:	601a      	str	r2, [r3, #0]
  401818:	f3bf 8f4f 	dsb	sy
  40181c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401820:	4b34      	ldr	r3, [pc, #208]	; (4018f4 <xQueueReceive+0x174>)
  401822:	4798      	blx	r3
				return pdPASS;
  401824:	2001      	movs	r0, #1
}
  401826:	b004      	add	sp, #16
  401828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  40182c:	4b31      	ldr	r3, [pc, #196]	; (4018f4 <xQueueReceive+0x174>)
  40182e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401830:	2000      	movs	r0, #0
  401832:	e7f8      	b.n	401826 <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401834:	a802      	add	r0, sp, #8
  401836:	47d0      	blx	sl
  401838:	e016      	b.n	401868 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  40183a:	2300      	movs	r3, #0
  40183c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401840:	e01d      	b.n	40187e <xQueueReceive+0xfe>
  401842:	2300      	movs	r3, #0
  401844:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401848:	e01f      	b.n	40188a <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  40184a:	4620      	mov	r0, r4
  40184c:	4b2a      	ldr	r3, [pc, #168]	; (4018f8 <xQueueReceive+0x178>)
  40184e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401850:	4b2a      	ldr	r3, [pc, #168]	; (4018fc <xQueueReceive+0x17c>)
  401852:	4798      	blx	r3
  401854:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401856:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401858:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40185a:	2d00      	cmp	r5, #0
  40185c:	d1cb      	bne.n	4017f6 <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40185e:	9b01      	ldr	r3, [sp, #4]
  401860:	2b00      	cmp	r3, #0
  401862:	d0e3      	beq.n	40182c <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401864:	2f00      	cmp	r7, #0
  401866:	d0e5      	beq.n	401834 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401868:	4b22      	ldr	r3, [pc, #136]	; (4018f4 <xQueueReceive+0x174>)
  40186a:	4798      	blx	r3
		vTaskSuspendAll();
  40186c:	4b24      	ldr	r3, [pc, #144]	; (401900 <xQueueReceive+0x180>)
  40186e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401870:	47c0      	blx	r8
  401872:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401876:	b25b      	sxtb	r3, r3
  401878:	f1b3 3fff 	cmp.w	r3, #4294967295
  40187c:	d0dd      	beq.n	40183a <xQueueReceive+0xba>
  40187e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401882:	b25b      	sxtb	r3, r3
  401884:	f1b3 3fff 	cmp.w	r3, #4294967295
  401888:	d0db      	beq.n	401842 <xQueueReceive+0xc2>
  40188a:	4b1a      	ldr	r3, [pc, #104]	; (4018f4 <xQueueReceive+0x174>)
  40188c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40188e:	a901      	add	r1, sp, #4
  401890:	a802      	add	r0, sp, #8
  401892:	4b1c      	ldr	r3, [pc, #112]	; (401904 <xQueueReceive+0x184>)
  401894:	4798      	blx	r3
  401896:	b9c8      	cbnz	r0, 4018cc <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401898:	4620      	mov	r0, r4
  40189a:	4b1b      	ldr	r3, [pc, #108]	; (401908 <xQueueReceive+0x188>)
  40189c:	4798      	blx	r3
  40189e:	2800      	cmp	r0, #0
  4018a0:	d0d3      	beq.n	40184a <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  4018a2:	9901      	ldr	r1, [sp, #4]
  4018a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4018a8:	4b18      	ldr	r3, [pc, #96]	; (40190c <xQueueReceive+0x18c>)
  4018aa:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  4018ac:	4620      	mov	r0, r4
  4018ae:	4b12      	ldr	r3, [pc, #72]	; (4018f8 <xQueueReceive+0x178>)
  4018b0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4018b2:	4b12      	ldr	r3, [pc, #72]	; (4018fc <xQueueReceive+0x17c>)
  4018b4:	4798      	blx	r3
  4018b6:	2800      	cmp	r0, #0
  4018b8:	d1cc      	bne.n	401854 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  4018ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4018be:	f8c9 3000 	str.w	r3, [r9]
  4018c2:	f3bf 8f4f 	dsb	sy
  4018c6:	f3bf 8f6f 	isb	sy
  4018ca:	e7c3      	b.n	401854 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  4018cc:	4620      	mov	r0, r4
  4018ce:	4b0a      	ldr	r3, [pc, #40]	; (4018f8 <xQueueReceive+0x178>)
  4018d0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4018d2:	4b0a      	ldr	r3, [pc, #40]	; (4018fc <xQueueReceive+0x17c>)
  4018d4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4018d6:	4620      	mov	r0, r4
  4018d8:	4b0b      	ldr	r3, [pc, #44]	; (401908 <xQueueReceive+0x188>)
  4018da:	4798      	blx	r3
  4018dc:	2800      	cmp	r0, #0
  4018de:	d0b9      	beq.n	401854 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  4018e0:	2000      	movs	r0, #0
  4018e2:	e7a0      	b.n	401826 <xQueueReceive+0xa6>
  4018e4:	00402311 	.word	0x00402311
  4018e8:	004012bd 	.word	0x004012bd
  4018ec:	004021c1 	.word	0x004021c1
  4018f0:	e000ed04 	.word	0xe000ed04
  4018f4:	00400f01 	.word	0x00400f01
  4018f8:	004012e5 	.word	0x004012e5
  4018fc:	00401ef9 	.word	0x00401ef9
  401900:	00401d95 	.word	0x00401d95
  401904:	00402271 	.word	0x00402271
  401908:	00401195 	.word	0x00401195
  40190c:	0040213d 	.word	0x0040213d
  401910:	00400eb5 	.word	0x00400eb5
  401914:	00402259 	.word	0x00402259

00401918 <vQueueAddToRegistry>:
	{
  401918:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  40191a:	4b0b      	ldr	r3, [pc, #44]	; (401948 <vQueueAddToRegistry+0x30>)
  40191c:	681b      	ldr	r3, [r3, #0]
  40191e:	b153      	cbz	r3, 401936 <vQueueAddToRegistry+0x1e>
  401920:	2301      	movs	r3, #1
  401922:	4c09      	ldr	r4, [pc, #36]	; (401948 <vQueueAddToRegistry+0x30>)
  401924:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401928:	b132      	cbz	r2, 401938 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40192a:	3301      	adds	r3, #1
  40192c:	2b08      	cmp	r3, #8
  40192e:	d1f9      	bne.n	401924 <vQueueAddToRegistry+0xc>
	}
  401930:	f85d 4b04 	ldr.w	r4, [sp], #4
  401934:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401936:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401938:	4a03      	ldr	r2, [pc, #12]	; (401948 <vQueueAddToRegistry+0x30>)
  40193a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  40193e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401942:	6058      	str	r0, [r3, #4]
				break;
  401944:	e7f4      	b.n	401930 <vQueueAddToRegistry+0x18>
  401946:	bf00      	nop
  401948:	20400bdc 	.word	0x20400bdc

0040194c <vQueueWaitForMessageRestricted>:
	{
  40194c:	b570      	push	{r4, r5, r6, lr}
  40194e:	4604      	mov	r4, r0
  401950:	460d      	mov	r5, r1
  401952:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401954:	4b12      	ldr	r3, [pc, #72]	; (4019a0 <vQueueWaitForMessageRestricted+0x54>)
  401956:	4798      	blx	r3
  401958:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40195c:	b25b      	sxtb	r3, r3
  40195e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401962:	d00d      	beq.n	401980 <vQueueWaitForMessageRestricted+0x34>
  401964:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401968:	b25b      	sxtb	r3, r3
  40196a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40196e:	d00b      	beq.n	401988 <vQueueWaitForMessageRestricted+0x3c>
  401970:	4b0c      	ldr	r3, [pc, #48]	; (4019a4 <vQueueWaitForMessageRestricted+0x58>)
  401972:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401974:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401976:	b15b      	cbz	r3, 401990 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401978:	4620      	mov	r0, r4
  40197a:	4b0b      	ldr	r3, [pc, #44]	; (4019a8 <vQueueWaitForMessageRestricted+0x5c>)
  40197c:	4798      	blx	r3
  40197e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401980:	2300      	movs	r3, #0
  401982:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401986:	e7ed      	b.n	401964 <vQueueWaitForMessageRestricted+0x18>
  401988:	2300      	movs	r3, #0
  40198a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  40198e:	e7ef      	b.n	401970 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401990:	4632      	mov	r2, r6
  401992:	4629      	mov	r1, r5
  401994:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401998:	4b04      	ldr	r3, [pc, #16]	; (4019ac <vQueueWaitForMessageRestricted+0x60>)
  40199a:	4798      	blx	r3
  40199c:	e7ec      	b.n	401978 <vQueueWaitForMessageRestricted+0x2c>
  40199e:	bf00      	nop
  4019a0:	00400eb5 	.word	0x00400eb5
  4019a4:	00400f01 	.word	0x00400f01
  4019a8:	004012e5 	.word	0x004012e5
  4019ac:	00402179 	.word	0x00402179

004019b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4019b0:	4b08      	ldr	r3, [pc, #32]	; (4019d4 <prvResetNextTaskUnblockTime+0x24>)
  4019b2:	681b      	ldr	r3, [r3, #0]
  4019b4:	681b      	ldr	r3, [r3, #0]
  4019b6:	b13b      	cbz	r3, 4019c8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4019b8:	4b06      	ldr	r3, [pc, #24]	; (4019d4 <prvResetNextTaskUnblockTime+0x24>)
  4019ba:	681b      	ldr	r3, [r3, #0]
  4019bc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  4019be:	68db      	ldr	r3, [r3, #12]
  4019c0:	685a      	ldr	r2, [r3, #4]
  4019c2:	4b05      	ldr	r3, [pc, #20]	; (4019d8 <prvResetNextTaskUnblockTime+0x28>)
  4019c4:	601a      	str	r2, [r3, #0]
  4019c6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4019c8:	f04f 32ff 	mov.w	r2, #4294967295
  4019cc:	4b02      	ldr	r3, [pc, #8]	; (4019d8 <prvResetNextTaskUnblockTime+0x28>)
  4019ce:	601a      	str	r2, [r3, #0]
  4019d0:	4770      	bx	lr
  4019d2:	bf00      	nop
  4019d4:	20400a60 	.word	0x20400a60
  4019d8:	20400b10 	.word	0x20400b10

004019dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  4019dc:	b570      	push	{r4, r5, r6, lr}
  4019de:	4604      	mov	r4, r0
  4019e0:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  4019e2:	4b1c      	ldr	r3, [pc, #112]	; (401a54 <prvAddCurrentTaskToDelayedList+0x78>)
  4019e4:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4019e6:	4b1c      	ldr	r3, [pc, #112]	; (401a58 <prvAddCurrentTaskToDelayedList+0x7c>)
  4019e8:	6818      	ldr	r0, [r3, #0]
  4019ea:	3004      	adds	r0, #4
  4019ec:	4b1b      	ldr	r3, [pc, #108]	; (401a5c <prvAddCurrentTaskToDelayedList+0x80>)
  4019ee:	4798      	blx	r3
  4019f0:	b948      	cbnz	r0, 401a06 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4019f2:	4b19      	ldr	r3, [pc, #100]	; (401a58 <prvAddCurrentTaskToDelayedList+0x7c>)
  4019f4:	681a      	ldr	r2, [r3, #0]
  4019f6:	491a      	ldr	r1, [pc, #104]	; (401a60 <prvAddCurrentTaskToDelayedList+0x84>)
  4019f8:	680b      	ldr	r3, [r1, #0]
  4019fa:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4019fc:	2201      	movs	r2, #1
  4019fe:	4082      	lsls	r2, r0
  401a00:	ea23 0302 	bic.w	r3, r3, r2
  401a04:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401a06:	f1b4 3fff 	cmp.w	r4, #4294967295
  401a0a:	d100      	bne.n	401a0e <prvAddCurrentTaskToDelayedList+0x32>
  401a0c:	b99e      	cbnz	r6, 401a36 <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401a0e:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401a10:	4b11      	ldr	r3, [pc, #68]	; (401a58 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a12:	681b      	ldr	r3, [r3, #0]
  401a14:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401a16:	42a5      	cmp	r5, r4
  401a18:	d814      	bhi.n	401a44 <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401a1a:	4b12      	ldr	r3, [pc, #72]	; (401a64 <prvAddCurrentTaskToDelayedList+0x88>)
  401a1c:	6818      	ldr	r0, [r3, #0]
  401a1e:	4b0e      	ldr	r3, [pc, #56]	; (401a58 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a20:	6819      	ldr	r1, [r3, #0]
  401a22:	3104      	adds	r1, #4
  401a24:	4b10      	ldr	r3, [pc, #64]	; (401a68 <prvAddCurrentTaskToDelayedList+0x8c>)
  401a26:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401a28:	4b10      	ldr	r3, [pc, #64]	; (401a6c <prvAddCurrentTaskToDelayedList+0x90>)
  401a2a:	681b      	ldr	r3, [r3, #0]
  401a2c:	429c      	cmp	r4, r3
  401a2e:	d201      	bcs.n	401a34 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401a30:	4b0e      	ldr	r3, [pc, #56]	; (401a6c <prvAddCurrentTaskToDelayedList+0x90>)
  401a32:	601c      	str	r4, [r3, #0]
  401a34:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401a36:	4b08      	ldr	r3, [pc, #32]	; (401a58 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a38:	6819      	ldr	r1, [r3, #0]
  401a3a:	3104      	adds	r1, #4
  401a3c:	480c      	ldr	r0, [pc, #48]	; (401a70 <prvAddCurrentTaskToDelayedList+0x94>)
  401a3e:	4b0d      	ldr	r3, [pc, #52]	; (401a74 <prvAddCurrentTaskToDelayedList+0x98>)
  401a40:	4798      	blx	r3
  401a42:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401a44:	4b0c      	ldr	r3, [pc, #48]	; (401a78 <prvAddCurrentTaskToDelayedList+0x9c>)
  401a46:	6818      	ldr	r0, [r3, #0]
  401a48:	4b03      	ldr	r3, [pc, #12]	; (401a58 <prvAddCurrentTaskToDelayedList+0x7c>)
  401a4a:	6819      	ldr	r1, [r3, #0]
  401a4c:	3104      	adds	r1, #4
  401a4e:	4b06      	ldr	r3, [pc, #24]	; (401a68 <prvAddCurrentTaskToDelayedList+0x8c>)
  401a50:	4798      	blx	r3
  401a52:	bd70      	pop	{r4, r5, r6, pc}
  401a54:	20400b58 	.word	0x20400b58
  401a58:	20400a5c 	.word	0x20400a5c
  401a5c:	00400db5 	.word	0x00400db5
  401a60:	20400ae0 	.word	0x20400ae0
  401a64:	20400a60 	.word	0x20400a60
  401a68:	00400d81 	.word	0x00400d81
  401a6c:	20400b10 	.word	0x20400b10
  401a70:	20400b30 	.word	0x20400b30
  401a74:	00400d69 	.word	0x00400d69
  401a78:	20400a64 	.word	0x20400a64

00401a7c <prvIdleTask>:
{
  401a7c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401a7e:	4d18      	ldr	r5, [pc, #96]	; (401ae0 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401a80:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401afc <prvIdleTask+0x80>
				taskYIELD();
  401a84:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401b00 <prvIdleTask+0x84>
  401a88:	e001      	b.n	401a8e <prvIdleTask+0x12>
			vApplicationIdleHook();
  401a8a:	4b16      	ldr	r3, [pc, #88]	; (401ae4 <prvIdleTask+0x68>)
  401a8c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401a8e:	682b      	ldr	r3, [r5, #0]
  401a90:	b1c3      	cbz	r3, 401ac4 <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401a92:	4f15      	ldr	r7, [pc, #84]	; (401ae8 <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401a94:	4e15      	ldr	r6, [pc, #84]	; (401aec <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  401a96:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401a98:	68fb      	ldr	r3, [r7, #12]
  401a9a:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401a9c:	1d20      	adds	r0, r4, #4
  401a9e:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401aa0:	4a13      	ldr	r2, [pc, #76]	; (401af0 <prvIdleTask+0x74>)
  401aa2:	6813      	ldr	r3, [r2, #0]
  401aa4:	3b01      	subs	r3, #1
  401aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401aa8:	682b      	ldr	r3, [r5, #0]
  401aaa:	3b01      	subs	r3, #1
  401aac:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401aae:	4b11      	ldr	r3, [pc, #68]	; (401af4 <prvIdleTask+0x78>)
  401ab0:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401ab2:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401ab4:	f8df a04c 	ldr.w	sl, [pc, #76]	; 401b04 <prvIdleTask+0x88>
  401ab8:	47d0      	blx	sl
			vPortFree( pxTCB );
  401aba:	4620      	mov	r0, r4
  401abc:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401abe:	682b      	ldr	r3, [r5, #0]
  401ac0:	2b00      	cmp	r3, #0
  401ac2:	d1e8      	bne.n	401a96 <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401ac4:	4b0c      	ldr	r3, [pc, #48]	; (401af8 <prvIdleTask+0x7c>)
  401ac6:	681b      	ldr	r3, [r3, #0]
  401ac8:	2b01      	cmp	r3, #1
  401aca:	d9de      	bls.n	401a8a <prvIdleTask+0xe>
				taskYIELD();
  401acc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401ad0:	f8c9 3000 	str.w	r3, [r9]
  401ad4:	f3bf 8f4f 	dsb	sy
  401ad8:	f3bf 8f6f 	isb	sy
  401adc:	e7d5      	b.n	401a8a <prvIdleTask+0xe>
  401ade:	bf00      	nop
  401ae0:	20400ad0 	.word	0x20400ad0
  401ae4:	00402a01 	.word	0x00402a01
  401ae8:	20400b44 	.word	0x20400b44
  401aec:	00400db5 	.word	0x00400db5
  401af0:	20400acc 	.word	0x20400acc
  401af4:	00400f01 	.word	0x00400f01
  401af8:	20400a68 	.word	0x20400a68
  401afc:	00400eb5 	.word	0x00400eb5
  401b00:	e000ed04 	.word	0xe000ed04
  401b04:	00401171 	.word	0x00401171

00401b08 <xTaskCreate>:
	{
  401b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401b0c:	b083      	sub	sp, #12
  401b0e:	4683      	mov	fp, r0
  401b10:	460d      	mov	r5, r1
  401b12:	9301      	str	r3, [sp, #4]
  401b14:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b18:	0096      	lsls	r6, r2, #2
  401b1a:	4630      	mov	r0, r6
  401b1c:	4b60      	ldr	r3, [pc, #384]	; (401ca0 <xTaskCreate+0x198>)
  401b1e:	4798      	blx	r3
			if( pxStack != NULL )
  401b20:	2800      	cmp	r0, #0
  401b22:	f000 808d 	beq.w	401c40 <xTaskCreate+0x138>
  401b26:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  401b28:	2058      	movs	r0, #88	; 0x58
  401b2a:	4b5d      	ldr	r3, [pc, #372]	; (401ca0 <xTaskCreate+0x198>)
  401b2c:	4798      	blx	r3
				if( pxNewTCB != NULL )
  401b2e:	4604      	mov	r4, r0
  401b30:	2800      	cmp	r0, #0
  401b32:	f000 8082 	beq.w	401c3a <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  401b36:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  401b38:	4632      	mov	r2, r6
  401b3a:	21a5      	movs	r1, #165	; 0xa5
  401b3c:	4638      	mov	r0, r7
  401b3e:	4b59      	ldr	r3, [pc, #356]	; (401ca4 <xTaskCreate+0x19c>)
  401b40:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  401b42:	3e04      	subs	r6, #4
  401b44:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401b46:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401b48:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401b4c:	782b      	ldrb	r3, [r5, #0]
  401b4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401b52:	782b      	ldrb	r3, [r5, #0]
  401b54:	b163      	cbz	r3, 401b70 <xTaskCreate+0x68>
  401b56:	462b      	mov	r3, r5
  401b58:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401b5c:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  401b60:	7858      	ldrb	r0, [r3, #1]
  401b62:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401b66:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  401b6a:	b108      	cbz	r0, 401b70 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401b6c:	428b      	cmp	r3, r1
  401b6e:	d1f7      	bne.n	401b60 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401b70:	2700      	movs	r7, #0
  401b72:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  401b76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401b78:	2d04      	cmp	r5, #4
  401b7a:	bf28      	it	cs
  401b7c:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  401b7e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  401b80:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  401b82:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  401b84:	f104 0804 	add.w	r8, r4, #4
  401b88:	4640      	mov	r0, r8
  401b8a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 401cf8 <xTaskCreate+0x1f0>
  401b8e:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  401b90:	f104 0018 	add.w	r0, r4, #24
  401b94:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  401b96:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b98:	f1c5 0505 	rsb	r5, r5, #5
  401b9c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  401b9e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  401ba0:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  401ba2:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401ba6:	9a01      	ldr	r2, [sp, #4]
  401ba8:	4659      	mov	r1, fp
  401baa:	4630      	mov	r0, r6
  401bac:	4b3e      	ldr	r3, [pc, #248]	; (401ca8 <xTaskCreate+0x1a0>)
  401bae:	4798      	blx	r3
  401bb0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  401bb2:	f1ba 0f00 	cmp.w	sl, #0
  401bb6:	d001      	beq.n	401bbc <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401bb8:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  401bbc:	4b3b      	ldr	r3, [pc, #236]	; (401cac <xTaskCreate+0x1a4>)
  401bbe:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  401bc0:	4a3b      	ldr	r2, [pc, #236]	; (401cb0 <xTaskCreate+0x1a8>)
  401bc2:	6813      	ldr	r3, [r2, #0]
  401bc4:	3301      	adds	r3, #1
  401bc6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  401bc8:	4b3a      	ldr	r3, [pc, #232]	; (401cb4 <xTaskCreate+0x1ac>)
  401bca:	681b      	ldr	r3, [r3, #0]
  401bcc:	2b00      	cmp	r3, #0
  401bce:	d03a      	beq.n	401c46 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  401bd0:	4b39      	ldr	r3, [pc, #228]	; (401cb8 <xTaskCreate+0x1b0>)
  401bd2:	681b      	ldr	r3, [r3, #0]
  401bd4:	b93b      	cbnz	r3, 401be6 <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  401bd6:	4b37      	ldr	r3, [pc, #220]	; (401cb4 <xTaskCreate+0x1ac>)
  401bd8:	681b      	ldr	r3, [r3, #0]
  401bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401bdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401bde:	429a      	cmp	r2, r3
  401be0:	d801      	bhi.n	401be6 <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  401be2:	4b34      	ldr	r3, [pc, #208]	; (401cb4 <xTaskCreate+0x1ac>)
  401be4:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  401be6:	4a35      	ldr	r2, [pc, #212]	; (401cbc <xTaskCreate+0x1b4>)
  401be8:	6813      	ldr	r3, [r2, #0]
  401bea:	3301      	adds	r3, #1
  401bec:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  401bee:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  401bf0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401bf2:	4a33      	ldr	r2, [pc, #204]	; (401cc0 <xTaskCreate+0x1b8>)
  401bf4:	6811      	ldr	r1, [r2, #0]
  401bf6:	2301      	movs	r3, #1
  401bf8:	4083      	lsls	r3, r0
  401bfa:	430b      	orrs	r3, r1
  401bfc:	6013      	str	r3, [r2, #0]
  401bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401c02:	4641      	mov	r1, r8
  401c04:	4b2f      	ldr	r3, [pc, #188]	; (401cc4 <xTaskCreate+0x1bc>)
  401c06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401c0a:	4b2f      	ldr	r3, [pc, #188]	; (401cc8 <xTaskCreate+0x1c0>)
  401c0c:	4798      	blx	r3
	taskEXIT_CRITICAL();
  401c0e:	4b2f      	ldr	r3, [pc, #188]	; (401ccc <xTaskCreate+0x1c4>)
  401c10:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  401c12:	4b29      	ldr	r3, [pc, #164]	; (401cb8 <xTaskCreate+0x1b0>)
  401c14:	681b      	ldr	r3, [r3, #0]
  401c16:	2b00      	cmp	r3, #0
  401c18:	d03b      	beq.n	401c92 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  401c1a:	4b26      	ldr	r3, [pc, #152]	; (401cb4 <xTaskCreate+0x1ac>)
  401c1c:	681b      	ldr	r3, [r3, #0]
  401c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  401c20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  401c22:	429a      	cmp	r2, r3
  401c24:	d239      	bcs.n	401c9a <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  401c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c2a:	4b29      	ldr	r3, [pc, #164]	; (401cd0 <xTaskCreate+0x1c8>)
  401c2c:	601a      	str	r2, [r3, #0]
  401c2e:	f3bf 8f4f 	dsb	sy
  401c32:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401c36:	2001      	movs	r0, #1
  401c38:	e02c      	b.n	401c94 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  401c3a:	4638      	mov	r0, r7
  401c3c:	4b25      	ldr	r3, [pc, #148]	; (401cd4 <xTaskCreate+0x1cc>)
  401c3e:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401c40:	f04f 30ff 	mov.w	r0, #4294967295
  401c44:	e026      	b.n	401c94 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  401c46:	4b1b      	ldr	r3, [pc, #108]	; (401cb4 <xTaskCreate+0x1ac>)
  401c48:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401c4a:	6813      	ldr	r3, [r2, #0]
  401c4c:	2b01      	cmp	r3, #1
  401c4e:	d1ca      	bne.n	401be6 <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401c50:	4e1c      	ldr	r6, [pc, #112]	; (401cc4 <xTaskCreate+0x1bc>)
  401c52:	4630      	mov	r0, r6
  401c54:	4d20      	ldr	r5, [pc, #128]	; (401cd8 <xTaskCreate+0x1d0>)
  401c56:	47a8      	blx	r5
  401c58:	f106 0014 	add.w	r0, r6, #20
  401c5c:	47a8      	blx	r5
  401c5e:	f106 0028 	add.w	r0, r6, #40	; 0x28
  401c62:	47a8      	blx	r5
  401c64:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  401c68:	47a8      	blx	r5
  401c6a:	f106 0050 	add.w	r0, r6, #80	; 0x50
  401c6e:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  401c70:	4f1a      	ldr	r7, [pc, #104]	; (401cdc <xTaskCreate+0x1d4>)
  401c72:	4638      	mov	r0, r7
  401c74:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  401c76:	4e1a      	ldr	r6, [pc, #104]	; (401ce0 <xTaskCreate+0x1d8>)
  401c78:	4630      	mov	r0, r6
  401c7a:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  401c7c:	4819      	ldr	r0, [pc, #100]	; (401ce4 <xTaskCreate+0x1dc>)
  401c7e:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  401c80:	4819      	ldr	r0, [pc, #100]	; (401ce8 <xTaskCreate+0x1e0>)
  401c82:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  401c84:	4819      	ldr	r0, [pc, #100]	; (401cec <xTaskCreate+0x1e4>)
  401c86:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  401c88:	4b19      	ldr	r3, [pc, #100]	; (401cf0 <xTaskCreate+0x1e8>)
  401c8a:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401c8c:	4b19      	ldr	r3, [pc, #100]	; (401cf4 <xTaskCreate+0x1ec>)
  401c8e:	601e      	str	r6, [r3, #0]
  401c90:	e7a9      	b.n	401be6 <xTaskCreate+0xde>
			xReturn = pdPASS;
  401c92:	2001      	movs	r0, #1
	}
  401c94:	b003      	add	sp, #12
  401c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  401c9a:	2001      	movs	r0, #1
		return xReturn;
  401c9c:	e7fa      	b.n	401c94 <xTaskCreate+0x18c>
  401c9e:	bf00      	nop
  401ca0:	00401141 	.word	0x00401141
  401ca4:	00403461 	.word	0x00403461
  401ca8:	00400e61 	.word	0x00400e61
  401cac:	00400eb5 	.word	0x00400eb5
  401cb0:	20400acc 	.word	0x20400acc
  401cb4:	20400a5c 	.word	0x20400a5c
  401cb8:	20400b2c 	.word	0x20400b2c
  401cbc:	20400adc 	.word	0x20400adc
  401cc0:	20400ae0 	.word	0x20400ae0
  401cc4:	20400a68 	.word	0x20400a68
  401cc8:	00400d69 	.word	0x00400d69
  401ccc:	00400f01 	.word	0x00400f01
  401cd0:	e000ed04 	.word	0xe000ed04
  401cd4:	00401171 	.word	0x00401171
  401cd8:	00400d4d 	.word	0x00400d4d
  401cdc:	20400ae4 	.word	0x20400ae4
  401ce0:	20400af8 	.word	0x20400af8
  401ce4:	20400b18 	.word	0x20400b18
  401ce8:	20400b44 	.word	0x20400b44
  401cec:	20400b30 	.word	0x20400b30
  401cf0:	20400a60 	.word	0x20400a60
  401cf4:	20400a64 	.word	0x20400a64
  401cf8:	00400d63 	.word	0x00400d63

00401cfc <vTaskStartScheduler>:
{
  401cfc:	b510      	push	{r4, lr}
  401cfe:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  401d00:	4b1b      	ldr	r3, [pc, #108]	; (401d70 <vTaskStartScheduler+0x74>)
  401d02:	9301      	str	r3, [sp, #4]
  401d04:	2300      	movs	r3, #0
  401d06:	9300      	str	r3, [sp, #0]
  401d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401d0c:	4919      	ldr	r1, [pc, #100]	; (401d74 <vTaskStartScheduler+0x78>)
  401d0e:	481a      	ldr	r0, [pc, #104]	; (401d78 <vTaskStartScheduler+0x7c>)
  401d10:	4c1a      	ldr	r4, [pc, #104]	; (401d7c <vTaskStartScheduler+0x80>)
  401d12:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401d14:	2801      	cmp	r0, #1
  401d16:	d004      	beq.n	401d22 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  401d18:	f1b0 3fff 	cmp.w	r0, #4294967295
  401d1c:	d01c      	beq.n	401d58 <vTaskStartScheduler+0x5c>
}
  401d1e:	b002      	add	sp, #8
  401d20:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  401d22:	4b17      	ldr	r3, [pc, #92]	; (401d80 <vTaskStartScheduler+0x84>)
  401d24:	4798      	blx	r3
	if( xReturn == pdPASS )
  401d26:	2801      	cmp	r0, #1
  401d28:	d1f6      	bne.n	401d18 <vTaskStartScheduler+0x1c>
  401d2a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d2e:	b672      	cpsid	i
  401d30:	f383 8811 	msr	BASEPRI, r3
  401d34:	f3bf 8f6f 	isb	sy
  401d38:	f3bf 8f4f 	dsb	sy
  401d3c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401d3e:	f04f 32ff 	mov.w	r2, #4294967295
  401d42:	4b10      	ldr	r3, [pc, #64]	; (401d84 <vTaskStartScheduler+0x88>)
  401d44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401d46:	2201      	movs	r2, #1
  401d48:	4b0f      	ldr	r3, [pc, #60]	; (401d88 <vTaskStartScheduler+0x8c>)
  401d4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401d4c:	2200      	movs	r2, #0
  401d4e:	4b0f      	ldr	r3, [pc, #60]	; (401d8c <vTaskStartScheduler+0x90>)
  401d50:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401d52:	4b0f      	ldr	r3, [pc, #60]	; (401d90 <vTaskStartScheduler+0x94>)
  401d54:	4798      	blx	r3
  401d56:	e7e2      	b.n	401d1e <vTaskStartScheduler+0x22>
  401d58:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d5c:	b672      	cpsid	i
  401d5e:	f383 8811 	msr	BASEPRI, r3
  401d62:	f3bf 8f6f 	isb	sy
  401d66:	f3bf 8f4f 	dsb	sy
  401d6a:	b662      	cpsie	i
  401d6c:	e7fe      	b.n	401d6c <vTaskStartScheduler+0x70>
  401d6e:	bf00      	nop
  401d70:	20400b0c 	.word	0x20400b0c
  401d74:	00405cd8 	.word	0x00405cd8
  401d78:	00401a7d 	.word	0x00401a7d
  401d7c:	00401b09 	.word	0x00401b09
  401d80:	004024a9 	.word	0x004024a9
  401d84:	20400b10 	.word	0x20400b10
  401d88:	20400b2c 	.word	0x20400b2c
  401d8c:	20400b58 	.word	0x20400b58
  401d90:	00400ff1 	.word	0x00400ff1

00401d94 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401d94:	4a02      	ldr	r2, [pc, #8]	; (401da0 <vTaskSuspendAll+0xc>)
  401d96:	6813      	ldr	r3, [r2, #0]
  401d98:	3301      	adds	r3, #1
  401d9a:	6013      	str	r3, [r2, #0]
  401d9c:	4770      	bx	lr
  401d9e:	bf00      	nop
  401da0:	20400ad8 	.word	0x20400ad8

00401da4 <xTaskGetTickCount>:
		xTicks = xTickCount;
  401da4:	4b01      	ldr	r3, [pc, #4]	; (401dac <xTaskGetTickCount+0x8>)
  401da6:	6818      	ldr	r0, [r3, #0]
}
  401da8:	4770      	bx	lr
  401daa:	bf00      	nop
  401dac:	20400b58 	.word	0x20400b58

00401db0 <xTaskIncrementTick>:
{
  401db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401db4:	4b41      	ldr	r3, [pc, #260]	; (401ebc <xTaskIncrementTick+0x10c>)
  401db6:	681b      	ldr	r3, [r3, #0]
  401db8:	2b00      	cmp	r3, #0
  401dba:	d177      	bne.n	401eac <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  401dbc:	4b40      	ldr	r3, [pc, #256]	; (401ec0 <xTaskIncrementTick+0x110>)
  401dbe:	681d      	ldr	r5, [r3, #0]
  401dc0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  401dc2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  401dc4:	b9d5      	cbnz	r5, 401dfc <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  401dc6:	4b3f      	ldr	r3, [pc, #252]	; (401ec4 <xTaskIncrementTick+0x114>)
  401dc8:	681b      	ldr	r3, [r3, #0]
  401dca:	681b      	ldr	r3, [r3, #0]
  401dcc:	b153      	cbz	r3, 401de4 <xTaskIncrementTick+0x34>
  401dce:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dd2:	b672      	cpsid	i
  401dd4:	f383 8811 	msr	BASEPRI, r3
  401dd8:	f3bf 8f6f 	isb	sy
  401ddc:	f3bf 8f4f 	dsb	sy
  401de0:	b662      	cpsie	i
  401de2:	e7fe      	b.n	401de2 <xTaskIncrementTick+0x32>
  401de4:	4a37      	ldr	r2, [pc, #220]	; (401ec4 <xTaskIncrementTick+0x114>)
  401de6:	6811      	ldr	r1, [r2, #0]
  401de8:	4b37      	ldr	r3, [pc, #220]	; (401ec8 <xTaskIncrementTick+0x118>)
  401dea:	6818      	ldr	r0, [r3, #0]
  401dec:	6010      	str	r0, [r2, #0]
  401dee:	6019      	str	r1, [r3, #0]
  401df0:	4a36      	ldr	r2, [pc, #216]	; (401ecc <xTaskIncrementTick+0x11c>)
  401df2:	6813      	ldr	r3, [r2, #0]
  401df4:	3301      	adds	r3, #1
  401df6:	6013      	str	r3, [r2, #0]
  401df8:	4b35      	ldr	r3, [pc, #212]	; (401ed0 <xTaskIncrementTick+0x120>)
  401dfa:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  401dfc:	4b35      	ldr	r3, [pc, #212]	; (401ed4 <xTaskIncrementTick+0x124>)
  401dfe:	681b      	ldr	r3, [r3, #0]
  401e00:	429d      	cmp	r5, r3
  401e02:	d218      	bcs.n	401e36 <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  401e04:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401e06:	4b34      	ldr	r3, [pc, #208]	; (401ed8 <xTaskIncrementTick+0x128>)
  401e08:	681b      	ldr	r3, [r3, #0]
  401e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401e0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401e10:	009b      	lsls	r3, r3, #2
  401e12:	4a32      	ldr	r2, [pc, #200]	; (401edc <xTaskIncrementTick+0x12c>)
  401e14:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  401e16:	2b02      	cmp	r3, #2
  401e18:	bf28      	it	cs
  401e1a:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401e1c:	4b30      	ldr	r3, [pc, #192]	; (401ee0 <xTaskIncrementTick+0x130>)
  401e1e:	681b      	ldr	r3, [r3, #0]
  401e20:	b90b      	cbnz	r3, 401e26 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  401e22:	4b30      	ldr	r3, [pc, #192]	; (401ee4 <xTaskIncrementTick+0x134>)
  401e24:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401e26:	4b30      	ldr	r3, [pc, #192]	; (401ee8 <xTaskIncrementTick+0x138>)
  401e28:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401e2a:	2b00      	cmp	r3, #0
}
  401e2c:	bf0c      	ite	eq
  401e2e:	4620      	moveq	r0, r4
  401e30:	2001      	movne	r0, #1
  401e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e36:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e38:	f8df 9088 	ldr.w	r9, [pc, #136]	; 401ec4 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401e3c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 401ef4 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  401e40:	4f2a      	ldr	r7, [pc, #168]	; (401eec <xTaskIncrementTick+0x13c>)
  401e42:	e01f      	b.n	401e84 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401e44:	f04f 32ff 	mov.w	r2, #4294967295
  401e48:	4b22      	ldr	r3, [pc, #136]	; (401ed4 <xTaskIncrementTick+0x124>)
  401e4a:	601a      	str	r2, [r3, #0]
					break;
  401e4c:	e7db      	b.n	401e06 <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  401e4e:	4a21      	ldr	r2, [pc, #132]	; (401ed4 <xTaskIncrementTick+0x124>)
  401e50:	6013      	str	r3, [r2, #0]
						break;
  401e52:	e7d8      	b.n	401e06 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401e54:	f106 0018 	add.w	r0, r6, #24
  401e58:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  401e5a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  401e5c:	683a      	ldr	r2, [r7, #0]
  401e5e:	2301      	movs	r3, #1
  401e60:	4083      	lsls	r3, r0
  401e62:	4313      	orrs	r3, r2
  401e64:	603b      	str	r3, [r7, #0]
  401e66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e6a:	4651      	mov	r1, sl
  401e6c:	4b1b      	ldr	r3, [pc, #108]	; (401edc <xTaskIncrementTick+0x12c>)
  401e6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401e72:	4b1f      	ldr	r3, [pc, #124]	; (401ef0 <xTaskIncrementTick+0x140>)
  401e74:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401e76:	4b18      	ldr	r3, [pc, #96]	; (401ed8 <xTaskIncrementTick+0x128>)
  401e78:	681b      	ldr	r3, [r3, #0]
  401e7a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  401e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  401e7e:	429a      	cmp	r2, r3
  401e80:	bf28      	it	cs
  401e82:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e84:	f8d9 3000 	ldr.w	r3, [r9]
  401e88:	681b      	ldr	r3, [r3, #0]
  401e8a:	2b00      	cmp	r3, #0
  401e8c:	d0da      	beq.n	401e44 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401e8e:	f8d9 3000 	ldr.w	r3, [r9]
  401e92:	68db      	ldr	r3, [r3, #12]
  401e94:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  401e96:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  401e98:	429d      	cmp	r5, r3
  401e9a:	d3d8      	bcc.n	401e4e <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401e9c:	f106 0a04 	add.w	sl, r6, #4
  401ea0:	4650      	mov	r0, sl
  401ea2:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401ea4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  401ea6:	2b00      	cmp	r3, #0
  401ea8:	d1d4      	bne.n	401e54 <xTaskIncrementTick+0xa4>
  401eaa:	e7d6      	b.n	401e5a <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  401eac:	4a0c      	ldr	r2, [pc, #48]	; (401ee0 <xTaskIncrementTick+0x130>)
  401eae:	6813      	ldr	r3, [r2, #0]
  401eb0:	3301      	adds	r3, #1
  401eb2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401eb4:	4b0b      	ldr	r3, [pc, #44]	; (401ee4 <xTaskIncrementTick+0x134>)
  401eb6:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401eb8:	2400      	movs	r4, #0
  401eba:	e7b4      	b.n	401e26 <xTaskIncrementTick+0x76>
  401ebc:	20400ad8 	.word	0x20400ad8
  401ec0:	20400b58 	.word	0x20400b58
  401ec4:	20400a60 	.word	0x20400a60
  401ec8:	20400a64 	.word	0x20400a64
  401ecc:	20400b14 	.word	0x20400b14
  401ed0:	004019b1 	.word	0x004019b1
  401ed4:	20400b10 	.word	0x20400b10
  401ed8:	20400a5c 	.word	0x20400a5c
  401edc:	20400a68 	.word	0x20400a68
  401ee0:	20400ad4 	.word	0x20400ad4
  401ee4:	00402a03 	.word	0x00402a03
  401ee8:	20400b5c 	.word	0x20400b5c
  401eec:	20400ae0 	.word	0x20400ae0
  401ef0:	00400d69 	.word	0x00400d69
  401ef4:	00400db5 	.word	0x00400db5

00401ef8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  401ef8:	4b36      	ldr	r3, [pc, #216]	; (401fd4 <xTaskResumeAll+0xdc>)
  401efa:	681b      	ldr	r3, [r3, #0]
  401efc:	b953      	cbnz	r3, 401f14 <xTaskResumeAll+0x1c>
  401efe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f02:	b672      	cpsid	i
  401f04:	f383 8811 	msr	BASEPRI, r3
  401f08:	f3bf 8f6f 	isb	sy
  401f0c:	f3bf 8f4f 	dsb	sy
  401f10:	b662      	cpsie	i
  401f12:	e7fe      	b.n	401f12 <xTaskResumeAll+0x1a>
{
  401f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  401f18:	4b2f      	ldr	r3, [pc, #188]	; (401fd8 <xTaskResumeAll+0xe0>)
  401f1a:	4798      	blx	r3
		--uxSchedulerSuspended;
  401f1c:	4b2d      	ldr	r3, [pc, #180]	; (401fd4 <xTaskResumeAll+0xdc>)
  401f1e:	681a      	ldr	r2, [r3, #0]
  401f20:	3a01      	subs	r2, #1
  401f22:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401f24:	681b      	ldr	r3, [r3, #0]
  401f26:	2b00      	cmp	r3, #0
  401f28:	d150      	bne.n	401fcc <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  401f2a:	4b2c      	ldr	r3, [pc, #176]	; (401fdc <xTaskResumeAll+0xe4>)
  401f2c:	681b      	ldr	r3, [r3, #0]
  401f2e:	b92b      	cbnz	r3, 401f3c <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  401f30:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401f32:	4b2b      	ldr	r3, [pc, #172]	; (401fe0 <xTaskResumeAll+0xe8>)
  401f34:	4798      	blx	r3
}
  401f36:	4620      	mov	r0, r4
  401f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401f3c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f3e:	4f29      	ldr	r7, [pc, #164]	; (401fe4 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401f40:	4e29      	ldr	r6, [pc, #164]	; (401fe8 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  401f42:	4d2a      	ldr	r5, [pc, #168]	; (401fec <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  401f44:	683b      	ldr	r3, [r7, #0]
  401f46:	b303      	cbz	r3, 401f8a <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  401f48:	68fb      	ldr	r3, [r7, #12]
  401f4a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401f4c:	f104 0018 	add.w	r0, r4, #24
  401f50:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f52:	f104 0804 	add.w	r8, r4, #4
  401f56:	4640      	mov	r0, r8
  401f58:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  401f5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401f5c:	682a      	ldr	r2, [r5, #0]
  401f5e:	2301      	movs	r3, #1
  401f60:	4083      	lsls	r3, r0
  401f62:	4313      	orrs	r3, r2
  401f64:	602b      	str	r3, [r5, #0]
  401f66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f6a:	4641      	mov	r1, r8
  401f6c:	4b20      	ldr	r3, [pc, #128]	; (401ff0 <xTaskResumeAll+0xf8>)
  401f6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f72:	4b20      	ldr	r3, [pc, #128]	; (401ff4 <xTaskResumeAll+0xfc>)
  401f74:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401f76:	4b20      	ldr	r3, [pc, #128]	; (401ff8 <xTaskResumeAll+0x100>)
  401f78:	681b      	ldr	r3, [r3, #0]
  401f7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  401f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f7e:	429a      	cmp	r2, r3
  401f80:	d3e0      	bcc.n	401f44 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  401f82:	2201      	movs	r2, #1
  401f84:	4b1d      	ldr	r3, [pc, #116]	; (401ffc <xTaskResumeAll+0x104>)
  401f86:	601a      	str	r2, [r3, #0]
  401f88:	e7dc      	b.n	401f44 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  401f8a:	b10c      	cbz	r4, 401f90 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  401f8c:	4b1c      	ldr	r3, [pc, #112]	; (402000 <xTaskResumeAll+0x108>)
  401f8e:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  401f90:	4b1c      	ldr	r3, [pc, #112]	; (402004 <xTaskResumeAll+0x10c>)
  401f92:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  401f94:	b16c      	cbz	r4, 401fb2 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  401f96:	4f1c      	ldr	r7, [pc, #112]	; (402008 <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  401f98:	4e18      	ldr	r6, [pc, #96]	; (401ffc <xTaskResumeAll+0x104>)
  401f9a:	2501      	movs	r5, #1
  401f9c:	e001      	b.n	401fa2 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  401f9e:	3c01      	subs	r4, #1
  401fa0:	d004      	beq.n	401fac <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  401fa2:	47b8      	blx	r7
  401fa4:	2800      	cmp	r0, #0
  401fa6:	d0fa      	beq.n	401f9e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  401fa8:	6035      	str	r5, [r6, #0]
  401faa:	e7f8      	b.n	401f9e <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  401fac:	2200      	movs	r2, #0
  401fae:	4b15      	ldr	r3, [pc, #84]	; (402004 <xTaskResumeAll+0x10c>)
  401fb0:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  401fb2:	4b12      	ldr	r3, [pc, #72]	; (401ffc <xTaskResumeAll+0x104>)
  401fb4:	681b      	ldr	r3, [r3, #0]
  401fb6:	b15b      	cbz	r3, 401fd0 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  401fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fbc:	4b13      	ldr	r3, [pc, #76]	; (40200c <xTaskResumeAll+0x114>)
  401fbe:	601a      	str	r2, [r3, #0]
  401fc0:	f3bf 8f4f 	dsb	sy
  401fc4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  401fc8:	2401      	movs	r4, #1
  401fca:	e7b2      	b.n	401f32 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  401fcc:	2400      	movs	r4, #0
  401fce:	e7b0      	b.n	401f32 <xTaskResumeAll+0x3a>
  401fd0:	2400      	movs	r4, #0
  401fd2:	e7ae      	b.n	401f32 <xTaskResumeAll+0x3a>
  401fd4:	20400ad8 	.word	0x20400ad8
  401fd8:	00400eb5 	.word	0x00400eb5
  401fdc:	20400acc 	.word	0x20400acc
  401fe0:	00400f01 	.word	0x00400f01
  401fe4:	20400b18 	.word	0x20400b18
  401fe8:	00400db5 	.word	0x00400db5
  401fec:	20400ae0 	.word	0x20400ae0
  401ff0:	20400a68 	.word	0x20400a68
  401ff4:	00400d69 	.word	0x00400d69
  401ff8:	20400a5c 	.word	0x20400a5c
  401ffc:	20400b5c 	.word	0x20400b5c
  402000:	004019b1 	.word	0x004019b1
  402004:	20400ad4 	.word	0x20400ad4
  402008:	00401db1 	.word	0x00401db1
  40200c:	e000ed04 	.word	0xe000ed04

00402010 <vTaskDelay>:
	{
  402010:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402012:	b1b8      	cbz	r0, 402044 <vTaskDelay+0x34>
  402014:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402016:	4b10      	ldr	r3, [pc, #64]	; (402058 <vTaskDelay+0x48>)
  402018:	681b      	ldr	r3, [r3, #0]
  40201a:	b153      	cbz	r3, 402032 <vTaskDelay+0x22>
  40201c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402020:	b672      	cpsid	i
  402022:	f383 8811 	msr	BASEPRI, r3
  402026:	f3bf 8f6f 	isb	sy
  40202a:	f3bf 8f4f 	dsb	sy
  40202e:	b662      	cpsie	i
  402030:	e7fe      	b.n	402030 <vTaskDelay+0x20>
			vTaskSuspendAll();
  402032:	4b0a      	ldr	r3, [pc, #40]	; (40205c <vTaskDelay+0x4c>)
  402034:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  402036:	2100      	movs	r1, #0
  402038:	4620      	mov	r0, r4
  40203a:	4b09      	ldr	r3, [pc, #36]	; (402060 <vTaskDelay+0x50>)
  40203c:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40203e:	4b09      	ldr	r3, [pc, #36]	; (402064 <vTaskDelay+0x54>)
  402040:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402042:	b938      	cbnz	r0, 402054 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  402044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402048:	4b07      	ldr	r3, [pc, #28]	; (402068 <vTaskDelay+0x58>)
  40204a:	601a      	str	r2, [r3, #0]
  40204c:	f3bf 8f4f 	dsb	sy
  402050:	f3bf 8f6f 	isb	sy
  402054:	bd10      	pop	{r4, pc}
  402056:	bf00      	nop
  402058:	20400ad8 	.word	0x20400ad8
  40205c:	00401d95 	.word	0x00401d95
  402060:	004019dd 	.word	0x004019dd
  402064:	00401ef9 	.word	0x00401ef9
  402068:	e000ed04 	.word	0xe000ed04

0040206c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40206c:	4b2d      	ldr	r3, [pc, #180]	; (402124 <vTaskSwitchContext+0xb8>)
  40206e:	681b      	ldr	r3, [r3, #0]
  402070:	2b00      	cmp	r3, #0
  402072:	d12c      	bne.n	4020ce <vTaskSwitchContext+0x62>
{
  402074:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402076:	2200      	movs	r2, #0
  402078:	4b2b      	ldr	r3, [pc, #172]	; (402128 <vTaskSwitchContext+0xbc>)
  40207a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  40207c:	4b2b      	ldr	r3, [pc, #172]	; (40212c <vTaskSwitchContext+0xc0>)
  40207e:	681b      	ldr	r3, [r3, #0]
  402080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402082:	681a      	ldr	r2, [r3, #0]
  402084:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402088:	d103      	bne.n	402092 <vTaskSwitchContext+0x26>
  40208a:	685a      	ldr	r2, [r3, #4]
  40208c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402090:	d021      	beq.n	4020d6 <vTaskSwitchContext+0x6a>
  402092:	4b26      	ldr	r3, [pc, #152]	; (40212c <vTaskSwitchContext+0xc0>)
  402094:	6818      	ldr	r0, [r3, #0]
  402096:	6819      	ldr	r1, [r3, #0]
  402098:	3134      	adds	r1, #52	; 0x34
  40209a:	4b25      	ldr	r3, [pc, #148]	; (402130 <vTaskSwitchContext+0xc4>)
  40209c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40209e:	4b25      	ldr	r3, [pc, #148]	; (402134 <vTaskSwitchContext+0xc8>)
  4020a0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  4020a2:	fab3 f383 	clz	r3, r3
  4020a6:	b2db      	uxtb	r3, r3
  4020a8:	f1c3 031f 	rsb	r3, r3, #31
  4020ac:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4020b0:	0092      	lsls	r2, r2, #2
  4020b2:	4921      	ldr	r1, [pc, #132]	; (402138 <vTaskSwitchContext+0xcc>)
  4020b4:	588a      	ldr	r2, [r1, r2]
  4020b6:	b9ba      	cbnz	r2, 4020e8 <vTaskSwitchContext+0x7c>
	__asm volatile
  4020b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020bc:	b672      	cpsid	i
  4020be:	f383 8811 	msr	BASEPRI, r3
  4020c2:	f3bf 8f6f 	isb	sy
  4020c6:	f3bf 8f4f 	dsb	sy
  4020ca:	b662      	cpsie	i
  4020cc:	e7fe      	b.n	4020cc <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4020ce:	2201      	movs	r2, #1
  4020d0:	4b15      	ldr	r3, [pc, #84]	; (402128 <vTaskSwitchContext+0xbc>)
  4020d2:	601a      	str	r2, [r3, #0]
  4020d4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4020d6:	689a      	ldr	r2, [r3, #8]
  4020d8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4020dc:	d1d9      	bne.n	402092 <vTaskSwitchContext+0x26>
  4020de:	68db      	ldr	r3, [r3, #12]
  4020e0:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  4020e4:	d1d5      	bne.n	402092 <vTaskSwitchContext+0x26>
  4020e6:	e7da      	b.n	40209e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4020e8:	4a13      	ldr	r2, [pc, #76]	; (402138 <vTaskSwitchContext+0xcc>)
  4020ea:	0099      	lsls	r1, r3, #2
  4020ec:	18c8      	adds	r0, r1, r3
  4020ee:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  4020f2:	6844      	ldr	r4, [r0, #4]
  4020f4:	6864      	ldr	r4, [r4, #4]
  4020f6:	6044      	str	r4, [r0, #4]
  4020f8:	4419      	add	r1, r3
  4020fa:	4602      	mov	r2, r0
  4020fc:	3208      	adds	r2, #8
  4020fe:	4294      	cmp	r4, r2
  402100:	d009      	beq.n	402116 <vTaskSwitchContext+0xaa>
  402102:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402106:	4a0c      	ldr	r2, [pc, #48]	; (402138 <vTaskSwitchContext+0xcc>)
  402108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40210c:	685b      	ldr	r3, [r3, #4]
  40210e:	68da      	ldr	r2, [r3, #12]
  402110:	4b06      	ldr	r3, [pc, #24]	; (40212c <vTaskSwitchContext+0xc0>)
  402112:	601a      	str	r2, [r3, #0]
  402114:	bd10      	pop	{r4, pc}
  402116:	6860      	ldr	r0, [r4, #4]
  402118:	4a07      	ldr	r2, [pc, #28]	; (402138 <vTaskSwitchContext+0xcc>)
  40211a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40211e:	6050      	str	r0, [r2, #4]
  402120:	e7ef      	b.n	402102 <vTaskSwitchContext+0x96>
  402122:	bf00      	nop
  402124:	20400ad8 	.word	0x20400ad8
  402128:	20400b5c 	.word	0x20400b5c
  40212c:	20400a5c 	.word	0x20400a5c
  402130:	004029e9 	.word	0x004029e9
  402134:	20400ae0 	.word	0x20400ae0
  402138:	20400a68 	.word	0x20400a68

0040213c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  40213c:	b950      	cbnz	r0, 402154 <vTaskPlaceOnEventList+0x18>
  40213e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402142:	b672      	cpsid	i
  402144:	f383 8811 	msr	BASEPRI, r3
  402148:	f3bf 8f6f 	isb	sy
  40214c:	f3bf 8f4f 	dsb	sy
  402150:	b662      	cpsie	i
  402152:	e7fe      	b.n	402152 <vTaskPlaceOnEventList+0x16>
{
  402154:	b510      	push	{r4, lr}
  402156:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402158:	4b04      	ldr	r3, [pc, #16]	; (40216c <vTaskPlaceOnEventList+0x30>)
  40215a:	6819      	ldr	r1, [r3, #0]
  40215c:	3118      	adds	r1, #24
  40215e:	4b04      	ldr	r3, [pc, #16]	; (402170 <vTaskPlaceOnEventList+0x34>)
  402160:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  402162:	2101      	movs	r1, #1
  402164:	4620      	mov	r0, r4
  402166:	4b03      	ldr	r3, [pc, #12]	; (402174 <vTaskPlaceOnEventList+0x38>)
  402168:	4798      	blx	r3
  40216a:	bd10      	pop	{r4, pc}
  40216c:	20400a5c 	.word	0x20400a5c
  402170:	00400d81 	.word	0x00400d81
  402174:	004019dd 	.word	0x004019dd

00402178 <vTaskPlaceOnEventListRestricted>:
	{
  402178:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  40217a:	b178      	cbz	r0, 40219c <vTaskPlaceOnEventListRestricted+0x24>
  40217c:	4614      	mov	r4, r2
  40217e:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402180:	4b0c      	ldr	r3, [pc, #48]	; (4021b4 <vTaskPlaceOnEventListRestricted+0x3c>)
  402182:	6819      	ldr	r1, [r3, #0]
  402184:	3118      	adds	r1, #24
  402186:	4b0c      	ldr	r3, [pc, #48]	; (4021b8 <vTaskPlaceOnEventListRestricted+0x40>)
  402188:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  40218a:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  40218c:	4621      	mov	r1, r4
  40218e:	bf0c      	ite	eq
  402190:	4628      	moveq	r0, r5
  402192:	f04f 30ff 	movne.w	r0, #4294967295
  402196:	4b09      	ldr	r3, [pc, #36]	; (4021bc <vTaskPlaceOnEventListRestricted+0x44>)
  402198:	4798      	blx	r3
  40219a:	bd38      	pop	{r3, r4, r5, pc}
  40219c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021a0:	b672      	cpsid	i
  4021a2:	f383 8811 	msr	BASEPRI, r3
  4021a6:	f3bf 8f6f 	isb	sy
  4021aa:	f3bf 8f4f 	dsb	sy
  4021ae:	b662      	cpsie	i
  4021b0:	e7fe      	b.n	4021b0 <vTaskPlaceOnEventListRestricted+0x38>
  4021b2:	bf00      	nop
  4021b4:	20400a5c 	.word	0x20400a5c
  4021b8:	00400d69 	.word	0x00400d69
  4021bc:	004019dd 	.word	0x004019dd

004021c0 <xTaskRemoveFromEventList>:
{
  4021c0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4021c2:	68c3      	ldr	r3, [r0, #12]
  4021c4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4021c6:	b324      	cbz	r4, 402212 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4021c8:	f104 0518 	add.w	r5, r4, #24
  4021cc:	4628      	mov	r0, r5
  4021ce:	4b1a      	ldr	r3, [pc, #104]	; (402238 <xTaskRemoveFromEventList+0x78>)
  4021d0:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4021d2:	4b1a      	ldr	r3, [pc, #104]	; (40223c <xTaskRemoveFromEventList+0x7c>)
  4021d4:	681b      	ldr	r3, [r3, #0]
  4021d6:	bb3b      	cbnz	r3, 402228 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  4021d8:	1d25      	adds	r5, r4, #4
  4021da:	4628      	mov	r0, r5
  4021dc:	4b16      	ldr	r3, [pc, #88]	; (402238 <xTaskRemoveFromEventList+0x78>)
  4021de:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4021e0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4021e2:	4a17      	ldr	r2, [pc, #92]	; (402240 <xTaskRemoveFromEventList+0x80>)
  4021e4:	6811      	ldr	r1, [r2, #0]
  4021e6:	2301      	movs	r3, #1
  4021e8:	4083      	lsls	r3, r0
  4021ea:	430b      	orrs	r3, r1
  4021ec:	6013      	str	r3, [r2, #0]
  4021ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021f2:	4629      	mov	r1, r5
  4021f4:	4b13      	ldr	r3, [pc, #76]	; (402244 <xTaskRemoveFromEventList+0x84>)
  4021f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4021fa:	4b13      	ldr	r3, [pc, #76]	; (402248 <xTaskRemoveFromEventList+0x88>)
  4021fc:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4021fe:	4b13      	ldr	r3, [pc, #76]	; (40224c <xTaskRemoveFromEventList+0x8c>)
  402200:	681b      	ldr	r3, [r3, #0]
  402202:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402206:	429a      	cmp	r2, r3
  402208:	d913      	bls.n	402232 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40220a:	2001      	movs	r0, #1
  40220c:	4b10      	ldr	r3, [pc, #64]	; (402250 <xTaskRemoveFromEventList+0x90>)
  40220e:	6018      	str	r0, [r3, #0]
  402210:	bd38      	pop	{r3, r4, r5, pc}
  402212:	f04f 0380 	mov.w	r3, #128	; 0x80
  402216:	b672      	cpsid	i
  402218:	f383 8811 	msr	BASEPRI, r3
  40221c:	f3bf 8f6f 	isb	sy
  402220:	f3bf 8f4f 	dsb	sy
  402224:	b662      	cpsie	i
  402226:	e7fe      	b.n	402226 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402228:	4629      	mov	r1, r5
  40222a:	480a      	ldr	r0, [pc, #40]	; (402254 <xTaskRemoveFromEventList+0x94>)
  40222c:	4b06      	ldr	r3, [pc, #24]	; (402248 <xTaskRemoveFromEventList+0x88>)
  40222e:	4798      	blx	r3
  402230:	e7e5      	b.n	4021fe <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402232:	2000      	movs	r0, #0
}
  402234:	bd38      	pop	{r3, r4, r5, pc}
  402236:	bf00      	nop
  402238:	00400db5 	.word	0x00400db5
  40223c:	20400ad8 	.word	0x20400ad8
  402240:	20400ae0 	.word	0x20400ae0
  402244:	20400a68 	.word	0x20400a68
  402248:	00400d69 	.word	0x00400d69
  40224c:	20400a5c 	.word	0x20400a5c
  402250:	20400b5c 	.word	0x20400b5c
  402254:	20400b18 	.word	0x20400b18

00402258 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402258:	4b03      	ldr	r3, [pc, #12]	; (402268 <vTaskInternalSetTimeOutState+0x10>)
  40225a:	681b      	ldr	r3, [r3, #0]
  40225c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40225e:	4b03      	ldr	r3, [pc, #12]	; (40226c <vTaskInternalSetTimeOutState+0x14>)
  402260:	681b      	ldr	r3, [r3, #0]
  402262:	6043      	str	r3, [r0, #4]
  402264:	4770      	bx	lr
  402266:	bf00      	nop
  402268:	20400b14 	.word	0x20400b14
  40226c:	20400b58 	.word	0x20400b58

00402270 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  402270:	b1a8      	cbz	r0, 40229e <xTaskCheckForTimeOut+0x2e>
{
  402272:	b570      	push	{r4, r5, r6, lr}
  402274:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  402276:	b1e9      	cbz	r1, 4022b4 <xTaskCheckForTimeOut+0x44>
  402278:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  40227a:	4b1d      	ldr	r3, [pc, #116]	; (4022f0 <xTaskCheckForTimeOut+0x80>)
  40227c:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  40227e:	4b1d      	ldr	r3, [pc, #116]	; (4022f4 <xTaskCheckForTimeOut+0x84>)
  402280:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402282:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  402284:	6823      	ldr	r3, [r4, #0]
  402286:	f1b3 3fff 	cmp.w	r3, #4294967295
  40228a:	d02f      	beq.n	4022ec <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40228c:	481a      	ldr	r0, [pc, #104]	; (4022f8 <xTaskCheckForTimeOut+0x88>)
  40228e:	6800      	ldr	r0, [r0, #0]
  402290:	682e      	ldr	r6, [r5, #0]
  402292:	4286      	cmp	r6, r0
  402294:	d019      	beq.n	4022ca <xTaskCheckForTimeOut+0x5a>
  402296:	428a      	cmp	r2, r1
  402298:	d317      	bcc.n	4022ca <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  40229a:	2401      	movs	r4, #1
  40229c:	e01b      	b.n	4022d6 <xTaskCheckForTimeOut+0x66>
  40229e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022a2:	b672      	cpsid	i
  4022a4:	f383 8811 	msr	BASEPRI, r3
  4022a8:	f3bf 8f6f 	isb	sy
  4022ac:	f3bf 8f4f 	dsb	sy
  4022b0:	b662      	cpsie	i
  4022b2:	e7fe      	b.n	4022b2 <xTaskCheckForTimeOut+0x42>
  4022b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022b8:	b672      	cpsid	i
  4022ba:	f383 8811 	msr	BASEPRI, r3
  4022be:	f3bf 8f6f 	isb	sy
  4022c2:	f3bf 8f4f 	dsb	sy
  4022c6:	b662      	cpsie	i
  4022c8:	e7fe      	b.n	4022c8 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4022ca:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  4022cc:	429a      	cmp	r2, r3
  4022ce:	d306      	bcc.n	4022de <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  4022d0:	2300      	movs	r3, #0
  4022d2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  4022d4:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  4022d6:	4b09      	ldr	r3, [pc, #36]	; (4022fc <xTaskCheckForTimeOut+0x8c>)
  4022d8:	4798      	blx	r3
}
  4022da:	4620      	mov	r0, r4
  4022dc:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  4022de:	1a9b      	subs	r3, r3, r2
  4022e0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  4022e2:	4628      	mov	r0, r5
  4022e4:	4b06      	ldr	r3, [pc, #24]	; (402300 <xTaskCheckForTimeOut+0x90>)
  4022e6:	4798      	blx	r3
			xReturn = pdFALSE;
  4022e8:	2400      	movs	r4, #0
  4022ea:	e7f4      	b.n	4022d6 <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  4022ec:	2400      	movs	r4, #0
  4022ee:	e7f2      	b.n	4022d6 <xTaskCheckForTimeOut+0x66>
  4022f0:	00400eb5 	.word	0x00400eb5
  4022f4:	20400b58 	.word	0x20400b58
  4022f8:	20400b14 	.word	0x20400b14
  4022fc:	00400f01 	.word	0x00400f01
  402300:	00402259 	.word	0x00402259

00402304 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402304:	2201      	movs	r2, #1
  402306:	4b01      	ldr	r3, [pc, #4]	; (40230c <vTaskMissedYield+0x8>)
  402308:	601a      	str	r2, [r3, #0]
  40230a:	4770      	bx	lr
  40230c:	20400b5c 	.word	0x20400b5c

00402310 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  402310:	4b05      	ldr	r3, [pc, #20]	; (402328 <xTaskGetSchedulerState+0x18>)
  402312:	681b      	ldr	r3, [r3, #0]
  402314:	b133      	cbz	r3, 402324 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402316:	4b05      	ldr	r3, [pc, #20]	; (40232c <xTaskGetSchedulerState+0x1c>)
  402318:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  40231a:	2b00      	cmp	r3, #0
  40231c:	bf0c      	ite	eq
  40231e:	2002      	moveq	r0, #2
  402320:	2000      	movne	r0, #0
  402322:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402324:	2001      	movs	r0, #1
	}
  402326:	4770      	bx	lr
  402328:	20400b2c 	.word	0x20400b2c
  40232c:	20400ad8 	.word	0x20400ad8

00402330 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  402330:	2800      	cmp	r0, #0
  402332:	d04d      	beq.n	4023d0 <xTaskPriorityDisinherit+0xa0>
	{
  402334:	b538      	push	{r3, r4, r5, lr}
  402336:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  402338:	4a27      	ldr	r2, [pc, #156]	; (4023d8 <xTaskPriorityDisinherit+0xa8>)
  40233a:	6812      	ldr	r2, [r2, #0]
  40233c:	4290      	cmp	r0, r2
  40233e:	d00a      	beq.n	402356 <xTaskPriorityDisinherit+0x26>
  402340:	f04f 0380 	mov.w	r3, #128	; 0x80
  402344:	b672      	cpsid	i
  402346:	f383 8811 	msr	BASEPRI, r3
  40234a:	f3bf 8f6f 	isb	sy
  40234e:	f3bf 8f4f 	dsb	sy
  402352:	b662      	cpsie	i
  402354:	e7fe      	b.n	402354 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  402356:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402358:	b952      	cbnz	r2, 402370 <xTaskPriorityDisinherit+0x40>
  40235a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40235e:	b672      	cpsid	i
  402360:	f383 8811 	msr	BASEPRI, r3
  402364:	f3bf 8f6f 	isb	sy
  402368:	f3bf 8f4f 	dsb	sy
  40236c:	b662      	cpsie	i
  40236e:	e7fe      	b.n	40236e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402370:	3a01      	subs	r2, #1
  402372:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402374:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402376:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402378:	4288      	cmp	r0, r1
  40237a:	d02b      	beq.n	4023d4 <xTaskPriorityDisinherit+0xa4>
  40237c:	bb52      	cbnz	r2, 4023d4 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  40237e:	1d25      	adds	r5, r4, #4
  402380:	4628      	mov	r0, r5
  402382:	4b16      	ldr	r3, [pc, #88]	; (4023dc <xTaskPriorityDisinherit+0xac>)
  402384:	4798      	blx	r3
  402386:	b968      	cbnz	r0, 4023a4 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402388:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40238a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  40238e:	009b      	lsls	r3, r3, #2
  402390:	4a13      	ldr	r2, [pc, #76]	; (4023e0 <xTaskPriorityDisinherit+0xb0>)
  402392:	58d3      	ldr	r3, [r2, r3]
  402394:	b933      	cbnz	r3, 4023a4 <xTaskPriorityDisinherit+0x74>
  402396:	4813      	ldr	r0, [pc, #76]	; (4023e4 <xTaskPriorityDisinherit+0xb4>)
  402398:	6803      	ldr	r3, [r0, #0]
  40239a:	2201      	movs	r2, #1
  40239c:	408a      	lsls	r2, r1
  40239e:	ea23 0302 	bic.w	r3, r3, r2
  4023a2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  4023a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4023a6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023a8:	f1c0 0305 	rsb	r3, r0, #5
  4023ac:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  4023ae:	4a0d      	ldr	r2, [pc, #52]	; (4023e4 <xTaskPriorityDisinherit+0xb4>)
  4023b0:	6811      	ldr	r1, [r2, #0]
  4023b2:	2401      	movs	r4, #1
  4023b4:	fa04 f300 	lsl.w	r3, r4, r0
  4023b8:	430b      	orrs	r3, r1
  4023ba:	6013      	str	r3, [r2, #0]
  4023bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023c0:	4629      	mov	r1, r5
  4023c2:	4b07      	ldr	r3, [pc, #28]	; (4023e0 <xTaskPriorityDisinherit+0xb0>)
  4023c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023c8:	4b07      	ldr	r3, [pc, #28]	; (4023e8 <xTaskPriorityDisinherit+0xb8>)
  4023ca:	4798      	blx	r3
					xReturn = pdTRUE;
  4023cc:	4620      	mov	r0, r4
  4023ce:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4023d0:	2000      	movs	r0, #0
  4023d2:	4770      	bx	lr
  4023d4:	2000      	movs	r0, #0
	}
  4023d6:	bd38      	pop	{r3, r4, r5, pc}
  4023d8:	20400a5c 	.word	0x20400a5c
  4023dc:	00400db5 	.word	0x00400db5
  4023e0:	20400a68 	.word	0x20400a68
  4023e4:	20400ae0 	.word	0x20400ae0
  4023e8:	00400d69 	.word	0x00400d69

004023ec <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4023ec:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4023ee:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4023f0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4023f2:	4291      	cmp	r1, r2
  4023f4:	d80c      	bhi.n	402410 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023f6:	1ad2      	subs	r2, r2, r3
  4023f8:	6983      	ldr	r3, [r0, #24]
  4023fa:	429a      	cmp	r2, r3
  4023fc:	d301      	bcc.n	402402 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4023fe:	2001      	movs	r0, #1
  402400:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402402:	1d01      	adds	r1, r0, #4
  402404:	4b09      	ldr	r3, [pc, #36]	; (40242c <prvInsertTimerInActiveList+0x40>)
  402406:	6818      	ldr	r0, [r3, #0]
  402408:	4b09      	ldr	r3, [pc, #36]	; (402430 <prvInsertTimerInActiveList+0x44>)
  40240a:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40240c:	2000      	movs	r0, #0
  40240e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402410:	429a      	cmp	r2, r3
  402412:	d203      	bcs.n	40241c <prvInsertTimerInActiveList+0x30>
  402414:	4299      	cmp	r1, r3
  402416:	d301      	bcc.n	40241c <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402418:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  40241a:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40241c:	1d01      	adds	r1, r0, #4
  40241e:	4b05      	ldr	r3, [pc, #20]	; (402434 <prvInsertTimerInActiveList+0x48>)
  402420:	6818      	ldr	r0, [r3, #0]
  402422:	4b03      	ldr	r3, [pc, #12]	; (402430 <prvInsertTimerInActiveList+0x44>)
  402424:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402426:	2000      	movs	r0, #0
  402428:	bd08      	pop	{r3, pc}
  40242a:	bf00      	nop
  40242c:	20400b64 	.word	0x20400b64
  402430:	00400d81 	.word	0x00400d81
  402434:	20400b60 	.word	0x20400b60

00402438 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402438:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  40243a:	4b10      	ldr	r3, [pc, #64]	; (40247c <prvCheckForValidListAndQueue+0x44>)
  40243c:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40243e:	4b10      	ldr	r3, [pc, #64]	; (402480 <prvCheckForValidListAndQueue+0x48>)
  402440:	681b      	ldr	r3, [r3, #0]
  402442:	b113      	cbz	r3, 40244a <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402444:	4b0f      	ldr	r3, [pc, #60]	; (402484 <prvCheckForValidListAndQueue+0x4c>)
  402446:	4798      	blx	r3
  402448:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  40244a:	4d0f      	ldr	r5, [pc, #60]	; (402488 <prvCheckForValidListAndQueue+0x50>)
  40244c:	4628      	mov	r0, r5
  40244e:	4e0f      	ldr	r6, [pc, #60]	; (40248c <prvCheckForValidListAndQueue+0x54>)
  402450:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402452:	4c0f      	ldr	r4, [pc, #60]	; (402490 <prvCheckForValidListAndQueue+0x58>)
  402454:	4620      	mov	r0, r4
  402456:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402458:	4b0e      	ldr	r3, [pc, #56]	; (402494 <prvCheckForValidListAndQueue+0x5c>)
  40245a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  40245c:	4b0e      	ldr	r3, [pc, #56]	; (402498 <prvCheckForValidListAndQueue+0x60>)
  40245e:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402460:	2200      	movs	r2, #0
  402462:	2110      	movs	r1, #16
  402464:	2005      	movs	r0, #5
  402466:	4b0d      	ldr	r3, [pc, #52]	; (40249c <prvCheckForValidListAndQueue+0x64>)
  402468:	4798      	blx	r3
  40246a:	4b05      	ldr	r3, [pc, #20]	; (402480 <prvCheckForValidListAndQueue+0x48>)
  40246c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  40246e:	2800      	cmp	r0, #0
  402470:	d0e8      	beq.n	402444 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402472:	490b      	ldr	r1, [pc, #44]	; (4024a0 <prvCheckForValidListAndQueue+0x68>)
  402474:	4b0b      	ldr	r3, [pc, #44]	; (4024a4 <prvCheckForValidListAndQueue+0x6c>)
  402476:	4798      	blx	r3
  402478:	e7e4      	b.n	402444 <prvCheckForValidListAndQueue+0xc>
  40247a:	bf00      	nop
  40247c:	00400eb5 	.word	0x00400eb5
  402480:	20400b94 	.word	0x20400b94
  402484:	00400f01 	.word	0x00400f01
  402488:	20400b68 	.word	0x20400b68
  40248c:	00400d4d 	.word	0x00400d4d
  402490:	20400b7c 	.word	0x20400b7c
  402494:	20400b60 	.word	0x20400b60
  402498:	20400b64 	.word	0x20400b64
  40249c:	00401421 	.word	0x00401421
  4024a0:	00405ce0 	.word	0x00405ce0
  4024a4:	00401919 	.word	0x00401919

004024a8 <xTimerCreateTimerTask>:
{
  4024a8:	b510      	push	{r4, lr}
  4024aa:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  4024ac:	4b0e      	ldr	r3, [pc, #56]	; (4024e8 <xTimerCreateTimerTask+0x40>)
  4024ae:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4024b0:	4b0e      	ldr	r3, [pc, #56]	; (4024ec <xTimerCreateTimerTask+0x44>)
  4024b2:	681b      	ldr	r3, [r3, #0]
  4024b4:	b16b      	cbz	r3, 4024d2 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  4024b6:	4b0e      	ldr	r3, [pc, #56]	; (4024f0 <xTimerCreateTimerTask+0x48>)
  4024b8:	9301      	str	r3, [sp, #4]
  4024ba:	2304      	movs	r3, #4
  4024bc:	9300      	str	r3, [sp, #0]
  4024be:	2300      	movs	r3, #0
  4024c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  4024c4:	490b      	ldr	r1, [pc, #44]	; (4024f4 <xTimerCreateTimerTask+0x4c>)
  4024c6:	480c      	ldr	r0, [pc, #48]	; (4024f8 <xTimerCreateTimerTask+0x50>)
  4024c8:	4c0c      	ldr	r4, [pc, #48]	; (4024fc <xTimerCreateTimerTask+0x54>)
  4024ca:	47a0      	blx	r4
	configASSERT( xReturn );
  4024cc:	b108      	cbz	r0, 4024d2 <xTimerCreateTimerTask+0x2a>
}
  4024ce:	b002      	add	sp, #8
  4024d0:	bd10      	pop	{r4, pc}
  4024d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024d6:	b672      	cpsid	i
  4024d8:	f383 8811 	msr	BASEPRI, r3
  4024dc:	f3bf 8f6f 	isb	sy
  4024e0:	f3bf 8f4f 	dsb	sy
  4024e4:	b662      	cpsie	i
  4024e6:	e7fe      	b.n	4024e6 <xTimerCreateTimerTask+0x3e>
  4024e8:	00402439 	.word	0x00402439
  4024ec:	20400b94 	.word	0x20400b94
  4024f0:	20400b98 	.word	0x20400b98
  4024f4:	00405ce8 	.word	0x00405ce8
  4024f8:	00402629 	.word	0x00402629
  4024fc:	00401b09 	.word	0x00401b09

00402500 <xTimerGenericCommand>:
	configASSERT( xTimer );
  402500:	b1d8      	cbz	r0, 40253a <xTimerGenericCommand+0x3a>
{
  402502:	b530      	push	{r4, r5, lr}
  402504:	b085      	sub	sp, #20
  402506:	4615      	mov	r5, r2
  402508:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40250a:	4a15      	ldr	r2, [pc, #84]	; (402560 <xTimerGenericCommand+0x60>)
  40250c:	6810      	ldr	r0, [r2, #0]
  40250e:	b320      	cbz	r0, 40255a <xTimerGenericCommand+0x5a>
  402510:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402512:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402514:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402516:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402518:	2905      	cmp	r1, #5
  40251a:	dc19      	bgt.n	402550 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40251c:	4b11      	ldr	r3, [pc, #68]	; (402564 <xTimerGenericCommand+0x64>)
  40251e:	4798      	blx	r3
  402520:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402522:	f04f 0300 	mov.w	r3, #0
  402526:	bf0c      	ite	eq
  402528:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40252a:	461a      	movne	r2, r3
  40252c:	4669      	mov	r1, sp
  40252e:	480c      	ldr	r0, [pc, #48]	; (402560 <xTimerGenericCommand+0x60>)
  402530:	6800      	ldr	r0, [r0, #0]
  402532:	4c0d      	ldr	r4, [pc, #52]	; (402568 <xTimerGenericCommand+0x68>)
  402534:	47a0      	blx	r4
}
  402536:	b005      	add	sp, #20
  402538:	bd30      	pop	{r4, r5, pc}
  40253a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40253e:	b672      	cpsid	i
  402540:	f383 8811 	msr	BASEPRI, r3
  402544:	f3bf 8f6f 	isb	sy
  402548:	f3bf 8f4f 	dsb	sy
  40254c:	b662      	cpsie	i
  40254e:	e7fe      	b.n	40254e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402550:	2300      	movs	r3, #0
  402552:	4669      	mov	r1, sp
  402554:	4c05      	ldr	r4, [pc, #20]	; (40256c <xTimerGenericCommand+0x6c>)
  402556:	47a0      	blx	r4
  402558:	e7ed      	b.n	402536 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  40255a:	2000      	movs	r0, #0
	return xReturn;
  40255c:	e7eb      	b.n	402536 <xTimerGenericCommand+0x36>
  40255e:	bf00      	nop
  402560:	20400b94 	.word	0x20400b94
  402564:	00402311 	.word	0x00402311
  402568:	0040147d 	.word	0x0040147d
  40256c:	0040166d 	.word	0x0040166d

00402570 <prvSampleTimeNow>:
{
  402570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402574:	b082      	sub	sp, #8
  402576:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402578:	4b24      	ldr	r3, [pc, #144]	; (40260c <prvSampleTimeNow+0x9c>)
  40257a:	4798      	blx	r3
  40257c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40257e:	4b24      	ldr	r3, [pc, #144]	; (402610 <prvSampleTimeNow+0xa0>)
  402580:	681b      	ldr	r3, [r3, #0]
  402582:	4298      	cmp	r0, r3
  402584:	d31b      	bcc.n	4025be <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402586:	2300      	movs	r3, #0
  402588:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  40258c:	4b20      	ldr	r3, [pc, #128]	; (402610 <prvSampleTimeNow+0xa0>)
  40258e:	601f      	str	r7, [r3, #0]
}
  402590:	4638      	mov	r0, r7
  402592:	b002      	add	sp, #8
  402594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402598:	2100      	movs	r1, #0
  40259a:	9100      	str	r1, [sp, #0]
  40259c:	460b      	mov	r3, r1
  40259e:	4652      	mov	r2, sl
  4025a0:	4620      	mov	r0, r4
  4025a2:	4c1c      	ldr	r4, [pc, #112]	; (402614 <prvSampleTimeNow+0xa4>)
  4025a4:	47a0      	blx	r4
				configASSERT( xResult );
  4025a6:	b960      	cbnz	r0, 4025c2 <prvSampleTimeNow+0x52>
  4025a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ac:	b672      	cpsid	i
  4025ae:	f383 8811 	msr	BASEPRI, r3
  4025b2:	f3bf 8f6f 	isb	sy
  4025b6:	f3bf 8f4f 	dsb	sy
  4025ba:	b662      	cpsie	i
  4025bc:	e7fe      	b.n	4025bc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4025be:	4d16      	ldr	r5, [pc, #88]	; (402618 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025c0:	4e16      	ldr	r6, [pc, #88]	; (40261c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4025c2:	682b      	ldr	r3, [r5, #0]
  4025c4:	681a      	ldr	r2, [r3, #0]
  4025c6:	b1c2      	cbz	r2, 4025fa <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025c8:	68db      	ldr	r3, [r3, #12]
  4025ca:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4025ce:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4025d0:	f104 0904 	add.w	r9, r4, #4
  4025d4:	4648      	mov	r0, r9
  4025d6:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4025d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4025da:	4620      	mov	r0, r4
  4025dc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4025de:	69e3      	ldr	r3, [r4, #28]
  4025e0:	2b01      	cmp	r3, #1
  4025e2:	d1ee      	bne.n	4025c2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4025e4:	69a3      	ldr	r3, [r4, #24]
  4025e6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4025e8:	459a      	cmp	sl, r3
  4025ea:	d2d5      	bcs.n	402598 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4025ec:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4025ee:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4025f0:	4649      	mov	r1, r9
  4025f2:	6828      	ldr	r0, [r5, #0]
  4025f4:	4b0a      	ldr	r3, [pc, #40]	; (402620 <prvSampleTimeNow+0xb0>)
  4025f6:	4798      	blx	r3
  4025f8:	e7e3      	b.n	4025c2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  4025fa:	4a0a      	ldr	r2, [pc, #40]	; (402624 <prvSampleTimeNow+0xb4>)
  4025fc:	6810      	ldr	r0, [r2, #0]
  4025fe:	4906      	ldr	r1, [pc, #24]	; (402618 <prvSampleTimeNow+0xa8>)
  402600:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402602:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402604:	2301      	movs	r3, #1
  402606:	f8c8 3000 	str.w	r3, [r8]
  40260a:	e7bf      	b.n	40258c <prvSampleTimeNow+0x1c>
  40260c:	00401da5 	.word	0x00401da5
  402610:	20400b90 	.word	0x20400b90
  402614:	00402501 	.word	0x00402501
  402618:	20400b60 	.word	0x20400b60
  40261c:	00400db5 	.word	0x00400db5
  402620:	00400d81 	.word	0x00400d81
  402624:	20400b64 	.word	0x20400b64

00402628 <prvTimerTask>:
{
  402628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40262c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40262e:	4e75      	ldr	r6, [pc, #468]	; (402804 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402630:	4f75      	ldr	r7, [pc, #468]	; (402808 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402632:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402830 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402636:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402834 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40263a:	6833      	ldr	r3, [r6, #0]
  40263c:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40263e:	2a00      	cmp	r2, #0
  402640:	f000 80ce 	beq.w	4027e0 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402644:	68db      	ldr	r3, [r3, #12]
  402646:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402648:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40264a:	a804      	add	r0, sp, #16
  40264c:	4b6f      	ldr	r3, [pc, #444]	; (40280c <prvTimerTask+0x1e4>)
  40264e:	4798      	blx	r3
  402650:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402652:	9b04      	ldr	r3, [sp, #16]
  402654:	2b00      	cmp	r3, #0
  402656:	d144      	bne.n	4026e2 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402658:	42a0      	cmp	r0, r4
  40265a:	d212      	bcs.n	402682 <prvTimerTask+0x5a>
  40265c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40265e:	1b61      	subs	r1, r4, r5
  402660:	4b6b      	ldr	r3, [pc, #428]	; (402810 <prvTimerTask+0x1e8>)
  402662:	6818      	ldr	r0, [r3, #0]
  402664:	4b6b      	ldr	r3, [pc, #428]	; (402814 <prvTimerTask+0x1ec>)
  402666:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402668:	4b6b      	ldr	r3, [pc, #428]	; (402818 <prvTimerTask+0x1f0>)
  40266a:	4798      	blx	r3
  40266c:	2800      	cmp	r0, #0
  40266e:	d13a      	bne.n	4026e6 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402674:	f8c9 3000 	str.w	r3, [r9]
  402678:	f3bf 8f4f 	dsb	sy
  40267c:	f3bf 8f6f 	isb	sy
  402680:	e031      	b.n	4026e6 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402682:	4b65      	ldr	r3, [pc, #404]	; (402818 <prvTimerTask+0x1f0>)
  402684:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402686:	6833      	ldr	r3, [r6, #0]
  402688:	68db      	ldr	r3, [r3, #12]
  40268a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40268e:	f10a 0004 	add.w	r0, sl, #4
  402692:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402694:	f8da 301c 	ldr.w	r3, [sl, #28]
  402698:	2b01      	cmp	r3, #1
  40269a:	d004      	beq.n	4026a6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40269c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4026a0:	4650      	mov	r0, sl
  4026a2:	4798      	blx	r3
  4026a4:	e01f      	b.n	4026e6 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  4026a6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4026aa:	4623      	mov	r3, r4
  4026ac:	462a      	mov	r2, r5
  4026ae:	4421      	add	r1, r4
  4026b0:	4650      	mov	r0, sl
  4026b2:	4d5a      	ldr	r5, [pc, #360]	; (40281c <prvTimerTask+0x1f4>)
  4026b4:	47a8      	blx	r5
  4026b6:	2800      	cmp	r0, #0
  4026b8:	d0f0      	beq.n	40269c <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4026ba:	2100      	movs	r1, #0
  4026bc:	9100      	str	r1, [sp, #0]
  4026be:	460b      	mov	r3, r1
  4026c0:	4622      	mov	r2, r4
  4026c2:	4650      	mov	r0, sl
  4026c4:	4c56      	ldr	r4, [pc, #344]	; (402820 <prvTimerTask+0x1f8>)
  4026c6:	47a0      	blx	r4
			configASSERT( xResult );
  4026c8:	2800      	cmp	r0, #0
  4026ca:	d1e7      	bne.n	40269c <prvTimerTask+0x74>
  4026cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026d0:	b672      	cpsid	i
  4026d2:	f383 8811 	msr	BASEPRI, r3
  4026d6:	f3bf 8f6f 	isb	sy
  4026da:	f3bf 8f4f 	dsb	sy
  4026de:	b662      	cpsie	i
  4026e0:	e7fe      	b.n	4026e0 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4026e2:	4b4d      	ldr	r3, [pc, #308]	; (402818 <prvTimerTask+0x1f0>)
  4026e4:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026e6:	4d4a      	ldr	r5, [pc, #296]	; (402810 <prvTimerTask+0x1e8>)
  4026e8:	4c4e      	ldr	r4, [pc, #312]	; (402824 <prvTimerTask+0x1fc>)
  4026ea:	e006      	b.n	4026fa <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4026ec:	9907      	ldr	r1, [sp, #28]
  4026ee:	9806      	ldr	r0, [sp, #24]
  4026f0:	9b05      	ldr	r3, [sp, #20]
  4026f2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4026f4:	9b04      	ldr	r3, [sp, #16]
  4026f6:	2b00      	cmp	r3, #0
  4026f8:	da08      	bge.n	40270c <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4026fa:	2200      	movs	r2, #0
  4026fc:	a904      	add	r1, sp, #16
  4026fe:	6828      	ldr	r0, [r5, #0]
  402700:	47a0      	blx	r4
  402702:	2800      	cmp	r0, #0
  402704:	d099      	beq.n	40263a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402706:	9b04      	ldr	r3, [sp, #16]
  402708:	2b00      	cmp	r3, #0
  40270a:	dbef      	blt.n	4026ec <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40270c:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  402710:	f8da 3014 	ldr.w	r3, [sl, #20]
  402714:	b113      	cbz	r3, 40271c <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402716:	f10a 0004 	add.w	r0, sl, #4
  40271a:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40271c:	a803      	add	r0, sp, #12
  40271e:	4b3b      	ldr	r3, [pc, #236]	; (40280c <prvTimerTask+0x1e4>)
  402720:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402722:	9b04      	ldr	r3, [sp, #16]
  402724:	2b09      	cmp	r3, #9
  402726:	d8e8      	bhi.n	4026fa <prvTimerTask+0xd2>
  402728:	a201      	add	r2, pc, #4	; (adr r2, 402730 <prvTimerTask+0x108>)
  40272a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40272e:	bf00      	nop
  402730:	00402759 	.word	0x00402759
  402734:	00402759 	.word	0x00402759
  402738:	00402759 	.word	0x00402759
  40273c:	004026fb 	.word	0x004026fb
  402740:	004027ad 	.word	0x004027ad
  402744:	004027d9 	.word	0x004027d9
  402748:	00402759 	.word	0x00402759
  40274c:	00402759 	.word	0x00402759
  402750:	004026fb 	.word	0x004026fb
  402754:	004027ad 	.word	0x004027ad
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  402758:	9c05      	ldr	r4, [sp, #20]
  40275a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40275e:	4623      	mov	r3, r4
  402760:	4602      	mov	r2, r0
  402762:	4421      	add	r1, r4
  402764:	4650      	mov	r0, sl
  402766:	4c2d      	ldr	r4, [pc, #180]	; (40281c <prvTimerTask+0x1f4>)
  402768:	47a0      	blx	r4
  40276a:	2800      	cmp	r0, #0
  40276c:	d0bc      	beq.n	4026e8 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40276e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402772:	4650      	mov	r0, sl
  402774:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402776:	f8da 301c 	ldr.w	r3, [sl, #28]
  40277a:	2b01      	cmp	r3, #1
  40277c:	d1b4      	bne.n	4026e8 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40277e:	f8da 2018 	ldr.w	r2, [sl, #24]
  402782:	2100      	movs	r1, #0
  402784:	9100      	str	r1, [sp, #0]
  402786:	460b      	mov	r3, r1
  402788:	9805      	ldr	r0, [sp, #20]
  40278a:	4402      	add	r2, r0
  40278c:	4650      	mov	r0, sl
  40278e:	4c24      	ldr	r4, [pc, #144]	; (402820 <prvTimerTask+0x1f8>)
  402790:	47a0      	blx	r4
							configASSERT( xResult );
  402792:	2800      	cmp	r0, #0
  402794:	d1a8      	bne.n	4026e8 <prvTimerTask+0xc0>
  402796:	f04f 0380 	mov.w	r3, #128	; 0x80
  40279a:	b672      	cpsid	i
  40279c:	f383 8811 	msr	BASEPRI, r3
  4027a0:	f3bf 8f6f 	isb	sy
  4027a4:	f3bf 8f4f 	dsb	sy
  4027a8:	b662      	cpsie	i
  4027aa:	e7fe      	b.n	4027aa <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4027ac:	9905      	ldr	r1, [sp, #20]
  4027ae:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4027b2:	b131      	cbz	r1, 4027c2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4027b4:	4603      	mov	r3, r0
  4027b6:	4602      	mov	r2, r0
  4027b8:	4401      	add	r1, r0
  4027ba:	4650      	mov	r0, sl
  4027bc:	4c17      	ldr	r4, [pc, #92]	; (40281c <prvTimerTask+0x1f4>)
  4027be:	47a0      	blx	r4
  4027c0:	e792      	b.n	4026e8 <prvTimerTask+0xc0>
  4027c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027c6:	b672      	cpsid	i
  4027c8:	f383 8811 	msr	BASEPRI, r3
  4027cc:	f3bf 8f6f 	isb	sy
  4027d0:	f3bf 8f4f 	dsb	sy
  4027d4:	b662      	cpsie	i
  4027d6:	e7fe      	b.n	4027d6 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  4027d8:	4650      	mov	r0, sl
  4027da:	4b13      	ldr	r3, [pc, #76]	; (402828 <prvTimerTask+0x200>)
  4027dc:	4798      	blx	r3
  4027de:	e783      	b.n	4026e8 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4027e0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4027e2:	a804      	add	r0, sp, #16
  4027e4:	4b09      	ldr	r3, [pc, #36]	; (40280c <prvTimerTask+0x1e4>)
  4027e6:	4798      	blx	r3
  4027e8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4027ea:	9b04      	ldr	r3, [sp, #16]
  4027ec:	2b00      	cmp	r3, #0
  4027ee:	f47f af78 	bne.w	4026e2 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4027f2:	4b0e      	ldr	r3, [pc, #56]	; (40282c <prvTimerTask+0x204>)
  4027f4:	681b      	ldr	r3, [r3, #0]
  4027f6:	681a      	ldr	r2, [r3, #0]
  4027f8:	fab2 f282 	clz	r2, r2
  4027fc:	0952      	lsrs	r2, r2, #5
  4027fe:	2400      	movs	r4, #0
  402800:	e72d      	b.n	40265e <prvTimerTask+0x36>
  402802:	bf00      	nop
  402804:	20400b60 	.word	0x20400b60
  402808:	00401d95 	.word	0x00401d95
  40280c:	00402571 	.word	0x00402571
  402810:	20400b94 	.word	0x20400b94
  402814:	0040194d 	.word	0x0040194d
  402818:	00401ef9 	.word	0x00401ef9
  40281c:	004023ed 	.word	0x004023ed
  402820:	00402501 	.word	0x00402501
  402824:	00401781 	.word	0x00401781
  402828:	00401171 	.word	0x00401171
  40282c:	20400b64 	.word	0x20400b64
  402830:	e000ed04 	.word	0xe000ed04
  402834:	00400db5 	.word	0x00400db5

00402838 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402838:	b5f0      	push	{r4, r5, r6, r7, lr}
  40283a:	b083      	sub	sp, #12
  40283c:	4605      	mov	r5, r0
  40283e:	460c      	mov	r4, r1
	uint32_t val = 0;
  402840:	2300      	movs	r3, #0
  402842:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402844:	4b2a      	ldr	r3, [pc, #168]	; (4028f0 <usart_serial_getchar+0xb8>)
  402846:	4298      	cmp	r0, r3
  402848:	d013      	beq.n	402872 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  40284a:	4b2a      	ldr	r3, [pc, #168]	; (4028f4 <usart_serial_getchar+0xbc>)
  40284c:	4298      	cmp	r0, r3
  40284e:	d018      	beq.n	402882 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402850:	4b29      	ldr	r3, [pc, #164]	; (4028f8 <usart_serial_getchar+0xc0>)
  402852:	4298      	cmp	r0, r3
  402854:	d01d      	beq.n	402892 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402856:	4b29      	ldr	r3, [pc, #164]	; (4028fc <usart_serial_getchar+0xc4>)
  402858:	429d      	cmp	r5, r3
  40285a:	d022      	beq.n	4028a2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40285c:	4b28      	ldr	r3, [pc, #160]	; (402900 <usart_serial_getchar+0xc8>)
  40285e:	429d      	cmp	r5, r3
  402860:	d027      	beq.n	4028b2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402862:	4b28      	ldr	r3, [pc, #160]	; (402904 <usart_serial_getchar+0xcc>)
  402864:	429d      	cmp	r5, r3
  402866:	d02e      	beq.n	4028c6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402868:	4b27      	ldr	r3, [pc, #156]	; (402908 <usart_serial_getchar+0xd0>)
  40286a:	429d      	cmp	r5, r3
  40286c:	d035      	beq.n	4028da <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40286e:	b003      	add	sp, #12
  402870:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402872:	461f      	mov	r7, r3
  402874:	4e25      	ldr	r6, [pc, #148]	; (40290c <usart_serial_getchar+0xd4>)
  402876:	4621      	mov	r1, r4
  402878:	4638      	mov	r0, r7
  40287a:	47b0      	blx	r6
  40287c:	2800      	cmp	r0, #0
  40287e:	d1fa      	bne.n	402876 <usart_serial_getchar+0x3e>
  402880:	e7e9      	b.n	402856 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402882:	461f      	mov	r7, r3
  402884:	4e21      	ldr	r6, [pc, #132]	; (40290c <usart_serial_getchar+0xd4>)
  402886:	4621      	mov	r1, r4
  402888:	4638      	mov	r0, r7
  40288a:	47b0      	blx	r6
  40288c:	2800      	cmp	r0, #0
  40288e:	d1fa      	bne.n	402886 <usart_serial_getchar+0x4e>
  402890:	e7e4      	b.n	40285c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402892:	461f      	mov	r7, r3
  402894:	4e1d      	ldr	r6, [pc, #116]	; (40290c <usart_serial_getchar+0xd4>)
  402896:	4621      	mov	r1, r4
  402898:	4638      	mov	r0, r7
  40289a:	47b0      	blx	r6
  40289c:	2800      	cmp	r0, #0
  40289e:	d1fa      	bne.n	402896 <usart_serial_getchar+0x5e>
  4028a0:	e7df      	b.n	402862 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  4028a2:	461f      	mov	r7, r3
  4028a4:	4e19      	ldr	r6, [pc, #100]	; (40290c <usart_serial_getchar+0xd4>)
  4028a6:	4621      	mov	r1, r4
  4028a8:	4638      	mov	r0, r7
  4028aa:	47b0      	blx	r6
  4028ac:	2800      	cmp	r0, #0
  4028ae:	d1fa      	bne.n	4028a6 <usart_serial_getchar+0x6e>
  4028b0:	e7da      	b.n	402868 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4028b2:	461e      	mov	r6, r3
  4028b4:	4d16      	ldr	r5, [pc, #88]	; (402910 <usart_serial_getchar+0xd8>)
  4028b6:	a901      	add	r1, sp, #4
  4028b8:	4630      	mov	r0, r6
  4028ba:	47a8      	blx	r5
  4028bc:	2800      	cmp	r0, #0
  4028be:	d1fa      	bne.n	4028b6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4028c0:	9b01      	ldr	r3, [sp, #4]
  4028c2:	7023      	strb	r3, [r4, #0]
  4028c4:	e7d3      	b.n	40286e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4028c6:	461e      	mov	r6, r3
  4028c8:	4d11      	ldr	r5, [pc, #68]	; (402910 <usart_serial_getchar+0xd8>)
  4028ca:	a901      	add	r1, sp, #4
  4028cc:	4630      	mov	r0, r6
  4028ce:	47a8      	blx	r5
  4028d0:	2800      	cmp	r0, #0
  4028d2:	d1fa      	bne.n	4028ca <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4028d4:	9b01      	ldr	r3, [sp, #4]
  4028d6:	7023      	strb	r3, [r4, #0]
  4028d8:	e7c9      	b.n	40286e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4028da:	461e      	mov	r6, r3
  4028dc:	4d0c      	ldr	r5, [pc, #48]	; (402910 <usart_serial_getchar+0xd8>)
  4028de:	a901      	add	r1, sp, #4
  4028e0:	4630      	mov	r0, r6
  4028e2:	47a8      	blx	r5
  4028e4:	2800      	cmp	r0, #0
  4028e6:	d1fa      	bne.n	4028de <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4028e8:	9b01      	ldr	r3, [sp, #4]
  4028ea:	7023      	strb	r3, [r4, #0]
}
  4028ec:	e7bf      	b.n	40286e <usart_serial_getchar+0x36>
  4028ee:	bf00      	nop
  4028f0:	400e0800 	.word	0x400e0800
  4028f4:	400e0a00 	.word	0x400e0a00
  4028f8:	400e1a00 	.word	0x400e1a00
  4028fc:	400e1c00 	.word	0x400e1c00
  402900:	40024000 	.word	0x40024000
  402904:	40028000 	.word	0x40028000
  402908:	4002c000 	.word	0x4002c000
  40290c:	00400975 	.word	0x00400975
  402910:	00400a83 	.word	0x00400a83

00402914 <usart_serial_putchar>:
{
  402914:	b570      	push	{r4, r5, r6, lr}
  402916:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402918:	4b2a      	ldr	r3, [pc, #168]	; (4029c4 <usart_serial_putchar+0xb0>)
  40291a:	4298      	cmp	r0, r3
  40291c:	d013      	beq.n	402946 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40291e:	4b2a      	ldr	r3, [pc, #168]	; (4029c8 <usart_serial_putchar+0xb4>)
  402920:	4298      	cmp	r0, r3
  402922:	d019      	beq.n	402958 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402924:	4b29      	ldr	r3, [pc, #164]	; (4029cc <usart_serial_putchar+0xb8>)
  402926:	4298      	cmp	r0, r3
  402928:	d01f      	beq.n	40296a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  40292a:	4b29      	ldr	r3, [pc, #164]	; (4029d0 <usart_serial_putchar+0xbc>)
  40292c:	4298      	cmp	r0, r3
  40292e:	d025      	beq.n	40297c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402930:	4b28      	ldr	r3, [pc, #160]	; (4029d4 <usart_serial_putchar+0xc0>)
  402932:	4298      	cmp	r0, r3
  402934:	d02b      	beq.n	40298e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402936:	4b28      	ldr	r3, [pc, #160]	; (4029d8 <usart_serial_putchar+0xc4>)
  402938:	4298      	cmp	r0, r3
  40293a:	d031      	beq.n	4029a0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  40293c:	4b27      	ldr	r3, [pc, #156]	; (4029dc <usart_serial_putchar+0xc8>)
  40293e:	4298      	cmp	r0, r3
  402940:	d037      	beq.n	4029b2 <usart_serial_putchar+0x9e>
	return 0;
  402942:	2000      	movs	r0, #0
}
  402944:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402946:	461e      	mov	r6, r3
  402948:	4d25      	ldr	r5, [pc, #148]	; (4029e0 <usart_serial_putchar+0xcc>)
  40294a:	4621      	mov	r1, r4
  40294c:	4630      	mov	r0, r6
  40294e:	47a8      	blx	r5
  402950:	2800      	cmp	r0, #0
  402952:	d1fa      	bne.n	40294a <usart_serial_putchar+0x36>
		return 1;
  402954:	2001      	movs	r0, #1
  402956:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402958:	461e      	mov	r6, r3
  40295a:	4d21      	ldr	r5, [pc, #132]	; (4029e0 <usart_serial_putchar+0xcc>)
  40295c:	4621      	mov	r1, r4
  40295e:	4630      	mov	r0, r6
  402960:	47a8      	blx	r5
  402962:	2800      	cmp	r0, #0
  402964:	d1fa      	bne.n	40295c <usart_serial_putchar+0x48>
		return 1;
  402966:	2001      	movs	r0, #1
  402968:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40296a:	461e      	mov	r6, r3
  40296c:	4d1c      	ldr	r5, [pc, #112]	; (4029e0 <usart_serial_putchar+0xcc>)
  40296e:	4621      	mov	r1, r4
  402970:	4630      	mov	r0, r6
  402972:	47a8      	blx	r5
  402974:	2800      	cmp	r0, #0
  402976:	d1fa      	bne.n	40296e <usart_serial_putchar+0x5a>
		return 1;
  402978:	2001      	movs	r0, #1
  40297a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  40297c:	461e      	mov	r6, r3
  40297e:	4d18      	ldr	r5, [pc, #96]	; (4029e0 <usart_serial_putchar+0xcc>)
  402980:	4621      	mov	r1, r4
  402982:	4630      	mov	r0, r6
  402984:	47a8      	blx	r5
  402986:	2800      	cmp	r0, #0
  402988:	d1fa      	bne.n	402980 <usart_serial_putchar+0x6c>
		return 1;
  40298a:	2001      	movs	r0, #1
  40298c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40298e:	461e      	mov	r6, r3
  402990:	4d14      	ldr	r5, [pc, #80]	; (4029e4 <usart_serial_putchar+0xd0>)
  402992:	4621      	mov	r1, r4
  402994:	4630      	mov	r0, r6
  402996:	47a8      	blx	r5
  402998:	2800      	cmp	r0, #0
  40299a:	d1fa      	bne.n	402992 <usart_serial_putchar+0x7e>
		return 1;
  40299c:	2001      	movs	r0, #1
  40299e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4029a0:	461e      	mov	r6, r3
  4029a2:	4d10      	ldr	r5, [pc, #64]	; (4029e4 <usart_serial_putchar+0xd0>)
  4029a4:	4621      	mov	r1, r4
  4029a6:	4630      	mov	r0, r6
  4029a8:	47a8      	blx	r5
  4029aa:	2800      	cmp	r0, #0
  4029ac:	d1fa      	bne.n	4029a4 <usart_serial_putchar+0x90>
		return 1;
  4029ae:	2001      	movs	r0, #1
  4029b0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4029b2:	461e      	mov	r6, r3
  4029b4:	4d0b      	ldr	r5, [pc, #44]	; (4029e4 <usart_serial_putchar+0xd0>)
  4029b6:	4621      	mov	r1, r4
  4029b8:	4630      	mov	r0, r6
  4029ba:	47a8      	blx	r5
  4029bc:	2800      	cmp	r0, #0
  4029be:	d1fa      	bne.n	4029b6 <usart_serial_putchar+0xa2>
		return 1;
  4029c0:	2001      	movs	r0, #1
  4029c2:	bd70      	pop	{r4, r5, r6, pc}
  4029c4:	400e0800 	.word	0x400e0800
  4029c8:	400e0a00 	.word	0x400e0a00
  4029cc:	400e1a00 	.word	0x400e1a00
  4029d0:	400e1c00 	.word	0x400e1c00
  4029d4:	40024000 	.word	0x40024000
  4029d8:	40028000 	.word	0x40028000
  4029dc:	4002c000 	.word	0x4002c000
  4029e0:	00400963 	.word	0x00400963
  4029e4:	00400a6d 	.word	0x00400a6d

004029e8 <vApplicationStackOverflowHook>:
extern void vApplicationTickHook(void);
extern void vApplicationMallocFailedHook(void);
extern void xPortSysTickHandler(void);

extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
                                          signed char *pcTaskName) {
  4029e8:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4029ea:	460a      	mov	r2, r1
  4029ec:	4601      	mov	r1, r0
  4029ee:	4802      	ldr	r0, [pc, #8]	; (4029f8 <vApplicationStackOverflowHook+0x10>)
  4029f0:	4b02      	ldr	r3, [pc, #8]	; (4029fc <vApplicationStackOverflowHook+0x14>)
  4029f2:	4798      	blx	r3
  4029f4:	e7fe      	b.n	4029f4 <vApplicationStackOverflowHook+0xc>
  4029f6:	bf00      	nop
  4029f8:	00405da8 	.word	0x00405da8
  4029fc:	00402d85 	.word	0x00402d85

00402a00 <vApplicationIdleHook>:
  for (;;) {
  }
}

extern void vApplicationIdleHook(void) {}
  402a00:	4770      	bx	lr

00402a02 <vApplicationTickHook>:

extern void vApplicationTickHook(void) {}
  402a02:	4770      	bx	lr

00402a04 <vApplicationMallocFailedHook>:
  402a04:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a08:	b672      	cpsid	i
  402a0a:	f383 8811 	msr	BASEPRI, r3
  402a0e:	f3bf 8f6f 	isb	sy
  402a12:	f3bf 8f4f 	dsb	sy
  402a16:	b662      	cpsie	i
  402a18:	e7fe      	b.n	402a18 <vApplicationMallocFailedHook+0x14>
	...

00402a1c <pin_toggle>:

/************************************************************************/
/* Funcoes                                                              */
/************************************************************************/

void pin_toggle(Pio *pio, uint32_t mask) {
  402a1c:	b538      	push	{r3, r4, r5, lr}
  402a1e:	4604      	mov	r4, r0
  402a20:	460d      	mov	r5, r1
  if (pio_get_output_data_status(pio, mask))
  402a22:	4b06      	ldr	r3, [pc, #24]	; (402a3c <pin_toggle+0x20>)
  402a24:	4798      	blx	r3
  402a26:	b920      	cbnz	r0, 402a32 <pin_toggle+0x16>
    pio_clear(pio, mask);
  else
    pio_set(pio, mask);
  402a28:	4629      	mov	r1, r5
  402a2a:	4620      	mov	r0, r4
  402a2c:	4b04      	ldr	r3, [pc, #16]	; (402a40 <pin_toggle+0x24>)
  402a2e:	4798      	blx	r3
  402a30:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  402a32:	4629      	mov	r1, r5
  402a34:	4620      	mov	r0, r4
  402a36:	4b03      	ldr	r3, [pc, #12]	; (402a44 <pin_toggle+0x28>)
  402a38:	4798      	blx	r3
  402a3a:	bd38      	pop	{r3, r4, r5, pc}
  402a3c:	00400527 	.word	0x00400527
  402a40:	00400465 	.word	0x00400465
  402a44:	00400469 	.word	0x00400469

00402a48 <LED_init>:
}

void LED_init(int estado) {
  402a48:	b510      	push	{r4, lr}
  402a4a:	b082      	sub	sp, #8
  402a4c:	4604      	mov	r4, r0
  pmc_enable_periph_clk(LED_PIO_ID);
  402a4e:	200c      	movs	r0, #12
  402a50:	4b05      	ldr	r3, [pc, #20]	; (402a68 <LED_init+0x20>)
  402a52:	4798      	blx	r3
  pio_set_output(LED_PIO, LED_IDX_MASK, estado, 0, 0);
  402a54:	2300      	movs	r3, #0
  402a56:	9300      	str	r3, [sp, #0]
  402a58:	4622      	mov	r2, r4
  402a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
  402a5e:	4803      	ldr	r0, [pc, #12]	; (402a6c <LED_init+0x24>)
  402a60:	4c03      	ldr	r4, [pc, #12]	; (402a70 <LED_init+0x28>)
  402a62:	47a0      	blx	r4
};
  402a64:	b002      	add	sp, #8
  402a66:	bd10      	pop	{r4, pc}
  402a68:	00400711 	.word	0x00400711
  402a6c:	400e1200 	.word	0x400e1200
  402a70:	004004ff 	.word	0x004004ff

00402a74 <task_led>:

/************************************************************************/
/* Tasks                                                                */
/************************************************************************/

static void task_led(void *pvParameters) {
  402a74:	b508      	push	{r3, lr}
  LED_init(1);
  402a76:	2001      	movs	r0, #1
  402a78:	4b06      	ldr	r3, [pc, #24]	; (402a94 <task_led+0x20>)
  402a7a:	4798      	blx	r3
  for (;;) {
    pin_toggle(LED_PIO, LED_IDX_MASK);
  402a7c:	4e06      	ldr	r6, [pc, #24]	; (402a98 <task_led+0x24>)
  402a7e:	4d07      	ldr	r5, [pc, #28]	; (402a9c <task_led+0x28>)
    vTaskDelay(1000);
  402a80:	4c07      	ldr	r4, [pc, #28]	; (402aa0 <task_led+0x2c>)
    pin_toggle(LED_PIO, LED_IDX_MASK);
  402a82:	f44f 7180 	mov.w	r1, #256	; 0x100
  402a86:	4630      	mov	r0, r6
  402a88:	47a8      	blx	r5
    vTaskDelay(1000);
  402a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  402a8e:	47a0      	blx	r4
  402a90:	e7f7      	b.n	402a82 <task_led+0xe>
  402a92:	bf00      	nop
  402a94:	00402a49 	.word	0x00402a49
  402a98:	400e1200 	.word	0x400e1200
  402a9c:	00402a1d 	.word	0x00402a1d
  402aa0:	00402011 	.word	0x00402011

00402aa4 <mcu6050_i2c_bus_init>:
void mcu6050_i2c_bus_init(void){
  402aa4:	b570      	push	{r4, r5, r6, lr}
  402aa6:	b084      	sub	sp, #16
	pmc_enable_periph_clk(ID_PIOD);
  402aa8:	2010      	movs	r0, #16
  402aaa:	4c0e      	ldr	r4, [pc, #56]	; (402ae4 <mcu6050_i2c_bus_init+0x40>)
  402aac:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  402aae:	4e0e      	ldr	r6, [pc, #56]	; (402ae8 <mcu6050_i2c_bus_init+0x44>)
  402ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402ab4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402ab8:	4630      	mov	r0, r6
  402aba:	4d0c      	ldr	r5, [pc, #48]	; (402aec <mcu6050_i2c_bus_init+0x48>)
  402abc:	47a8      	blx	r5
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  402abe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  402ac2:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  402ac6:	4630      	mov	r0, r6
  402ac8:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_TWIHS2);
  402aca:	2029      	movs	r0, #41	; 0x29
  402acc:	47a0      	blx	r4
	mcu6050_option.master_clk = sysclk_get_cpu_hz();
  402ace:	4b08      	ldr	r3, [pc, #32]	; (402af0 <mcu6050_i2c_bus_init+0x4c>)
  402ad0:	9301      	str	r3, [sp, #4]
	mcu6050_option.speed      = 40000;
  402ad2:	f649 4340 	movw	r3, #40000	; 0x9c40
  402ad6:	9302      	str	r3, [sp, #8]
	twihs_master_init(TWIHS2, &mcu6050_option);
  402ad8:	a901      	add	r1, sp, #4
  402ada:	4806      	ldr	r0, [pc, #24]	; (402af4 <mcu6050_i2c_bus_init+0x50>)
  402adc:	4b06      	ldr	r3, [pc, #24]	; (402af8 <mcu6050_i2c_bus_init+0x54>)
  402ade:	4798      	blx	r3
}
  402ae0:	b004      	add	sp, #16
  402ae2:	bd70      	pop	{r4, r5, r6, pc}
  402ae4:	00400711 	.word	0x00400711
  402ae8:	400e1400 	.word	0x400e1400
  402aec:	0040046d 	.word	0x0040046d
  402af0:	11e1a300 	.word	0x11e1a300
  402af4:	40060000 	.word	0x40060000
  402af8:	004007e1 	.word	0x004007e1

00402afc <mcu6050_i2c_bus_write>:
int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt){
  402afc:	b500      	push	{lr}
  402afe:	b087      	sub	sp, #28
    p_packet.chip         = dev_addr;
  402b00:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  402b04:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  402b08:	2101      	movs	r1, #1
  402b0a:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  402b0c:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  402b0e:	9304      	str	r3, [sp, #16]
    ierror = twihs_master_write(TWIHS2, &p_packet);
  402b10:	a901      	add	r1, sp, #4
  402b12:	4803      	ldr	r0, [pc, #12]	; (402b20 <mcu6050_i2c_bus_write+0x24>)
  402b14:	4b03      	ldr	r3, [pc, #12]	; (402b24 <mcu6050_i2c_bus_write+0x28>)
  402b16:	4798      	blx	r3
}
  402b18:	b240      	sxtb	r0, r0
  402b1a:	b007      	add	sp, #28
  402b1c:	f85d fb04 	ldr.w	pc, [sp], #4
  402b20:	40060000 	.word	0x40060000
  402b24:	004008c3 	.word	0x004008c3

00402b28 <mcu6050_i2c_bus_read>:
int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt){
  402b28:	b500      	push	{lr}
  402b2a:	b087      	sub	sp, #28
    p_packet.chip         = dev_addr;
  402b2c:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  402b30:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  402b34:	2101      	movs	r1, #1
  402b36:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  402b38:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  402b3a:	9304      	str	r3, [sp, #16]
    ierror = twihs_master_read(TWIHS2, &p_packet);
  402b3c:	a901      	add	r1, sp, #4
  402b3e:	4803      	ldr	r0, [pc, #12]	; (402b4c <mcu6050_i2c_bus_read+0x24>)
  402b40:	4b03      	ldr	r3, [pc, #12]	; (402b50 <mcu6050_i2c_bus_read+0x28>)
  402b42:	4798      	blx	r3
}
  402b44:	b240      	sxtb	r0, r0
  402b46:	b007      	add	sp, #28
  402b48:	f85d fb04 	ldr.w	pc, [sp], #4
  402b4c:	40060000 	.word	0x40060000
  402b50:	00400815 	.word	0x00400815

00402b54 <task_imu>:
static void task_imu(void *pvParameters) {
  402b54:	b570      	push	{r4, r5, r6, lr}
  402b56:	b086      	sub	sp, #24
	mcu6050_i2c_bus_init();
  402b58:	4b20      	ldr	r3, [pc, #128]	; (402bdc <task_imu+0x88>)
  402b5a:	4798      	blx	r3
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  402b5c:	2301      	movs	r3, #1
  402b5e:	aa06      	add	r2, sp, #24
  402b60:	f802 3d18 	strb.w	r3, [r2, #-24]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  402b64:	216b      	movs	r1, #107	; 0x6b
  402b66:	2068      	movs	r0, #104	; 0x68
  402b68:	4c1d      	ldr	r4, [pc, #116]	; (402be0 <task_imu+0x8c>)
  402b6a:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  402b6c:	bb30      	cbnz	r0, 402bbc <task_imu+0x68>
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT;
  402b6e:	aa06      	add	r2, sp, #24
  402b70:	2300      	movs	r3, #0
  402b72:	f802 3d18 	strb.w	r3, [r2, #-24]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  402b76:	2301      	movs	r3, #1
  402b78:	211c      	movs	r1, #28
  402b7a:	2068      	movs	r0, #104	; 0x68
  402b7c:	4c18      	ldr	r4, [pc, #96]	; (402be0 <task_imu+0x8c>)
  402b7e:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  402b80:	bb00      	cbnz	r0, 402bc4 <task_imu+0x70>
	bufferTX[0] = 0x00; // 250 °/s
  402b82:	aa06      	add	r2, sp, #24
  402b84:	2300      	movs	r3, #0
  402b86:	f802 3d18 	strb.w	r3, [r2, #-24]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  402b8a:	2301      	movs	r3, #1
  402b8c:	211b      	movs	r1, #27
  402b8e:	2068      	movs	r0, #104	; 0x68
  402b90:	4c13      	ldr	r4, [pc, #76]	; (402be0 <task_imu+0x8c>)
  402b92:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  402b94:	b9d0      	cbnz	r0, 402bcc <task_imu+0x78>
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  402b96:	2301      	movs	r3, #1
  402b98:	aa03      	add	r2, sp, #12
  402b9a:	2175      	movs	r1, #117	; 0x75
  402b9c:	2068      	movs	r0, #104	; 0x68
  402b9e:	4c11      	ldr	r4, [pc, #68]	; (402be4 <task_imu+0x90>)
  402ba0:	47a0      	blx	r4
	if(bufferRX[0] == 0x68){
  402ba2:	f89d 300c 	ldrb.w	r3, [sp, #12]
  402ba6:	2b68      	cmp	r3, #104	; 0x68
  402ba8:	d014      	beq.n	402bd4 <task_imu+0x80>
			printf("Erro \n");
  402baa:	4e0f      	ldr	r6, [pc, #60]	; (402be8 <task_imu+0x94>)
  402bac:	4d0f      	ldr	r5, [pc, #60]	; (402bec <task_imu+0x98>)
			delay_ms(1000);
  402bae:	4c10      	ldr	r4, [pc, #64]	; (402bf0 <task_imu+0x9c>)
			printf("Erro \n");
  402bb0:	4630      	mov	r0, r6
  402bb2:	47a8      	blx	r5
			delay_ms(1000);
  402bb4:	4620      	mov	r0, r4
  402bb6:	4b0f      	ldr	r3, [pc, #60]	; (402bf4 <task_imu+0xa0>)
  402bb8:	4798      	blx	r3
  402bba:	e7f9      	b.n	402bb0 <task_imu+0x5c>
		printf("[ERRO] [i2c] [write] \n");
  402bbc:	480e      	ldr	r0, [pc, #56]	; (402bf8 <task_imu+0xa4>)
  402bbe:	4b0b      	ldr	r3, [pc, #44]	; (402bec <task_imu+0x98>)
  402bc0:	4798      	blx	r3
  402bc2:	e7d4      	b.n	402b6e <task_imu+0x1a>
		printf("[ERRO] [i2c] [write] \n");
  402bc4:	480c      	ldr	r0, [pc, #48]	; (402bf8 <task_imu+0xa4>)
  402bc6:	4b09      	ldr	r3, [pc, #36]	; (402bec <task_imu+0x98>)
  402bc8:	4798      	blx	r3
  402bca:	e7da      	b.n	402b82 <task_imu+0x2e>
		printf("[ERRO] [i2c] [write] \n");
  402bcc:	480a      	ldr	r0, [pc, #40]	; (402bf8 <task_imu+0xa4>)
  402bce:	4b07      	ldr	r3, [pc, #28]	; (402bec <task_imu+0x98>)
  402bd0:	4798      	blx	r3
  402bd2:	e7e0      	b.n	402b96 <task_imu+0x42>
		printf("Sucesso \n");
  402bd4:	4809      	ldr	r0, [pc, #36]	; (402bfc <task_imu+0xa8>)
  402bd6:	4b05      	ldr	r3, [pc, #20]	; (402bec <task_imu+0x98>)
  402bd8:	4798      	blx	r3
  402bda:	e7fe      	b.n	402bda <task_imu+0x86>
  402bdc:	00402aa5 	.word	0x00402aa5
  402be0:	00402afd 	.word	0x00402afd
  402be4:	00402b29 	.word	0x00402b29
  402be8:	00405da0 	.word	0x00405da0
  402bec:	00402d85 	.word	0x00402d85
  402bf0:	0303af6b 	.word	0x0303af6b
  402bf4:	20400001 	.word	0x20400001
  402bf8:	00405d7c 	.word	0x00405d7c
  402bfc:	00405d94 	.word	0x00405d94

00402c00 <main>:

/************************************************************************/
/* main                                                                */
/************************************************************************/

int main(void) {
  402c00:	b570      	push	{r4, r5, r6, lr}
  402c02:	b088      	sub	sp, #32
  sysclk_init();
  402c04:	4b2e      	ldr	r3, [pc, #184]	; (402cc0 <main+0xc0>)
  402c06:	4798      	blx	r3
  board_init();
  402c08:	4b2e      	ldr	r3, [pc, #184]	; (402cc4 <main+0xc4>)
  402c0a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  402c0c:	4d2e      	ldr	r5, [pc, #184]	; (402cc8 <main+0xc8>)
  402c0e:	4b2f      	ldr	r3, [pc, #188]	; (402ccc <main+0xcc>)
  402c10:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  402c12:	4a2f      	ldr	r2, [pc, #188]	; (402cd0 <main+0xd0>)
  402c14:	4b2f      	ldr	r3, [pc, #188]	; (402cd4 <main+0xd4>)
  402c16:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  402c18:	4a2f      	ldr	r2, [pc, #188]	; (402cd8 <main+0xd8>)
  402c1a:	4b30      	ldr	r3, [pc, #192]	; (402cdc <main+0xdc>)
  402c1c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  402c1e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402c22:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  402c24:	23c0      	movs	r3, #192	; 0xc0
  402c26:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  402c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402c2c:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  402c2e:	2400      	movs	r4, #0
  402c30:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402c32:	9406      	str	r4, [sp, #24]
  402c34:	200e      	movs	r0, #14
  402c36:	4b2a      	ldr	r3, [pc, #168]	; (402ce0 <main+0xe0>)
  402c38:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  402c3a:	4a2a      	ldr	r2, [pc, #168]	; (402ce4 <main+0xe4>)
  402c3c:	a902      	add	r1, sp, #8
  402c3e:	4628      	mov	r0, r5
  402c40:	4b29      	ldr	r3, [pc, #164]	; (402ce8 <main+0xe8>)
  402c42:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402c44:	4628      	mov	r0, r5
  402c46:	4b29      	ldr	r3, [pc, #164]	; (402cec <main+0xec>)
  402c48:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402c4a:	4628      	mov	r0, r5
  402c4c:	4b28      	ldr	r3, [pc, #160]	; (402cf0 <main+0xf0>)
  402c4e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  402c50:	4e28      	ldr	r6, [pc, #160]	; (402cf4 <main+0xf4>)
  402c52:	6833      	ldr	r3, [r6, #0]
  402c54:	4621      	mov	r1, r4
  402c56:	6898      	ldr	r0, [r3, #8]
  402c58:	4d27      	ldr	r5, [pc, #156]	; (402cf8 <main+0xf8>)
  402c5a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402c5c:	6833      	ldr	r3, [r6, #0]
  402c5e:	4621      	mov	r1, r4
  402c60:	6858      	ldr	r0, [r3, #4]
  402c62:	47a8      	blx	r5
  setbuf(stdout, NULL);
  402c64:	6833      	ldr	r3, [r6, #0]
  402c66:	4621      	mov	r1, r4
  402c68:	6898      	ldr	r0, [r3, #8]
  402c6a:	47a8      	blx	r5

  /* Initialize the console uart */
  configure_console();

  /* Output demo information. */
  printf("-- Freertos Example --\n\r");
  402c6c:	4823      	ldr	r0, [pc, #140]	; (402cfc <main+0xfc>)
  402c6e:	4d24      	ldr	r5, [pc, #144]	; (402d00 <main+0x100>)
  402c70:	47a8      	blx	r5
  printf("-- %s\n\r", BOARD_NAME);
  402c72:	4924      	ldr	r1, [pc, #144]	; (402d04 <main+0x104>)
  402c74:	4824      	ldr	r0, [pc, #144]	; (402d08 <main+0x108>)
  402c76:	47a8      	blx	r5
  printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  402c78:	4a24      	ldr	r2, [pc, #144]	; (402d0c <main+0x10c>)
  402c7a:	4925      	ldr	r1, [pc, #148]	; (402d10 <main+0x110>)
  402c7c:	4825      	ldr	r0, [pc, #148]	; (402d14 <main+0x114>)
  402c7e:	47a8      	blx	r5

  /* Create task to make led blink */
  if (xTaskCreate(task_led, "Led", TASK_LED_STACK_SIZE, NULL,
  402c80:	9401      	str	r4, [sp, #4]
  402c82:	9400      	str	r4, [sp, #0]
  402c84:	4623      	mov	r3, r4
  402c86:	f44f 7280 	mov.w	r2, #256	; 0x100
  402c8a:	4923      	ldr	r1, [pc, #140]	; (402d18 <main+0x118>)
  402c8c:	4823      	ldr	r0, [pc, #140]	; (402d1c <main+0x11c>)
  402c8e:	4c24      	ldr	r4, [pc, #144]	; (402d20 <main+0x120>)
  402c90:	47a0      	blx	r4
  402c92:	2801      	cmp	r0, #1
  402c94:	d001      	beq.n	402c9a <main+0x9a>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create test led task\r\n");
  402c96:	4823      	ldr	r0, [pc, #140]	; (402d24 <main+0x124>)
  402c98:	47a8      	blx	r5
  }

  if (xTaskCreate(task_imu, "IMU", TASK_LED_STACK_SIZE, NULL,
  402c9a:	2300      	movs	r3, #0
  402c9c:	9301      	str	r3, [sp, #4]
  402c9e:	9300      	str	r3, [sp, #0]
  402ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
  402ca4:	4920      	ldr	r1, [pc, #128]	; (402d28 <main+0x128>)
  402ca6:	4821      	ldr	r0, [pc, #132]	; (402d2c <main+0x12c>)
  402ca8:	4c1d      	ldr	r4, [pc, #116]	; (402d20 <main+0x120>)
  402caa:	47a0      	blx	r4
  402cac:	2801      	cmp	r0, #1
  402cae:	d002      	beq.n	402cb6 <main+0xb6>
                  TASK_LED_STACK_PRIORITY, NULL) != pdPASS) {
    printf("Failed to create test led task\r\n");
  402cb0:	481c      	ldr	r0, [pc, #112]	; (402d24 <main+0x124>)
  402cb2:	4b13      	ldr	r3, [pc, #76]	; (402d00 <main+0x100>)
  402cb4:	4798      	blx	r3
  }

  /* Start the scheduler. */
  vTaskStartScheduler();
  402cb6:	4b1e      	ldr	r3, [pc, #120]	; (402d30 <main+0x130>)
  402cb8:	4798      	blx	r3

  /* Will only get here if there was insufficient memory to create the idle
   * task. */
  return 0;
}
  402cba:	2000      	movs	r0, #0
  402cbc:	b008      	add	sp, #32
  402cbe:	bd70      	pop	{r4, r5, r6, pc}
  402cc0:	004001d5 	.word	0x004001d5
  402cc4:	004002d1 	.word	0x004002d1
  402cc8:	40028000 	.word	0x40028000
  402ccc:	20400bd8 	.word	0x20400bd8
  402cd0:	00402915 	.word	0x00402915
  402cd4:	20400bd4 	.word	0x20400bd4
  402cd8:	00402839 	.word	0x00402839
  402cdc:	20400bd0 	.word	0x20400bd0
  402ce0:	00400711 	.word	0x00400711
  402ce4:	08f0d180 	.word	0x08f0d180
  402ce8:	00400a0d 	.word	0x00400a0d
  402cec:	00400a61 	.word	0x00400a61
  402cf0:	00400a67 	.word	0x00400a67
  402cf4:	20400014 	.word	0x20400014
  402cf8:	00403539 	.word	0x00403539
  402cfc:	00405cf0 	.word	0x00405cf0
  402d00:	00402d85 	.word	0x00402d85
  402d04:	00405d0c 	.word	0x00405d0c
  402d08:	00405d18 	.word	0x00405d18
  402d0c:	00405d20 	.word	0x00405d20
  402d10:	00405d2c 	.word	0x00405d2c
  402d14:	00405d38 	.word	0x00405d38
  402d18:	00405d50 	.word	0x00405d50
  402d1c:	00402a75 	.word	0x00402a75
  402d20:	00401b09 	.word	0x00401b09
  402d24:	00405d54 	.word	0x00405d54
  402d28:	00405d78 	.word	0x00405d78
  402d2c:	00402b55 	.word	0x00402b55
  402d30:	00401cfd 	.word	0x00401cfd

00402d34 <__libc_init_array>:
  402d34:	b570      	push	{r4, r5, r6, lr}
  402d36:	4e0f      	ldr	r6, [pc, #60]	; (402d74 <__libc_init_array+0x40>)
  402d38:	4d0f      	ldr	r5, [pc, #60]	; (402d78 <__libc_init_array+0x44>)
  402d3a:	1b76      	subs	r6, r6, r5
  402d3c:	10b6      	asrs	r6, r6, #2
  402d3e:	bf18      	it	ne
  402d40:	2400      	movne	r4, #0
  402d42:	d005      	beq.n	402d50 <__libc_init_array+0x1c>
  402d44:	3401      	adds	r4, #1
  402d46:	f855 3b04 	ldr.w	r3, [r5], #4
  402d4a:	4798      	blx	r3
  402d4c:	42a6      	cmp	r6, r4
  402d4e:	d1f9      	bne.n	402d44 <__libc_init_array+0x10>
  402d50:	4e0a      	ldr	r6, [pc, #40]	; (402d7c <__libc_init_array+0x48>)
  402d52:	4d0b      	ldr	r5, [pc, #44]	; (402d80 <__libc_init_array+0x4c>)
  402d54:	1b76      	subs	r6, r6, r5
  402d56:	f003 f8e7 	bl	405f28 <_init>
  402d5a:	10b6      	asrs	r6, r6, #2
  402d5c:	bf18      	it	ne
  402d5e:	2400      	movne	r4, #0
  402d60:	d006      	beq.n	402d70 <__libc_init_array+0x3c>
  402d62:	3401      	adds	r4, #1
  402d64:	f855 3b04 	ldr.w	r3, [r5], #4
  402d68:	4798      	blx	r3
  402d6a:	42a6      	cmp	r6, r4
  402d6c:	d1f9      	bne.n	402d62 <__libc_init_array+0x2e>
  402d6e:	bd70      	pop	{r4, r5, r6, pc}
  402d70:	bd70      	pop	{r4, r5, r6, pc}
  402d72:	bf00      	nop
  402d74:	00405f34 	.word	0x00405f34
  402d78:	00405f34 	.word	0x00405f34
  402d7c:	00405f3c 	.word	0x00405f3c
  402d80:	00405f34 	.word	0x00405f34

00402d84 <iprintf>:
  402d84:	b40f      	push	{r0, r1, r2, r3}
  402d86:	b500      	push	{lr}
  402d88:	4907      	ldr	r1, [pc, #28]	; (402da8 <iprintf+0x24>)
  402d8a:	b083      	sub	sp, #12
  402d8c:	ab04      	add	r3, sp, #16
  402d8e:	6808      	ldr	r0, [r1, #0]
  402d90:	f853 2b04 	ldr.w	r2, [r3], #4
  402d94:	6881      	ldr	r1, [r0, #8]
  402d96:	9301      	str	r3, [sp, #4]
  402d98:	f000 fd60 	bl	40385c <_vfiprintf_r>
  402d9c:	b003      	add	sp, #12
  402d9e:	f85d eb04 	ldr.w	lr, [sp], #4
  402da2:	b004      	add	sp, #16
  402da4:	4770      	bx	lr
  402da6:	bf00      	nop
  402da8:	20400014 	.word	0x20400014

00402dac <malloc>:
  402dac:	4b02      	ldr	r3, [pc, #8]	; (402db8 <malloc+0xc>)
  402dae:	4601      	mov	r1, r0
  402db0:	6818      	ldr	r0, [r3, #0]
  402db2:	f000 b80b 	b.w	402dcc <_malloc_r>
  402db6:	bf00      	nop
  402db8:	20400014 	.word	0x20400014

00402dbc <free>:
  402dbc:	4b02      	ldr	r3, [pc, #8]	; (402dc8 <free+0xc>)
  402dbe:	4601      	mov	r1, r0
  402dc0:	6818      	ldr	r0, [r3, #0]
  402dc2:	f001 be67 	b.w	404a94 <_free_r>
  402dc6:	bf00      	nop
  402dc8:	20400014 	.word	0x20400014

00402dcc <_malloc_r>:
  402dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402dd0:	f101 060b 	add.w	r6, r1, #11
  402dd4:	2e16      	cmp	r6, #22
  402dd6:	b083      	sub	sp, #12
  402dd8:	4605      	mov	r5, r0
  402dda:	f240 809e 	bls.w	402f1a <_malloc_r+0x14e>
  402dde:	f036 0607 	bics.w	r6, r6, #7
  402de2:	f100 80bd 	bmi.w	402f60 <_malloc_r+0x194>
  402de6:	42b1      	cmp	r1, r6
  402de8:	f200 80ba 	bhi.w	402f60 <_malloc_r+0x194>
  402dec:	f000 fb86 	bl	4034fc <__malloc_lock>
  402df0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402df4:	f0c0 8293 	bcc.w	40331e <_malloc_r+0x552>
  402df8:	0a73      	lsrs	r3, r6, #9
  402dfa:	f000 80b8 	beq.w	402f6e <_malloc_r+0x1a2>
  402dfe:	2b04      	cmp	r3, #4
  402e00:	f200 8179 	bhi.w	4030f6 <_malloc_r+0x32a>
  402e04:	09b3      	lsrs	r3, r6, #6
  402e06:	f103 0039 	add.w	r0, r3, #57	; 0x39
  402e0a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402e0e:	00c3      	lsls	r3, r0, #3
  402e10:	4fbf      	ldr	r7, [pc, #764]	; (403110 <_malloc_r+0x344>)
  402e12:	443b      	add	r3, r7
  402e14:	f1a3 0108 	sub.w	r1, r3, #8
  402e18:	685c      	ldr	r4, [r3, #4]
  402e1a:	42a1      	cmp	r1, r4
  402e1c:	d106      	bne.n	402e2c <_malloc_r+0x60>
  402e1e:	e00c      	b.n	402e3a <_malloc_r+0x6e>
  402e20:	2a00      	cmp	r2, #0
  402e22:	f280 80aa 	bge.w	402f7a <_malloc_r+0x1ae>
  402e26:	68e4      	ldr	r4, [r4, #12]
  402e28:	42a1      	cmp	r1, r4
  402e2a:	d006      	beq.n	402e3a <_malloc_r+0x6e>
  402e2c:	6863      	ldr	r3, [r4, #4]
  402e2e:	f023 0303 	bic.w	r3, r3, #3
  402e32:	1b9a      	subs	r2, r3, r6
  402e34:	2a0f      	cmp	r2, #15
  402e36:	ddf3      	ble.n	402e20 <_malloc_r+0x54>
  402e38:	4670      	mov	r0, lr
  402e3a:	693c      	ldr	r4, [r7, #16]
  402e3c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403124 <_malloc_r+0x358>
  402e40:	4574      	cmp	r4, lr
  402e42:	f000 81ab 	beq.w	40319c <_malloc_r+0x3d0>
  402e46:	6863      	ldr	r3, [r4, #4]
  402e48:	f023 0303 	bic.w	r3, r3, #3
  402e4c:	1b9a      	subs	r2, r3, r6
  402e4e:	2a0f      	cmp	r2, #15
  402e50:	f300 8190 	bgt.w	403174 <_malloc_r+0x3a8>
  402e54:	2a00      	cmp	r2, #0
  402e56:	f8c7 e014 	str.w	lr, [r7, #20]
  402e5a:	f8c7 e010 	str.w	lr, [r7, #16]
  402e5e:	f280 809d 	bge.w	402f9c <_malloc_r+0x1d0>
  402e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  402e66:	f080 8161 	bcs.w	40312c <_malloc_r+0x360>
  402e6a:	08db      	lsrs	r3, r3, #3
  402e6c:	f103 0c01 	add.w	ip, r3, #1
  402e70:	1099      	asrs	r1, r3, #2
  402e72:	687a      	ldr	r2, [r7, #4]
  402e74:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  402e78:	f8c4 8008 	str.w	r8, [r4, #8]
  402e7c:	2301      	movs	r3, #1
  402e7e:	408b      	lsls	r3, r1
  402e80:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402e84:	4313      	orrs	r3, r2
  402e86:	3908      	subs	r1, #8
  402e88:	60e1      	str	r1, [r4, #12]
  402e8a:	607b      	str	r3, [r7, #4]
  402e8c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402e90:	f8c8 400c 	str.w	r4, [r8, #12]
  402e94:	1082      	asrs	r2, r0, #2
  402e96:	2401      	movs	r4, #1
  402e98:	4094      	lsls	r4, r2
  402e9a:	429c      	cmp	r4, r3
  402e9c:	f200 808b 	bhi.w	402fb6 <_malloc_r+0x1ea>
  402ea0:	421c      	tst	r4, r3
  402ea2:	d106      	bne.n	402eb2 <_malloc_r+0xe6>
  402ea4:	f020 0003 	bic.w	r0, r0, #3
  402ea8:	0064      	lsls	r4, r4, #1
  402eaa:	421c      	tst	r4, r3
  402eac:	f100 0004 	add.w	r0, r0, #4
  402eb0:	d0fa      	beq.n	402ea8 <_malloc_r+0xdc>
  402eb2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  402eb6:	46cc      	mov	ip, r9
  402eb8:	4680      	mov	r8, r0
  402eba:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402ebe:	459c      	cmp	ip, r3
  402ec0:	d107      	bne.n	402ed2 <_malloc_r+0x106>
  402ec2:	e16d      	b.n	4031a0 <_malloc_r+0x3d4>
  402ec4:	2a00      	cmp	r2, #0
  402ec6:	f280 817b 	bge.w	4031c0 <_malloc_r+0x3f4>
  402eca:	68db      	ldr	r3, [r3, #12]
  402ecc:	459c      	cmp	ip, r3
  402ece:	f000 8167 	beq.w	4031a0 <_malloc_r+0x3d4>
  402ed2:	6859      	ldr	r1, [r3, #4]
  402ed4:	f021 0103 	bic.w	r1, r1, #3
  402ed8:	1b8a      	subs	r2, r1, r6
  402eda:	2a0f      	cmp	r2, #15
  402edc:	ddf2      	ble.n	402ec4 <_malloc_r+0xf8>
  402ede:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402ee2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  402ee6:	9300      	str	r3, [sp, #0]
  402ee8:	199c      	adds	r4, r3, r6
  402eea:	4628      	mov	r0, r5
  402eec:	f046 0601 	orr.w	r6, r6, #1
  402ef0:	f042 0501 	orr.w	r5, r2, #1
  402ef4:	605e      	str	r6, [r3, #4]
  402ef6:	f8c8 c00c 	str.w	ip, [r8, #12]
  402efa:	f8cc 8008 	str.w	r8, [ip, #8]
  402efe:	617c      	str	r4, [r7, #20]
  402f00:	613c      	str	r4, [r7, #16]
  402f02:	f8c4 e00c 	str.w	lr, [r4, #12]
  402f06:	f8c4 e008 	str.w	lr, [r4, #8]
  402f0a:	6065      	str	r5, [r4, #4]
  402f0c:	505a      	str	r2, [r3, r1]
  402f0e:	f000 fafb 	bl	403508 <__malloc_unlock>
  402f12:	9b00      	ldr	r3, [sp, #0]
  402f14:	f103 0408 	add.w	r4, r3, #8
  402f18:	e01e      	b.n	402f58 <_malloc_r+0x18c>
  402f1a:	2910      	cmp	r1, #16
  402f1c:	d820      	bhi.n	402f60 <_malloc_r+0x194>
  402f1e:	f000 faed 	bl	4034fc <__malloc_lock>
  402f22:	2610      	movs	r6, #16
  402f24:	2318      	movs	r3, #24
  402f26:	2002      	movs	r0, #2
  402f28:	4f79      	ldr	r7, [pc, #484]	; (403110 <_malloc_r+0x344>)
  402f2a:	443b      	add	r3, r7
  402f2c:	f1a3 0208 	sub.w	r2, r3, #8
  402f30:	685c      	ldr	r4, [r3, #4]
  402f32:	4294      	cmp	r4, r2
  402f34:	f000 813d 	beq.w	4031b2 <_malloc_r+0x3e6>
  402f38:	6863      	ldr	r3, [r4, #4]
  402f3a:	68e1      	ldr	r1, [r4, #12]
  402f3c:	68a6      	ldr	r6, [r4, #8]
  402f3e:	f023 0303 	bic.w	r3, r3, #3
  402f42:	4423      	add	r3, r4
  402f44:	4628      	mov	r0, r5
  402f46:	685a      	ldr	r2, [r3, #4]
  402f48:	60f1      	str	r1, [r6, #12]
  402f4a:	f042 0201 	orr.w	r2, r2, #1
  402f4e:	608e      	str	r6, [r1, #8]
  402f50:	605a      	str	r2, [r3, #4]
  402f52:	f000 fad9 	bl	403508 <__malloc_unlock>
  402f56:	3408      	adds	r4, #8
  402f58:	4620      	mov	r0, r4
  402f5a:	b003      	add	sp, #12
  402f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f60:	2400      	movs	r4, #0
  402f62:	230c      	movs	r3, #12
  402f64:	4620      	mov	r0, r4
  402f66:	602b      	str	r3, [r5, #0]
  402f68:	b003      	add	sp, #12
  402f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f6e:	2040      	movs	r0, #64	; 0x40
  402f70:	f44f 7300 	mov.w	r3, #512	; 0x200
  402f74:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  402f78:	e74a      	b.n	402e10 <_malloc_r+0x44>
  402f7a:	4423      	add	r3, r4
  402f7c:	68e1      	ldr	r1, [r4, #12]
  402f7e:	685a      	ldr	r2, [r3, #4]
  402f80:	68a6      	ldr	r6, [r4, #8]
  402f82:	f042 0201 	orr.w	r2, r2, #1
  402f86:	60f1      	str	r1, [r6, #12]
  402f88:	4628      	mov	r0, r5
  402f8a:	608e      	str	r6, [r1, #8]
  402f8c:	605a      	str	r2, [r3, #4]
  402f8e:	f000 fabb 	bl	403508 <__malloc_unlock>
  402f92:	3408      	adds	r4, #8
  402f94:	4620      	mov	r0, r4
  402f96:	b003      	add	sp, #12
  402f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402f9c:	4423      	add	r3, r4
  402f9e:	4628      	mov	r0, r5
  402fa0:	685a      	ldr	r2, [r3, #4]
  402fa2:	f042 0201 	orr.w	r2, r2, #1
  402fa6:	605a      	str	r2, [r3, #4]
  402fa8:	f000 faae 	bl	403508 <__malloc_unlock>
  402fac:	3408      	adds	r4, #8
  402fae:	4620      	mov	r0, r4
  402fb0:	b003      	add	sp, #12
  402fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402fb6:	68bc      	ldr	r4, [r7, #8]
  402fb8:	6863      	ldr	r3, [r4, #4]
  402fba:	f023 0803 	bic.w	r8, r3, #3
  402fbe:	45b0      	cmp	r8, r6
  402fc0:	d304      	bcc.n	402fcc <_malloc_r+0x200>
  402fc2:	eba8 0306 	sub.w	r3, r8, r6
  402fc6:	2b0f      	cmp	r3, #15
  402fc8:	f300 8085 	bgt.w	4030d6 <_malloc_r+0x30a>
  402fcc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403128 <_malloc_r+0x35c>
  402fd0:	4b50      	ldr	r3, [pc, #320]	; (403114 <_malloc_r+0x348>)
  402fd2:	f8d9 2000 	ldr.w	r2, [r9]
  402fd6:	681b      	ldr	r3, [r3, #0]
  402fd8:	3201      	adds	r2, #1
  402fda:	4433      	add	r3, r6
  402fdc:	eb04 0a08 	add.w	sl, r4, r8
  402fe0:	f000 8155 	beq.w	40328e <_malloc_r+0x4c2>
  402fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  402fe8:	330f      	adds	r3, #15
  402fea:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402fee:	f02b 0b0f 	bic.w	fp, fp, #15
  402ff2:	4659      	mov	r1, fp
  402ff4:	4628      	mov	r0, r5
  402ff6:	f000 fa8d 	bl	403514 <_sbrk_r>
  402ffa:	1c41      	adds	r1, r0, #1
  402ffc:	4602      	mov	r2, r0
  402ffe:	f000 80fc 	beq.w	4031fa <_malloc_r+0x42e>
  403002:	4582      	cmp	sl, r0
  403004:	f200 80f7 	bhi.w	4031f6 <_malloc_r+0x42a>
  403008:	4b43      	ldr	r3, [pc, #268]	; (403118 <_malloc_r+0x34c>)
  40300a:	6819      	ldr	r1, [r3, #0]
  40300c:	4459      	add	r1, fp
  40300e:	6019      	str	r1, [r3, #0]
  403010:	f000 814d 	beq.w	4032ae <_malloc_r+0x4e2>
  403014:	f8d9 0000 	ldr.w	r0, [r9]
  403018:	3001      	adds	r0, #1
  40301a:	bf1b      	ittet	ne
  40301c:	eba2 0a0a 	subne.w	sl, r2, sl
  403020:	4451      	addne	r1, sl
  403022:	f8c9 2000 	streq.w	r2, [r9]
  403026:	6019      	strne	r1, [r3, #0]
  403028:	f012 0107 	ands.w	r1, r2, #7
  40302c:	f000 8115 	beq.w	40325a <_malloc_r+0x48e>
  403030:	f1c1 0008 	rsb	r0, r1, #8
  403034:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403038:	4402      	add	r2, r0
  40303a:	3108      	adds	r1, #8
  40303c:	eb02 090b 	add.w	r9, r2, fp
  403040:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403044:	eba1 0909 	sub.w	r9, r1, r9
  403048:	4649      	mov	r1, r9
  40304a:	4628      	mov	r0, r5
  40304c:	9301      	str	r3, [sp, #4]
  40304e:	9200      	str	r2, [sp, #0]
  403050:	f000 fa60 	bl	403514 <_sbrk_r>
  403054:	1c43      	adds	r3, r0, #1
  403056:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40305a:	f000 8143 	beq.w	4032e4 <_malloc_r+0x518>
  40305e:	1a80      	subs	r0, r0, r2
  403060:	4448      	add	r0, r9
  403062:	f040 0001 	orr.w	r0, r0, #1
  403066:	6819      	ldr	r1, [r3, #0]
  403068:	60ba      	str	r2, [r7, #8]
  40306a:	4449      	add	r1, r9
  40306c:	42bc      	cmp	r4, r7
  40306e:	6050      	str	r0, [r2, #4]
  403070:	6019      	str	r1, [r3, #0]
  403072:	d017      	beq.n	4030a4 <_malloc_r+0x2d8>
  403074:	f1b8 0f0f 	cmp.w	r8, #15
  403078:	f240 80fb 	bls.w	403272 <_malloc_r+0x4a6>
  40307c:	6860      	ldr	r0, [r4, #4]
  40307e:	f1a8 020c 	sub.w	r2, r8, #12
  403082:	f022 0207 	bic.w	r2, r2, #7
  403086:	eb04 0e02 	add.w	lr, r4, r2
  40308a:	f000 0001 	and.w	r0, r0, #1
  40308e:	f04f 0c05 	mov.w	ip, #5
  403092:	4310      	orrs	r0, r2
  403094:	2a0f      	cmp	r2, #15
  403096:	6060      	str	r0, [r4, #4]
  403098:	f8ce c004 	str.w	ip, [lr, #4]
  40309c:	f8ce c008 	str.w	ip, [lr, #8]
  4030a0:	f200 8117 	bhi.w	4032d2 <_malloc_r+0x506>
  4030a4:	4b1d      	ldr	r3, [pc, #116]	; (40311c <_malloc_r+0x350>)
  4030a6:	68bc      	ldr	r4, [r7, #8]
  4030a8:	681a      	ldr	r2, [r3, #0]
  4030aa:	4291      	cmp	r1, r2
  4030ac:	bf88      	it	hi
  4030ae:	6019      	strhi	r1, [r3, #0]
  4030b0:	4b1b      	ldr	r3, [pc, #108]	; (403120 <_malloc_r+0x354>)
  4030b2:	681a      	ldr	r2, [r3, #0]
  4030b4:	4291      	cmp	r1, r2
  4030b6:	6862      	ldr	r2, [r4, #4]
  4030b8:	bf88      	it	hi
  4030ba:	6019      	strhi	r1, [r3, #0]
  4030bc:	f022 0203 	bic.w	r2, r2, #3
  4030c0:	4296      	cmp	r6, r2
  4030c2:	eba2 0306 	sub.w	r3, r2, r6
  4030c6:	d801      	bhi.n	4030cc <_malloc_r+0x300>
  4030c8:	2b0f      	cmp	r3, #15
  4030ca:	dc04      	bgt.n	4030d6 <_malloc_r+0x30a>
  4030cc:	4628      	mov	r0, r5
  4030ce:	f000 fa1b 	bl	403508 <__malloc_unlock>
  4030d2:	2400      	movs	r4, #0
  4030d4:	e740      	b.n	402f58 <_malloc_r+0x18c>
  4030d6:	19a2      	adds	r2, r4, r6
  4030d8:	f043 0301 	orr.w	r3, r3, #1
  4030dc:	f046 0601 	orr.w	r6, r6, #1
  4030e0:	6066      	str	r6, [r4, #4]
  4030e2:	4628      	mov	r0, r5
  4030e4:	60ba      	str	r2, [r7, #8]
  4030e6:	6053      	str	r3, [r2, #4]
  4030e8:	f000 fa0e 	bl	403508 <__malloc_unlock>
  4030ec:	3408      	adds	r4, #8
  4030ee:	4620      	mov	r0, r4
  4030f0:	b003      	add	sp, #12
  4030f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4030f6:	2b14      	cmp	r3, #20
  4030f8:	d971      	bls.n	4031de <_malloc_r+0x412>
  4030fa:	2b54      	cmp	r3, #84	; 0x54
  4030fc:	f200 80a3 	bhi.w	403246 <_malloc_r+0x47a>
  403100:	0b33      	lsrs	r3, r6, #12
  403102:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403106:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40310a:	00c3      	lsls	r3, r0, #3
  40310c:	e680      	b.n	402e10 <_malloc_r+0x44>
  40310e:	bf00      	nop
  403110:	20400440 	.word	0x20400440
  403114:	20400bcc 	.word	0x20400bcc
  403118:	20400b9c 	.word	0x20400b9c
  40311c:	20400bc4 	.word	0x20400bc4
  403120:	20400bc8 	.word	0x20400bc8
  403124:	20400448 	.word	0x20400448
  403128:	20400848 	.word	0x20400848
  40312c:	0a5a      	lsrs	r2, r3, #9
  40312e:	2a04      	cmp	r2, #4
  403130:	d95b      	bls.n	4031ea <_malloc_r+0x41e>
  403132:	2a14      	cmp	r2, #20
  403134:	f200 80ae 	bhi.w	403294 <_malloc_r+0x4c8>
  403138:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40313c:	00c9      	lsls	r1, r1, #3
  40313e:	325b      	adds	r2, #91	; 0x5b
  403140:	eb07 0c01 	add.w	ip, r7, r1
  403144:	5879      	ldr	r1, [r7, r1]
  403146:	f1ac 0c08 	sub.w	ip, ip, #8
  40314a:	458c      	cmp	ip, r1
  40314c:	f000 8088 	beq.w	403260 <_malloc_r+0x494>
  403150:	684a      	ldr	r2, [r1, #4]
  403152:	f022 0203 	bic.w	r2, r2, #3
  403156:	4293      	cmp	r3, r2
  403158:	d273      	bcs.n	403242 <_malloc_r+0x476>
  40315a:	6889      	ldr	r1, [r1, #8]
  40315c:	458c      	cmp	ip, r1
  40315e:	d1f7      	bne.n	403150 <_malloc_r+0x384>
  403160:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403164:	687b      	ldr	r3, [r7, #4]
  403166:	60e2      	str	r2, [r4, #12]
  403168:	f8c4 c008 	str.w	ip, [r4, #8]
  40316c:	6094      	str	r4, [r2, #8]
  40316e:	f8cc 400c 	str.w	r4, [ip, #12]
  403172:	e68f      	b.n	402e94 <_malloc_r+0xc8>
  403174:	19a1      	adds	r1, r4, r6
  403176:	f046 0c01 	orr.w	ip, r6, #1
  40317a:	f042 0601 	orr.w	r6, r2, #1
  40317e:	f8c4 c004 	str.w	ip, [r4, #4]
  403182:	4628      	mov	r0, r5
  403184:	6179      	str	r1, [r7, #20]
  403186:	6139      	str	r1, [r7, #16]
  403188:	f8c1 e00c 	str.w	lr, [r1, #12]
  40318c:	f8c1 e008 	str.w	lr, [r1, #8]
  403190:	604e      	str	r6, [r1, #4]
  403192:	50e2      	str	r2, [r4, r3]
  403194:	f000 f9b8 	bl	403508 <__malloc_unlock>
  403198:	3408      	adds	r4, #8
  40319a:	e6dd      	b.n	402f58 <_malloc_r+0x18c>
  40319c:	687b      	ldr	r3, [r7, #4]
  40319e:	e679      	b.n	402e94 <_malloc_r+0xc8>
  4031a0:	f108 0801 	add.w	r8, r8, #1
  4031a4:	f018 0f03 	tst.w	r8, #3
  4031a8:	f10c 0c08 	add.w	ip, ip, #8
  4031ac:	f47f ae85 	bne.w	402eba <_malloc_r+0xee>
  4031b0:	e02d      	b.n	40320e <_malloc_r+0x442>
  4031b2:	68dc      	ldr	r4, [r3, #12]
  4031b4:	42a3      	cmp	r3, r4
  4031b6:	bf08      	it	eq
  4031b8:	3002      	addeq	r0, #2
  4031ba:	f43f ae3e 	beq.w	402e3a <_malloc_r+0x6e>
  4031be:	e6bb      	b.n	402f38 <_malloc_r+0x16c>
  4031c0:	4419      	add	r1, r3
  4031c2:	461c      	mov	r4, r3
  4031c4:	684a      	ldr	r2, [r1, #4]
  4031c6:	68db      	ldr	r3, [r3, #12]
  4031c8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4031cc:	f042 0201 	orr.w	r2, r2, #1
  4031d0:	604a      	str	r2, [r1, #4]
  4031d2:	4628      	mov	r0, r5
  4031d4:	60f3      	str	r3, [r6, #12]
  4031d6:	609e      	str	r6, [r3, #8]
  4031d8:	f000 f996 	bl	403508 <__malloc_unlock>
  4031dc:	e6bc      	b.n	402f58 <_malloc_r+0x18c>
  4031de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4031e2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4031e6:	00c3      	lsls	r3, r0, #3
  4031e8:	e612      	b.n	402e10 <_malloc_r+0x44>
  4031ea:	099a      	lsrs	r2, r3, #6
  4031ec:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4031f0:	00c9      	lsls	r1, r1, #3
  4031f2:	3238      	adds	r2, #56	; 0x38
  4031f4:	e7a4      	b.n	403140 <_malloc_r+0x374>
  4031f6:	42bc      	cmp	r4, r7
  4031f8:	d054      	beq.n	4032a4 <_malloc_r+0x4d8>
  4031fa:	68bc      	ldr	r4, [r7, #8]
  4031fc:	6862      	ldr	r2, [r4, #4]
  4031fe:	f022 0203 	bic.w	r2, r2, #3
  403202:	e75d      	b.n	4030c0 <_malloc_r+0x2f4>
  403204:	f859 3908 	ldr.w	r3, [r9], #-8
  403208:	4599      	cmp	r9, r3
  40320a:	f040 8086 	bne.w	40331a <_malloc_r+0x54e>
  40320e:	f010 0f03 	tst.w	r0, #3
  403212:	f100 30ff 	add.w	r0, r0, #4294967295
  403216:	d1f5      	bne.n	403204 <_malloc_r+0x438>
  403218:	687b      	ldr	r3, [r7, #4]
  40321a:	ea23 0304 	bic.w	r3, r3, r4
  40321e:	607b      	str	r3, [r7, #4]
  403220:	0064      	lsls	r4, r4, #1
  403222:	429c      	cmp	r4, r3
  403224:	f63f aec7 	bhi.w	402fb6 <_malloc_r+0x1ea>
  403228:	2c00      	cmp	r4, #0
  40322a:	f43f aec4 	beq.w	402fb6 <_malloc_r+0x1ea>
  40322e:	421c      	tst	r4, r3
  403230:	4640      	mov	r0, r8
  403232:	f47f ae3e 	bne.w	402eb2 <_malloc_r+0xe6>
  403236:	0064      	lsls	r4, r4, #1
  403238:	421c      	tst	r4, r3
  40323a:	f100 0004 	add.w	r0, r0, #4
  40323e:	d0fa      	beq.n	403236 <_malloc_r+0x46a>
  403240:	e637      	b.n	402eb2 <_malloc_r+0xe6>
  403242:	468c      	mov	ip, r1
  403244:	e78c      	b.n	403160 <_malloc_r+0x394>
  403246:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40324a:	d815      	bhi.n	403278 <_malloc_r+0x4ac>
  40324c:	0bf3      	lsrs	r3, r6, #15
  40324e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403252:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403256:	00c3      	lsls	r3, r0, #3
  403258:	e5da      	b.n	402e10 <_malloc_r+0x44>
  40325a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40325e:	e6ed      	b.n	40303c <_malloc_r+0x270>
  403260:	687b      	ldr	r3, [r7, #4]
  403262:	1092      	asrs	r2, r2, #2
  403264:	2101      	movs	r1, #1
  403266:	fa01 f202 	lsl.w	r2, r1, r2
  40326a:	4313      	orrs	r3, r2
  40326c:	607b      	str	r3, [r7, #4]
  40326e:	4662      	mov	r2, ip
  403270:	e779      	b.n	403166 <_malloc_r+0x39a>
  403272:	2301      	movs	r3, #1
  403274:	6053      	str	r3, [r2, #4]
  403276:	e729      	b.n	4030cc <_malloc_r+0x300>
  403278:	f240 5254 	movw	r2, #1364	; 0x554
  40327c:	4293      	cmp	r3, r2
  40327e:	d822      	bhi.n	4032c6 <_malloc_r+0x4fa>
  403280:	0cb3      	lsrs	r3, r6, #18
  403282:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403286:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40328a:	00c3      	lsls	r3, r0, #3
  40328c:	e5c0      	b.n	402e10 <_malloc_r+0x44>
  40328e:	f103 0b10 	add.w	fp, r3, #16
  403292:	e6ae      	b.n	402ff2 <_malloc_r+0x226>
  403294:	2a54      	cmp	r2, #84	; 0x54
  403296:	d829      	bhi.n	4032ec <_malloc_r+0x520>
  403298:	0b1a      	lsrs	r2, r3, #12
  40329a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40329e:	00c9      	lsls	r1, r1, #3
  4032a0:	326e      	adds	r2, #110	; 0x6e
  4032a2:	e74d      	b.n	403140 <_malloc_r+0x374>
  4032a4:	4b20      	ldr	r3, [pc, #128]	; (403328 <_malloc_r+0x55c>)
  4032a6:	6819      	ldr	r1, [r3, #0]
  4032a8:	4459      	add	r1, fp
  4032aa:	6019      	str	r1, [r3, #0]
  4032ac:	e6b2      	b.n	403014 <_malloc_r+0x248>
  4032ae:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4032b2:	2800      	cmp	r0, #0
  4032b4:	f47f aeae 	bne.w	403014 <_malloc_r+0x248>
  4032b8:	eb08 030b 	add.w	r3, r8, fp
  4032bc:	68ba      	ldr	r2, [r7, #8]
  4032be:	f043 0301 	orr.w	r3, r3, #1
  4032c2:	6053      	str	r3, [r2, #4]
  4032c4:	e6ee      	b.n	4030a4 <_malloc_r+0x2d8>
  4032c6:	207f      	movs	r0, #127	; 0x7f
  4032c8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4032cc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4032d0:	e59e      	b.n	402e10 <_malloc_r+0x44>
  4032d2:	f104 0108 	add.w	r1, r4, #8
  4032d6:	4628      	mov	r0, r5
  4032d8:	9300      	str	r3, [sp, #0]
  4032da:	f001 fbdb 	bl	404a94 <_free_r>
  4032de:	9b00      	ldr	r3, [sp, #0]
  4032e0:	6819      	ldr	r1, [r3, #0]
  4032e2:	e6df      	b.n	4030a4 <_malloc_r+0x2d8>
  4032e4:	2001      	movs	r0, #1
  4032e6:	f04f 0900 	mov.w	r9, #0
  4032ea:	e6bc      	b.n	403066 <_malloc_r+0x29a>
  4032ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4032f0:	d805      	bhi.n	4032fe <_malloc_r+0x532>
  4032f2:	0bda      	lsrs	r2, r3, #15
  4032f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4032f8:	00c9      	lsls	r1, r1, #3
  4032fa:	3277      	adds	r2, #119	; 0x77
  4032fc:	e720      	b.n	403140 <_malloc_r+0x374>
  4032fe:	f240 5154 	movw	r1, #1364	; 0x554
  403302:	428a      	cmp	r2, r1
  403304:	d805      	bhi.n	403312 <_malloc_r+0x546>
  403306:	0c9a      	lsrs	r2, r3, #18
  403308:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40330c:	00c9      	lsls	r1, r1, #3
  40330e:	327c      	adds	r2, #124	; 0x7c
  403310:	e716      	b.n	403140 <_malloc_r+0x374>
  403312:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403316:	227e      	movs	r2, #126	; 0x7e
  403318:	e712      	b.n	403140 <_malloc_r+0x374>
  40331a:	687b      	ldr	r3, [r7, #4]
  40331c:	e780      	b.n	403220 <_malloc_r+0x454>
  40331e:	08f0      	lsrs	r0, r6, #3
  403320:	f106 0308 	add.w	r3, r6, #8
  403324:	e600      	b.n	402f28 <_malloc_r+0x15c>
  403326:	bf00      	nop
  403328:	20400b9c 	.word	0x20400b9c

0040332c <memcpy>:
  40332c:	4684      	mov	ip, r0
  40332e:	ea41 0300 	orr.w	r3, r1, r0
  403332:	f013 0303 	ands.w	r3, r3, #3
  403336:	d16d      	bne.n	403414 <memcpy+0xe8>
  403338:	3a40      	subs	r2, #64	; 0x40
  40333a:	d341      	bcc.n	4033c0 <memcpy+0x94>
  40333c:	f851 3b04 	ldr.w	r3, [r1], #4
  403340:	f840 3b04 	str.w	r3, [r0], #4
  403344:	f851 3b04 	ldr.w	r3, [r1], #4
  403348:	f840 3b04 	str.w	r3, [r0], #4
  40334c:	f851 3b04 	ldr.w	r3, [r1], #4
  403350:	f840 3b04 	str.w	r3, [r0], #4
  403354:	f851 3b04 	ldr.w	r3, [r1], #4
  403358:	f840 3b04 	str.w	r3, [r0], #4
  40335c:	f851 3b04 	ldr.w	r3, [r1], #4
  403360:	f840 3b04 	str.w	r3, [r0], #4
  403364:	f851 3b04 	ldr.w	r3, [r1], #4
  403368:	f840 3b04 	str.w	r3, [r0], #4
  40336c:	f851 3b04 	ldr.w	r3, [r1], #4
  403370:	f840 3b04 	str.w	r3, [r0], #4
  403374:	f851 3b04 	ldr.w	r3, [r1], #4
  403378:	f840 3b04 	str.w	r3, [r0], #4
  40337c:	f851 3b04 	ldr.w	r3, [r1], #4
  403380:	f840 3b04 	str.w	r3, [r0], #4
  403384:	f851 3b04 	ldr.w	r3, [r1], #4
  403388:	f840 3b04 	str.w	r3, [r0], #4
  40338c:	f851 3b04 	ldr.w	r3, [r1], #4
  403390:	f840 3b04 	str.w	r3, [r0], #4
  403394:	f851 3b04 	ldr.w	r3, [r1], #4
  403398:	f840 3b04 	str.w	r3, [r0], #4
  40339c:	f851 3b04 	ldr.w	r3, [r1], #4
  4033a0:	f840 3b04 	str.w	r3, [r0], #4
  4033a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033a8:	f840 3b04 	str.w	r3, [r0], #4
  4033ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4033b0:	f840 3b04 	str.w	r3, [r0], #4
  4033b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033b8:	f840 3b04 	str.w	r3, [r0], #4
  4033bc:	3a40      	subs	r2, #64	; 0x40
  4033be:	d2bd      	bcs.n	40333c <memcpy+0x10>
  4033c0:	3230      	adds	r2, #48	; 0x30
  4033c2:	d311      	bcc.n	4033e8 <memcpy+0xbc>
  4033c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033c8:	f840 3b04 	str.w	r3, [r0], #4
  4033cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4033d0:	f840 3b04 	str.w	r3, [r0], #4
  4033d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4033d8:	f840 3b04 	str.w	r3, [r0], #4
  4033dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4033e0:	f840 3b04 	str.w	r3, [r0], #4
  4033e4:	3a10      	subs	r2, #16
  4033e6:	d2ed      	bcs.n	4033c4 <memcpy+0x98>
  4033e8:	320c      	adds	r2, #12
  4033ea:	d305      	bcc.n	4033f8 <memcpy+0xcc>
  4033ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4033f0:	f840 3b04 	str.w	r3, [r0], #4
  4033f4:	3a04      	subs	r2, #4
  4033f6:	d2f9      	bcs.n	4033ec <memcpy+0xc0>
  4033f8:	3204      	adds	r2, #4
  4033fa:	d008      	beq.n	40340e <memcpy+0xe2>
  4033fc:	07d2      	lsls	r2, r2, #31
  4033fe:	bf1c      	itt	ne
  403400:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403404:	f800 3b01 	strbne.w	r3, [r0], #1
  403408:	d301      	bcc.n	40340e <memcpy+0xe2>
  40340a:	880b      	ldrh	r3, [r1, #0]
  40340c:	8003      	strh	r3, [r0, #0]
  40340e:	4660      	mov	r0, ip
  403410:	4770      	bx	lr
  403412:	bf00      	nop
  403414:	2a08      	cmp	r2, #8
  403416:	d313      	bcc.n	403440 <memcpy+0x114>
  403418:	078b      	lsls	r3, r1, #30
  40341a:	d08d      	beq.n	403338 <memcpy+0xc>
  40341c:	f010 0303 	ands.w	r3, r0, #3
  403420:	d08a      	beq.n	403338 <memcpy+0xc>
  403422:	f1c3 0304 	rsb	r3, r3, #4
  403426:	1ad2      	subs	r2, r2, r3
  403428:	07db      	lsls	r3, r3, #31
  40342a:	bf1c      	itt	ne
  40342c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  403430:	f800 3b01 	strbne.w	r3, [r0], #1
  403434:	d380      	bcc.n	403338 <memcpy+0xc>
  403436:	f831 3b02 	ldrh.w	r3, [r1], #2
  40343a:	f820 3b02 	strh.w	r3, [r0], #2
  40343e:	e77b      	b.n	403338 <memcpy+0xc>
  403440:	3a04      	subs	r2, #4
  403442:	d3d9      	bcc.n	4033f8 <memcpy+0xcc>
  403444:	3a01      	subs	r2, #1
  403446:	f811 3b01 	ldrb.w	r3, [r1], #1
  40344a:	f800 3b01 	strb.w	r3, [r0], #1
  40344e:	d2f9      	bcs.n	403444 <memcpy+0x118>
  403450:	780b      	ldrb	r3, [r1, #0]
  403452:	7003      	strb	r3, [r0, #0]
  403454:	784b      	ldrb	r3, [r1, #1]
  403456:	7043      	strb	r3, [r0, #1]
  403458:	788b      	ldrb	r3, [r1, #2]
  40345a:	7083      	strb	r3, [r0, #2]
  40345c:	4660      	mov	r0, ip
  40345e:	4770      	bx	lr

00403460 <memset>:
  403460:	b470      	push	{r4, r5, r6}
  403462:	0786      	lsls	r6, r0, #30
  403464:	d046      	beq.n	4034f4 <memset+0x94>
  403466:	1e54      	subs	r4, r2, #1
  403468:	2a00      	cmp	r2, #0
  40346a:	d041      	beq.n	4034f0 <memset+0x90>
  40346c:	b2ca      	uxtb	r2, r1
  40346e:	4603      	mov	r3, r0
  403470:	e002      	b.n	403478 <memset+0x18>
  403472:	f114 34ff 	adds.w	r4, r4, #4294967295
  403476:	d33b      	bcc.n	4034f0 <memset+0x90>
  403478:	f803 2b01 	strb.w	r2, [r3], #1
  40347c:	079d      	lsls	r5, r3, #30
  40347e:	d1f8      	bne.n	403472 <memset+0x12>
  403480:	2c03      	cmp	r4, #3
  403482:	d92e      	bls.n	4034e2 <memset+0x82>
  403484:	b2cd      	uxtb	r5, r1
  403486:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40348a:	2c0f      	cmp	r4, #15
  40348c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403490:	d919      	bls.n	4034c6 <memset+0x66>
  403492:	f103 0210 	add.w	r2, r3, #16
  403496:	4626      	mov	r6, r4
  403498:	3e10      	subs	r6, #16
  40349a:	2e0f      	cmp	r6, #15
  40349c:	f842 5c10 	str.w	r5, [r2, #-16]
  4034a0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4034a4:	f842 5c08 	str.w	r5, [r2, #-8]
  4034a8:	f842 5c04 	str.w	r5, [r2, #-4]
  4034ac:	f102 0210 	add.w	r2, r2, #16
  4034b0:	d8f2      	bhi.n	403498 <memset+0x38>
  4034b2:	f1a4 0210 	sub.w	r2, r4, #16
  4034b6:	f022 020f 	bic.w	r2, r2, #15
  4034ba:	f004 040f 	and.w	r4, r4, #15
  4034be:	3210      	adds	r2, #16
  4034c0:	2c03      	cmp	r4, #3
  4034c2:	4413      	add	r3, r2
  4034c4:	d90d      	bls.n	4034e2 <memset+0x82>
  4034c6:	461e      	mov	r6, r3
  4034c8:	4622      	mov	r2, r4
  4034ca:	3a04      	subs	r2, #4
  4034cc:	2a03      	cmp	r2, #3
  4034ce:	f846 5b04 	str.w	r5, [r6], #4
  4034d2:	d8fa      	bhi.n	4034ca <memset+0x6a>
  4034d4:	1f22      	subs	r2, r4, #4
  4034d6:	f022 0203 	bic.w	r2, r2, #3
  4034da:	3204      	adds	r2, #4
  4034dc:	4413      	add	r3, r2
  4034de:	f004 0403 	and.w	r4, r4, #3
  4034e2:	b12c      	cbz	r4, 4034f0 <memset+0x90>
  4034e4:	b2c9      	uxtb	r1, r1
  4034e6:	441c      	add	r4, r3
  4034e8:	f803 1b01 	strb.w	r1, [r3], #1
  4034ec:	429c      	cmp	r4, r3
  4034ee:	d1fb      	bne.n	4034e8 <memset+0x88>
  4034f0:	bc70      	pop	{r4, r5, r6}
  4034f2:	4770      	bx	lr
  4034f4:	4614      	mov	r4, r2
  4034f6:	4603      	mov	r3, r0
  4034f8:	e7c2      	b.n	403480 <memset+0x20>
  4034fa:	bf00      	nop

004034fc <__malloc_lock>:
  4034fc:	4801      	ldr	r0, [pc, #4]	; (403504 <__malloc_lock+0x8>)
  4034fe:	f001 bd63 	b.w	404fc8 <__retarget_lock_acquire_recursive>
  403502:	bf00      	nop
  403504:	20400c2c 	.word	0x20400c2c

00403508 <__malloc_unlock>:
  403508:	4801      	ldr	r0, [pc, #4]	; (403510 <__malloc_unlock+0x8>)
  40350a:	f001 bd5f 	b.w	404fcc <__retarget_lock_release_recursive>
  40350e:	bf00      	nop
  403510:	20400c2c 	.word	0x20400c2c

00403514 <_sbrk_r>:
  403514:	b538      	push	{r3, r4, r5, lr}
  403516:	4c07      	ldr	r4, [pc, #28]	; (403534 <_sbrk_r+0x20>)
  403518:	2300      	movs	r3, #0
  40351a:	4605      	mov	r5, r0
  40351c:	4608      	mov	r0, r1
  40351e:	6023      	str	r3, [r4, #0]
  403520:	f7fd fbec 	bl	400cfc <_sbrk>
  403524:	1c43      	adds	r3, r0, #1
  403526:	d000      	beq.n	40352a <_sbrk_r+0x16>
  403528:	bd38      	pop	{r3, r4, r5, pc}
  40352a:	6823      	ldr	r3, [r4, #0]
  40352c:	2b00      	cmp	r3, #0
  40352e:	d0fb      	beq.n	403528 <_sbrk_r+0x14>
  403530:	602b      	str	r3, [r5, #0]
  403532:	bd38      	pop	{r3, r4, r5, pc}
  403534:	20400c40 	.word	0x20400c40

00403538 <setbuf>:
  403538:	2900      	cmp	r1, #0
  40353a:	bf0c      	ite	eq
  40353c:	2202      	moveq	r2, #2
  40353e:	2200      	movne	r2, #0
  403540:	f44f 6380 	mov.w	r3, #1024	; 0x400
  403544:	f000 b800 	b.w	403548 <setvbuf>

00403548 <setvbuf>:
  403548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40354c:	4c61      	ldr	r4, [pc, #388]	; (4036d4 <setvbuf+0x18c>)
  40354e:	6825      	ldr	r5, [r4, #0]
  403550:	b083      	sub	sp, #12
  403552:	4604      	mov	r4, r0
  403554:	460f      	mov	r7, r1
  403556:	4690      	mov	r8, r2
  403558:	461e      	mov	r6, r3
  40355a:	b115      	cbz	r5, 403562 <setvbuf+0x1a>
  40355c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40355e:	2b00      	cmp	r3, #0
  403560:	d064      	beq.n	40362c <setvbuf+0xe4>
  403562:	f1b8 0f02 	cmp.w	r8, #2
  403566:	d006      	beq.n	403576 <setvbuf+0x2e>
  403568:	f1b8 0f01 	cmp.w	r8, #1
  40356c:	f200 809f 	bhi.w	4036ae <setvbuf+0x166>
  403570:	2e00      	cmp	r6, #0
  403572:	f2c0 809c 	blt.w	4036ae <setvbuf+0x166>
  403576:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403578:	07d8      	lsls	r0, r3, #31
  40357a:	d534      	bpl.n	4035e6 <setvbuf+0x9e>
  40357c:	4621      	mov	r1, r4
  40357e:	4628      	mov	r0, r5
  403580:	f001 f90a 	bl	404798 <_fflush_r>
  403584:	6b21      	ldr	r1, [r4, #48]	; 0x30
  403586:	b141      	cbz	r1, 40359a <setvbuf+0x52>
  403588:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40358c:	4299      	cmp	r1, r3
  40358e:	d002      	beq.n	403596 <setvbuf+0x4e>
  403590:	4628      	mov	r0, r5
  403592:	f001 fa7f 	bl	404a94 <_free_r>
  403596:	2300      	movs	r3, #0
  403598:	6323      	str	r3, [r4, #48]	; 0x30
  40359a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40359e:	2200      	movs	r2, #0
  4035a0:	61a2      	str	r2, [r4, #24]
  4035a2:	6062      	str	r2, [r4, #4]
  4035a4:	061a      	lsls	r2, r3, #24
  4035a6:	d43a      	bmi.n	40361e <setvbuf+0xd6>
  4035a8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4035ac:	f023 0303 	bic.w	r3, r3, #3
  4035b0:	f1b8 0f02 	cmp.w	r8, #2
  4035b4:	81a3      	strh	r3, [r4, #12]
  4035b6:	d01d      	beq.n	4035f4 <setvbuf+0xac>
  4035b8:	ab01      	add	r3, sp, #4
  4035ba:	466a      	mov	r2, sp
  4035bc:	4621      	mov	r1, r4
  4035be:	4628      	mov	r0, r5
  4035c0:	f001 fd06 	bl	404fd0 <__swhatbuf_r>
  4035c4:	89a3      	ldrh	r3, [r4, #12]
  4035c6:	4318      	orrs	r0, r3
  4035c8:	81a0      	strh	r0, [r4, #12]
  4035ca:	2e00      	cmp	r6, #0
  4035cc:	d132      	bne.n	403634 <setvbuf+0xec>
  4035ce:	9e00      	ldr	r6, [sp, #0]
  4035d0:	4630      	mov	r0, r6
  4035d2:	f7ff fbeb 	bl	402dac <malloc>
  4035d6:	4607      	mov	r7, r0
  4035d8:	2800      	cmp	r0, #0
  4035da:	d06b      	beq.n	4036b4 <setvbuf+0x16c>
  4035dc:	89a3      	ldrh	r3, [r4, #12]
  4035de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4035e2:	81a3      	strh	r3, [r4, #12]
  4035e4:	e028      	b.n	403638 <setvbuf+0xf0>
  4035e6:	89a3      	ldrh	r3, [r4, #12]
  4035e8:	0599      	lsls	r1, r3, #22
  4035ea:	d4c7      	bmi.n	40357c <setvbuf+0x34>
  4035ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4035ee:	f001 fceb 	bl	404fc8 <__retarget_lock_acquire_recursive>
  4035f2:	e7c3      	b.n	40357c <setvbuf+0x34>
  4035f4:	2500      	movs	r5, #0
  4035f6:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4035f8:	2600      	movs	r6, #0
  4035fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4035fe:	f043 0302 	orr.w	r3, r3, #2
  403602:	2001      	movs	r0, #1
  403604:	60a6      	str	r6, [r4, #8]
  403606:	07ce      	lsls	r6, r1, #31
  403608:	81a3      	strh	r3, [r4, #12]
  40360a:	6022      	str	r2, [r4, #0]
  40360c:	6122      	str	r2, [r4, #16]
  40360e:	6160      	str	r0, [r4, #20]
  403610:	d401      	bmi.n	403616 <setvbuf+0xce>
  403612:	0598      	lsls	r0, r3, #22
  403614:	d53e      	bpl.n	403694 <setvbuf+0x14c>
  403616:	4628      	mov	r0, r5
  403618:	b003      	add	sp, #12
  40361a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40361e:	6921      	ldr	r1, [r4, #16]
  403620:	4628      	mov	r0, r5
  403622:	f001 fa37 	bl	404a94 <_free_r>
  403626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40362a:	e7bd      	b.n	4035a8 <setvbuf+0x60>
  40362c:	4628      	mov	r0, r5
  40362e:	f001 f90b 	bl	404848 <__sinit>
  403632:	e796      	b.n	403562 <setvbuf+0x1a>
  403634:	2f00      	cmp	r7, #0
  403636:	d0cb      	beq.n	4035d0 <setvbuf+0x88>
  403638:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40363a:	2b00      	cmp	r3, #0
  40363c:	d033      	beq.n	4036a6 <setvbuf+0x15e>
  40363e:	9b00      	ldr	r3, [sp, #0]
  403640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403644:	6027      	str	r7, [r4, #0]
  403646:	429e      	cmp	r6, r3
  403648:	bf1c      	itt	ne
  40364a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40364e:	81a2      	strhne	r2, [r4, #12]
  403650:	f1b8 0f01 	cmp.w	r8, #1
  403654:	bf04      	itt	eq
  403656:	f042 0201 	orreq.w	r2, r2, #1
  40365a:	81a2      	strheq	r2, [r4, #12]
  40365c:	b292      	uxth	r2, r2
  40365e:	f012 0308 	ands.w	r3, r2, #8
  403662:	6127      	str	r7, [r4, #16]
  403664:	6166      	str	r6, [r4, #20]
  403666:	d00e      	beq.n	403686 <setvbuf+0x13e>
  403668:	07d1      	lsls	r1, r2, #31
  40366a:	d51a      	bpl.n	4036a2 <setvbuf+0x15a>
  40366c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40366e:	4276      	negs	r6, r6
  403670:	2300      	movs	r3, #0
  403672:	f015 0501 	ands.w	r5, r5, #1
  403676:	61a6      	str	r6, [r4, #24]
  403678:	60a3      	str	r3, [r4, #8]
  40367a:	d009      	beq.n	403690 <setvbuf+0x148>
  40367c:	2500      	movs	r5, #0
  40367e:	4628      	mov	r0, r5
  403680:	b003      	add	sp, #12
  403682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  403686:	60a3      	str	r3, [r4, #8]
  403688:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40368a:	f015 0501 	ands.w	r5, r5, #1
  40368e:	d1f5      	bne.n	40367c <setvbuf+0x134>
  403690:	0593      	lsls	r3, r2, #22
  403692:	d4c0      	bmi.n	403616 <setvbuf+0xce>
  403694:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403696:	f001 fc99 	bl	404fcc <__retarget_lock_release_recursive>
  40369a:	4628      	mov	r0, r5
  40369c:	b003      	add	sp, #12
  40369e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4036a2:	60a6      	str	r6, [r4, #8]
  4036a4:	e7f0      	b.n	403688 <setvbuf+0x140>
  4036a6:	4628      	mov	r0, r5
  4036a8:	f001 f8ce 	bl	404848 <__sinit>
  4036ac:	e7c7      	b.n	40363e <setvbuf+0xf6>
  4036ae:	f04f 35ff 	mov.w	r5, #4294967295
  4036b2:	e7b0      	b.n	403616 <setvbuf+0xce>
  4036b4:	f8dd 9000 	ldr.w	r9, [sp]
  4036b8:	45b1      	cmp	r9, r6
  4036ba:	d004      	beq.n	4036c6 <setvbuf+0x17e>
  4036bc:	4648      	mov	r0, r9
  4036be:	f7ff fb75 	bl	402dac <malloc>
  4036c2:	4607      	mov	r7, r0
  4036c4:	b920      	cbnz	r0, 4036d0 <setvbuf+0x188>
  4036c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4036ca:	f04f 35ff 	mov.w	r5, #4294967295
  4036ce:	e792      	b.n	4035f6 <setvbuf+0xae>
  4036d0:	464e      	mov	r6, r9
  4036d2:	e783      	b.n	4035dc <setvbuf+0x94>
  4036d4:	20400014 	.word	0x20400014
	...

00403700 <strlen>:
  403700:	f890 f000 	pld	[r0]
  403704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  403708:	f020 0107 	bic.w	r1, r0, #7
  40370c:	f06f 0c00 	mvn.w	ip, #0
  403710:	f010 0407 	ands.w	r4, r0, #7
  403714:	f891 f020 	pld	[r1, #32]
  403718:	f040 8049 	bne.w	4037ae <strlen+0xae>
  40371c:	f04f 0400 	mov.w	r4, #0
  403720:	f06f 0007 	mvn.w	r0, #7
  403724:	e9d1 2300 	ldrd	r2, r3, [r1]
  403728:	f891 f040 	pld	[r1, #64]	; 0x40
  40372c:	f100 0008 	add.w	r0, r0, #8
  403730:	fa82 f24c 	uadd8	r2, r2, ip
  403734:	faa4 f28c 	sel	r2, r4, ip
  403738:	fa83 f34c 	uadd8	r3, r3, ip
  40373c:	faa2 f38c 	sel	r3, r2, ip
  403740:	bb4b      	cbnz	r3, 403796 <strlen+0x96>
  403742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  403746:	fa82 f24c 	uadd8	r2, r2, ip
  40374a:	f100 0008 	add.w	r0, r0, #8
  40374e:	faa4 f28c 	sel	r2, r4, ip
  403752:	fa83 f34c 	uadd8	r3, r3, ip
  403756:	faa2 f38c 	sel	r3, r2, ip
  40375a:	b9e3      	cbnz	r3, 403796 <strlen+0x96>
  40375c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  403760:	fa82 f24c 	uadd8	r2, r2, ip
  403764:	f100 0008 	add.w	r0, r0, #8
  403768:	faa4 f28c 	sel	r2, r4, ip
  40376c:	fa83 f34c 	uadd8	r3, r3, ip
  403770:	faa2 f38c 	sel	r3, r2, ip
  403774:	b97b      	cbnz	r3, 403796 <strlen+0x96>
  403776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40377a:	f101 0120 	add.w	r1, r1, #32
  40377e:	fa82 f24c 	uadd8	r2, r2, ip
  403782:	f100 0008 	add.w	r0, r0, #8
  403786:	faa4 f28c 	sel	r2, r4, ip
  40378a:	fa83 f34c 	uadd8	r3, r3, ip
  40378e:	faa2 f38c 	sel	r3, r2, ip
  403792:	2b00      	cmp	r3, #0
  403794:	d0c6      	beq.n	403724 <strlen+0x24>
  403796:	2a00      	cmp	r2, #0
  403798:	bf04      	itt	eq
  40379a:	3004      	addeq	r0, #4
  40379c:	461a      	moveq	r2, r3
  40379e:	ba12      	rev	r2, r2
  4037a0:	fab2 f282 	clz	r2, r2
  4037a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4037a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4037ac:	4770      	bx	lr
  4037ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4037b2:	f004 0503 	and.w	r5, r4, #3
  4037b6:	f1c4 0000 	rsb	r0, r4, #0
  4037ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4037be:	f014 0f04 	tst.w	r4, #4
  4037c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4037c6:	fa0c f505 	lsl.w	r5, ip, r5
  4037ca:	ea62 0205 	orn	r2, r2, r5
  4037ce:	bf1c      	itt	ne
  4037d0:	ea63 0305 	ornne	r3, r3, r5
  4037d4:	4662      	movne	r2, ip
  4037d6:	f04f 0400 	mov.w	r4, #0
  4037da:	e7a9      	b.n	403730 <strlen+0x30>

004037dc <__sprint_r.part.0>:
  4037dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4037e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4037e2:	049c      	lsls	r4, r3, #18
  4037e4:	4693      	mov	fp, r2
  4037e6:	d52f      	bpl.n	403848 <__sprint_r.part.0+0x6c>
  4037e8:	6893      	ldr	r3, [r2, #8]
  4037ea:	6812      	ldr	r2, [r2, #0]
  4037ec:	b353      	cbz	r3, 403844 <__sprint_r.part.0+0x68>
  4037ee:	460e      	mov	r6, r1
  4037f0:	4607      	mov	r7, r0
  4037f2:	f102 0908 	add.w	r9, r2, #8
  4037f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4037fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4037fe:	d017      	beq.n	403830 <__sprint_r.part.0+0x54>
  403800:	3d04      	subs	r5, #4
  403802:	2400      	movs	r4, #0
  403804:	e001      	b.n	40380a <__sprint_r.part.0+0x2e>
  403806:	45a0      	cmp	r8, r4
  403808:	d010      	beq.n	40382c <__sprint_r.part.0+0x50>
  40380a:	4632      	mov	r2, r6
  40380c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  403810:	4638      	mov	r0, r7
  403812:	f001 f8bb 	bl	40498c <_fputwc_r>
  403816:	1c43      	adds	r3, r0, #1
  403818:	f104 0401 	add.w	r4, r4, #1
  40381c:	d1f3      	bne.n	403806 <__sprint_r.part.0+0x2a>
  40381e:	2300      	movs	r3, #0
  403820:	f8cb 3008 	str.w	r3, [fp, #8]
  403824:	f8cb 3004 	str.w	r3, [fp, #4]
  403828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40382c:	f8db 3008 	ldr.w	r3, [fp, #8]
  403830:	f02a 0a03 	bic.w	sl, sl, #3
  403834:	eba3 030a 	sub.w	r3, r3, sl
  403838:	f8cb 3008 	str.w	r3, [fp, #8]
  40383c:	f109 0908 	add.w	r9, r9, #8
  403840:	2b00      	cmp	r3, #0
  403842:	d1d8      	bne.n	4037f6 <__sprint_r.part.0+0x1a>
  403844:	2000      	movs	r0, #0
  403846:	e7ea      	b.n	40381e <__sprint_r.part.0+0x42>
  403848:	f001 fa0a 	bl	404c60 <__sfvwrite_r>
  40384c:	2300      	movs	r3, #0
  40384e:	f8cb 3008 	str.w	r3, [fp, #8]
  403852:	f8cb 3004 	str.w	r3, [fp, #4]
  403856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40385a:	bf00      	nop

0040385c <_vfiprintf_r>:
  40385c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403860:	b0ad      	sub	sp, #180	; 0xb4
  403862:	461d      	mov	r5, r3
  403864:	468b      	mov	fp, r1
  403866:	4690      	mov	r8, r2
  403868:	9307      	str	r3, [sp, #28]
  40386a:	9006      	str	r0, [sp, #24]
  40386c:	b118      	cbz	r0, 403876 <_vfiprintf_r+0x1a>
  40386e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  403870:	2b00      	cmp	r3, #0
  403872:	f000 80f3 	beq.w	403a5c <_vfiprintf_r+0x200>
  403876:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40387a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40387e:	07df      	lsls	r7, r3, #31
  403880:	b281      	uxth	r1, r0
  403882:	d402      	bmi.n	40388a <_vfiprintf_r+0x2e>
  403884:	058e      	lsls	r6, r1, #22
  403886:	f140 80fc 	bpl.w	403a82 <_vfiprintf_r+0x226>
  40388a:	048c      	lsls	r4, r1, #18
  40388c:	d40a      	bmi.n	4038a4 <_vfiprintf_r+0x48>
  40388e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403892:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  403896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40389a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40389e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4038a2:	b289      	uxth	r1, r1
  4038a4:	0708      	lsls	r0, r1, #28
  4038a6:	f140 80b3 	bpl.w	403a10 <_vfiprintf_r+0x1b4>
  4038aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4038ae:	2b00      	cmp	r3, #0
  4038b0:	f000 80ae 	beq.w	403a10 <_vfiprintf_r+0x1b4>
  4038b4:	f001 031a 	and.w	r3, r1, #26
  4038b8:	2b0a      	cmp	r3, #10
  4038ba:	f000 80b5 	beq.w	403a28 <_vfiprintf_r+0x1cc>
  4038be:	2300      	movs	r3, #0
  4038c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4038c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4038c6:	9311      	str	r3, [sp, #68]	; 0x44
  4038c8:	9310      	str	r3, [sp, #64]	; 0x40
  4038ca:	9303      	str	r3, [sp, #12]
  4038cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4038d0:	46ca      	mov	sl, r9
  4038d2:	f8cd b010 	str.w	fp, [sp, #16]
  4038d6:	f898 3000 	ldrb.w	r3, [r8]
  4038da:	4644      	mov	r4, r8
  4038dc:	b1fb      	cbz	r3, 40391e <_vfiprintf_r+0xc2>
  4038de:	2b25      	cmp	r3, #37	; 0x25
  4038e0:	d102      	bne.n	4038e8 <_vfiprintf_r+0x8c>
  4038e2:	e01c      	b.n	40391e <_vfiprintf_r+0xc2>
  4038e4:	2b25      	cmp	r3, #37	; 0x25
  4038e6:	d003      	beq.n	4038f0 <_vfiprintf_r+0x94>
  4038e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4038ec:	2b00      	cmp	r3, #0
  4038ee:	d1f9      	bne.n	4038e4 <_vfiprintf_r+0x88>
  4038f0:	eba4 0508 	sub.w	r5, r4, r8
  4038f4:	b19d      	cbz	r5, 40391e <_vfiprintf_r+0xc2>
  4038f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4038f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4038fa:	f8ca 8000 	str.w	r8, [sl]
  4038fe:	3301      	adds	r3, #1
  403900:	442a      	add	r2, r5
  403902:	2b07      	cmp	r3, #7
  403904:	f8ca 5004 	str.w	r5, [sl, #4]
  403908:	9211      	str	r2, [sp, #68]	; 0x44
  40390a:	9310      	str	r3, [sp, #64]	; 0x40
  40390c:	dd7a      	ble.n	403a04 <_vfiprintf_r+0x1a8>
  40390e:	2a00      	cmp	r2, #0
  403910:	f040 84b0 	bne.w	404274 <_vfiprintf_r+0xa18>
  403914:	9b03      	ldr	r3, [sp, #12]
  403916:	9210      	str	r2, [sp, #64]	; 0x40
  403918:	442b      	add	r3, r5
  40391a:	46ca      	mov	sl, r9
  40391c:	9303      	str	r3, [sp, #12]
  40391e:	7823      	ldrb	r3, [r4, #0]
  403920:	2b00      	cmp	r3, #0
  403922:	f000 83e0 	beq.w	4040e6 <_vfiprintf_r+0x88a>
  403926:	2000      	movs	r0, #0
  403928:	f04f 0300 	mov.w	r3, #0
  40392c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  403930:	f104 0801 	add.w	r8, r4, #1
  403934:	7862      	ldrb	r2, [r4, #1]
  403936:	4605      	mov	r5, r0
  403938:	4606      	mov	r6, r0
  40393a:	4603      	mov	r3, r0
  40393c:	f04f 34ff 	mov.w	r4, #4294967295
  403940:	f108 0801 	add.w	r8, r8, #1
  403944:	f1a2 0120 	sub.w	r1, r2, #32
  403948:	2958      	cmp	r1, #88	; 0x58
  40394a:	f200 82de 	bhi.w	403f0a <_vfiprintf_r+0x6ae>
  40394e:	e8df f011 	tbh	[pc, r1, lsl #1]
  403952:	0221      	.short	0x0221
  403954:	02dc02dc 	.word	0x02dc02dc
  403958:	02dc0229 	.word	0x02dc0229
  40395c:	02dc02dc 	.word	0x02dc02dc
  403960:	02dc02dc 	.word	0x02dc02dc
  403964:	028902dc 	.word	0x028902dc
  403968:	02dc0295 	.word	0x02dc0295
  40396c:	02bd00a2 	.word	0x02bd00a2
  403970:	019f02dc 	.word	0x019f02dc
  403974:	01a401a4 	.word	0x01a401a4
  403978:	01a401a4 	.word	0x01a401a4
  40397c:	01a401a4 	.word	0x01a401a4
  403980:	01a401a4 	.word	0x01a401a4
  403984:	02dc01a4 	.word	0x02dc01a4
  403988:	02dc02dc 	.word	0x02dc02dc
  40398c:	02dc02dc 	.word	0x02dc02dc
  403990:	02dc02dc 	.word	0x02dc02dc
  403994:	02dc02dc 	.word	0x02dc02dc
  403998:	01b202dc 	.word	0x01b202dc
  40399c:	02dc02dc 	.word	0x02dc02dc
  4039a0:	02dc02dc 	.word	0x02dc02dc
  4039a4:	02dc02dc 	.word	0x02dc02dc
  4039a8:	02dc02dc 	.word	0x02dc02dc
  4039ac:	02dc02dc 	.word	0x02dc02dc
  4039b0:	02dc0197 	.word	0x02dc0197
  4039b4:	02dc02dc 	.word	0x02dc02dc
  4039b8:	02dc02dc 	.word	0x02dc02dc
  4039bc:	02dc019b 	.word	0x02dc019b
  4039c0:	025302dc 	.word	0x025302dc
  4039c4:	02dc02dc 	.word	0x02dc02dc
  4039c8:	02dc02dc 	.word	0x02dc02dc
  4039cc:	02dc02dc 	.word	0x02dc02dc
  4039d0:	02dc02dc 	.word	0x02dc02dc
  4039d4:	02dc02dc 	.word	0x02dc02dc
  4039d8:	021b025a 	.word	0x021b025a
  4039dc:	02dc02dc 	.word	0x02dc02dc
  4039e0:	026e02dc 	.word	0x026e02dc
  4039e4:	02dc021b 	.word	0x02dc021b
  4039e8:	027302dc 	.word	0x027302dc
  4039ec:	01f502dc 	.word	0x01f502dc
  4039f0:	02090182 	.word	0x02090182
  4039f4:	02dc02d7 	.word	0x02dc02d7
  4039f8:	02dc029a 	.word	0x02dc029a
  4039fc:	02dc00a7 	.word	0x02dc00a7
  403a00:	022e02dc 	.word	0x022e02dc
  403a04:	f10a 0a08 	add.w	sl, sl, #8
  403a08:	9b03      	ldr	r3, [sp, #12]
  403a0a:	442b      	add	r3, r5
  403a0c:	9303      	str	r3, [sp, #12]
  403a0e:	e786      	b.n	40391e <_vfiprintf_r+0xc2>
  403a10:	4659      	mov	r1, fp
  403a12:	9806      	ldr	r0, [sp, #24]
  403a14:	f000 fdac 	bl	404570 <__swsetup_r>
  403a18:	bb18      	cbnz	r0, 403a62 <_vfiprintf_r+0x206>
  403a1a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  403a1e:	f001 031a 	and.w	r3, r1, #26
  403a22:	2b0a      	cmp	r3, #10
  403a24:	f47f af4b 	bne.w	4038be <_vfiprintf_r+0x62>
  403a28:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  403a2c:	2b00      	cmp	r3, #0
  403a2e:	f6ff af46 	blt.w	4038be <_vfiprintf_r+0x62>
  403a32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403a36:	07db      	lsls	r3, r3, #31
  403a38:	d405      	bmi.n	403a46 <_vfiprintf_r+0x1ea>
  403a3a:	058f      	lsls	r7, r1, #22
  403a3c:	d403      	bmi.n	403a46 <_vfiprintf_r+0x1ea>
  403a3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403a42:	f001 fac3 	bl	404fcc <__retarget_lock_release_recursive>
  403a46:	462b      	mov	r3, r5
  403a48:	4642      	mov	r2, r8
  403a4a:	4659      	mov	r1, fp
  403a4c:	9806      	ldr	r0, [sp, #24]
  403a4e:	f000 fd4d 	bl	4044ec <__sbprintf>
  403a52:	9003      	str	r0, [sp, #12]
  403a54:	9803      	ldr	r0, [sp, #12]
  403a56:	b02d      	add	sp, #180	; 0xb4
  403a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a5c:	f000 fef4 	bl	404848 <__sinit>
  403a60:	e709      	b.n	403876 <_vfiprintf_r+0x1a>
  403a62:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  403a66:	07d9      	lsls	r1, r3, #31
  403a68:	d404      	bmi.n	403a74 <_vfiprintf_r+0x218>
  403a6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403a6e:	059a      	lsls	r2, r3, #22
  403a70:	f140 84aa 	bpl.w	4043c8 <_vfiprintf_r+0xb6c>
  403a74:	f04f 33ff 	mov.w	r3, #4294967295
  403a78:	9303      	str	r3, [sp, #12]
  403a7a:	9803      	ldr	r0, [sp, #12]
  403a7c:	b02d      	add	sp, #180	; 0xb4
  403a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  403a86:	f001 fa9f 	bl	404fc8 <__retarget_lock_acquire_recursive>
  403a8a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  403a8e:	b281      	uxth	r1, r0
  403a90:	e6fb      	b.n	40388a <_vfiprintf_r+0x2e>
  403a92:	4276      	negs	r6, r6
  403a94:	9207      	str	r2, [sp, #28]
  403a96:	f043 0304 	orr.w	r3, r3, #4
  403a9a:	f898 2000 	ldrb.w	r2, [r8]
  403a9e:	e74f      	b.n	403940 <_vfiprintf_r+0xe4>
  403aa0:	9608      	str	r6, [sp, #32]
  403aa2:	069e      	lsls	r6, r3, #26
  403aa4:	f100 8450 	bmi.w	404348 <_vfiprintf_r+0xaec>
  403aa8:	9907      	ldr	r1, [sp, #28]
  403aaa:	06dd      	lsls	r5, r3, #27
  403aac:	460a      	mov	r2, r1
  403aae:	f100 83ef 	bmi.w	404290 <_vfiprintf_r+0xa34>
  403ab2:	0658      	lsls	r0, r3, #25
  403ab4:	f140 83ec 	bpl.w	404290 <_vfiprintf_r+0xa34>
  403ab8:	880e      	ldrh	r6, [r1, #0]
  403aba:	3104      	adds	r1, #4
  403abc:	2700      	movs	r7, #0
  403abe:	2201      	movs	r2, #1
  403ac0:	9107      	str	r1, [sp, #28]
  403ac2:	f04f 0100 	mov.w	r1, #0
  403ac6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  403aca:	2500      	movs	r5, #0
  403acc:	1c61      	adds	r1, r4, #1
  403ace:	f000 8116 	beq.w	403cfe <_vfiprintf_r+0x4a2>
  403ad2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  403ad6:	9102      	str	r1, [sp, #8]
  403ad8:	ea56 0107 	orrs.w	r1, r6, r7
  403adc:	f040 8114 	bne.w	403d08 <_vfiprintf_r+0x4ac>
  403ae0:	2c00      	cmp	r4, #0
  403ae2:	f040 835c 	bne.w	40419e <_vfiprintf_r+0x942>
  403ae6:	2a00      	cmp	r2, #0
  403ae8:	f040 83b7 	bne.w	40425a <_vfiprintf_r+0x9fe>
  403aec:	f013 0301 	ands.w	r3, r3, #1
  403af0:	9305      	str	r3, [sp, #20]
  403af2:	f000 8457 	beq.w	4043a4 <_vfiprintf_r+0xb48>
  403af6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  403afa:	2330      	movs	r3, #48	; 0x30
  403afc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  403b00:	9b05      	ldr	r3, [sp, #20]
  403b02:	42a3      	cmp	r3, r4
  403b04:	bfb8      	it	lt
  403b06:	4623      	movlt	r3, r4
  403b08:	9301      	str	r3, [sp, #4]
  403b0a:	b10d      	cbz	r5, 403b10 <_vfiprintf_r+0x2b4>
  403b0c:	3301      	adds	r3, #1
  403b0e:	9301      	str	r3, [sp, #4]
  403b10:	9b02      	ldr	r3, [sp, #8]
  403b12:	f013 0302 	ands.w	r3, r3, #2
  403b16:	9309      	str	r3, [sp, #36]	; 0x24
  403b18:	d002      	beq.n	403b20 <_vfiprintf_r+0x2c4>
  403b1a:	9b01      	ldr	r3, [sp, #4]
  403b1c:	3302      	adds	r3, #2
  403b1e:	9301      	str	r3, [sp, #4]
  403b20:	9b02      	ldr	r3, [sp, #8]
  403b22:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  403b26:	930a      	str	r3, [sp, #40]	; 0x28
  403b28:	f040 8217 	bne.w	403f5a <_vfiprintf_r+0x6fe>
  403b2c:	9b08      	ldr	r3, [sp, #32]
  403b2e:	9a01      	ldr	r2, [sp, #4]
  403b30:	1a9d      	subs	r5, r3, r2
  403b32:	2d00      	cmp	r5, #0
  403b34:	f340 8211 	ble.w	403f5a <_vfiprintf_r+0x6fe>
  403b38:	2d10      	cmp	r5, #16
  403b3a:	f340 8490 	ble.w	40445e <_vfiprintf_r+0xc02>
  403b3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403b40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403b42:	4ec4      	ldr	r6, [pc, #784]	; (403e54 <_vfiprintf_r+0x5f8>)
  403b44:	46d6      	mov	lr, sl
  403b46:	2710      	movs	r7, #16
  403b48:	46a2      	mov	sl, r4
  403b4a:	4619      	mov	r1, r3
  403b4c:	9c06      	ldr	r4, [sp, #24]
  403b4e:	e007      	b.n	403b60 <_vfiprintf_r+0x304>
  403b50:	f101 0c02 	add.w	ip, r1, #2
  403b54:	f10e 0e08 	add.w	lr, lr, #8
  403b58:	4601      	mov	r1, r0
  403b5a:	3d10      	subs	r5, #16
  403b5c:	2d10      	cmp	r5, #16
  403b5e:	dd11      	ble.n	403b84 <_vfiprintf_r+0x328>
  403b60:	1c48      	adds	r0, r1, #1
  403b62:	3210      	adds	r2, #16
  403b64:	2807      	cmp	r0, #7
  403b66:	9211      	str	r2, [sp, #68]	; 0x44
  403b68:	e88e 00c0 	stmia.w	lr, {r6, r7}
  403b6c:	9010      	str	r0, [sp, #64]	; 0x40
  403b6e:	ddef      	ble.n	403b50 <_vfiprintf_r+0x2f4>
  403b70:	2a00      	cmp	r2, #0
  403b72:	f040 81e4 	bne.w	403f3e <_vfiprintf_r+0x6e2>
  403b76:	3d10      	subs	r5, #16
  403b78:	2d10      	cmp	r5, #16
  403b7a:	4611      	mov	r1, r2
  403b7c:	f04f 0c01 	mov.w	ip, #1
  403b80:	46ce      	mov	lr, r9
  403b82:	dced      	bgt.n	403b60 <_vfiprintf_r+0x304>
  403b84:	4654      	mov	r4, sl
  403b86:	4661      	mov	r1, ip
  403b88:	46f2      	mov	sl, lr
  403b8a:	442a      	add	r2, r5
  403b8c:	2907      	cmp	r1, #7
  403b8e:	9211      	str	r2, [sp, #68]	; 0x44
  403b90:	f8ca 6000 	str.w	r6, [sl]
  403b94:	f8ca 5004 	str.w	r5, [sl, #4]
  403b98:	9110      	str	r1, [sp, #64]	; 0x40
  403b9a:	f300 82ec 	bgt.w	404176 <_vfiprintf_r+0x91a>
  403b9e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403ba2:	f10a 0a08 	add.w	sl, sl, #8
  403ba6:	1c48      	adds	r0, r1, #1
  403ba8:	2d00      	cmp	r5, #0
  403baa:	f040 81de 	bne.w	403f6a <_vfiprintf_r+0x70e>
  403bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403bb0:	2b00      	cmp	r3, #0
  403bb2:	f000 81f8 	beq.w	403fa6 <_vfiprintf_r+0x74a>
  403bb6:	3202      	adds	r2, #2
  403bb8:	a90e      	add	r1, sp, #56	; 0x38
  403bba:	2302      	movs	r3, #2
  403bbc:	2807      	cmp	r0, #7
  403bbe:	9211      	str	r2, [sp, #68]	; 0x44
  403bc0:	9010      	str	r0, [sp, #64]	; 0x40
  403bc2:	e88a 000a 	stmia.w	sl, {r1, r3}
  403bc6:	f340 81ea 	ble.w	403f9e <_vfiprintf_r+0x742>
  403bca:	2a00      	cmp	r2, #0
  403bcc:	f040 838c 	bne.w	4042e8 <_vfiprintf_r+0xa8c>
  403bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403bd2:	2b80      	cmp	r3, #128	; 0x80
  403bd4:	f04f 0001 	mov.w	r0, #1
  403bd8:	4611      	mov	r1, r2
  403bda:	46ca      	mov	sl, r9
  403bdc:	f040 81e7 	bne.w	403fae <_vfiprintf_r+0x752>
  403be0:	9b08      	ldr	r3, [sp, #32]
  403be2:	9d01      	ldr	r5, [sp, #4]
  403be4:	1b5e      	subs	r6, r3, r5
  403be6:	2e00      	cmp	r6, #0
  403be8:	f340 81e1 	ble.w	403fae <_vfiprintf_r+0x752>
  403bec:	2e10      	cmp	r6, #16
  403bee:	4d9a      	ldr	r5, [pc, #616]	; (403e58 <_vfiprintf_r+0x5fc>)
  403bf0:	f340 8450 	ble.w	404494 <_vfiprintf_r+0xc38>
  403bf4:	46d4      	mov	ip, sl
  403bf6:	2710      	movs	r7, #16
  403bf8:	46a2      	mov	sl, r4
  403bfa:	9c06      	ldr	r4, [sp, #24]
  403bfc:	e007      	b.n	403c0e <_vfiprintf_r+0x3b2>
  403bfe:	f101 0e02 	add.w	lr, r1, #2
  403c02:	f10c 0c08 	add.w	ip, ip, #8
  403c06:	4601      	mov	r1, r0
  403c08:	3e10      	subs	r6, #16
  403c0a:	2e10      	cmp	r6, #16
  403c0c:	dd11      	ble.n	403c32 <_vfiprintf_r+0x3d6>
  403c0e:	1c48      	adds	r0, r1, #1
  403c10:	3210      	adds	r2, #16
  403c12:	2807      	cmp	r0, #7
  403c14:	9211      	str	r2, [sp, #68]	; 0x44
  403c16:	e88c 00a0 	stmia.w	ip, {r5, r7}
  403c1a:	9010      	str	r0, [sp, #64]	; 0x40
  403c1c:	ddef      	ble.n	403bfe <_vfiprintf_r+0x3a2>
  403c1e:	2a00      	cmp	r2, #0
  403c20:	f040 829d 	bne.w	40415e <_vfiprintf_r+0x902>
  403c24:	3e10      	subs	r6, #16
  403c26:	2e10      	cmp	r6, #16
  403c28:	f04f 0e01 	mov.w	lr, #1
  403c2c:	4611      	mov	r1, r2
  403c2e:	46cc      	mov	ip, r9
  403c30:	dced      	bgt.n	403c0e <_vfiprintf_r+0x3b2>
  403c32:	4654      	mov	r4, sl
  403c34:	46e2      	mov	sl, ip
  403c36:	4432      	add	r2, r6
  403c38:	f1be 0f07 	cmp.w	lr, #7
  403c3c:	9211      	str	r2, [sp, #68]	; 0x44
  403c3e:	e88a 0060 	stmia.w	sl, {r5, r6}
  403c42:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  403c46:	f300 8369 	bgt.w	40431c <_vfiprintf_r+0xac0>
  403c4a:	f10a 0a08 	add.w	sl, sl, #8
  403c4e:	f10e 0001 	add.w	r0, lr, #1
  403c52:	4671      	mov	r1, lr
  403c54:	e1ab      	b.n	403fae <_vfiprintf_r+0x752>
  403c56:	9608      	str	r6, [sp, #32]
  403c58:	f013 0220 	ands.w	r2, r3, #32
  403c5c:	f040 838c 	bne.w	404378 <_vfiprintf_r+0xb1c>
  403c60:	f013 0110 	ands.w	r1, r3, #16
  403c64:	f040 831a 	bne.w	40429c <_vfiprintf_r+0xa40>
  403c68:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  403c6c:	f000 8316 	beq.w	40429c <_vfiprintf_r+0xa40>
  403c70:	9807      	ldr	r0, [sp, #28]
  403c72:	460a      	mov	r2, r1
  403c74:	4601      	mov	r1, r0
  403c76:	3104      	adds	r1, #4
  403c78:	8806      	ldrh	r6, [r0, #0]
  403c7a:	9107      	str	r1, [sp, #28]
  403c7c:	2700      	movs	r7, #0
  403c7e:	e720      	b.n	403ac2 <_vfiprintf_r+0x266>
  403c80:	9608      	str	r6, [sp, #32]
  403c82:	f043 0310 	orr.w	r3, r3, #16
  403c86:	e7e7      	b.n	403c58 <_vfiprintf_r+0x3fc>
  403c88:	9608      	str	r6, [sp, #32]
  403c8a:	f043 0310 	orr.w	r3, r3, #16
  403c8e:	e708      	b.n	403aa2 <_vfiprintf_r+0x246>
  403c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  403c94:	f898 2000 	ldrb.w	r2, [r8]
  403c98:	e652      	b.n	403940 <_vfiprintf_r+0xe4>
  403c9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403c9e:	2600      	movs	r6, #0
  403ca0:	f818 2b01 	ldrb.w	r2, [r8], #1
  403ca4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  403ca8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  403cac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403cb0:	2909      	cmp	r1, #9
  403cb2:	d9f5      	bls.n	403ca0 <_vfiprintf_r+0x444>
  403cb4:	e646      	b.n	403944 <_vfiprintf_r+0xe8>
  403cb6:	9608      	str	r6, [sp, #32]
  403cb8:	2800      	cmp	r0, #0
  403cba:	f040 8408 	bne.w	4044ce <_vfiprintf_r+0xc72>
  403cbe:	f043 0310 	orr.w	r3, r3, #16
  403cc2:	069e      	lsls	r6, r3, #26
  403cc4:	f100 834c 	bmi.w	404360 <_vfiprintf_r+0xb04>
  403cc8:	06dd      	lsls	r5, r3, #27
  403cca:	f100 82f3 	bmi.w	4042b4 <_vfiprintf_r+0xa58>
  403cce:	0658      	lsls	r0, r3, #25
  403cd0:	f140 82f0 	bpl.w	4042b4 <_vfiprintf_r+0xa58>
  403cd4:	9d07      	ldr	r5, [sp, #28]
  403cd6:	f9b5 6000 	ldrsh.w	r6, [r5]
  403cda:	462a      	mov	r2, r5
  403cdc:	17f7      	asrs	r7, r6, #31
  403cde:	3204      	adds	r2, #4
  403ce0:	4630      	mov	r0, r6
  403ce2:	4639      	mov	r1, r7
  403ce4:	9207      	str	r2, [sp, #28]
  403ce6:	2800      	cmp	r0, #0
  403ce8:	f171 0200 	sbcs.w	r2, r1, #0
  403cec:	f2c0 835d 	blt.w	4043aa <_vfiprintf_r+0xb4e>
  403cf0:	1c61      	adds	r1, r4, #1
  403cf2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403cf6:	f04f 0201 	mov.w	r2, #1
  403cfa:	f47f aeea 	bne.w	403ad2 <_vfiprintf_r+0x276>
  403cfe:	ea56 0107 	orrs.w	r1, r6, r7
  403d02:	f000 824d 	beq.w	4041a0 <_vfiprintf_r+0x944>
  403d06:	9302      	str	r3, [sp, #8]
  403d08:	2a01      	cmp	r2, #1
  403d0a:	f000 828c 	beq.w	404226 <_vfiprintf_r+0x9ca>
  403d0e:	2a02      	cmp	r2, #2
  403d10:	f040 825c 	bne.w	4041cc <_vfiprintf_r+0x970>
  403d14:	980b      	ldr	r0, [sp, #44]	; 0x2c
  403d16:	46cb      	mov	fp, r9
  403d18:	0933      	lsrs	r3, r6, #4
  403d1a:	f006 010f 	and.w	r1, r6, #15
  403d1e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  403d22:	093a      	lsrs	r2, r7, #4
  403d24:	461e      	mov	r6, r3
  403d26:	4617      	mov	r7, r2
  403d28:	5c43      	ldrb	r3, [r0, r1]
  403d2a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  403d2e:	ea56 0307 	orrs.w	r3, r6, r7
  403d32:	d1f1      	bne.n	403d18 <_vfiprintf_r+0x4bc>
  403d34:	eba9 030b 	sub.w	r3, r9, fp
  403d38:	9305      	str	r3, [sp, #20]
  403d3a:	e6e1      	b.n	403b00 <_vfiprintf_r+0x2a4>
  403d3c:	2800      	cmp	r0, #0
  403d3e:	f040 83c0 	bne.w	4044c2 <_vfiprintf_r+0xc66>
  403d42:	0699      	lsls	r1, r3, #26
  403d44:	f100 8367 	bmi.w	404416 <_vfiprintf_r+0xbba>
  403d48:	06da      	lsls	r2, r3, #27
  403d4a:	f100 80f1 	bmi.w	403f30 <_vfiprintf_r+0x6d4>
  403d4e:	065b      	lsls	r3, r3, #25
  403d50:	f140 80ee 	bpl.w	403f30 <_vfiprintf_r+0x6d4>
  403d54:	9a07      	ldr	r2, [sp, #28]
  403d56:	6813      	ldr	r3, [r2, #0]
  403d58:	3204      	adds	r2, #4
  403d5a:	9207      	str	r2, [sp, #28]
  403d5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  403d60:	801a      	strh	r2, [r3, #0]
  403d62:	e5b8      	b.n	4038d6 <_vfiprintf_r+0x7a>
  403d64:	9807      	ldr	r0, [sp, #28]
  403d66:	4a3d      	ldr	r2, [pc, #244]	; (403e5c <_vfiprintf_r+0x600>)
  403d68:	9608      	str	r6, [sp, #32]
  403d6a:	920b      	str	r2, [sp, #44]	; 0x2c
  403d6c:	6806      	ldr	r6, [r0, #0]
  403d6e:	2278      	movs	r2, #120	; 0x78
  403d70:	2130      	movs	r1, #48	; 0x30
  403d72:	3004      	adds	r0, #4
  403d74:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403d78:	f043 0302 	orr.w	r3, r3, #2
  403d7c:	9007      	str	r0, [sp, #28]
  403d7e:	2700      	movs	r7, #0
  403d80:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403d84:	2202      	movs	r2, #2
  403d86:	e69c      	b.n	403ac2 <_vfiprintf_r+0x266>
  403d88:	9608      	str	r6, [sp, #32]
  403d8a:	2800      	cmp	r0, #0
  403d8c:	d099      	beq.n	403cc2 <_vfiprintf_r+0x466>
  403d8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403d92:	e796      	b.n	403cc2 <_vfiprintf_r+0x466>
  403d94:	f898 2000 	ldrb.w	r2, [r8]
  403d98:	2d00      	cmp	r5, #0
  403d9a:	f47f add1 	bne.w	403940 <_vfiprintf_r+0xe4>
  403d9e:	2001      	movs	r0, #1
  403da0:	2520      	movs	r5, #32
  403da2:	e5cd      	b.n	403940 <_vfiprintf_r+0xe4>
  403da4:	f043 0301 	orr.w	r3, r3, #1
  403da8:	f898 2000 	ldrb.w	r2, [r8]
  403dac:	e5c8      	b.n	403940 <_vfiprintf_r+0xe4>
  403dae:	9608      	str	r6, [sp, #32]
  403db0:	2800      	cmp	r0, #0
  403db2:	f040 8393 	bne.w	4044dc <_vfiprintf_r+0xc80>
  403db6:	4929      	ldr	r1, [pc, #164]	; (403e5c <_vfiprintf_r+0x600>)
  403db8:	910b      	str	r1, [sp, #44]	; 0x2c
  403dba:	069f      	lsls	r7, r3, #26
  403dbc:	f100 82e8 	bmi.w	404390 <_vfiprintf_r+0xb34>
  403dc0:	9807      	ldr	r0, [sp, #28]
  403dc2:	06de      	lsls	r6, r3, #27
  403dc4:	4601      	mov	r1, r0
  403dc6:	f100 8270 	bmi.w	4042aa <_vfiprintf_r+0xa4e>
  403dca:	065d      	lsls	r5, r3, #25
  403dcc:	f140 826d 	bpl.w	4042aa <_vfiprintf_r+0xa4e>
  403dd0:	3104      	adds	r1, #4
  403dd2:	8806      	ldrh	r6, [r0, #0]
  403dd4:	9107      	str	r1, [sp, #28]
  403dd6:	2700      	movs	r7, #0
  403dd8:	07d8      	lsls	r0, r3, #31
  403dda:	f140 8222 	bpl.w	404222 <_vfiprintf_r+0x9c6>
  403dde:	ea56 0107 	orrs.w	r1, r6, r7
  403de2:	f000 821e 	beq.w	404222 <_vfiprintf_r+0x9c6>
  403de6:	2130      	movs	r1, #48	; 0x30
  403de8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  403dec:	f043 0302 	orr.w	r3, r3, #2
  403df0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403df4:	2202      	movs	r2, #2
  403df6:	e664      	b.n	403ac2 <_vfiprintf_r+0x266>
  403df8:	9608      	str	r6, [sp, #32]
  403dfa:	2800      	cmp	r0, #0
  403dfc:	f040 836b 	bne.w	4044d6 <_vfiprintf_r+0xc7a>
  403e00:	4917      	ldr	r1, [pc, #92]	; (403e60 <_vfiprintf_r+0x604>)
  403e02:	910b      	str	r1, [sp, #44]	; 0x2c
  403e04:	e7d9      	b.n	403dba <_vfiprintf_r+0x55e>
  403e06:	9907      	ldr	r1, [sp, #28]
  403e08:	9608      	str	r6, [sp, #32]
  403e0a:	680a      	ldr	r2, [r1, #0]
  403e0c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403e10:	f04f 0000 	mov.w	r0, #0
  403e14:	460a      	mov	r2, r1
  403e16:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  403e1a:	3204      	adds	r2, #4
  403e1c:	2001      	movs	r0, #1
  403e1e:	9001      	str	r0, [sp, #4]
  403e20:	9207      	str	r2, [sp, #28]
  403e22:	9005      	str	r0, [sp, #20]
  403e24:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403e28:	9302      	str	r3, [sp, #8]
  403e2a:	2400      	movs	r4, #0
  403e2c:	e670      	b.n	403b10 <_vfiprintf_r+0x2b4>
  403e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403e32:	f898 2000 	ldrb.w	r2, [r8]
  403e36:	e583      	b.n	403940 <_vfiprintf_r+0xe4>
  403e38:	f898 2000 	ldrb.w	r2, [r8]
  403e3c:	2a6c      	cmp	r2, #108	; 0x6c
  403e3e:	bf03      	ittte	eq
  403e40:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403e44:	f043 0320 	orreq.w	r3, r3, #32
  403e48:	f108 0801 	addeq.w	r8, r8, #1
  403e4c:	f043 0310 	orrne.w	r3, r3, #16
  403e50:	e576      	b.n	403940 <_vfiprintf_r+0xe4>
  403e52:	bf00      	nop
  403e54:	00405df4 	.word	0x00405df4
  403e58:	00405e04 	.word	0x00405e04
  403e5c:	00405dd8 	.word	0x00405dd8
  403e60:	00405dc4 	.word	0x00405dc4
  403e64:	9907      	ldr	r1, [sp, #28]
  403e66:	680e      	ldr	r6, [r1, #0]
  403e68:	460a      	mov	r2, r1
  403e6a:	2e00      	cmp	r6, #0
  403e6c:	f102 0204 	add.w	r2, r2, #4
  403e70:	f6ff ae0f 	blt.w	403a92 <_vfiprintf_r+0x236>
  403e74:	9207      	str	r2, [sp, #28]
  403e76:	f898 2000 	ldrb.w	r2, [r8]
  403e7a:	e561      	b.n	403940 <_vfiprintf_r+0xe4>
  403e7c:	f898 2000 	ldrb.w	r2, [r8]
  403e80:	2001      	movs	r0, #1
  403e82:	252b      	movs	r5, #43	; 0x2b
  403e84:	e55c      	b.n	403940 <_vfiprintf_r+0xe4>
  403e86:	9907      	ldr	r1, [sp, #28]
  403e88:	9608      	str	r6, [sp, #32]
  403e8a:	f8d1 b000 	ldr.w	fp, [r1]
  403e8e:	f04f 0200 	mov.w	r2, #0
  403e92:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403e96:	1d0e      	adds	r6, r1, #4
  403e98:	f1bb 0f00 	cmp.w	fp, #0
  403e9c:	f000 82e5 	beq.w	40446a <_vfiprintf_r+0xc0e>
  403ea0:	1c67      	adds	r7, r4, #1
  403ea2:	f000 82c4 	beq.w	40442e <_vfiprintf_r+0xbd2>
  403ea6:	4622      	mov	r2, r4
  403ea8:	2100      	movs	r1, #0
  403eaa:	4658      	mov	r0, fp
  403eac:	9301      	str	r3, [sp, #4]
  403eae:	f001 f91f 	bl	4050f0 <memchr>
  403eb2:	9b01      	ldr	r3, [sp, #4]
  403eb4:	2800      	cmp	r0, #0
  403eb6:	f000 82e5 	beq.w	404484 <_vfiprintf_r+0xc28>
  403eba:	eba0 020b 	sub.w	r2, r0, fp
  403ebe:	9205      	str	r2, [sp, #20]
  403ec0:	9607      	str	r6, [sp, #28]
  403ec2:	9302      	str	r3, [sp, #8]
  403ec4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403ec8:	2400      	movs	r4, #0
  403eca:	e619      	b.n	403b00 <_vfiprintf_r+0x2a4>
  403ecc:	f898 2000 	ldrb.w	r2, [r8]
  403ed0:	2a2a      	cmp	r2, #42	; 0x2a
  403ed2:	f108 0701 	add.w	r7, r8, #1
  403ed6:	f000 82e9 	beq.w	4044ac <_vfiprintf_r+0xc50>
  403eda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403ede:	2909      	cmp	r1, #9
  403ee0:	46b8      	mov	r8, r7
  403ee2:	f04f 0400 	mov.w	r4, #0
  403ee6:	f63f ad2d 	bhi.w	403944 <_vfiprintf_r+0xe8>
  403eea:	f818 2b01 	ldrb.w	r2, [r8], #1
  403eee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403ef2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403ef6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  403efa:	2909      	cmp	r1, #9
  403efc:	d9f5      	bls.n	403eea <_vfiprintf_r+0x68e>
  403efe:	e521      	b.n	403944 <_vfiprintf_r+0xe8>
  403f00:	f043 0320 	orr.w	r3, r3, #32
  403f04:	f898 2000 	ldrb.w	r2, [r8]
  403f08:	e51a      	b.n	403940 <_vfiprintf_r+0xe4>
  403f0a:	9608      	str	r6, [sp, #32]
  403f0c:	2800      	cmp	r0, #0
  403f0e:	f040 82db 	bne.w	4044c8 <_vfiprintf_r+0xc6c>
  403f12:	2a00      	cmp	r2, #0
  403f14:	f000 80e7 	beq.w	4040e6 <_vfiprintf_r+0x88a>
  403f18:	2101      	movs	r1, #1
  403f1a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403f1e:	f04f 0200 	mov.w	r2, #0
  403f22:	9101      	str	r1, [sp, #4]
  403f24:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403f28:	9105      	str	r1, [sp, #20]
  403f2a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403f2e:	e77b      	b.n	403e28 <_vfiprintf_r+0x5cc>
  403f30:	9a07      	ldr	r2, [sp, #28]
  403f32:	6813      	ldr	r3, [r2, #0]
  403f34:	3204      	adds	r2, #4
  403f36:	9207      	str	r2, [sp, #28]
  403f38:	9a03      	ldr	r2, [sp, #12]
  403f3a:	601a      	str	r2, [r3, #0]
  403f3c:	e4cb      	b.n	4038d6 <_vfiprintf_r+0x7a>
  403f3e:	aa0f      	add	r2, sp, #60	; 0x3c
  403f40:	9904      	ldr	r1, [sp, #16]
  403f42:	4620      	mov	r0, r4
  403f44:	f7ff fc4a 	bl	4037dc <__sprint_r.part.0>
  403f48:	2800      	cmp	r0, #0
  403f4a:	f040 8139 	bne.w	4041c0 <_vfiprintf_r+0x964>
  403f4e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f50:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f52:	f101 0c01 	add.w	ip, r1, #1
  403f56:	46ce      	mov	lr, r9
  403f58:	e5ff      	b.n	403b5a <_vfiprintf_r+0x2fe>
  403f5a:	9910      	ldr	r1, [sp, #64]	; 0x40
  403f5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403f5e:	1c48      	adds	r0, r1, #1
  403f60:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403f64:	2d00      	cmp	r5, #0
  403f66:	f43f ae22 	beq.w	403bae <_vfiprintf_r+0x352>
  403f6a:	3201      	adds	r2, #1
  403f6c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  403f70:	2101      	movs	r1, #1
  403f72:	2807      	cmp	r0, #7
  403f74:	9211      	str	r2, [sp, #68]	; 0x44
  403f76:	9010      	str	r0, [sp, #64]	; 0x40
  403f78:	f8ca 5000 	str.w	r5, [sl]
  403f7c:	f8ca 1004 	str.w	r1, [sl, #4]
  403f80:	f340 8108 	ble.w	404194 <_vfiprintf_r+0x938>
  403f84:	2a00      	cmp	r2, #0
  403f86:	f040 81bc 	bne.w	404302 <_vfiprintf_r+0xaa6>
  403f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403f8c:	2b00      	cmp	r3, #0
  403f8e:	f43f ae1f 	beq.w	403bd0 <_vfiprintf_r+0x374>
  403f92:	ab0e      	add	r3, sp, #56	; 0x38
  403f94:	2202      	movs	r2, #2
  403f96:	4608      	mov	r0, r1
  403f98:	931c      	str	r3, [sp, #112]	; 0x70
  403f9a:	921d      	str	r2, [sp, #116]	; 0x74
  403f9c:	46ca      	mov	sl, r9
  403f9e:	4601      	mov	r1, r0
  403fa0:	f10a 0a08 	add.w	sl, sl, #8
  403fa4:	3001      	adds	r0, #1
  403fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fa8:	2b80      	cmp	r3, #128	; 0x80
  403faa:	f43f ae19 	beq.w	403be0 <_vfiprintf_r+0x384>
  403fae:	9b05      	ldr	r3, [sp, #20]
  403fb0:	1ae4      	subs	r4, r4, r3
  403fb2:	2c00      	cmp	r4, #0
  403fb4:	dd2e      	ble.n	404014 <_vfiprintf_r+0x7b8>
  403fb6:	2c10      	cmp	r4, #16
  403fb8:	4db3      	ldr	r5, [pc, #716]	; (404288 <_vfiprintf_r+0xa2c>)
  403fba:	dd1e      	ble.n	403ffa <_vfiprintf_r+0x79e>
  403fbc:	46d6      	mov	lr, sl
  403fbe:	2610      	movs	r6, #16
  403fc0:	9f06      	ldr	r7, [sp, #24]
  403fc2:	f8dd a010 	ldr.w	sl, [sp, #16]
  403fc6:	e006      	b.n	403fd6 <_vfiprintf_r+0x77a>
  403fc8:	1c88      	adds	r0, r1, #2
  403fca:	f10e 0e08 	add.w	lr, lr, #8
  403fce:	4619      	mov	r1, r3
  403fd0:	3c10      	subs	r4, #16
  403fd2:	2c10      	cmp	r4, #16
  403fd4:	dd10      	ble.n	403ff8 <_vfiprintf_r+0x79c>
  403fd6:	1c4b      	adds	r3, r1, #1
  403fd8:	3210      	adds	r2, #16
  403fda:	2b07      	cmp	r3, #7
  403fdc:	9211      	str	r2, [sp, #68]	; 0x44
  403fde:	e88e 0060 	stmia.w	lr, {r5, r6}
  403fe2:	9310      	str	r3, [sp, #64]	; 0x40
  403fe4:	ddf0      	ble.n	403fc8 <_vfiprintf_r+0x76c>
  403fe6:	2a00      	cmp	r2, #0
  403fe8:	d165      	bne.n	4040b6 <_vfiprintf_r+0x85a>
  403fea:	3c10      	subs	r4, #16
  403fec:	2c10      	cmp	r4, #16
  403fee:	f04f 0001 	mov.w	r0, #1
  403ff2:	4611      	mov	r1, r2
  403ff4:	46ce      	mov	lr, r9
  403ff6:	dcee      	bgt.n	403fd6 <_vfiprintf_r+0x77a>
  403ff8:	46f2      	mov	sl, lr
  403ffa:	4422      	add	r2, r4
  403ffc:	2807      	cmp	r0, #7
  403ffe:	9211      	str	r2, [sp, #68]	; 0x44
  404000:	f8ca 5000 	str.w	r5, [sl]
  404004:	f8ca 4004 	str.w	r4, [sl, #4]
  404008:	9010      	str	r0, [sp, #64]	; 0x40
  40400a:	f300 8085 	bgt.w	404118 <_vfiprintf_r+0x8bc>
  40400e:	f10a 0a08 	add.w	sl, sl, #8
  404012:	3001      	adds	r0, #1
  404014:	9905      	ldr	r1, [sp, #20]
  404016:	f8ca b000 	str.w	fp, [sl]
  40401a:	440a      	add	r2, r1
  40401c:	2807      	cmp	r0, #7
  40401e:	9211      	str	r2, [sp, #68]	; 0x44
  404020:	f8ca 1004 	str.w	r1, [sl, #4]
  404024:	9010      	str	r0, [sp, #64]	; 0x40
  404026:	f340 8082 	ble.w	40412e <_vfiprintf_r+0x8d2>
  40402a:	2a00      	cmp	r2, #0
  40402c:	f040 8118 	bne.w	404260 <_vfiprintf_r+0xa04>
  404030:	9b02      	ldr	r3, [sp, #8]
  404032:	9210      	str	r2, [sp, #64]	; 0x40
  404034:	0758      	lsls	r0, r3, #29
  404036:	d535      	bpl.n	4040a4 <_vfiprintf_r+0x848>
  404038:	9b08      	ldr	r3, [sp, #32]
  40403a:	9901      	ldr	r1, [sp, #4]
  40403c:	1a5c      	subs	r4, r3, r1
  40403e:	2c00      	cmp	r4, #0
  404040:	f340 80e7 	ble.w	404212 <_vfiprintf_r+0x9b6>
  404044:	46ca      	mov	sl, r9
  404046:	2c10      	cmp	r4, #16
  404048:	f340 8218 	ble.w	40447c <_vfiprintf_r+0xc20>
  40404c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40404e:	4e8f      	ldr	r6, [pc, #572]	; (40428c <_vfiprintf_r+0xa30>)
  404050:	9f06      	ldr	r7, [sp, #24]
  404052:	f8dd b010 	ldr.w	fp, [sp, #16]
  404056:	2510      	movs	r5, #16
  404058:	e006      	b.n	404068 <_vfiprintf_r+0x80c>
  40405a:	1c88      	adds	r0, r1, #2
  40405c:	f10a 0a08 	add.w	sl, sl, #8
  404060:	4619      	mov	r1, r3
  404062:	3c10      	subs	r4, #16
  404064:	2c10      	cmp	r4, #16
  404066:	dd11      	ble.n	40408c <_vfiprintf_r+0x830>
  404068:	1c4b      	adds	r3, r1, #1
  40406a:	3210      	adds	r2, #16
  40406c:	2b07      	cmp	r3, #7
  40406e:	9211      	str	r2, [sp, #68]	; 0x44
  404070:	f8ca 6000 	str.w	r6, [sl]
  404074:	f8ca 5004 	str.w	r5, [sl, #4]
  404078:	9310      	str	r3, [sp, #64]	; 0x40
  40407a:	ddee      	ble.n	40405a <_vfiprintf_r+0x7fe>
  40407c:	bb42      	cbnz	r2, 4040d0 <_vfiprintf_r+0x874>
  40407e:	3c10      	subs	r4, #16
  404080:	2c10      	cmp	r4, #16
  404082:	f04f 0001 	mov.w	r0, #1
  404086:	4611      	mov	r1, r2
  404088:	46ca      	mov	sl, r9
  40408a:	dced      	bgt.n	404068 <_vfiprintf_r+0x80c>
  40408c:	4422      	add	r2, r4
  40408e:	2807      	cmp	r0, #7
  404090:	9211      	str	r2, [sp, #68]	; 0x44
  404092:	f8ca 6000 	str.w	r6, [sl]
  404096:	f8ca 4004 	str.w	r4, [sl, #4]
  40409a:	9010      	str	r0, [sp, #64]	; 0x40
  40409c:	dd51      	ble.n	404142 <_vfiprintf_r+0x8e6>
  40409e:	2a00      	cmp	r2, #0
  4040a0:	f040 819b 	bne.w	4043da <_vfiprintf_r+0xb7e>
  4040a4:	9b03      	ldr	r3, [sp, #12]
  4040a6:	9a08      	ldr	r2, [sp, #32]
  4040a8:	9901      	ldr	r1, [sp, #4]
  4040aa:	428a      	cmp	r2, r1
  4040ac:	bfac      	ite	ge
  4040ae:	189b      	addge	r3, r3, r2
  4040b0:	185b      	addlt	r3, r3, r1
  4040b2:	9303      	str	r3, [sp, #12]
  4040b4:	e04e      	b.n	404154 <_vfiprintf_r+0x8f8>
  4040b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4040b8:	4651      	mov	r1, sl
  4040ba:	4638      	mov	r0, r7
  4040bc:	f7ff fb8e 	bl	4037dc <__sprint_r.part.0>
  4040c0:	2800      	cmp	r0, #0
  4040c2:	f040 813f 	bne.w	404344 <_vfiprintf_r+0xae8>
  4040c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4040c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4040ca:	1c48      	adds	r0, r1, #1
  4040cc:	46ce      	mov	lr, r9
  4040ce:	e77f      	b.n	403fd0 <_vfiprintf_r+0x774>
  4040d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4040d2:	4659      	mov	r1, fp
  4040d4:	4638      	mov	r0, r7
  4040d6:	f7ff fb81 	bl	4037dc <__sprint_r.part.0>
  4040da:	b960      	cbnz	r0, 4040f6 <_vfiprintf_r+0x89a>
  4040dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4040de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4040e0:	1c48      	adds	r0, r1, #1
  4040e2:	46ca      	mov	sl, r9
  4040e4:	e7bd      	b.n	404062 <_vfiprintf_r+0x806>
  4040e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4040e8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4040ec:	2b00      	cmp	r3, #0
  4040ee:	f040 81d4 	bne.w	40449a <_vfiprintf_r+0xc3e>
  4040f2:	2300      	movs	r3, #0
  4040f4:	9310      	str	r3, [sp, #64]	; 0x40
  4040f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4040fa:	f013 0f01 	tst.w	r3, #1
  4040fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404102:	d102      	bne.n	40410a <_vfiprintf_r+0x8ae>
  404104:	059a      	lsls	r2, r3, #22
  404106:	f140 80de 	bpl.w	4042c6 <_vfiprintf_r+0xa6a>
  40410a:	065b      	lsls	r3, r3, #25
  40410c:	f53f acb2 	bmi.w	403a74 <_vfiprintf_r+0x218>
  404110:	9803      	ldr	r0, [sp, #12]
  404112:	b02d      	add	sp, #180	; 0xb4
  404114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404118:	2a00      	cmp	r2, #0
  40411a:	f040 8106 	bne.w	40432a <_vfiprintf_r+0xace>
  40411e:	9a05      	ldr	r2, [sp, #20]
  404120:	921d      	str	r2, [sp, #116]	; 0x74
  404122:	2301      	movs	r3, #1
  404124:	9211      	str	r2, [sp, #68]	; 0x44
  404126:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40412a:	9310      	str	r3, [sp, #64]	; 0x40
  40412c:	46ca      	mov	sl, r9
  40412e:	f10a 0a08 	add.w	sl, sl, #8
  404132:	9b02      	ldr	r3, [sp, #8]
  404134:	0759      	lsls	r1, r3, #29
  404136:	d504      	bpl.n	404142 <_vfiprintf_r+0x8e6>
  404138:	9b08      	ldr	r3, [sp, #32]
  40413a:	9901      	ldr	r1, [sp, #4]
  40413c:	1a5c      	subs	r4, r3, r1
  40413e:	2c00      	cmp	r4, #0
  404140:	dc81      	bgt.n	404046 <_vfiprintf_r+0x7ea>
  404142:	9b03      	ldr	r3, [sp, #12]
  404144:	9908      	ldr	r1, [sp, #32]
  404146:	9801      	ldr	r0, [sp, #4]
  404148:	4281      	cmp	r1, r0
  40414a:	bfac      	ite	ge
  40414c:	185b      	addge	r3, r3, r1
  40414e:	181b      	addlt	r3, r3, r0
  404150:	9303      	str	r3, [sp, #12]
  404152:	bb72      	cbnz	r2, 4041b2 <_vfiprintf_r+0x956>
  404154:	2300      	movs	r3, #0
  404156:	9310      	str	r3, [sp, #64]	; 0x40
  404158:	46ca      	mov	sl, r9
  40415a:	f7ff bbbc 	b.w	4038d6 <_vfiprintf_r+0x7a>
  40415e:	aa0f      	add	r2, sp, #60	; 0x3c
  404160:	9904      	ldr	r1, [sp, #16]
  404162:	4620      	mov	r0, r4
  404164:	f7ff fb3a 	bl	4037dc <__sprint_r.part.0>
  404168:	bb50      	cbnz	r0, 4041c0 <_vfiprintf_r+0x964>
  40416a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40416c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40416e:	f101 0e01 	add.w	lr, r1, #1
  404172:	46cc      	mov	ip, r9
  404174:	e548      	b.n	403c08 <_vfiprintf_r+0x3ac>
  404176:	2a00      	cmp	r2, #0
  404178:	f040 8140 	bne.w	4043fc <_vfiprintf_r+0xba0>
  40417c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404180:	2900      	cmp	r1, #0
  404182:	f000 811b 	beq.w	4043bc <_vfiprintf_r+0xb60>
  404186:	2201      	movs	r2, #1
  404188:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40418c:	4610      	mov	r0, r2
  40418e:	921d      	str	r2, [sp, #116]	; 0x74
  404190:	911c      	str	r1, [sp, #112]	; 0x70
  404192:	46ca      	mov	sl, r9
  404194:	4601      	mov	r1, r0
  404196:	f10a 0a08 	add.w	sl, sl, #8
  40419a:	3001      	adds	r0, #1
  40419c:	e507      	b.n	403bae <_vfiprintf_r+0x352>
  40419e:	9b02      	ldr	r3, [sp, #8]
  4041a0:	2a01      	cmp	r2, #1
  4041a2:	f000 8098 	beq.w	4042d6 <_vfiprintf_r+0xa7a>
  4041a6:	2a02      	cmp	r2, #2
  4041a8:	d10d      	bne.n	4041c6 <_vfiprintf_r+0x96a>
  4041aa:	9302      	str	r3, [sp, #8]
  4041ac:	2600      	movs	r6, #0
  4041ae:	2700      	movs	r7, #0
  4041b0:	e5b0      	b.n	403d14 <_vfiprintf_r+0x4b8>
  4041b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4041b4:	9904      	ldr	r1, [sp, #16]
  4041b6:	9806      	ldr	r0, [sp, #24]
  4041b8:	f7ff fb10 	bl	4037dc <__sprint_r.part.0>
  4041bc:	2800      	cmp	r0, #0
  4041be:	d0c9      	beq.n	404154 <_vfiprintf_r+0x8f8>
  4041c0:	f8dd b010 	ldr.w	fp, [sp, #16]
  4041c4:	e797      	b.n	4040f6 <_vfiprintf_r+0x89a>
  4041c6:	9302      	str	r3, [sp, #8]
  4041c8:	2600      	movs	r6, #0
  4041ca:	2700      	movs	r7, #0
  4041cc:	4649      	mov	r1, r9
  4041ce:	e000      	b.n	4041d2 <_vfiprintf_r+0x976>
  4041d0:	4659      	mov	r1, fp
  4041d2:	08f2      	lsrs	r2, r6, #3
  4041d4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4041d8:	08f8      	lsrs	r0, r7, #3
  4041da:	f006 0307 	and.w	r3, r6, #7
  4041de:	4607      	mov	r7, r0
  4041e0:	4616      	mov	r6, r2
  4041e2:	3330      	adds	r3, #48	; 0x30
  4041e4:	ea56 0207 	orrs.w	r2, r6, r7
  4041e8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4041ec:	f101 3bff 	add.w	fp, r1, #4294967295
  4041f0:	d1ee      	bne.n	4041d0 <_vfiprintf_r+0x974>
  4041f2:	9a02      	ldr	r2, [sp, #8]
  4041f4:	07d6      	lsls	r6, r2, #31
  4041f6:	f57f ad9d 	bpl.w	403d34 <_vfiprintf_r+0x4d8>
  4041fa:	2b30      	cmp	r3, #48	; 0x30
  4041fc:	f43f ad9a 	beq.w	403d34 <_vfiprintf_r+0x4d8>
  404200:	3902      	subs	r1, #2
  404202:	2330      	movs	r3, #48	; 0x30
  404204:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404208:	eba9 0301 	sub.w	r3, r9, r1
  40420c:	9305      	str	r3, [sp, #20]
  40420e:	468b      	mov	fp, r1
  404210:	e476      	b.n	403b00 <_vfiprintf_r+0x2a4>
  404212:	9b03      	ldr	r3, [sp, #12]
  404214:	9a08      	ldr	r2, [sp, #32]
  404216:	428a      	cmp	r2, r1
  404218:	bfac      	ite	ge
  40421a:	189b      	addge	r3, r3, r2
  40421c:	185b      	addlt	r3, r3, r1
  40421e:	9303      	str	r3, [sp, #12]
  404220:	e798      	b.n	404154 <_vfiprintf_r+0x8f8>
  404222:	2202      	movs	r2, #2
  404224:	e44d      	b.n	403ac2 <_vfiprintf_r+0x266>
  404226:	2f00      	cmp	r7, #0
  404228:	bf08      	it	eq
  40422a:	2e0a      	cmpeq	r6, #10
  40422c:	d352      	bcc.n	4042d4 <_vfiprintf_r+0xa78>
  40422e:	46cb      	mov	fp, r9
  404230:	4630      	mov	r0, r6
  404232:	4639      	mov	r1, r7
  404234:	220a      	movs	r2, #10
  404236:	2300      	movs	r3, #0
  404238:	f001 fbc6 	bl	4059c8 <__aeabi_uldivmod>
  40423c:	3230      	adds	r2, #48	; 0x30
  40423e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404242:	4630      	mov	r0, r6
  404244:	4639      	mov	r1, r7
  404246:	2300      	movs	r3, #0
  404248:	220a      	movs	r2, #10
  40424a:	f001 fbbd 	bl	4059c8 <__aeabi_uldivmod>
  40424e:	4606      	mov	r6, r0
  404250:	460f      	mov	r7, r1
  404252:	ea56 0307 	orrs.w	r3, r6, r7
  404256:	d1eb      	bne.n	404230 <_vfiprintf_r+0x9d4>
  404258:	e56c      	b.n	403d34 <_vfiprintf_r+0x4d8>
  40425a:	9405      	str	r4, [sp, #20]
  40425c:	46cb      	mov	fp, r9
  40425e:	e44f      	b.n	403b00 <_vfiprintf_r+0x2a4>
  404260:	aa0f      	add	r2, sp, #60	; 0x3c
  404262:	9904      	ldr	r1, [sp, #16]
  404264:	9806      	ldr	r0, [sp, #24]
  404266:	f7ff fab9 	bl	4037dc <__sprint_r.part.0>
  40426a:	2800      	cmp	r0, #0
  40426c:	d1a8      	bne.n	4041c0 <_vfiprintf_r+0x964>
  40426e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404270:	46ca      	mov	sl, r9
  404272:	e75e      	b.n	404132 <_vfiprintf_r+0x8d6>
  404274:	aa0f      	add	r2, sp, #60	; 0x3c
  404276:	9904      	ldr	r1, [sp, #16]
  404278:	9806      	ldr	r0, [sp, #24]
  40427a:	f7ff faaf 	bl	4037dc <__sprint_r.part.0>
  40427e:	2800      	cmp	r0, #0
  404280:	d19e      	bne.n	4041c0 <_vfiprintf_r+0x964>
  404282:	46ca      	mov	sl, r9
  404284:	f7ff bbc0 	b.w	403a08 <_vfiprintf_r+0x1ac>
  404288:	00405e04 	.word	0x00405e04
  40428c:	00405df4 	.word	0x00405df4
  404290:	3104      	adds	r1, #4
  404292:	6816      	ldr	r6, [r2, #0]
  404294:	9107      	str	r1, [sp, #28]
  404296:	2201      	movs	r2, #1
  404298:	2700      	movs	r7, #0
  40429a:	e412      	b.n	403ac2 <_vfiprintf_r+0x266>
  40429c:	9807      	ldr	r0, [sp, #28]
  40429e:	4601      	mov	r1, r0
  4042a0:	3104      	adds	r1, #4
  4042a2:	6806      	ldr	r6, [r0, #0]
  4042a4:	9107      	str	r1, [sp, #28]
  4042a6:	2700      	movs	r7, #0
  4042a8:	e40b      	b.n	403ac2 <_vfiprintf_r+0x266>
  4042aa:	680e      	ldr	r6, [r1, #0]
  4042ac:	3104      	adds	r1, #4
  4042ae:	9107      	str	r1, [sp, #28]
  4042b0:	2700      	movs	r7, #0
  4042b2:	e591      	b.n	403dd8 <_vfiprintf_r+0x57c>
  4042b4:	9907      	ldr	r1, [sp, #28]
  4042b6:	680e      	ldr	r6, [r1, #0]
  4042b8:	460a      	mov	r2, r1
  4042ba:	17f7      	asrs	r7, r6, #31
  4042bc:	3204      	adds	r2, #4
  4042be:	9207      	str	r2, [sp, #28]
  4042c0:	4630      	mov	r0, r6
  4042c2:	4639      	mov	r1, r7
  4042c4:	e50f      	b.n	403ce6 <_vfiprintf_r+0x48a>
  4042c6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4042ca:	f000 fe7f 	bl	404fcc <__retarget_lock_release_recursive>
  4042ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4042d2:	e71a      	b.n	40410a <_vfiprintf_r+0x8ae>
  4042d4:	9b02      	ldr	r3, [sp, #8]
  4042d6:	9302      	str	r3, [sp, #8]
  4042d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4042dc:	3630      	adds	r6, #48	; 0x30
  4042de:	2301      	movs	r3, #1
  4042e0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4042e4:	9305      	str	r3, [sp, #20]
  4042e6:	e40b      	b.n	403b00 <_vfiprintf_r+0x2a4>
  4042e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4042ea:	9904      	ldr	r1, [sp, #16]
  4042ec:	9806      	ldr	r0, [sp, #24]
  4042ee:	f7ff fa75 	bl	4037dc <__sprint_r.part.0>
  4042f2:	2800      	cmp	r0, #0
  4042f4:	f47f af64 	bne.w	4041c0 <_vfiprintf_r+0x964>
  4042f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4042fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4042fc:	1c48      	adds	r0, r1, #1
  4042fe:	46ca      	mov	sl, r9
  404300:	e651      	b.n	403fa6 <_vfiprintf_r+0x74a>
  404302:	aa0f      	add	r2, sp, #60	; 0x3c
  404304:	9904      	ldr	r1, [sp, #16]
  404306:	9806      	ldr	r0, [sp, #24]
  404308:	f7ff fa68 	bl	4037dc <__sprint_r.part.0>
  40430c:	2800      	cmp	r0, #0
  40430e:	f47f af57 	bne.w	4041c0 <_vfiprintf_r+0x964>
  404312:	9910      	ldr	r1, [sp, #64]	; 0x40
  404314:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404316:	1c48      	adds	r0, r1, #1
  404318:	46ca      	mov	sl, r9
  40431a:	e448      	b.n	403bae <_vfiprintf_r+0x352>
  40431c:	2a00      	cmp	r2, #0
  40431e:	f040 8091 	bne.w	404444 <_vfiprintf_r+0xbe8>
  404322:	2001      	movs	r0, #1
  404324:	4611      	mov	r1, r2
  404326:	46ca      	mov	sl, r9
  404328:	e641      	b.n	403fae <_vfiprintf_r+0x752>
  40432a:	aa0f      	add	r2, sp, #60	; 0x3c
  40432c:	9904      	ldr	r1, [sp, #16]
  40432e:	9806      	ldr	r0, [sp, #24]
  404330:	f7ff fa54 	bl	4037dc <__sprint_r.part.0>
  404334:	2800      	cmp	r0, #0
  404336:	f47f af43 	bne.w	4041c0 <_vfiprintf_r+0x964>
  40433a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40433c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40433e:	3001      	adds	r0, #1
  404340:	46ca      	mov	sl, r9
  404342:	e667      	b.n	404014 <_vfiprintf_r+0x7b8>
  404344:	46d3      	mov	fp, sl
  404346:	e6d6      	b.n	4040f6 <_vfiprintf_r+0x89a>
  404348:	9e07      	ldr	r6, [sp, #28]
  40434a:	3607      	adds	r6, #7
  40434c:	f026 0207 	bic.w	r2, r6, #7
  404350:	f102 0108 	add.w	r1, r2, #8
  404354:	e9d2 6700 	ldrd	r6, r7, [r2]
  404358:	9107      	str	r1, [sp, #28]
  40435a:	2201      	movs	r2, #1
  40435c:	f7ff bbb1 	b.w	403ac2 <_vfiprintf_r+0x266>
  404360:	9e07      	ldr	r6, [sp, #28]
  404362:	3607      	adds	r6, #7
  404364:	f026 0607 	bic.w	r6, r6, #7
  404368:	e9d6 0100 	ldrd	r0, r1, [r6]
  40436c:	f106 0208 	add.w	r2, r6, #8
  404370:	9207      	str	r2, [sp, #28]
  404372:	4606      	mov	r6, r0
  404374:	460f      	mov	r7, r1
  404376:	e4b6      	b.n	403ce6 <_vfiprintf_r+0x48a>
  404378:	9e07      	ldr	r6, [sp, #28]
  40437a:	3607      	adds	r6, #7
  40437c:	f026 0207 	bic.w	r2, r6, #7
  404380:	f102 0108 	add.w	r1, r2, #8
  404384:	e9d2 6700 	ldrd	r6, r7, [r2]
  404388:	9107      	str	r1, [sp, #28]
  40438a:	2200      	movs	r2, #0
  40438c:	f7ff bb99 	b.w	403ac2 <_vfiprintf_r+0x266>
  404390:	9e07      	ldr	r6, [sp, #28]
  404392:	3607      	adds	r6, #7
  404394:	f026 0107 	bic.w	r1, r6, #7
  404398:	f101 0008 	add.w	r0, r1, #8
  40439c:	9007      	str	r0, [sp, #28]
  40439e:	e9d1 6700 	ldrd	r6, r7, [r1]
  4043a2:	e519      	b.n	403dd8 <_vfiprintf_r+0x57c>
  4043a4:	46cb      	mov	fp, r9
  4043a6:	f7ff bbab 	b.w	403b00 <_vfiprintf_r+0x2a4>
  4043aa:	252d      	movs	r5, #45	; 0x2d
  4043ac:	4276      	negs	r6, r6
  4043ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4043b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4043b6:	2201      	movs	r2, #1
  4043b8:	f7ff bb88 	b.w	403acc <_vfiprintf_r+0x270>
  4043bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4043be:	b9b3      	cbnz	r3, 4043ee <_vfiprintf_r+0xb92>
  4043c0:	4611      	mov	r1, r2
  4043c2:	2001      	movs	r0, #1
  4043c4:	46ca      	mov	sl, r9
  4043c6:	e5f2      	b.n	403fae <_vfiprintf_r+0x752>
  4043c8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4043cc:	f000 fdfe 	bl	404fcc <__retarget_lock_release_recursive>
  4043d0:	f04f 33ff 	mov.w	r3, #4294967295
  4043d4:	9303      	str	r3, [sp, #12]
  4043d6:	f7ff bb50 	b.w	403a7a <_vfiprintf_r+0x21e>
  4043da:	aa0f      	add	r2, sp, #60	; 0x3c
  4043dc:	9904      	ldr	r1, [sp, #16]
  4043de:	9806      	ldr	r0, [sp, #24]
  4043e0:	f7ff f9fc 	bl	4037dc <__sprint_r.part.0>
  4043e4:	2800      	cmp	r0, #0
  4043e6:	f47f aeeb 	bne.w	4041c0 <_vfiprintf_r+0x964>
  4043ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4043ec:	e6a9      	b.n	404142 <_vfiprintf_r+0x8e6>
  4043ee:	ab0e      	add	r3, sp, #56	; 0x38
  4043f0:	2202      	movs	r2, #2
  4043f2:	931c      	str	r3, [sp, #112]	; 0x70
  4043f4:	921d      	str	r2, [sp, #116]	; 0x74
  4043f6:	2001      	movs	r0, #1
  4043f8:	46ca      	mov	sl, r9
  4043fa:	e5d0      	b.n	403f9e <_vfiprintf_r+0x742>
  4043fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4043fe:	9904      	ldr	r1, [sp, #16]
  404400:	9806      	ldr	r0, [sp, #24]
  404402:	f7ff f9eb 	bl	4037dc <__sprint_r.part.0>
  404406:	2800      	cmp	r0, #0
  404408:	f47f aeda 	bne.w	4041c0 <_vfiprintf_r+0x964>
  40440c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40440e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404410:	1c48      	adds	r0, r1, #1
  404412:	46ca      	mov	sl, r9
  404414:	e5a4      	b.n	403f60 <_vfiprintf_r+0x704>
  404416:	9a07      	ldr	r2, [sp, #28]
  404418:	9903      	ldr	r1, [sp, #12]
  40441a:	6813      	ldr	r3, [r2, #0]
  40441c:	17cd      	asrs	r5, r1, #31
  40441e:	4608      	mov	r0, r1
  404420:	3204      	adds	r2, #4
  404422:	4629      	mov	r1, r5
  404424:	9207      	str	r2, [sp, #28]
  404426:	e9c3 0100 	strd	r0, r1, [r3]
  40442a:	f7ff ba54 	b.w	4038d6 <_vfiprintf_r+0x7a>
  40442e:	4658      	mov	r0, fp
  404430:	9607      	str	r6, [sp, #28]
  404432:	9302      	str	r3, [sp, #8]
  404434:	f7ff f964 	bl	403700 <strlen>
  404438:	2400      	movs	r4, #0
  40443a:	9005      	str	r0, [sp, #20]
  40443c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404440:	f7ff bb5e 	b.w	403b00 <_vfiprintf_r+0x2a4>
  404444:	aa0f      	add	r2, sp, #60	; 0x3c
  404446:	9904      	ldr	r1, [sp, #16]
  404448:	9806      	ldr	r0, [sp, #24]
  40444a:	f7ff f9c7 	bl	4037dc <__sprint_r.part.0>
  40444e:	2800      	cmp	r0, #0
  404450:	f47f aeb6 	bne.w	4041c0 <_vfiprintf_r+0x964>
  404454:	9910      	ldr	r1, [sp, #64]	; 0x40
  404456:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404458:	1c48      	adds	r0, r1, #1
  40445a:	46ca      	mov	sl, r9
  40445c:	e5a7      	b.n	403fae <_vfiprintf_r+0x752>
  40445e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404460:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404462:	4e20      	ldr	r6, [pc, #128]	; (4044e4 <_vfiprintf_r+0xc88>)
  404464:	3101      	adds	r1, #1
  404466:	f7ff bb90 	b.w	403b8a <_vfiprintf_r+0x32e>
  40446a:	2c06      	cmp	r4, #6
  40446c:	bf28      	it	cs
  40446e:	2406      	movcs	r4, #6
  404470:	9405      	str	r4, [sp, #20]
  404472:	9607      	str	r6, [sp, #28]
  404474:	9401      	str	r4, [sp, #4]
  404476:	f8df b070 	ldr.w	fp, [pc, #112]	; 4044e8 <_vfiprintf_r+0xc8c>
  40447a:	e4d5      	b.n	403e28 <_vfiprintf_r+0x5cc>
  40447c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40447e:	4e19      	ldr	r6, [pc, #100]	; (4044e4 <_vfiprintf_r+0xc88>)
  404480:	3001      	adds	r0, #1
  404482:	e603      	b.n	40408c <_vfiprintf_r+0x830>
  404484:	9405      	str	r4, [sp, #20]
  404486:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40448a:	9607      	str	r6, [sp, #28]
  40448c:	9302      	str	r3, [sp, #8]
  40448e:	4604      	mov	r4, r0
  404490:	f7ff bb36 	b.w	403b00 <_vfiprintf_r+0x2a4>
  404494:	4686      	mov	lr, r0
  404496:	f7ff bbce 	b.w	403c36 <_vfiprintf_r+0x3da>
  40449a:	9806      	ldr	r0, [sp, #24]
  40449c:	aa0f      	add	r2, sp, #60	; 0x3c
  40449e:	4659      	mov	r1, fp
  4044a0:	f7ff f99c 	bl	4037dc <__sprint_r.part.0>
  4044a4:	2800      	cmp	r0, #0
  4044a6:	f43f ae24 	beq.w	4040f2 <_vfiprintf_r+0x896>
  4044aa:	e624      	b.n	4040f6 <_vfiprintf_r+0x89a>
  4044ac:	9907      	ldr	r1, [sp, #28]
  4044ae:	f898 2001 	ldrb.w	r2, [r8, #1]
  4044b2:	680c      	ldr	r4, [r1, #0]
  4044b4:	3104      	adds	r1, #4
  4044b6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4044ba:	46b8      	mov	r8, r7
  4044bc:	9107      	str	r1, [sp, #28]
  4044be:	f7ff ba3f 	b.w	403940 <_vfiprintf_r+0xe4>
  4044c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4044c6:	e43c      	b.n	403d42 <_vfiprintf_r+0x4e6>
  4044c8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4044cc:	e521      	b.n	403f12 <_vfiprintf_r+0x6b6>
  4044ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4044d2:	f7ff bbf4 	b.w	403cbe <_vfiprintf_r+0x462>
  4044d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4044da:	e491      	b.n	403e00 <_vfiprintf_r+0x5a4>
  4044dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4044e0:	e469      	b.n	403db6 <_vfiprintf_r+0x55a>
  4044e2:	bf00      	nop
  4044e4:	00405df4 	.word	0x00405df4
  4044e8:	00405dec 	.word	0x00405dec

004044ec <__sbprintf>:
  4044ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4044f0:	460c      	mov	r4, r1
  4044f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4044f6:	8989      	ldrh	r1, [r1, #12]
  4044f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4044fa:	89e5      	ldrh	r5, [r4, #14]
  4044fc:	9619      	str	r6, [sp, #100]	; 0x64
  4044fe:	f021 0102 	bic.w	r1, r1, #2
  404502:	4606      	mov	r6, r0
  404504:	69e0      	ldr	r0, [r4, #28]
  404506:	f8ad 100c 	strh.w	r1, [sp, #12]
  40450a:	4617      	mov	r7, r2
  40450c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  404510:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404512:	f8ad 500e 	strh.w	r5, [sp, #14]
  404516:	4698      	mov	r8, r3
  404518:	ad1a      	add	r5, sp, #104	; 0x68
  40451a:	2300      	movs	r3, #0
  40451c:	9007      	str	r0, [sp, #28]
  40451e:	a816      	add	r0, sp, #88	; 0x58
  404520:	9209      	str	r2, [sp, #36]	; 0x24
  404522:	9306      	str	r3, [sp, #24]
  404524:	9500      	str	r5, [sp, #0]
  404526:	9504      	str	r5, [sp, #16]
  404528:	9102      	str	r1, [sp, #8]
  40452a:	9105      	str	r1, [sp, #20]
  40452c:	f000 fd48 	bl	404fc0 <__retarget_lock_init_recursive>
  404530:	4643      	mov	r3, r8
  404532:	463a      	mov	r2, r7
  404534:	4669      	mov	r1, sp
  404536:	4630      	mov	r0, r6
  404538:	f7ff f990 	bl	40385c <_vfiprintf_r>
  40453c:	1e05      	subs	r5, r0, #0
  40453e:	db07      	blt.n	404550 <__sbprintf+0x64>
  404540:	4630      	mov	r0, r6
  404542:	4669      	mov	r1, sp
  404544:	f000 f928 	bl	404798 <_fflush_r>
  404548:	2800      	cmp	r0, #0
  40454a:	bf18      	it	ne
  40454c:	f04f 35ff 	movne.w	r5, #4294967295
  404550:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  404554:	065b      	lsls	r3, r3, #25
  404556:	d503      	bpl.n	404560 <__sbprintf+0x74>
  404558:	89a3      	ldrh	r3, [r4, #12]
  40455a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40455e:	81a3      	strh	r3, [r4, #12]
  404560:	9816      	ldr	r0, [sp, #88]	; 0x58
  404562:	f000 fd2f 	bl	404fc4 <__retarget_lock_close_recursive>
  404566:	4628      	mov	r0, r5
  404568:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00404570 <__swsetup_r>:
  404570:	b538      	push	{r3, r4, r5, lr}
  404572:	4b30      	ldr	r3, [pc, #192]	; (404634 <__swsetup_r+0xc4>)
  404574:	681b      	ldr	r3, [r3, #0]
  404576:	4605      	mov	r5, r0
  404578:	460c      	mov	r4, r1
  40457a:	b113      	cbz	r3, 404582 <__swsetup_r+0x12>
  40457c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40457e:	2a00      	cmp	r2, #0
  404580:	d038      	beq.n	4045f4 <__swsetup_r+0x84>
  404582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404586:	b293      	uxth	r3, r2
  404588:	0718      	lsls	r0, r3, #28
  40458a:	d50c      	bpl.n	4045a6 <__swsetup_r+0x36>
  40458c:	6920      	ldr	r0, [r4, #16]
  40458e:	b1a8      	cbz	r0, 4045bc <__swsetup_r+0x4c>
  404590:	f013 0201 	ands.w	r2, r3, #1
  404594:	d01e      	beq.n	4045d4 <__swsetup_r+0x64>
  404596:	6963      	ldr	r3, [r4, #20]
  404598:	2200      	movs	r2, #0
  40459a:	425b      	negs	r3, r3
  40459c:	61a3      	str	r3, [r4, #24]
  40459e:	60a2      	str	r2, [r4, #8]
  4045a0:	b1f0      	cbz	r0, 4045e0 <__swsetup_r+0x70>
  4045a2:	2000      	movs	r0, #0
  4045a4:	bd38      	pop	{r3, r4, r5, pc}
  4045a6:	06d9      	lsls	r1, r3, #27
  4045a8:	d53c      	bpl.n	404624 <__swsetup_r+0xb4>
  4045aa:	0758      	lsls	r0, r3, #29
  4045ac:	d426      	bmi.n	4045fc <__swsetup_r+0x8c>
  4045ae:	6920      	ldr	r0, [r4, #16]
  4045b0:	f042 0308 	orr.w	r3, r2, #8
  4045b4:	81a3      	strh	r3, [r4, #12]
  4045b6:	b29b      	uxth	r3, r3
  4045b8:	2800      	cmp	r0, #0
  4045ba:	d1e9      	bne.n	404590 <__swsetup_r+0x20>
  4045bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4045c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4045c4:	d0e4      	beq.n	404590 <__swsetup_r+0x20>
  4045c6:	4628      	mov	r0, r5
  4045c8:	4621      	mov	r1, r4
  4045ca:	f000 fd2f 	bl	40502c <__smakebuf_r>
  4045ce:	89a3      	ldrh	r3, [r4, #12]
  4045d0:	6920      	ldr	r0, [r4, #16]
  4045d2:	e7dd      	b.n	404590 <__swsetup_r+0x20>
  4045d4:	0799      	lsls	r1, r3, #30
  4045d6:	bf58      	it	pl
  4045d8:	6962      	ldrpl	r2, [r4, #20]
  4045da:	60a2      	str	r2, [r4, #8]
  4045dc:	2800      	cmp	r0, #0
  4045de:	d1e0      	bne.n	4045a2 <__swsetup_r+0x32>
  4045e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045e4:	061a      	lsls	r2, r3, #24
  4045e6:	d5dd      	bpl.n	4045a4 <__swsetup_r+0x34>
  4045e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4045ec:	81a3      	strh	r3, [r4, #12]
  4045ee:	f04f 30ff 	mov.w	r0, #4294967295
  4045f2:	bd38      	pop	{r3, r4, r5, pc}
  4045f4:	4618      	mov	r0, r3
  4045f6:	f000 f927 	bl	404848 <__sinit>
  4045fa:	e7c2      	b.n	404582 <__swsetup_r+0x12>
  4045fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4045fe:	b151      	cbz	r1, 404616 <__swsetup_r+0xa6>
  404600:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404604:	4299      	cmp	r1, r3
  404606:	d004      	beq.n	404612 <__swsetup_r+0xa2>
  404608:	4628      	mov	r0, r5
  40460a:	f000 fa43 	bl	404a94 <_free_r>
  40460e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404612:	2300      	movs	r3, #0
  404614:	6323      	str	r3, [r4, #48]	; 0x30
  404616:	2300      	movs	r3, #0
  404618:	6920      	ldr	r0, [r4, #16]
  40461a:	6063      	str	r3, [r4, #4]
  40461c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  404620:	6020      	str	r0, [r4, #0]
  404622:	e7c5      	b.n	4045b0 <__swsetup_r+0x40>
  404624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  404628:	2309      	movs	r3, #9
  40462a:	602b      	str	r3, [r5, #0]
  40462c:	f04f 30ff 	mov.w	r0, #4294967295
  404630:	81a2      	strh	r2, [r4, #12]
  404632:	bd38      	pop	{r3, r4, r5, pc}
  404634:	20400014 	.word	0x20400014

00404638 <register_fini>:
  404638:	4b02      	ldr	r3, [pc, #8]	; (404644 <register_fini+0xc>)
  40463a:	b113      	cbz	r3, 404642 <register_fini+0xa>
  40463c:	4802      	ldr	r0, [pc, #8]	; (404648 <register_fini+0x10>)
  40463e:	f000 b805 	b.w	40464c <atexit>
  404642:	4770      	bx	lr
  404644:	00000000 	.word	0x00000000
  404648:	004048b9 	.word	0x004048b9

0040464c <atexit>:
  40464c:	2300      	movs	r3, #0
  40464e:	4601      	mov	r1, r0
  404650:	461a      	mov	r2, r3
  404652:	4618      	mov	r0, r3
  404654:	f001 b890 	b.w	405778 <__register_exitproc>

00404658 <__sflush_r>:
  404658:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40465c:	b29a      	uxth	r2, r3
  40465e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404662:	460d      	mov	r5, r1
  404664:	0711      	lsls	r1, r2, #28
  404666:	4680      	mov	r8, r0
  404668:	d43a      	bmi.n	4046e0 <__sflush_r+0x88>
  40466a:	686a      	ldr	r2, [r5, #4]
  40466c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  404670:	2a00      	cmp	r2, #0
  404672:	81ab      	strh	r3, [r5, #12]
  404674:	dd6f      	ble.n	404756 <__sflush_r+0xfe>
  404676:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404678:	2c00      	cmp	r4, #0
  40467a:	d049      	beq.n	404710 <__sflush_r+0xb8>
  40467c:	2200      	movs	r2, #0
  40467e:	b29b      	uxth	r3, r3
  404680:	f8d8 6000 	ldr.w	r6, [r8]
  404684:	f8c8 2000 	str.w	r2, [r8]
  404688:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40468c:	d067      	beq.n	40475e <__sflush_r+0x106>
  40468e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  404690:	075f      	lsls	r7, r3, #29
  404692:	d505      	bpl.n	4046a0 <__sflush_r+0x48>
  404694:	6869      	ldr	r1, [r5, #4]
  404696:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  404698:	1a52      	subs	r2, r2, r1
  40469a:	b10b      	cbz	r3, 4046a0 <__sflush_r+0x48>
  40469c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40469e:	1ad2      	subs	r2, r2, r3
  4046a0:	2300      	movs	r3, #0
  4046a2:	69e9      	ldr	r1, [r5, #28]
  4046a4:	4640      	mov	r0, r8
  4046a6:	47a0      	blx	r4
  4046a8:	1c44      	adds	r4, r0, #1
  4046aa:	d03c      	beq.n	404726 <__sflush_r+0xce>
  4046ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4046b0:	692a      	ldr	r2, [r5, #16]
  4046b2:	602a      	str	r2, [r5, #0]
  4046b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4046b8:	2200      	movs	r2, #0
  4046ba:	81ab      	strh	r3, [r5, #12]
  4046bc:	04db      	lsls	r3, r3, #19
  4046be:	606a      	str	r2, [r5, #4]
  4046c0:	d447      	bmi.n	404752 <__sflush_r+0xfa>
  4046c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4046c4:	f8c8 6000 	str.w	r6, [r8]
  4046c8:	b311      	cbz	r1, 404710 <__sflush_r+0xb8>
  4046ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4046ce:	4299      	cmp	r1, r3
  4046d0:	d002      	beq.n	4046d8 <__sflush_r+0x80>
  4046d2:	4640      	mov	r0, r8
  4046d4:	f000 f9de 	bl	404a94 <_free_r>
  4046d8:	2000      	movs	r0, #0
  4046da:	6328      	str	r0, [r5, #48]	; 0x30
  4046dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4046e0:	692e      	ldr	r6, [r5, #16]
  4046e2:	b1ae      	cbz	r6, 404710 <__sflush_r+0xb8>
  4046e4:	682c      	ldr	r4, [r5, #0]
  4046e6:	602e      	str	r6, [r5, #0]
  4046e8:	0791      	lsls	r1, r2, #30
  4046ea:	bf0c      	ite	eq
  4046ec:	696b      	ldreq	r3, [r5, #20]
  4046ee:	2300      	movne	r3, #0
  4046f0:	1ba4      	subs	r4, r4, r6
  4046f2:	60ab      	str	r3, [r5, #8]
  4046f4:	e00a      	b.n	40470c <__sflush_r+0xb4>
  4046f6:	4623      	mov	r3, r4
  4046f8:	4632      	mov	r2, r6
  4046fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4046fc:	69e9      	ldr	r1, [r5, #28]
  4046fe:	4640      	mov	r0, r8
  404700:	47b8      	blx	r7
  404702:	2800      	cmp	r0, #0
  404704:	eba4 0400 	sub.w	r4, r4, r0
  404708:	4406      	add	r6, r0
  40470a:	dd04      	ble.n	404716 <__sflush_r+0xbe>
  40470c:	2c00      	cmp	r4, #0
  40470e:	dcf2      	bgt.n	4046f6 <__sflush_r+0x9e>
  404710:	2000      	movs	r0, #0
  404712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404716:	89ab      	ldrh	r3, [r5, #12]
  404718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40471c:	81ab      	strh	r3, [r5, #12]
  40471e:	f04f 30ff 	mov.w	r0, #4294967295
  404722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404726:	f8d8 4000 	ldr.w	r4, [r8]
  40472a:	2c1d      	cmp	r4, #29
  40472c:	d8f3      	bhi.n	404716 <__sflush_r+0xbe>
  40472e:	4b19      	ldr	r3, [pc, #100]	; (404794 <__sflush_r+0x13c>)
  404730:	40e3      	lsrs	r3, r4
  404732:	43db      	mvns	r3, r3
  404734:	f013 0301 	ands.w	r3, r3, #1
  404738:	d1ed      	bne.n	404716 <__sflush_r+0xbe>
  40473a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40473e:	606b      	str	r3, [r5, #4]
  404740:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  404744:	6929      	ldr	r1, [r5, #16]
  404746:	81ab      	strh	r3, [r5, #12]
  404748:	04da      	lsls	r2, r3, #19
  40474a:	6029      	str	r1, [r5, #0]
  40474c:	d5b9      	bpl.n	4046c2 <__sflush_r+0x6a>
  40474e:	2c00      	cmp	r4, #0
  404750:	d1b7      	bne.n	4046c2 <__sflush_r+0x6a>
  404752:	6528      	str	r0, [r5, #80]	; 0x50
  404754:	e7b5      	b.n	4046c2 <__sflush_r+0x6a>
  404756:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  404758:	2a00      	cmp	r2, #0
  40475a:	dc8c      	bgt.n	404676 <__sflush_r+0x1e>
  40475c:	e7d8      	b.n	404710 <__sflush_r+0xb8>
  40475e:	2301      	movs	r3, #1
  404760:	69e9      	ldr	r1, [r5, #28]
  404762:	4640      	mov	r0, r8
  404764:	47a0      	blx	r4
  404766:	1c43      	adds	r3, r0, #1
  404768:	4602      	mov	r2, r0
  40476a:	d002      	beq.n	404772 <__sflush_r+0x11a>
  40476c:	89ab      	ldrh	r3, [r5, #12]
  40476e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  404770:	e78e      	b.n	404690 <__sflush_r+0x38>
  404772:	f8d8 3000 	ldr.w	r3, [r8]
  404776:	2b00      	cmp	r3, #0
  404778:	d0f8      	beq.n	40476c <__sflush_r+0x114>
  40477a:	2b1d      	cmp	r3, #29
  40477c:	d001      	beq.n	404782 <__sflush_r+0x12a>
  40477e:	2b16      	cmp	r3, #22
  404780:	d102      	bne.n	404788 <__sflush_r+0x130>
  404782:	f8c8 6000 	str.w	r6, [r8]
  404786:	e7c3      	b.n	404710 <__sflush_r+0xb8>
  404788:	89ab      	ldrh	r3, [r5, #12]
  40478a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40478e:	81ab      	strh	r3, [r5, #12]
  404790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404794:	20400001 	.word	0x20400001

00404798 <_fflush_r>:
  404798:	b538      	push	{r3, r4, r5, lr}
  40479a:	460d      	mov	r5, r1
  40479c:	4604      	mov	r4, r0
  40479e:	b108      	cbz	r0, 4047a4 <_fflush_r+0xc>
  4047a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4047a2:	b1bb      	cbz	r3, 4047d4 <_fflush_r+0x3c>
  4047a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4047a8:	b188      	cbz	r0, 4047ce <_fflush_r+0x36>
  4047aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4047ac:	07db      	lsls	r3, r3, #31
  4047ae:	d401      	bmi.n	4047b4 <_fflush_r+0x1c>
  4047b0:	0581      	lsls	r1, r0, #22
  4047b2:	d517      	bpl.n	4047e4 <_fflush_r+0x4c>
  4047b4:	4620      	mov	r0, r4
  4047b6:	4629      	mov	r1, r5
  4047b8:	f7ff ff4e 	bl	404658 <__sflush_r>
  4047bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4047be:	07da      	lsls	r2, r3, #31
  4047c0:	4604      	mov	r4, r0
  4047c2:	d402      	bmi.n	4047ca <_fflush_r+0x32>
  4047c4:	89ab      	ldrh	r3, [r5, #12]
  4047c6:	059b      	lsls	r3, r3, #22
  4047c8:	d507      	bpl.n	4047da <_fflush_r+0x42>
  4047ca:	4620      	mov	r0, r4
  4047cc:	bd38      	pop	{r3, r4, r5, pc}
  4047ce:	4604      	mov	r4, r0
  4047d0:	4620      	mov	r0, r4
  4047d2:	bd38      	pop	{r3, r4, r5, pc}
  4047d4:	f000 f838 	bl	404848 <__sinit>
  4047d8:	e7e4      	b.n	4047a4 <_fflush_r+0xc>
  4047da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4047dc:	f000 fbf6 	bl	404fcc <__retarget_lock_release_recursive>
  4047e0:	4620      	mov	r0, r4
  4047e2:	bd38      	pop	{r3, r4, r5, pc}
  4047e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4047e6:	f000 fbef 	bl	404fc8 <__retarget_lock_acquire_recursive>
  4047ea:	e7e3      	b.n	4047b4 <_fflush_r+0x1c>

004047ec <_cleanup_r>:
  4047ec:	4901      	ldr	r1, [pc, #4]	; (4047f4 <_cleanup_r+0x8>)
  4047ee:	f000 bbaf 	b.w	404f50 <_fwalk_reent>
  4047f2:	bf00      	nop
  4047f4:	00405861 	.word	0x00405861

004047f8 <std.isra.0>:
  4047f8:	b510      	push	{r4, lr}
  4047fa:	2300      	movs	r3, #0
  4047fc:	4604      	mov	r4, r0
  4047fe:	8181      	strh	r1, [r0, #12]
  404800:	81c2      	strh	r2, [r0, #14]
  404802:	6003      	str	r3, [r0, #0]
  404804:	6043      	str	r3, [r0, #4]
  404806:	6083      	str	r3, [r0, #8]
  404808:	6643      	str	r3, [r0, #100]	; 0x64
  40480a:	6103      	str	r3, [r0, #16]
  40480c:	6143      	str	r3, [r0, #20]
  40480e:	6183      	str	r3, [r0, #24]
  404810:	4619      	mov	r1, r3
  404812:	2208      	movs	r2, #8
  404814:	305c      	adds	r0, #92	; 0x5c
  404816:	f7fe fe23 	bl	403460 <memset>
  40481a:	4807      	ldr	r0, [pc, #28]	; (404838 <std.isra.0+0x40>)
  40481c:	4907      	ldr	r1, [pc, #28]	; (40483c <std.isra.0+0x44>)
  40481e:	4a08      	ldr	r2, [pc, #32]	; (404840 <std.isra.0+0x48>)
  404820:	4b08      	ldr	r3, [pc, #32]	; (404844 <std.isra.0+0x4c>)
  404822:	6220      	str	r0, [r4, #32]
  404824:	61e4      	str	r4, [r4, #28]
  404826:	6261      	str	r1, [r4, #36]	; 0x24
  404828:	62a2      	str	r2, [r4, #40]	; 0x28
  40482a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40482c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  404830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404834:	f000 bbc4 	b.w	404fc0 <__retarget_lock_init_recursive>
  404838:	004055a5 	.word	0x004055a5
  40483c:	004055c9 	.word	0x004055c9
  404840:	00405605 	.word	0x00405605
  404844:	00405625 	.word	0x00405625

00404848 <__sinit>:
  404848:	b510      	push	{r4, lr}
  40484a:	4604      	mov	r4, r0
  40484c:	4812      	ldr	r0, [pc, #72]	; (404898 <__sinit+0x50>)
  40484e:	f000 fbbb 	bl	404fc8 <__retarget_lock_acquire_recursive>
  404852:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  404854:	b9d2      	cbnz	r2, 40488c <__sinit+0x44>
  404856:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40485a:	4810      	ldr	r0, [pc, #64]	; (40489c <__sinit+0x54>)
  40485c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  404860:	2103      	movs	r1, #3
  404862:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  404866:	63e0      	str	r0, [r4, #60]	; 0x3c
  404868:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40486c:	6860      	ldr	r0, [r4, #4]
  40486e:	2104      	movs	r1, #4
  404870:	f7ff ffc2 	bl	4047f8 <std.isra.0>
  404874:	2201      	movs	r2, #1
  404876:	2109      	movs	r1, #9
  404878:	68a0      	ldr	r0, [r4, #8]
  40487a:	f7ff ffbd 	bl	4047f8 <std.isra.0>
  40487e:	2202      	movs	r2, #2
  404880:	2112      	movs	r1, #18
  404882:	68e0      	ldr	r0, [r4, #12]
  404884:	f7ff ffb8 	bl	4047f8 <std.isra.0>
  404888:	2301      	movs	r3, #1
  40488a:	63a3      	str	r3, [r4, #56]	; 0x38
  40488c:	4802      	ldr	r0, [pc, #8]	; (404898 <__sinit+0x50>)
  40488e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  404892:	f000 bb9b 	b.w	404fcc <__retarget_lock_release_recursive>
  404896:	bf00      	nop
  404898:	20400c28 	.word	0x20400c28
  40489c:	004047ed 	.word	0x004047ed

004048a0 <__sfp_lock_acquire>:
  4048a0:	4801      	ldr	r0, [pc, #4]	; (4048a8 <__sfp_lock_acquire+0x8>)
  4048a2:	f000 bb91 	b.w	404fc8 <__retarget_lock_acquire_recursive>
  4048a6:	bf00      	nop
  4048a8:	20400c3c 	.word	0x20400c3c

004048ac <__sfp_lock_release>:
  4048ac:	4801      	ldr	r0, [pc, #4]	; (4048b4 <__sfp_lock_release+0x8>)
  4048ae:	f000 bb8d 	b.w	404fcc <__retarget_lock_release_recursive>
  4048b2:	bf00      	nop
  4048b4:	20400c3c 	.word	0x20400c3c

004048b8 <__libc_fini_array>:
  4048b8:	b538      	push	{r3, r4, r5, lr}
  4048ba:	4c0a      	ldr	r4, [pc, #40]	; (4048e4 <__libc_fini_array+0x2c>)
  4048bc:	4d0a      	ldr	r5, [pc, #40]	; (4048e8 <__libc_fini_array+0x30>)
  4048be:	1b64      	subs	r4, r4, r5
  4048c0:	10a4      	asrs	r4, r4, #2
  4048c2:	d00a      	beq.n	4048da <__libc_fini_array+0x22>
  4048c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4048c8:	3b01      	subs	r3, #1
  4048ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4048ce:	3c01      	subs	r4, #1
  4048d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4048d4:	4798      	blx	r3
  4048d6:	2c00      	cmp	r4, #0
  4048d8:	d1f9      	bne.n	4048ce <__libc_fini_array+0x16>
  4048da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4048de:	f001 bb2d 	b.w	405f3c <_fini>
  4048e2:	bf00      	nop
  4048e4:	00405f4c 	.word	0x00405f4c
  4048e8:	00405f48 	.word	0x00405f48

004048ec <__fputwc>:
  4048ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4048f0:	b082      	sub	sp, #8
  4048f2:	4680      	mov	r8, r0
  4048f4:	4689      	mov	r9, r1
  4048f6:	4614      	mov	r4, r2
  4048f8:	f000 fb54 	bl	404fa4 <__locale_mb_cur_max>
  4048fc:	2801      	cmp	r0, #1
  4048fe:	d036      	beq.n	40496e <__fputwc+0x82>
  404900:	464a      	mov	r2, r9
  404902:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  404906:	a901      	add	r1, sp, #4
  404908:	4640      	mov	r0, r8
  40490a:	f000 fee7 	bl	4056dc <_wcrtomb_r>
  40490e:	1c42      	adds	r2, r0, #1
  404910:	4606      	mov	r6, r0
  404912:	d025      	beq.n	404960 <__fputwc+0x74>
  404914:	b3a8      	cbz	r0, 404982 <__fputwc+0x96>
  404916:	f89d e004 	ldrb.w	lr, [sp, #4]
  40491a:	2500      	movs	r5, #0
  40491c:	f10d 0a04 	add.w	sl, sp, #4
  404920:	e009      	b.n	404936 <__fputwc+0x4a>
  404922:	6823      	ldr	r3, [r4, #0]
  404924:	1c5a      	adds	r2, r3, #1
  404926:	6022      	str	r2, [r4, #0]
  404928:	f883 e000 	strb.w	lr, [r3]
  40492c:	3501      	adds	r5, #1
  40492e:	42b5      	cmp	r5, r6
  404930:	d227      	bcs.n	404982 <__fputwc+0x96>
  404932:	f815 e00a 	ldrb.w	lr, [r5, sl]
  404936:	68a3      	ldr	r3, [r4, #8]
  404938:	3b01      	subs	r3, #1
  40493a:	2b00      	cmp	r3, #0
  40493c:	60a3      	str	r3, [r4, #8]
  40493e:	daf0      	bge.n	404922 <__fputwc+0x36>
  404940:	69a7      	ldr	r7, [r4, #24]
  404942:	42bb      	cmp	r3, r7
  404944:	4671      	mov	r1, lr
  404946:	4622      	mov	r2, r4
  404948:	4640      	mov	r0, r8
  40494a:	db02      	blt.n	404952 <__fputwc+0x66>
  40494c:	f1be 0f0a 	cmp.w	lr, #10
  404950:	d1e7      	bne.n	404922 <__fputwc+0x36>
  404952:	f000 fe6b 	bl	40562c <__swbuf_r>
  404956:	1c43      	adds	r3, r0, #1
  404958:	d1e8      	bne.n	40492c <__fputwc+0x40>
  40495a:	b002      	add	sp, #8
  40495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404960:	89a3      	ldrh	r3, [r4, #12]
  404962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404966:	81a3      	strh	r3, [r4, #12]
  404968:	b002      	add	sp, #8
  40496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40496e:	f109 33ff 	add.w	r3, r9, #4294967295
  404972:	2bfe      	cmp	r3, #254	; 0xfe
  404974:	d8c4      	bhi.n	404900 <__fputwc+0x14>
  404976:	fa5f fe89 	uxtb.w	lr, r9
  40497a:	4606      	mov	r6, r0
  40497c:	f88d e004 	strb.w	lr, [sp, #4]
  404980:	e7cb      	b.n	40491a <__fputwc+0x2e>
  404982:	4648      	mov	r0, r9
  404984:	b002      	add	sp, #8
  404986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40498a:	bf00      	nop

0040498c <_fputwc_r>:
  40498c:	b530      	push	{r4, r5, lr}
  40498e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  404990:	f013 0f01 	tst.w	r3, #1
  404994:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  404998:	4614      	mov	r4, r2
  40499a:	b083      	sub	sp, #12
  40499c:	4605      	mov	r5, r0
  40499e:	b29a      	uxth	r2, r3
  4049a0:	d101      	bne.n	4049a6 <_fputwc_r+0x1a>
  4049a2:	0590      	lsls	r0, r2, #22
  4049a4:	d51c      	bpl.n	4049e0 <_fputwc_r+0x54>
  4049a6:	0490      	lsls	r0, r2, #18
  4049a8:	d406      	bmi.n	4049b8 <_fputwc_r+0x2c>
  4049aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4049ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4049b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4049b4:	81a3      	strh	r3, [r4, #12]
  4049b6:	6662      	str	r2, [r4, #100]	; 0x64
  4049b8:	4628      	mov	r0, r5
  4049ba:	4622      	mov	r2, r4
  4049bc:	f7ff ff96 	bl	4048ec <__fputwc>
  4049c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4049c2:	07da      	lsls	r2, r3, #31
  4049c4:	4605      	mov	r5, r0
  4049c6:	d402      	bmi.n	4049ce <_fputwc_r+0x42>
  4049c8:	89a3      	ldrh	r3, [r4, #12]
  4049ca:	059b      	lsls	r3, r3, #22
  4049cc:	d502      	bpl.n	4049d4 <_fputwc_r+0x48>
  4049ce:	4628      	mov	r0, r5
  4049d0:	b003      	add	sp, #12
  4049d2:	bd30      	pop	{r4, r5, pc}
  4049d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049d6:	f000 faf9 	bl	404fcc <__retarget_lock_release_recursive>
  4049da:	4628      	mov	r0, r5
  4049dc:	b003      	add	sp, #12
  4049de:	bd30      	pop	{r4, r5, pc}
  4049e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4049e2:	9101      	str	r1, [sp, #4]
  4049e4:	f000 faf0 	bl	404fc8 <__retarget_lock_acquire_recursive>
  4049e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049ec:	9901      	ldr	r1, [sp, #4]
  4049ee:	b29a      	uxth	r2, r3
  4049f0:	e7d9      	b.n	4049a6 <_fputwc_r+0x1a>
  4049f2:	bf00      	nop

004049f4 <_malloc_trim_r>:
  4049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049f6:	4f24      	ldr	r7, [pc, #144]	; (404a88 <_malloc_trim_r+0x94>)
  4049f8:	460c      	mov	r4, r1
  4049fa:	4606      	mov	r6, r0
  4049fc:	f7fe fd7e 	bl	4034fc <__malloc_lock>
  404a00:	68bb      	ldr	r3, [r7, #8]
  404a02:	685d      	ldr	r5, [r3, #4]
  404a04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  404a08:	310f      	adds	r1, #15
  404a0a:	f025 0503 	bic.w	r5, r5, #3
  404a0e:	4429      	add	r1, r5
  404a10:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  404a14:	f021 010f 	bic.w	r1, r1, #15
  404a18:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  404a1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  404a20:	db07      	blt.n	404a32 <_malloc_trim_r+0x3e>
  404a22:	2100      	movs	r1, #0
  404a24:	4630      	mov	r0, r6
  404a26:	f7fe fd75 	bl	403514 <_sbrk_r>
  404a2a:	68bb      	ldr	r3, [r7, #8]
  404a2c:	442b      	add	r3, r5
  404a2e:	4298      	cmp	r0, r3
  404a30:	d004      	beq.n	404a3c <_malloc_trim_r+0x48>
  404a32:	4630      	mov	r0, r6
  404a34:	f7fe fd68 	bl	403508 <__malloc_unlock>
  404a38:	2000      	movs	r0, #0
  404a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404a3c:	4261      	negs	r1, r4
  404a3e:	4630      	mov	r0, r6
  404a40:	f7fe fd68 	bl	403514 <_sbrk_r>
  404a44:	3001      	adds	r0, #1
  404a46:	d00d      	beq.n	404a64 <_malloc_trim_r+0x70>
  404a48:	4b10      	ldr	r3, [pc, #64]	; (404a8c <_malloc_trim_r+0x98>)
  404a4a:	68ba      	ldr	r2, [r7, #8]
  404a4c:	6819      	ldr	r1, [r3, #0]
  404a4e:	1b2d      	subs	r5, r5, r4
  404a50:	f045 0501 	orr.w	r5, r5, #1
  404a54:	4630      	mov	r0, r6
  404a56:	1b09      	subs	r1, r1, r4
  404a58:	6055      	str	r5, [r2, #4]
  404a5a:	6019      	str	r1, [r3, #0]
  404a5c:	f7fe fd54 	bl	403508 <__malloc_unlock>
  404a60:	2001      	movs	r0, #1
  404a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404a64:	2100      	movs	r1, #0
  404a66:	4630      	mov	r0, r6
  404a68:	f7fe fd54 	bl	403514 <_sbrk_r>
  404a6c:	68ba      	ldr	r2, [r7, #8]
  404a6e:	1a83      	subs	r3, r0, r2
  404a70:	2b0f      	cmp	r3, #15
  404a72:	ddde      	ble.n	404a32 <_malloc_trim_r+0x3e>
  404a74:	4c06      	ldr	r4, [pc, #24]	; (404a90 <_malloc_trim_r+0x9c>)
  404a76:	4905      	ldr	r1, [pc, #20]	; (404a8c <_malloc_trim_r+0x98>)
  404a78:	6824      	ldr	r4, [r4, #0]
  404a7a:	f043 0301 	orr.w	r3, r3, #1
  404a7e:	1b00      	subs	r0, r0, r4
  404a80:	6053      	str	r3, [r2, #4]
  404a82:	6008      	str	r0, [r1, #0]
  404a84:	e7d5      	b.n	404a32 <_malloc_trim_r+0x3e>
  404a86:	bf00      	nop
  404a88:	20400440 	.word	0x20400440
  404a8c:	20400b9c 	.word	0x20400b9c
  404a90:	20400848 	.word	0x20400848

00404a94 <_free_r>:
  404a94:	2900      	cmp	r1, #0
  404a96:	d044      	beq.n	404b22 <_free_r+0x8e>
  404a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404a9c:	460d      	mov	r5, r1
  404a9e:	4680      	mov	r8, r0
  404aa0:	f7fe fd2c 	bl	4034fc <__malloc_lock>
  404aa4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  404aa8:	4969      	ldr	r1, [pc, #420]	; (404c50 <_free_r+0x1bc>)
  404aaa:	f027 0301 	bic.w	r3, r7, #1
  404aae:	f1a5 0408 	sub.w	r4, r5, #8
  404ab2:	18e2      	adds	r2, r4, r3
  404ab4:	688e      	ldr	r6, [r1, #8]
  404ab6:	6850      	ldr	r0, [r2, #4]
  404ab8:	42b2      	cmp	r2, r6
  404aba:	f020 0003 	bic.w	r0, r0, #3
  404abe:	d05e      	beq.n	404b7e <_free_r+0xea>
  404ac0:	07fe      	lsls	r6, r7, #31
  404ac2:	6050      	str	r0, [r2, #4]
  404ac4:	d40b      	bmi.n	404ade <_free_r+0x4a>
  404ac6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  404aca:	1be4      	subs	r4, r4, r7
  404acc:	f101 0e08 	add.w	lr, r1, #8
  404ad0:	68a5      	ldr	r5, [r4, #8]
  404ad2:	4575      	cmp	r5, lr
  404ad4:	443b      	add	r3, r7
  404ad6:	d06d      	beq.n	404bb4 <_free_r+0x120>
  404ad8:	68e7      	ldr	r7, [r4, #12]
  404ada:	60ef      	str	r7, [r5, #12]
  404adc:	60bd      	str	r5, [r7, #8]
  404ade:	1815      	adds	r5, r2, r0
  404ae0:	686d      	ldr	r5, [r5, #4]
  404ae2:	07ed      	lsls	r5, r5, #31
  404ae4:	d53e      	bpl.n	404b64 <_free_r+0xd0>
  404ae6:	f043 0201 	orr.w	r2, r3, #1
  404aea:	6062      	str	r2, [r4, #4]
  404aec:	50e3      	str	r3, [r4, r3]
  404aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404af2:	d217      	bcs.n	404b24 <_free_r+0x90>
  404af4:	08db      	lsrs	r3, r3, #3
  404af6:	1c58      	adds	r0, r3, #1
  404af8:	109a      	asrs	r2, r3, #2
  404afa:	684d      	ldr	r5, [r1, #4]
  404afc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  404b00:	60a7      	str	r7, [r4, #8]
  404b02:	2301      	movs	r3, #1
  404b04:	4093      	lsls	r3, r2
  404b06:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  404b0a:	432b      	orrs	r3, r5
  404b0c:	3a08      	subs	r2, #8
  404b0e:	60e2      	str	r2, [r4, #12]
  404b10:	604b      	str	r3, [r1, #4]
  404b12:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  404b16:	60fc      	str	r4, [r7, #12]
  404b18:	4640      	mov	r0, r8
  404b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404b1e:	f7fe bcf3 	b.w	403508 <__malloc_unlock>
  404b22:	4770      	bx	lr
  404b24:	0a5a      	lsrs	r2, r3, #9
  404b26:	2a04      	cmp	r2, #4
  404b28:	d852      	bhi.n	404bd0 <_free_r+0x13c>
  404b2a:	099a      	lsrs	r2, r3, #6
  404b2c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  404b30:	00ff      	lsls	r7, r7, #3
  404b32:	f102 0538 	add.w	r5, r2, #56	; 0x38
  404b36:	19c8      	adds	r0, r1, r7
  404b38:	59ca      	ldr	r2, [r1, r7]
  404b3a:	3808      	subs	r0, #8
  404b3c:	4290      	cmp	r0, r2
  404b3e:	d04f      	beq.n	404be0 <_free_r+0x14c>
  404b40:	6851      	ldr	r1, [r2, #4]
  404b42:	f021 0103 	bic.w	r1, r1, #3
  404b46:	428b      	cmp	r3, r1
  404b48:	d232      	bcs.n	404bb0 <_free_r+0x11c>
  404b4a:	6892      	ldr	r2, [r2, #8]
  404b4c:	4290      	cmp	r0, r2
  404b4e:	d1f7      	bne.n	404b40 <_free_r+0xac>
  404b50:	68c3      	ldr	r3, [r0, #12]
  404b52:	60a0      	str	r0, [r4, #8]
  404b54:	60e3      	str	r3, [r4, #12]
  404b56:	609c      	str	r4, [r3, #8]
  404b58:	60c4      	str	r4, [r0, #12]
  404b5a:	4640      	mov	r0, r8
  404b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404b60:	f7fe bcd2 	b.w	403508 <__malloc_unlock>
  404b64:	6895      	ldr	r5, [r2, #8]
  404b66:	4f3b      	ldr	r7, [pc, #236]	; (404c54 <_free_r+0x1c0>)
  404b68:	42bd      	cmp	r5, r7
  404b6a:	4403      	add	r3, r0
  404b6c:	d040      	beq.n	404bf0 <_free_r+0x15c>
  404b6e:	68d0      	ldr	r0, [r2, #12]
  404b70:	60e8      	str	r0, [r5, #12]
  404b72:	f043 0201 	orr.w	r2, r3, #1
  404b76:	6085      	str	r5, [r0, #8]
  404b78:	6062      	str	r2, [r4, #4]
  404b7a:	50e3      	str	r3, [r4, r3]
  404b7c:	e7b7      	b.n	404aee <_free_r+0x5a>
  404b7e:	07ff      	lsls	r7, r7, #31
  404b80:	4403      	add	r3, r0
  404b82:	d407      	bmi.n	404b94 <_free_r+0x100>
  404b84:	f855 2c08 	ldr.w	r2, [r5, #-8]
  404b88:	1aa4      	subs	r4, r4, r2
  404b8a:	4413      	add	r3, r2
  404b8c:	68a0      	ldr	r0, [r4, #8]
  404b8e:	68e2      	ldr	r2, [r4, #12]
  404b90:	60c2      	str	r2, [r0, #12]
  404b92:	6090      	str	r0, [r2, #8]
  404b94:	4a30      	ldr	r2, [pc, #192]	; (404c58 <_free_r+0x1c4>)
  404b96:	6812      	ldr	r2, [r2, #0]
  404b98:	f043 0001 	orr.w	r0, r3, #1
  404b9c:	4293      	cmp	r3, r2
  404b9e:	6060      	str	r0, [r4, #4]
  404ba0:	608c      	str	r4, [r1, #8]
  404ba2:	d3b9      	bcc.n	404b18 <_free_r+0x84>
  404ba4:	4b2d      	ldr	r3, [pc, #180]	; (404c5c <_free_r+0x1c8>)
  404ba6:	4640      	mov	r0, r8
  404ba8:	6819      	ldr	r1, [r3, #0]
  404baa:	f7ff ff23 	bl	4049f4 <_malloc_trim_r>
  404bae:	e7b3      	b.n	404b18 <_free_r+0x84>
  404bb0:	4610      	mov	r0, r2
  404bb2:	e7cd      	b.n	404b50 <_free_r+0xbc>
  404bb4:	1811      	adds	r1, r2, r0
  404bb6:	6849      	ldr	r1, [r1, #4]
  404bb8:	07c9      	lsls	r1, r1, #31
  404bba:	d444      	bmi.n	404c46 <_free_r+0x1b2>
  404bbc:	6891      	ldr	r1, [r2, #8]
  404bbe:	68d2      	ldr	r2, [r2, #12]
  404bc0:	60ca      	str	r2, [r1, #12]
  404bc2:	4403      	add	r3, r0
  404bc4:	f043 0001 	orr.w	r0, r3, #1
  404bc8:	6091      	str	r1, [r2, #8]
  404bca:	6060      	str	r0, [r4, #4]
  404bcc:	50e3      	str	r3, [r4, r3]
  404bce:	e7a3      	b.n	404b18 <_free_r+0x84>
  404bd0:	2a14      	cmp	r2, #20
  404bd2:	d816      	bhi.n	404c02 <_free_r+0x16e>
  404bd4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  404bd8:	00ff      	lsls	r7, r7, #3
  404bda:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  404bde:	e7aa      	b.n	404b36 <_free_r+0xa2>
  404be0:	10aa      	asrs	r2, r5, #2
  404be2:	2301      	movs	r3, #1
  404be4:	684d      	ldr	r5, [r1, #4]
  404be6:	4093      	lsls	r3, r2
  404be8:	432b      	orrs	r3, r5
  404bea:	604b      	str	r3, [r1, #4]
  404bec:	4603      	mov	r3, r0
  404bee:	e7b0      	b.n	404b52 <_free_r+0xbe>
  404bf0:	f043 0201 	orr.w	r2, r3, #1
  404bf4:	614c      	str	r4, [r1, #20]
  404bf6:	610c      	str	r4, [r1, #16]
  404bf8:	60e5      	str	r5, [r4, #12]
  404bfa:	60a5      	str	r5, [r4, #8]
  404bfc:	6062      	str	r2, [r4, #4]
  404bfe:	50e3      	str	r3, [r4, r3]
  404c00:	e78a      	b.n	404b18 <_free_r+0x84>
  404c02:	2a54      	cmp	r2, #84	; 0x54
  404c04:	d806      	bhi.n	404c14 <_free_r+0x180>
  404c06:	0b1a      	lsrs	r2, r3, #12
  404c08:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  404c0c:	00ff      	lsls	r7, r7, #3
  404c0e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  404c12:	e790      	b.n	404b36 <_free_r+0xa2>
  404c14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404c18:	d806      	bhi.n	404c28 <_free_r+0x194>
  404c1a:	0bda      	lsrs	r2, r3, #15
  404c1c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  404c20:	00ff      	lsls	r7, r7, #3
  404c22:	f102 0577 	add.w	r5, r2, #119	; 0x77
  404c26:	e786      	b.n	404b36 <_free_r+0xa2>
  404c28:	f240 5054 	movw	r0, #1364	; 0x554
  404c2c:	4282      	cmp	r2, r0
  404c2e:	d806      	bhi.n	404c3e <_free_r+0x1aa>
  404c30:	0c9a      	lsrs	r2, r3, #18
  404c32:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  404c36:	00ff      	lsls	r7, r7, #3
  404c38:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  404c3c:	e77b      	b.n	404b36 <_free_r+0xa2>
  404c3e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  404c42:	257e      	movs	r5, #126	; 0x7e
  404c44:	e777      	b.n	404b36 <_free_r+0xa2>
  404c46:	f043 0101 	orr.w	r1, r3, #1
  404c4a:	6061      	str	r1, [r4, #4]
  404c4c:	6013      	str	r3, [r2, #0]
  404c4e:	e763      	b.n	404b18 <_free_r+0x84>
  404c50:	20400440 	.word	0x20400440
  404c54:	20400448 	.word	0x20400448
  404c58:	2040084c 	.word	0x2040084c
  404c5c:	20400bcc 	.word	0x20400bcc

00404c60 <__sfvwrite_r>:
  404c60:	6893      	ldr	r3, [r2, #8]
  404c62:	2b00      	cmp	r3, #0
  404c64:	d073      	beq.n	404d4e <__sfvwrite_r+0xee>
  404c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404c6a:	898b      	ldrh	r3, [r1, #12]
  404c6c:	b083      	sub	sp, #12
  404c6e:	460c      	mov	r4, r1
  404c70:	0719      	lsls	r1, r3, #28
  404c72:	9000      	str	r0, [sp, #0]
  404c74:	4616      	mov	r6, r2
  404c76:	d526      	bpl.n	404cc6 <__sfvwrite_r+0x66>
  404c78:	6922      	ldr	r2, [r4, #16]
  404c7a:	b322      	cbz	r2, 404cc6 <__sfvwrite_r+0x66>
  404c7c:	f013 0002 	ands.w	r0, r3, #2
  404c80:	6835      	ldr	r5, [r6, #0]
  404c82:	d02c      	beq.n	404cde <__sfvwrite_r+0x7e>
  404c84:	f04f 0900 	mov.w	r9, #0
  404c88:	4fb0      	ldr	r7, [pc, #704]	; (404f4c <__sfvwrite_r+0x2ec>)
  404c8a:	46c8      	mov	r8, r9
  404c8c:	46b2      	mov	sl, r6
  404c8e:	45b8      	cmp	r8, r7
  404c90:	4643      	mov	r3, r8
  404c92:	464a      	mov	r2, r9
  404c94:	bf28      	it	cs
  404c96:	463b      	movcs	r3, r7
  404c98:	9800      	ldr	r0, [sp, #0]
  404c9a:	f1b8 0f00 	cmp.w	r8, #0
  404c9e:	d050      	beq.n	404d42 <__sfvwrite_r+0xe2>
  404ca0:	69e1      	ldr	r1, [r4, #28]
  404ca2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404ca4:	47b0      	blx	r6
  404ca6:	2800      	cmp	r0, #0
  404ca8:	dd58      	ble.n	404d5c <__sfvwrite_r+0xfc>
  404caa:	f8da 3008 	ldr.w	r3, [sl, #8]
  404cae:	1a1b      	subs	r3, r3, r0
  404cb0:	4481      	add	r9, r0
  404cb2:	eba8 0800 	sub.w	r8, r8, r0
  404cb6:	f8ca 3008 	str.w	r3, [sl, #8]
  404cba:	2b00      	cmp	r3, #0
  404cbc:	d1e7      	bne.n	404c8e <__sfvwrite_r+0x2e>
  404cbe:	2000      	movs	r0, #0
  404cc0:	b003      	add	sp, #12
  404cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404cc6:	4621      	mov	r1, r4
  404cc8:	9800      	ldr	r0, [sp, #0]
  404cca:	f7ff fc51 	bl	404570 <__swsetup_r>
  404cce:	2800      	cmp	r0, #0
  404cd0:	f040 8133 	bne.w	404f3a <__sfvwrite_r+0x2da>
  404cd4:	89a3      	ldrh	r3, [r4, #12]
  404cd6:	6835      	ldr	r5, [r6, #0]
  404cd8:	f013 0002 	ands.w	r0, r3, #2
  404cdc:	d1d2      	bne.n	404c84 <__sfvwrite_r+0x24>
  404cde:	f013 0901 	ands.w	r9, r3, #1
  404ce2:	d145      	bne.n	404d70 <__sfvwrite_r+0x110>
  404ce4:	464f      	mov	r7, r9
  404ce6:	9601      	str	r6, [sp, #4]
  404ce8:	b337      	cbz	r7, 404d38 <__sfvwrite_r+0xd8>
  404cea:	059a      	lsls	r2, r3, #22
  404cec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  404cf0:	f140 8083 	bpl.w	404dfa <__sfvwrite_r+0x19a>
  404cf4:	4547      	cmp	r7, r8
  404cf6:	46c3      	mov	fp, r8
  404cf8:	f0c0 80ab 	bcc.w	404e52 <__sfvwrite_r+0x1f2>
  404cfc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  404d00:	f040 80ac 	bne.w	404e5c <__sfvwrite_r+0x1fc>
  404d04:	6820      	ldr	r0, [r4, #0]
  404d06:	46ba      	mov	sl, r7
  404d08:	465a      	mov	r2, fp
  404d0a:	4649      	mov	r1, r9
  404d0c:	f000 fa40 	bl	405190 <memmove>
  404d10:	68a2      	ldr	r2, [r4, #8]
  404d12:	6823      	ldr	r3, [r4, #0]
  404d14:	eba2 0208 	sub.w	r2, r2, r8
  404d18:	445b      	add	r3, fp
  404d1a:	60a2      	str	r2, [r4, #8]
  404d1c:	6023      	str	r3, [r4, #0]
  404d1e:	9a01      	ldr	r2, [sp, #4]
  404d20:	6893      	ldr	r3, [r2, #8]
  404d22:	eba3 030a 	sub.w	r3, r3, sl
  404d26:	44d1      	add	r9, sl
  404d28:	eba7 070a 	sub.w	r7, r7, sl
  404d2c:	6093      	str	r3, [r2, #8]
  404d2e:	2b00      	cmp	r3, #0
  404d30:	d0c5      	beq.n	404cbe <__sfvwrite_r+0x5e>
  404d32:	89a3      	ldrh	r3, [r4, #12]
  404d34:	2f00      	cmp	r7, #0
  404d36:	d1d8      	bne.n	404cea <__sfvwrite_r+0x8a>
  404d38:	f8d5 9000 	ldr.w	r9, [r5]
  404d3c:	686f      	ldr	r7, [r5, #4]
  404d3e:	3508      	adds	r5, #8
  404d40:	e7d2      	b.n	404ce8 <__sfvwrite_r+0x88>
  404d42:	f8d5 9000 	ldr.w	r9, [r5]
  404d46:	f8d5 8004 	ldr.w	r8, [r5, #4]
  404d4a:	3508      	adds	r5, #8
  404d4c:	e79f      	b.n	404c8e <__sfvwrite_r+0x2e>
  404d4e:	2000      	movs	r0, #0
  404d50:	4770      	bx	lr
  404d52:	4621      	mov	r1, r4
  404d54:	9800      	ldr	r0, [sp, #0]
  404d56:	f7ff fd1f 	bl	404798 <_fflush_r>
  404d5a:	b370      	cbz	r0, 404dba <__sfvwrite_r+0x15a>
  404d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404d64:	f04f 30ff 	mov.w	r0, #4294967295
  404d68:	81a3      	strh	r3, [r4, #12]
  404d6a:	b003      	add	sp, #12
  404d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d70:	4681      	mov	r9, r0
  404d72:	4633      	mov	r3, r6
  404d74:	464e      	mov	r6, r9
  404d76:	46a8      	mov	r8, r5
  404d78:	469a      	mov	sl, r3
  404d7a:	464d      	mov	r5, r9
  404d7c:	b34e      	cbz	r6, 404dd2 <__sfvwrite_r+0x172>
  404d7e:	b380      	cbz	r0, 404de2 <__sfvwrite_r+0x182>
  404d80:	6820      	ldr	r0, [r4, #0]
  404d82:	6923      	ldr	r3, [r4, #16]
  404d84:	6962      	ldr	r2, [r4, #20]
  404d86:	45b1      	cmp	r9, r6
  404d88:	46cb      	mov	fp, r9
  404d8a:	bf28      	it	cs
  404d8c:	46b3      	movcs	fp, r6
  404d8e:	4298      	cmp	r0, r3
  404d90:	465f      	mov	r7, fp
  404d92:	d904      	bls.n	404d9e <__sfvwrite_r+0x13e>
  404d94:	68a3      	ldr	r3, [r4, #8]
  404d96:	4413      	add	r3, r2
  404d98:	459b      	cmp	fp, r3
  404d9a:	f300 80a6 	bgt.w	404eea <__sfvwrite_r+0x28a>
  404d9e:	4593      	cmp	fp, r2
  404da0:	db4b      	blt.n	404e3a <__sfvwrite_r+0x1da>
  404da2:	4613      	mov	r3, r2
  404da4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  404da6:	69e1      	ldr	r1, [r4, #28]
  404da8:	9800      	ldr	r0, [sp, #0]
  404daa:	462a      	mov	r2, r5
  404dac:	47b8      	blx	r7
  404dae:	1e07      	subs	r7, r0, #0
  404db0:	ddd4      	ble.n	404d5c <__sfvwrite_r+0xfc>
  404db2:	ebb9 0907 	subs.w	r9, r9, r7
  404db6:	d0cc      	beq.n	404d52 <__sfvwrite_r+0xf2>
  404db8:	2001      	movs	r0, #1
  404dba:	f8da 3008 	ldr.w	r3, [sl, #8]
  404dbe:	1bdb      	subs	r3, r3, r7
  404dc0:	443d      	add	r5, r7
  404dc2:	1bf6      	subs	r6, r6, r7
  404dc4:	f8ca 3008 	str.w	r3, [sl, #8]
  404dc8:	2b00      	cmp	r3, #0
  404dca:	f43f af78 	beq.w	404cbe <__sfvwrite_r+0x5e>
  404dce:	2e00      	cmp	r6, #0
  404dd0:	d1d5      	bne.n	404d7e <__sfvwrite_r+0x11e>
  404dd2:	f108 0308 	add.w	r3, r8, #8
  404dd6:	e913 0060 	ldmdb	r3, {r5, r6}
  404dda:	4698      	mov	r8, r3
  404ddc:	3308      	adds	r3, #8
  404dde:	2e00      	cmp	r6, #0
  404de0:	d0f9      	beq.n	404dd6 <__sfvwrite_r+0x176>
  404de2:	4632      	mov	r2, r6
  404de4:	210a      	movs	r1, #10
  404de6:	4628      	mov	r0, r5
  404de8:	f000 f982 	bl	4050f0 <memchr>
  404dec:	2800      	cmp	r0, #0
  404dee:	f000 80a1 	beq.w	404f34 <__sfvwrite_r+0x2d4>
  404df2:	3001      	adds	r0, #1
  404df4:	eba0 0905 	sub.w	r9, r0, r5
  404df8:	e7c2      	b.n	404d80 <__sfvwrite_r+0x120>
  404dfa:	6820      	ldr	r0, [r4, #0]
  404dfc:	6923      	ldr	r3, [r4, #16]
  404dfe:	4298      	cmp	r0, r3
  404e00:	d802      	bhi.n	404e08 <__sfvwrite_r+0x1a8>
  404e02:	6963      	ldr	r3, [r4, #20]
  404e04:	429f      	cmp	r7, r3
  404e06:	d25d      	bcs.n	404ec4 <__sfvwrite_r+0x264>
  404e08:	45b8      	cmp	r8, r7
  404e0a:	bf28      	it	cs
  404e0c:	46b8      	movcs	r8, r7
  404e0e:	4642      	mov	r2, r8
  404e10:	4649      	mov	r1, r9
  404e12:	f000 f9bd 	bl	405190 <memmove>
  404e16:	68a3      	ldr	r3, [r4, #8]
  404e18:	6822      	ldr	r2, [r4, #0]
  404e1a:	eba3 0308 	sub.w	r3, r3, r8
  404e1e:	4442      	add	r2, r8
  404e20:	60a3      	str	r3, [r4, #8]
  404e22:	6022      	str	r2, [r4, #0]
  404e24:	b10b      	cbz	r3, 404e2a <__sfvwrite_r+0x1ca>
  404e26:	46c2      	mov	sl, r8
  404e28:	e779      	b.n	404d1e <__sfvwrite_r+0xbe>
  404e2a:	4621      	mov	r1, r4
  404e2c:	9800      	ldr	r0, [sp, #0]
  404e2e:	f7ff fcb3 	bl	404798 <_fflush_r>
  404e32:	2800      	cmp	r0, #0
  404e34:	d192      	bne.n	404d5c <__sfvwrite_r+0xfc>
  404e36:	46c2      	mov	sl, r8
  404e38:	e771      	b.n	404d1e <__sfvwrite_r+0xbe>
  404e3a:	465a      	mov	r2, fp
  404e3c:	4629      	mov	r1, r5
  404e3e:	f000 f9a7 	bl	405190 <memmove>
  404e42:	68a2      	ldr	r2, [r4, #8]
  404e44:	6823      	ldr	r3, [r4, #0]
  404e46:	eba2 020b 	sub.w	r2, r2, fp
  404e4a:	445b      	add	r3, fp
  404e4c:	60a2      	str	r2, [r4, #8]
  404e4e:	6023      	str	r3, [r4, #0]
  404e50:	e7af      	b.n	404db2 <__sfvwrite_r+0x152>
  404e52:	6820      	ldr	r0, [r4, #0]
  404e54:	46b8      	mov	r8, r7
  404e56:	46ba      	mov	sl, r7
  404e58:	46bb      	mov	fp, r7
  404e5a:	e755      	b.n	404d08 <__sfvwrite_r+0xa8>
  404e5c:	6962      	ldr	r2, [r4, #20]
  404e5e:	6820      	ldr	r0, [r4, #0]
  404e60:	6921      	ldr	r1, [r4, #16]
  404e62:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  404e66:	eba0 0a01 	sub.w	sl, r0, r1
  404e6a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  404e6e:	f10a 0001 	add.w	r0, sl, #1
  404e72:	ea4f 0868 	mov.w	r8, r8, asr #1
  404e76:	4438      	add	r0, r7
  404e78:	4540      	cmp	r0, r8
  404e7a:	4642      	mov	r2, r8
  404e7c:	bf84      	itt	hi
  404e7e:	4680      	movhi	r8, r0
  404e80:	4642      	movhi	r2, r8
  404e82:	055b      	lsls	r3, r3, #21
  404e84:	d544      	bpl.n	404f10 <__sfvwrite_r+0x2b0>
  404e86:	4611      	mov	r1, r2
  404e88:	9800      	ldr	r0, [sp, #0]
  404e8a:	f7fd ff9f 	bl	402dcc <_malloc_r>
  404e8e:	4683      	mov	fp, r0
  404e90:	2800      	cmp	r0, #0
  404e92:	d055      	beq.n	404f40 <__sfvwrite_r+0x2e0>
  404e94:	4652      	mov	r2, sl
  404e96:	6921      	ldr	r1, [r4, #16]
  404e98:	f7fe fa48 	bl	40332c <memcpy>
  404e9c:	89a3      	ldrh	r3, [r4, #12]
  404e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  404ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404ea6:	81a3      	strh	r3, [r4, #12]
  404ea8:	eb0b 000a 	add.w	r0, fp, sl
  404eac:	eba8 030a 	sub.w	r3, r8, sl
  404eb0:	f8c4 b010 	str.w	fp, [r4, #16]
  404eb4:	f8c4 8014 	str.w	r8, [r4, #20]
  404eb8:	6020      	str	r0, [r4, #0]
  404eba:	60a3      	str	r3, [r4, #8]
  404ebc:	46b8      	mov	r8, r7
  404ebe:	46ba      	mov	sl, r7
  404ec0:	46bb      	mov	fp, r7
  404ec2:	e721      	b.n	404d08 <__sfvwrite_r+0xa8>
  404ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404ec8:	42b9      	cmp	r1, r7
  404eca:	bf28      	it	cs
  404ecc:	4639      	movcs	r1, r7
  404ece:	464a      	mov	r2, r9
  404ed0:	fb91 f1f3 	sdiv	r1, r1, r3
  404ed4:	9800      	ldr	r0, [sp, #0]
  404ed6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404ed8:	fb03 f301 	mul.w	r3, r3, r1
  404edc:	69e1      	ldr	r1, [r4, #28]
  404ede:	47b0      	blx	r6
  404ee0:	f1b0 0a00 	subs.w	sl, r0, #0
  404ee4:	f73f af1b 	bgt.w	404d1e <__sfvwrite_r+0xbe>
  404ee8:	e738      	b.n	404d5c <__sfvwrite_r+0xfc>
  404eea:	461a      	mov	r2, r3
  404eec:	4629      	mov	r1, r5
  404eee:	9301      	str	r3, [sp, #4]
  404ef0:	f000 f94e 	bl	405190 <memmove>
  404ef4:	6822      	ldr	r2, [r4, #0]
  404ef6:	9b01      	ldr	r3, [sp, #4]
  404ef8:	9800      	ldr	r0, [sp, #0]
  404efa:	441a      	add	r2, r3
  404efc:	6022      	str	r2, [r4, #0]
  404efe:	4621      	mov	r1, r4
  404f00:	f7ff fc4a 	bl	404798 <_fflush_r>
  404f04:	9b01      	ldr	r3, [sp, #4]
  404f06:	2800      	cmp	r0, #0
  404f08:	f47f af28 	bne.w	404d5c <__sfvwrite_r+0xfc>
  404f0c:	461f      	mov	r7, r3
  404f0e:	e750      	b.n	404db2 <__sfvwrite_r+0x152>
  404f10:	9800      	ldr	r0, [sp, #0]
  404f12:	f000 f9a1 	bl	405258 <_realloc_r>
  404f16:	4683      	mov	fp, r0
  404f18:	2800      	cmp	r0, #0
  404f1a:	d1c5      	bne.n	404ea8 <__sfvwrite_r+0x248>
  404f1c:	9d00      	ldr	r5, [sp, #0]
  404f1e:	6921      	ldr	r1, [r4, #16]
  404f20:	4628      	mov	r0, r5
  404f22:	f7ff fdb7 	bl	404a94 <_free_r>
  404f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f2a:	220c      	movs	r2, #12
  404f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404f30:	602a      	str	r2, [r5, #0]
  404f32:	e715      	b.n	404d60 <__sfvwrite_r+0x100>
  404f34:	f106 0901 	add.w	r9, r6, #1
  404f38:	e722      	b.n	404d80 <__sfvwrite_r+0x120>
  404f3a:	f04f 30ff 	mov.w	r0, #4294967295
  404f3e:	e6bf      	b.n	404cc0 <__sfvwrite_r+0x60>
  404f40:	9a00      	ldr	r2, [sp, #0]
  404f42:	230c      	movs	r3, #12
  404f44:	6013      	str	r3, [r2, #0]
  404f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404f4a:	e709      	b.n	404d60 <__sfvwrite_r+0x100>
  404f4c:	7ffffc00 	.word	0x7ffffc00

00404f50 <_fwalk_reent>:
  404f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404f54:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404f58:	d01f      	beq.n	404f9a <_fwalk_reent+0x4a>
  404f5a:	4688      	mov	r8, r1
  404f5c:	4606      	mov	r6, r0
  404f5e:	f04f 0900 	mov.w	r9, #0
  404f62:	687d      	ldr	r5, [r7, #4]
  404f64:	68bc      	ldr	r4, [r7, #8]
  404f66:	3d01      	subs	r5, #1
  404f68:	d411      	bmi.n	404f8e <_fwalk_reent+0x3e>
  404f6a:	89a3      	ldrh	r3, [r4, #12]
  404f6c:	2b01      	cmp	r3, #1
  404f6e:	f105 35ff 	add.w	r5, r5, #4294967295
  404f72:	d908      	bls.n	404f86 <_fwalk_reent+0x36>
  404f74:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  404f78:	3301      	adds	r3, #1
  404f7a:	4621      	mov	r1, r4
  404f7c:	4630      	mov	r0, r6
  404f7e:	d002      	beq.n	404f86 <_fwalk_reent+0x36>
  404f80:	47c0      	blx	r8
  404f82:	ea49 0900 	orr.w	r9, r9, r0
  404f86:	1c6b      	adds	r3, r5, #1
  404f88:	f104 0468 	add.w	r4, r4, #104	; 0x68
  404f8c:	d1ed      	bne.n	404f6a <_fwalk_reent+0x1a>
  404f8e:	683f      	ldr	r7, [r7, #0]
  404f90:	2f00      	cmp	r7, #0
  404f92:	d1e6      	bne.n	404f62 <_fwalk_reent+0x12>
  404f94:	4648      	mov	r0, r9
  404f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404f9a:	46b9      	mov	r9, r7
  404f9c:	4648      	mov	r0, r9
  404f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fa2:	bf00      	nop

00404fa4 <__locale_mb_cur_max>:
  404fa4:	4b04      	ldr	r3, [pc, #16]	; (404fb8 <__locale_mb_cur_max+0x14>)
  404fa6:	4a05      	ldr	r2, [pc, #20]	; (404fbc <__locale_mb_cur_max+0x18>)
  404fa8:	681b      	ldr	r3, [r3, #0]
  404faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  404fac:	2b00      	cmp	r3, #0
  404fae:	bf08      	it	eq
  404fb0:	4613      	moveq	r3, r2
  404fb2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  404fb6:	4770      	bx	lr
  404fb8:	20400014 	.word	0x20400014
  404fbc:	20400854 	.word	0x20400854

00404fc0 <__retarget_lock_init_recursive>:
  404fc0:	4770      	bx	lr
  404fc2:	bf00      	nop

00404fc4 <__retarget_lock_close_recursive>:
  404fc4:	4770      	bx	lr
  404fc6:	bf00      	nop

00404fc8 <__retarget_lock_acquire_recursive>:
  404fc8:	4770      	bx	lr
  404fca:	bf00      	nop

00404fcc <__retarget_lock_release_recursive>:
  404fcc:	4770      	bx	lr
  404fce:	bf00      	nop

00404fd0 <__swhatbuf_r>:
  404fd0:	b570      	push	{r4, r5, r6, lr}
  404fd2:	460c      	mov	r4, r1
  404fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404fd8:	2900      	cmp	r1, #0
  404fda:	b090      	sub	sp, #64	; 0x40
  404fdc:	4615      	mov	r5, r2
  404fde:	461e      	mov	r6, r3
  404fe0:	db14      	blt.n	40500c <__swhatbuf_r+0x3c>
  404fe2:	aa01      	add	r2, sp, #4
  404fe4:	f000 fc9e 	bl	405924 <_fstat_r>
  404fe8:	2800      	cmp	r0, #0
  404fea:	db0f      	blt.n	40500c <__swhatbuf_r+0x3c>
  404fec:	9a02      	ldr	r2, [sp, #8]
  404fee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404ff2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404ff6:	fab2 f282 	clz	r2, r2
  404ffa:	0952      	lsrs	r2, r2, #5
  404ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405000:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405004:	6032      	str	r2, [r6, #0]
  405006:	602b      	str	r3, [r5, #0]
  405008:	b010      	add	sp, #64	; 0x40
  40500a:	bd70      	pop	{r4, r5, r6, pc}
  40500c:	89a2      	ldrh	r2, [r4, #12]
  40500e:	2300      	movs	r3, #0
  405010:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405014:	6033      	str	r3, [r6, #0]
  405016:	d004      	beq.n	405022 <__swhatbuf_r+0x52>
  405018:	2240      	movs	r2, #64	; 0x40
  40501a:	4618      	mov	r0, r3
  40501c:	602a      	str	r2, [r5, #0]
  40501e:	b010      	add	sp, #64	; 0x40
  405020:	bd70      	pop	{r4, r5, r6, pc}
  405022:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405026:	602b      	str	r3, [r5, #0]
  405028:	b010      	add	sp, #64	; 0x40
  40502a:	bd70      	pop	{r4, r5, r6, pc}

0040502c <__smakebuf_r>:
  40502c:	898a      	ldrh	r2, [r1, #12]
  40502e:	0792      	lsls	r2, r2, #30
  405030:	460b      	mov	r3, r1
  405032:	d506      	bpl.n	405042 <__smakebuf_r+0x16>
  405034:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405038:	2101      	movs	r1, #1
  40503a:	601a      	str	r2, [r3, #0]
  40503c:	611a      	str	r2, [r3, #16]
  40503e:	6159      	str	r1, [r3, #20]
  405040:	4770      	bx	lr
  405042:	b5f0      	push	{r4, r5, r6, r7, lr}
  405044:	b083      	sub	sp, #12
  405046:	ab01      	add	r3, sp, #4
  405048:	466a      	mov	r2, sp
  40504a:	460c      	mov	r4, r1
  40504c:	4606      	mov	r6, r0
  40504e:	f7ff ffbf 	bl	404fd0 <__swhatbuf_r>
  405052:	9900      	ldr	r1, [sp, #0]
  405054:	4605      	mov	r5, r0
  405056:	4630      	mov	r0, r6
  405058:	f7fd feb8 	bl	402dcc <_malloc_r>
  40505c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405060:	b1d8      	cbz	r0, 40509a <__smakebuf_r+0x6e>
  405062:	9a01      	ldr	r2, [sp, #4]
  405064:	4f15      	ldr	r7, [pc, #84]	; (4050bc <__smakebuf_r+0x90>)
  405066:	9900      	ldr	r1, [sp, #0]
  405068:	63f7      	str	r7, [r6, #60]	; 0x3c
  40506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40506e:	81a3      	strh	r3, [r4, #12]
  405070:	6020      	str	r0, [r4, #0]
  405072:	6120      	str	r0, [r4, #16]
  405074:	6161      	str	r1, [r4, #20]
  405076:	b91a      	cbnz	r2, 405080 <__smakebuf_r+0x54>
  405078:	432b      	orrs	r3, r5
  40507a:	81a3      	strh	r3, [r4, #12]
  40507c:	b003      	add	sp, #12
  40507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405080:	4630      	mov	r0, r6
  405082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405086:	f000 fc61 	bl	40594c <_isatty_r>
  40508a:	b1a0      	cbz	r0, 4050b6 <__smakebuf_r+0x8a>
  40508c:	89a3      	ldrh	r3, [r4, #12]
  40508e:	f023 0303 	bic.w	r3, r3, #3
  405092:	f043 0301 	orr.w	r3, r3, #1
  405096:	b21b      	sxth	r3, r3
  405098:	e7ee      	b.n	405078 <__smakebuf_r+0x4c>
  40509a:	059a      	lsls	r2, r3, #22
  40509c:	d4ee      	bmi.n	40507c <__smakebuf_r+0x50>
  40509e:	f023 0303 	bic.w	r3, r3, #3
  4050a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4050a6:	f043 0302 	orr.w	r3, r3, #2
  4050aa:	2101      	movs	r1, #1
  4050ac:	81a3      	strh	r3, [r4, #12]
  4050ae:	6022      	str	r2, [r4, #0]
  4050b0:	6122      	str	r2, [r4, #16]
  4050b2:	6161      	str	r1, [r4, #20]
  4050b4:	e7e2      	b.n	40507c <__smakebuf_r+0x50>
  4050b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4050ba:	e7dd      	b.n	405078 <__smakebuf_r+0x4c>
  4050bc:	004047ed 	.word	0x004047ed

004050c0 <__ascii_mbtowc>:
  4050c0:	b082      	sub	sp, #8
  4050c2:	b149      	cbz	r1, 4050d8 <__ascii_mbtowc+0x18>
  4050c4:	b15a      	cbz	r2, 4050de <__ascii_mbtowc+0x1e>
  4050c6:	b16b      	cbz	r3, 4050e4 <__ascii_mbtowc+0x24>
  4050c8:	7813      	ldrb	r3, [r2, #0]
  4050ca:	600b      	str	r3, [r1, #0]
  4050cc:	7812      	ldrb	r2, [r2, #0]
  4050ce:	1c10      	adds	r0, r2, #0
  4050d0:	bf18      	it	ne
  4050d2:	2001      	movne	r0, #1
  4050d4:	b002      	add	sp, #8
  4050d6:	4770      	bx	lr
  4050d8:	a901      	add	r1, sp, #4
  4050da:	2a00      	cmp	r2, #0
  4050dc:	d1f3      	bne.n	4050c6 <__ascii_mbtowc+0x6>
  4050de:	4610      	mov	r0, r2
  4050e0:	b002      	add	sp, #8
  4050e2:	4770      	bx	lr
  4050e4:	f06f 0001 	mvn.w	r0, #1
  4050e8:	e7f4      	b.n	4050d4 <__ascii_mbtowc+0x14>
  4050ea:	bf00      	nop
  4050ec:	0000      	movs	r0, r0
	...

004050f0 <memchr>:
  4050f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4050f4:	2a10      	cmp	r2, #16
  4050f6:	db2b      	blt.n	405150 <memchr+0x60>
  4050f8:	f010 0f07 	tst.w	r0, #7
  4050fc:	d008      	beq.n	405110 <memchr+0x20>
  4050fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  405102:	3a01      	subs	r2, #1
  405104:	428b      	cmp	r3, r1
  405106:	d02d      	beq.n	405164 <memchr+0x74>
  405108:	f010 0f07 	tst.w	r0, #7
  40510c:	b342      	cbz	r2, 405160 <memchr+0x70>
  40510e:	d1f6      	bne.n	4050fe <memchr+0xe>
  405110:	b4f0      	push	{r4, r5, r6, r7}
  405112:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405116:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40511a:	f022 0407 	bic.w	r4, r2, #7
  40511e:	f07f 0700 	mvns.w	r7, #0
  405122:	2300      	movs	r3, #0
  405124:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405128:	3c08      	subs	r4, #8
  40512a:	ea85 0501 	eor.w	r5, r5, r1
  40512e:	ea86 0601 	eor.w	r6, r6, r1
  405132:	fa85 f547 	uadd8	r5, r5, r7
  405136:	faa3 f587 	sel	r5, r3, r7
  40513a:	fa86 f647 	uadd8	r6, r6, r7
  40513e:	faa5 f687 	sel	r6, r5, r7
  405142:	b98e      	cbnz	r6, 405168 <memchr+0x78>
  405144:	d1ee      	bne.n	405124 <memchr+0x34>
  405146:	bcf0      	pop	{r4, r5, r6, r7}
  405148:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40514c:	f002 0207 	and.w	r2, r2, #7
  405150:	b132      	cbz	r2, 405160 <memchr+0x70>
  405152:	f810 3b01 	ldrb.w	r3, [r0], #1
  405156:	3a01      	subs	r2, #1
  405158:	ea83 0301 	eor.w	r3, r3, r1
  40515c:	b113      	cbz	r3, 405164 <memchr+0x74>
  40515e:	d1f8      	bne.n	405152 <memchr+0x62>
  405160:	2000      	movs	r0, #0
  405162:	4770      	bx	lr
  405164:	3801      	subs	r0, #1
  405166:	4770      	bx	lr
  405168:	2d00      	cmp	r5, #0
  40516a:	bf06      	itte	eq
  40516c:	4635      	moveq	r5, r6
  40516e:	3803      	subeq	r0, #3
  405170:	3807      	subne	r0, #7
  405172:	f015 0f01 	tst.w	r5, #1
  405176:	d107      	bne.n	405188 <memchr+0x98>
  405178:	3001      	adds	r0, #1
  40517a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40517e:	bf02      	ittt	eq
  405180:	3001      	addeq	r0, #1
  405182:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405186:	3001      	addeq	r0, #1
  405188:	bcf0      	pop	{r4, r5, r6, r7}
  40518a:	3801      	subs	r0, #1
  40518c:	4770      	bx	lr
  40518e:	bf00      	nop

00405190 <memmove>:
  405190:	4288      	cmp	r0, r1
  405192:	b5f0      	push	{r4, r5, r6, r7, lr}
  405194:	d90d      	bls.n	4051b2 <memmove+0x22>
  405196:	188b      	adds	r3, r1, r2
  405198:	4298      	cmp	r0, r3
  40519a:	d20a      	bcs.n	4051b2 <memmove+0x22>
  40519c:	1884      	adds	r4, r0, r2
  40519e:	2a00      	cmp	r2, #0
  4051a0:	d051      	beq.n	405246 <memmove+0xb6>
  4051a2:	4622      	mov	r2, r4
  4051a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4051a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4051ac:	4299      	cmp	r1, r3
  4051ae:	d1f9      	bne.n	4051a4 <memmove+0x14>
  4051b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4051b2:	2a0f      	cmp	r2, #15
  4051b4:	d948      	bls.n	405248 <memmove+0xb8>
  4051b6:	ea41 0300 	orr.w	r3, r1, r0
  4051ba:	079b      	lsls	r3, r3, #30
  4051bc:	d146      	bne.n	40524c <memmove+0xbc>
  4051be:	f100 0410 	add.w	r4, r0, #16
  4051c2:	f101 0310 	add.w	r3, r1, #16
  4051c6:	4615      	mov	r5, r2
  4051c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4051cc:	f844 6c10 	str.w	r6, [r4, #-16]
  4051d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4051d4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4051d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4051dc:	f844 6c08 	str.w	r6, [r4, #-8]
  4051e0:	3d10      	subs	r5, #16
  4051e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4051e6:	f844 6c04 	str.w	r6, [r4, #-4]
  4051ea:	2d0f      	cmp	r5, #15
  4051ec:	f103 0310 	add.w	r3, r3, #16
  4051f0:	f104 0410 	add.w	r4, r4, #16
  4051f4:	d8e8      	bhi.n	4051c8 <memmove+0x38>
  4051f6:	f1a2 0310 	sub.w	r3, r2, #16
  4051fa:	f023 030f 	bic.w	r3, r3, #15
  4051fe:	f002 0e0f 	and.w	lr, r2, #15
  405202:	3310      	adds	r3, #16
  405204:	f1be 0f03 	cmp.w	lr, #3
  405208:	4419      	add	r1, r3
  40520a:	4403      	add	r3, r0
  40520c:	d921      	bls.n	405252 <memmove+0xc2>
  40520e:	1f1e      	subs	r6, r3, #4
  405210:	460d      	mov	r5, r1
  405212:	4674      	mov	r4, lr
  405214:	3c04      	subs	r4, #4
  405216:	f855 7b04 	ldr.w	r7, [r5], #4
  40521a:	f846 7f04 	str.w	r7, [r6, #4]!
  40521e:	2c03      	cmp	r4, #3
  405220:	d8f8      	bhi.n	405214 <memmove+0x84>
  405222:	f1ae 0404 	sub.w	r4, lr, #4
  405226:	f024 0403 	bic.w	r4, r4, #3
  40522a:	3404      	adds	r4, #4
  40522c:	4421      	add	r1, r4
  40522e:	4423      	add	r3, r4
  405230:	f002 0203 	and.w	r2, r2, #3
  405234:	b162      	cbz	r2, 405250 <memmove+0xc0>
  405236:	3b01      	subs	r3, #1
  405238:	440a      	add	r2, r1
  40523a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40523e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405242:	428a      	cmp	r2, r1
  405244:	d1f9      	bne.n	40523a <memmove+0xaa>
  405246:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405248:	4603      	mov	r3, r0
  40524a:	e7f3      	b.n	405234 <memmove+0xa4>
  40524c:	4603      	mov	r3, r0
  40524e:	e7f2      	b.n	405236 <memmove+0xa6>
  405250:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405252:	4672      	mov	r2, lr
  405254:	e7ee      	b.n	405234 <memmove+0xa4>
  405256:	bf00      	nop

00405258 <_realloc_r>:
  405258:	2900      	cmp	r1, #0
  40525a:	f000 8095 	beq.w	405388 <_realloc_r+0x130>
  40525e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405262:	460d      	mov	r5, r1
  405264:	4616      	mov	r6, r2
  405266:	b083      	sub	sp, #12
  405268:	4680      	mov	r8, r0
  40526a:	f106 070b 	add.w	r7, r6, #11
  40526e:	f7fe f945 	bl	4034fc <__malloc_lock>
  405272:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405276:	2f16      	cmp	r7, #22
  405278:	f02e 0403 	bic.w	r4, lr, #3
  40527c:	f1a5 0908 	sub.w	r9, r5, #8
  405280:	d83c      	bhi.n	4052fc <_realloc_r+0xa4>
  405282:	2210      	movs	r2, #16
  405284:	4617      	mov	r7, r2
  405286:	42be      	cmp	r6, r7
  405288:	d83d      	bhi.n	405306 <_realloc_r+0xae>
  40528a:	4294      	cmp	r4, r2
  40528c:	da43      	bge.n	405316 <_realloc_r+0xbe>
  40528e:	4bc4      	ldr	r3, [pc, #784]	; (4055a0 <_realloc_r+0x348>)
  405290:	6899      	ldr	r1, [r3, #8]
  405292:	eb09 0004 	add.w	r0, r9, r4
  405296:	4288      	cmp	r0, r1
  405298:	f000 80b4 	beq.w	405404 <_realloc_r+0x1ac>
  40529c:	6843      	ldr	r3, [r0, #4]
  40529e:	f023 0101 	bic.w	r1, r3, #1
  4052a2:	4401      	add	r1, r0
  4052a4:	6849      	ldr	r1, [r1, #4]
  4052a6:	07c9      	lsls	r1, r1, #31
  4052a8:	d54c      	bpl.n	405344 <_realloc_r+0xec>
  4052aa:	f01e 0f01 	tst.w	lr, #1
  4052ae:	f000 809b 	beq.w	4053e8 <_realloc_r+0x190>
  4052b2:	4631      	mov	r1, r6
  4052b4:	4640      	mov	r0, r8
  4052b6:	f7fd fd89 	bl	402dcc <_malloc_r>
  4052ba:	4606      	mov	r6, r0
  4052bc:	2800      	cmp	r0, #0
  4052be:	d03a      	beq.n	405336 <_realloc_r+0xde>
  4052c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4052c4:	f023 0301 	bic.w	r3, r3, #1
  4052c8:	444b      	add	r3, r9
  4052ca:	f1a0 0208 	sub.w	r2, r0, #8
  4052ce:	429a      	cmp	r2, r3
  4052d0:	f000 8121 	beq.w	405516 <_realloc_r+0x2be>
  4052d4:	1f22      	subs	r2, r4, #4
  4052d6:	2a24      	cmp	r2, #36	; 0x24
  4052d8:	f200 8107 	bhi.w	4054ea <_realloc_r+0x292>
  4052dc:	2a13      	cmp	r2, #19
  4052de:	f200 80db 	bhi.w	405498 <_realloc_r+0x240>
  4052e2:	4603      	mov	r3, r0
  4052e4:	462a      	mov	r2, r5
  4052e6:	6811      	ldr	r1, [r2, #0]
  4052e8:	6019      	str	r1, [r3, #0]
  4052ea:	6851      	ldr	r1, [r2, #4]
  4052ec:	6059      	str	r1, [r3, #4]
  4052ee:	6892      	ldr	r2, [r2, #8]
  4052f0:	609a      	str	r2, [r3, #8]
  4052f2:	4629      	mov	r1, r5
  4052f4:	4640      	mov	r0, r8
  4052f6:	f7ff fbcd 	bl	404a94 <_free_r>
  4052fa:	e01c      	b.n	405336 <_realloc_r+0xde>
  4052fc:	f027 0707 	bic.w	r7, r7, #7
  405300:	2f00      	cmp	r7, #0
  405302:	463a      	mov	r2, r7
  405304:	dabf      	bge.n	405286 <_realloc_r+0x2e>
  405306:	2600      	movs	r6, #0
  405308:	230c      	movs	r3, #12
  40530a:	4630      	mov	r0, r6
  40530c:	f8c8 3000 	str.w	r3, [r8]
  405310:	b003      	add	sp, #12
  405312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405316:	462e      	mov	r6, r5
  405318:	1be3      	subs	r3, r4, r7
  40531a:	2b0f      	cmp	r3, #15
  40531c:	d81e      	bhi.n	40535c <_realloc_r+0x104>
  40531e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405322:	f003 0301 	and.w	r3, r3, #1
  405326:	4323      	orrs	r3, r4
  405328:	444c      	add	r4, r9
  40532a:	f8c9 3004 	str.w	r3, [r9, #4]
  40532e:	6863      	ldr	r3, [r4, #4]
  405330:	f043 0301 	orr.w	r3, r3, #1
  405334:	6063      	str	r3, [r4, #4]
  405336:	4640      	mov	r0, r8
  405338:	f7fe f8e6 	bl	403508 <__malloc_unlock>
  40533c:	4630      	mov	r0, r6
  40533e:	b003      	add	sp, #12
  405340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405344:	f023 0303 	bic.w	r3, r3, #3
  405348:	18e1      	adds	r1, r4, r3
  40534a:	4291      	cmp	r1, r2
  40534c:	db1f      	blt.n	40538e <_realloc_r+0x136>
  40534e:	68c3      	ldr	r3, [r0, #12]
  405350:	6882      	ldr	r2, [r0, #8]
  405352:	462e      	mov	r6, r5
  405354:	60d3      	str	r3, [r2, #12]
  405356:	460c      	mov	r4, r1
  405358:	609a      	str	r2, [r3, #8]
  40535a:	e7dd      	b.n	405318 <_realloc_r+0xc0>
  40535c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405360:	eb09 0107 	add.w	r1, r9, r7
  405364:	f002 0201 	and.w	r2, r2, #1
  405368:	444c      	add	r4, r9
  40536a:	f043 0301 	orr.w	r3, r3, #1
  40536e:	4317      	orrs	r7, r2
  405370:	f8c9 7004 	str.w	r7, [r9, #4]
  405374:	604b      	str	r3, [r1, #4]
  405376:	6863      	ldr	r3, [r4, #4]
  405378:	f043 0301 	orr.w	r3, r3, #1
  40537c:	3108      	adds	r1, #8
  40537e:	6063      	str	r3, [r4, #4]
  405380:	4640      	mov	r0, r8
  405382:	f7ff fb87 	bl	404a94 <_free_r>
  405386:	e7d6      	b.n	405336 <_realloc_r+0xde>
  405388:	4611      	mov	r1, r2
  40538a:	f7fd bd1f 	b.w	402dcc <_malloc_r>
  40538e:	f01e 0f01 	tst.w	lr, #1
  405392:	d18e      	bne.n	4052b2 <_realloc_r+0x5a>
  405394:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405398:	eba9 0a01 	sub.w	sl, r9, r1
  40539c:	f8da 1004 	ldr.w	r1, [sl, #4]
  4053a0:	f021 0103 	bic.w	r1, r1, #3
  4053a4:	440b      	add	r3, r1
  4053a6:	4423      	add	r3, r4
  4053a8:	4293      	cmp	r3, r2
  4053aa:	db25      	blt.n	4053f8 <_realloc_r+0x1a0>
  4053ac:	68c2      	ldr	r2, [r0, #12]
  4053ae:	6881      	ldr	r1, [r0, #8]
  4053b0:	4656      	mov	r6, sl
  4053b2:	60ca      	str	r2, [r1, #12]
  4053b4:	6091      	str	r1, [r2, #8]
  4053b6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4053ba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4053be:	1f22      	subs	r2, r4, #4
  4053c0:	2a24      	cmp	r2, #36	; 0x24
  4053c2:	60c1      	str	r1, [r0, #12]
  4053c4:	6088      	str	r0, [r1, #8]
  4053c6:	f200 8094 	bhi.w	4054f2 <_realloc_r+0x29a>
  4053ca:	2a13      	cmp	r2, #19
  4053cc:	d96f      	bls.n	4054ae <_realloc_r+0x256>
  4053ce:	6829      	ldr	r1, [r5, #0]
  4053d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4053d4:	6869      	ldr	r1, [r5, #4]
  4053d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4053da:	2a1b      	cmp	r2, #27
  4053dc:	f200 80a2 	bhi.w	405524 <_realloc_r+0x2cc>
  4053e0:	3508      	adds	r5, #8
  4053e2:	f10a 0210 	add.w	r2, sl, #16
  4053e6:	e063      	b.n	4054b0 <_realloc_r+0x258>
  4053e8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4053ec:	eba9 0a03 	sub.w	sl, r9, r3
  4053f0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4053f4:	f021 0103 	bic.w	r1, r1, #3
  4053f8:	1863      	adds	r3, r4, r1
  4053fa:	4293      	cmp	r3, r2
  4053fc:	f6ff af59 	blt.w	4052b2 <_realloc_r+0x5a>
  405400:	4656      	mov	r6, sl
  405402:	e7d8      	b.n	4053b6 <_realloc_r+0x15e>
  405404:	6841      	ldr	r1, [r0, #4]
  405406:	f021 0b03 	bic.w	fp, r1, #3
  40540a:	44a3      	add	fp, r4
  40540c:	f107 0010 	add.w	r0, r7, #16
  405410:	4583      	cmp	fp, r0
  405412:	da56      	bge.n	4054c2 <_realloc_r+0x26a>
  405414:	f01e 0f01 	tst.w	lr, #1
  405418:	f47f af4b 	bne.w	4052b2 <_realloc_r+0x5a>
  40541c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405420:	eba9 0a01 	sub.w	sl, r9, r1
  405424:	f8da 1004 	ldr.w	r1, [sl, #4]
  405428:	f021 0103 	bic.w	r1, r1, #3
  40542c:	448b      	add	fp, r1
  40542e:	4558      	cmp	r0, fp
  405430:	dce2      	bgt.n	4053f8 <_realloc_r+0x1a0>
  405432:	4656      	mov	r6, sl
  405434:	f8da 100c 	ldr.w	r1, [sl, #12]
  405438:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40543c:	1f22      	subs	r2, r4, #4
  40543e:	2a24      	cmp	r2, #36	; 0x24
  405440:	60c1      	str	r1, [r0, #12]
  405442:	6088      	str	r0, [r1, #8]
  405444:	f200 808f 	bhi.w	405566 <_realloc_r+0x30e>
  405448:	2a13      	cmp	r2, #19
  40544a:	f240 808a 	bls.w	405562 <_realloc_r+0x30a>
  40544e:	6829      	ldr	r1, [r5, #0]
  405450:	f8ca 1008 	str.w	r1, [sl, #8]
  405454:	6869      	ldr	r1, [r5, #4]
  405456:	f8ca 100c 	str.w	r1, [sl, #12]
  40545a:	2a1b      	cmp	r2, #27
  40545c:	f200 808a 	bhi.w	405574 <_realloc_r+0x31c>
  405460:	3508      	adds	r5, #8
  405462:	f10a 0210 	add.w	r2, sl, #16
  405466:	6829      	ldr	r1, [r5, #0]
  405468:	6011      	str	r1, [r2, #0]
  40546a:	6869      	ldr	r1, [r5, #4]
  40546c:	6051      	str	r1, [r2, #4]
  40546e:	68a9      	ldr	r1, [r5, #8]
  405470:	6091      	str	r1, [r2, #8]
  405472:	eb0a 0107 	add.w	r1, sl, r7
  405476:	ebab 0207 	sub.w	r2, fp, r7
  40547a:	f042 0201 	orr.w	r2, r2, #1
  40547e:	6099      	str	r1, [r3, #8]
  405480:	604a      	str	r2, [r1, #4]
  405482:	f8da 3004 	ldr.w	r3, [sl, #4]
  405486:	f003 0301 	and.w	r3, r3, #1
  40548a:	431f      	orrs	r7, r3
  40548c:	4640      	mov	r0, r8
  40548e:	f8ca 7004 	str.w	r7, [sl, #4]
  405492:	f7fe f839 	bl	403508 <__malloc_unlock>
  405496:	e751      	b.n	40533c <_realloc_r+0xe4>
  405498:	682b      	ldr	r3, [r5, #0]
  40549a:	6003      	str	r3, [r0, #0]
  40549c:	686b      	ldr	r3, [r5, #4]
  40549e:	6043      	str	r3, [r0, #4]
  4054a0:	2a1b      	cmp	r2, #27
  4054a2:	d82d      	bhi.n	405500 <_realloc_r+0x2a8>
  4054a4:	f100 0308 	add.w	r3, r0, #8
  4054a8:	f105 0208 	add.w	r2, r5, #8
  4054ac:	e71b      	b.n	4052e6 <_realloc_r+0x8e>
  4054ae:	4632      	mov	r2, r6
  4054b0:	6829      	ldr	r1, [r5, #0]
  4054b2:	6011      	str	r1, [r2, #0]
  4054b4:	6869      	ldr	r1, [r5, #4]
  4054b6:	6051      	str	r1, [r2, #4]
  4054b8:	68a9      	ldr	r1, [r5, #8]
  4054ba:	6091      	str	r1, [r2, #8]
  4054bc:	461c      	mov	r4, r3
  4054be:	46d1      	mov	r9, sl
  4054c0:	e72a      	b.n	405318 <_realloc_r+0xc0>
  4054c2:	eb09 0107 	add.w	r1, r9, r7
  4054c6:	ebab 0b07 	sub.w	fp, fp, r7
  4054ca:	f04b 0201 	orr.w	r2, fp, #1
  4054ce:	6099      	str	r1, [r3, #8]
  4054d0:	604a      	str	r2, [r1, #4]
  4054d2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4054d6:	f003 0301 	and.w	r3, r3, #1
  4054da:	431f      	orrs	r7, r3
  4054dc:	4640      	mov	r0, r8
  4054de:	f845 7c04 	str.w	r7, [r5, #-4]
  4054e2:	f7fe f811 	bl	403508 <__malloc_unlock>
  4054e6:	462e      	mov	r6, r5
  4054e8:	e728      	b.n	40533c <_realloc_r+0xe4>
  4054ea:	4629      	mov	r1, r5
  4054ec:	f7ff fe50 	bl	405190 <memmove>
  4054f0:	e6ff      	b.n	4052f2 <_realloc_r+0x9a>
  4054f2:	4629      	mov	r1, r5
  4054f4:	4630      	mov	r0, r6
  4054f6:	461c      	mov	r4, r3
  4054f8:	46d1      	mov	r9, sl
  4054fa:	f7ff fe49 	bl	405190 <memmove>
  4054fe:	e70b      	b.n	405318 <_realloc_r+0xc0>
  405500:	68ab      	ldr	r3, [r5, #8]
  405502:	6083      	str	r3, [r0, #8]
  405504:	68eb      	ldr	r3, [r5, #12]
  405506:	60c3      	str	r3, [r0, #12]
  405508:	2a24      	cmp	r2, #36	; 0x24
  40550a:	d017      	beq.n	40553c <_realloc_r+0x2e4>
  40550c:	f100 0310 	add.w	r3, r0, #16
  405510:	f105 0210 	add.w	r2, r5, #16
  405514:	e6e7      	b.n	4052e6 <_realloc_r+0x8e>
  405516:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40551a:	f023 0303 	bic.w	r3, r3, #3
  40551e:	441c      	add	r4, r3
  405520:	462e      	mov	r6, r5
  405522:	e6f9      	b.n	405318 <_realloc_r+0xc0>
  405524:	68a9      	ldr	r1, [r5, #8]
  405526:	f8ca 1010 	str.w	r1, [sl, #16]
  40552a:	68e9      	ldr	r1, [r5, #12]
  40552c:	f8ca 1014 	str.w	r1, [sl, #20]
  405530:	2a24      	cmp	r2, #36	; 0x24
  405532:	d00c      	beq.n	40554e <_realloc_r+0x2f6>
  405534:	3510      	adds	r5, #16
  405536:	f10a 0218 	add.w	r2, sl, #24
  40553a:	e7b9      	b.n	4054b0 <_realloc_r+0x258>
  40553c:	692b      	ldr	r3, [r5, #16]
  40553e:	6103      	str	r3, [r0, #16]
  405540:	696b      	ldr	r3, [r5, #20]
  405542:	6143      	str	r3, [r0, #20]
  405544:	f105 0218 	add.w	r2, r5, #24
  405548:	f100 0318 	add.w	r3, r0, #24
  40554c:	e6cb      	b.n	4052e6 <_realloc_r+0x8e>
  40554e:	692a      	ldr	r2, [r5, #16]
  405550:	f8ca 2018 	str.w	r2, [sl, #24]
  405554:	696a      	ldr	r2, [r5, #20]
  405556:	f8ca 201c 	str.w	r2, [sl, #28]
  40555a:	3518      	adds	r5, #24
  40555c:	f10a 0220 	add.w	r2, sl, #32
  405560:	e7a6      	b.n	4054b0 <_realloc_r+0x258>
  405562:	4632      	mov	r2, r6
  405564:	e77f      	b.n	405466 <_realloc_r+0x20e>
  405566:	4629      	mov	r1, r5
  405568:	4630      	mov	r0, r6
  40556a:	9301      	str	r3, [sp, #4]
  40556c:	f7ff fe10 	bl	405190 <memmove>
  405570:	9b01      	ldr	r3, [sp, #4]
  405572:	e77e      	b.n	405472 <_realloc_r+0x21a>
  405574:	68a9      	ldr	r1, [r5, #8]
  405576:	f8ca 1010 	str.w	r1, [sl, #16]
  40557a:	68e9      	ldr	r1, [r5, #12]
  40557c:	f8ca 1014 	str.w	r1, [sl, #20]
  405580:	2a24      	cmp	r2, #36	; 0x24
  405582:	d003      	beq.n	40558c <_realloc_r+0x334>
  405584:	3510      	adds	r5, #16
  405586:	f10a 0218 	add.w	r2, sl, #24
  40558a:	e76c      	b.n	405466 <_realloc_r+0x20e>
  40558c:	692a      	ldr	r2, [r5, #16]
  40558e:	f8ca 2018 	str.w	r2, [sl, #24]
  405592:	696a      	ldr	r2, [r5, #20]
  405594:	f8ca 201c 	str.w	r2, [sl, #28]
  405598:	3518      	adds	r5, #24
  40559a:	f10a 0220 	add.w	r2, sl, #32
  40559e:	e762      	b.n	405466 <_realloc_r+0x20e>
  4055a0:	20400440 	.word	0x20400440

004055a4 <__sread>:
  4055a4:	b510      	push	{r4, lr}
  4055a6:	460c      	mov	r4, r1
  4055a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4055ac:	f000 f9f6 	bl	40599c <_read_r>
  4055b0:	2800      	cmp	r0, #0
  4055b2:	db03      	blt.n	4055bc <__sread+0x18>
  4055b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4055b6:	4403      	add	r3, r0
  4055b8:	6523      	str	r3, [r4, #80]	; 0x50
  4055ba:	bd10      	pop	{r4, pc}
  4055bc:	89a3      	ldrh	r3, [r4, #12]
  4055be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4055c2:	81a3      	strh	r3, [r4, #12]
  4055c4:	bd10      	pop	{r4, pc}
  4055c6:	bf00      	nop

004055c8 <__swrite>:
  4055c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055cc:	4616      	mov	r6, r2
  4055ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4055d2:	461f      	mov	r7, r3
  4055d4:	05d3      	lsls	r3, r2, #23
  4055d6:	460c      	mov	r4, r1
  4055d8:	4605      	mov	r5, r0
  4055da:	d507      	bpl.n	4055ec <__swrite+0x24>
  4055dc:	2200      	movs	r2, #0
  4055de:	2302      	movs	r3, #2
  4055e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4055e4:	f000 f9c4 	bl	405970 <_lseek_r>
  4055e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4055ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4055f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4055f4:	81a2      	strh	r2, [r4, #12]
  4055f6:	463b      	mov	r3, r7
  4055f8:	4632      	mov	r2, r6
  4055fa:	4628      	mov	r0, r5
  4055fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405600:	f000 b8a4 	b.w	40574c <_write_r>

00405604 <__sseek>:
  405604:	b510      	push	{r4, lr}
  405606:	460c      	mov	r4, r1
  405608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40560c:	f000 f9b0 	bl	405970 <_lseek_r>
  405610:	89a3      	ldrh	r3, [r4, #12]
  405612:	1c42      	adds	r2, r0, #1
  405614:	bf0e      	itee	eq
  405616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40561a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40561e:	6520      	strne	r0, [r4, #80]	; 0x50
  405620:	81a3      	strh	r3, [r4, #12]
  405622:	bd10      	pop	{r4, pc}

00405624 <__sclose>:
  405624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405628:	f000 b908 	b.w	40583c <_close_r>

0040562c <__swbuf_r>:
  40562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40562e:	460d      	mov	r5, r1
  405630:	4614      	mov	r4, r2
  405632:	4606      	mov	r6, r0
  405634:	b110      	cbz	r0, 40563c <__swbuf_r+0x10>
  405636:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405638:	2b00      	cmp	r3, #0
  40563a:	d04b      	beq.n	4056d4 <__swbuf_r+0xa8>
  40563c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405640:	69a3      	ldr	r3, [r4, #24]
  405642:	60a3      	str	r3, [r4, #8]
  405644:	b291      	uxth	r1, r2
  405646:	0708      	lsls	r0, r1, #28
  405648:	d539      	bpl.n	4056be <__swbuf_r+0x92>
  40564a:	6923      	ldr	r3, [r4, #16]
  40564c:	2b00      	cmp	r3, #0
  40564e:	d036      	beq.n	4056be <__swbuf_r+0x92>
  405650:	b2ed      	uxtb	r5, r5
  405652:	0489      	lsls	r1, r1, #18
  405654:	462f      	mov	r7, r5
  405656:	d515      	bpl.n	405684 <__swbuf_r+0x58>
  405658:	6822      	ldr	r2, [r4, #0]
  40565a:	6961      	ldr	r1, [r4, #20]
  40565c:	1ad3      	subs	r3, r2, r3
  40565e:	428b      	cmp	r3, r1
  405660:	da1c      	bge.n	40569c <__swbuf_r+0x70>
  405662:	3301      	adds	r3, #1
  405664:	68a1      	ldr	r1, [r4, #8]
  405666:	1c50      	adds	r0, r2, #1
  405668:	3901      	subs	r1, #1
  40566a:	60a1      	str	r1, [r4, #8]
  40566c:	6020      	str	r0, [r4, #0]
  40566e:	7015      	strb	r5, [r2, #0]
  405670:	6962      	ldr	r2, [r4, #20]
  405672:	429a      	cmp	r2, r3
  405674:	d01a      	beq.n	4056ac <__swbuf_r+0x80>
  405676:	89a3      	ldrh	r3, [r4, #12]
  405678:	07db      	lsls	r3, r3, #31
  40567a:	d501      	bpl.n	405680 <__swbuf_r+0x54>
  40567c:	2d0a      	cmp	r5, #10
  40567e:	d015      	beq.n	4056ac <__swbuf_r+0x80>
  405680:	4638      	mov	r0, r7
  405682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405684:	6e61      	ldr	r1, [r4, #100]	; 0x64
  405686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40568a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40568e:	81a2      	strh	r2, [r4, #12]
  405690:	6822      	ldr	r2, [r4, #0]
  405692:	6661      	str	r1, [r4, #100]	; 0x64
  405694:	6961      	ldr	r1, [r4, #20]
  405696:	1ad3      	subs	r3, r2, r3
  405698:	428b      	cmp	r3, r1
  40569a:	dbe2      	blt.n	405662 <__swbuf_r+0x36>
  40569c:	4621      	mov	r1, r4
  40569e:	4630      	mov	r0, r6
  4056a0:	f7ff f87a 	bl	404798 <_fflush_r>
  4056a4:	b940      	cbnz	r0, 4056b8 <__swbuf_r+0x8c>
  4056a6:	6822      	ldr	r2, [r4, #0]
  4056a8:	2301      	movs	r3, #1
  4056aa:	e7db      	b.n	405664 <__swbuf_r+0x38>
  4056ac:	4621      	mov	r1, r4
  4056ae:	4630      	mov	r0, r6
  4056b0:	f7ff f872 	bl	404798 <_fflush_r>
  4056b4:	2800      	cmp	r0, #0
  4056b6:	d0e3      	beq.n	405680 <__swbuf_r+0x54>
  4056b8:	f04f 37ff 	mov.w	r7, #4294967295
  4056bc:	e7e0      	b.n	405680 <__swbuf_r+0x54>
  4056be:	4621      	mov	r1, r4
  4056c0:	4630      	mov	r0, r6
  4056c2:	f7fe ff55 	bl	404570 <__swsetup_r>
  4056c6:	2800      	cmp	r0, #0
  4056c8:	d1f6      	bne.n	4056b8 <__swbuf_r+0x8c>
  4056ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4056ce:	6923      	ldr	r3, [r4, #16]
  4056d0:	b291      	uxth	r1, r2
  4056d2:	e7bd      	b.n	405650 <__swbuf_r+0x24>
  4056d4:	f7ff f8b8 	bl	404848 <__sinit>
  4056d8:	e7b0      	b.n	40563c <__swbuf_r+0x10>
  4056da:	bf00      	nop

004056dc <_wcrtomb_r>:
  4056dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4056de:	4606      	mov	r6, r0
  4056e0:	b085      	sub	sp, #20
  4056e2:	461f      	mov	r7, r3
  4056e4:	b189      	cbz	r1, 40570a <_wcrtomb_r+0x2e>
  4056e6:	4c10      	ldr	r4, [pc, #64]	; (405728 <_wcrtomb_r+0x4c>)
  4056e8:	4d10      	ldr	r5, [pc, #64]	; (40572c <_wcrtomb_r+0x50>)
  4056ea:	6824      	ldr	r4, [r4, #0]
  4056ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4056ee:	2c00      	cmp	r4, #0
  4056f0:	bf08      	it	eq
  4056f2:	462c      	moveq	r4, r5
  4056f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4056f8:	47a0      	blx	r4
  4056fa:	1c43      	adds	r3, r0, #1
  4056fc:	d103      	bne.n	405706 <_wcrtomb_r+0x2a>
  4056fe:	2200      	movs	r2, #0
  405700:	238a      	movs	r3, #138	; 0x8a
  405702:	603a      	str	r2, [r7, #0]
  405704:	6033      	str	r3, [r6, #0]
  405706:	b005      	add	sp, #20
  405708:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40570a:	460c      	mov	r4, r1
  40570c:	4906      	ldr	r1, [pc, #24]	; (405728 <_wcrtomb_r+0x4c>)
  40570e:	4a07      	ldr	r2, [pc, #28]	; (40572c <_wcrtomb_r+0x50>)
  405710:	6809      	ldr	r1, [r1, #0]
  405712:	6b49      	ldr	r1, [r1, #52]	; 0x34
  405714:	2900      	cmp	r1, #0
  405716:	bf08      	it	eq
  405718:	4611      	moveq	r1, r2
  40571a:	4622      	mov	r2, r4
  40571c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  405720:	a901      	add	r1, sp, #4
  405722:	47a0      	blx	r4
  405724:	e7e9      	b.n	4056fa <_wcrtomb_r+0x1e>
  405726:	bf00      	nop
  405728:	20400014 	.word	0x20400014
  40572c:	20400854 	.word	0x20400854

00405730 <__ascii_wctomb>:
  405730:	b121      	cbz	r1, 40573c <__ascii_wctomb+0xc>
  405732:	2aff      	cmp	r2, #255	; 0xff
  405734:	d804      	bhi.n	405740 <__ascii_wctomb+0x10>
  405736:	700a      	strb	r2, [r1, #0]
  405738:	2001      	movs	r0, #1
  40573a:	4770      	bx	lr
  40573c:	4608      	mov	r0, r1
  40573e:	4770      	bx	lr
  405740:	238a      	movs	r3, #138	; 0x8a
  405742:	6003      	str	r3, [r0, #0]
  405744:	f04f 30ff 	mov.w	r0, #4294967295
  405748:	4770      	bx	lr
  40574a:	bf00      	nop

0040574c <_write_r>:
  40574c:	b570      	push	{r4, r5, r6, lr}
  40574e:	460d      	mov	r5, r1
  405750:	4c08      	ldr	r4, [pc, #32]	; (405774 <_write_r+0x28>)
  405752:	4611      	mov	r1, r2
  405754:	4606      	mov	r6, r0
  405756:	461a      	mov	r2, r3
  405758:	4628      	mov	r0, r5
  40575a:	2300      	movs	r3, #0
  40575c:	6023      	str	r3, [r4, #0]
  40575e:	f7fa fd8f 	bl	400280 <_write>
  405762:	1c43      	adds	r3, r0, #1
  405764:	d000      	beq.n	405768 <_write_r+0x1c>
  405766:	bd70      	pop	{r4, r5, r6, pc}
  405768:	6823      	ldr	r3, [r4, #0]
  40576a:	2b00      	cmp	r3, #0
  40576c:	d0fb      	beq.n	405766 <_write_r+0x1a>
  40576e:	6033      	str	r3, [r6, #0]
  405770:	bd70      	pop	{r4, r5, r6, pc}
  405772:	bf00      	nop
  405774:	20400c40 	.word	0x20400c40

00405778 <__register_exitproc>:
  405778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40577c:	4d2c      	ldr	r5, [pc, #176]	; (405830 <__register_exitproc+0xb8>)
  40577e:	4606      	mov	r6, r0
  405780:	6828      	ldr	r0, [r5, #0]
  405782:	4698      	mov	r8, r3
  405784:	460f      	mov	r7, r1
  405786:	4691      	mov	r9, r2
  405788:	f7ff fc1e 	bl	404fc8 <__retarget_lock_acquire_recursive>
  40578c:	4b29      	ldr	r3, [pc, #164]	; (405834 <__register_exitproc+0xbc>)
  40578e:	681c      	ldr	r4, [r3, #0]
  405790:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405794:	2b00      	cmp	r3, #0
  405796:	d03e      	beq.n	405816 <__register_exitproc+0x9e>
  405798:	685a      	ldr	r2, [r3, #4]
  40579a:	2a1f      	cmp	r2, #31
  40579c:	dc1c      	bgt.n	4057d8 <__register_exitproc+0x60>
  40579e:	f102 0e01 	add.w	lr, r2, #1
  4057a2:	b176      	cbz	r6, 4057c2 <__register_exitproc+0x4a>
  4057a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4057a8:	2401      	movs	r4, #1
  4057aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4057ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4057b2:	4094      	lsls	r4, r2
  4057b4:	4320      	orrs	r0, r4
  4057b6:	2e02      	cmp	r6, #2
  4057b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4057bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4057c0:	d023      	beq.n	40580a <__register_exitproc+0x92>
  4057c2:	3202      	adds	r2, #2
  4057c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4057c8:	6828      	ldr	r0, [r5, #0]
  4057ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4057ce:	f7ff fbfd 	bl	404fcc <__retarget_lock_release_recursive>
  4057d2:	2000      	movs	r0, #0
  4057d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4057d8:	4b17      	ldr	r3, [pc, #92]	; (405838 <__register_exitproc+0xc0>)
  4057da:	b30b      	cbz	r3, 405820 <__register_exitproc+0xa8>
  4057dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4057e0:	f7fd fae4 	bl	402dac <malloc>
  4057e4:	4603      	mov	r3, r0
  4057e6:	b1d8      	cbz	r0, 405820 <__register_exitproc+0xa8>
  4057e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4057ec:	6002      	str	r2, [r0, #0]
  4057ee:	2100      	movs	r1, #0
  4057f0:	6041      	str	r1, [r0, #4]
  4057f2:	460a      	mov	r2, r1
  4057f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4057f8:	f04f 0e01 	mov.w	lr, #1
  4057fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405800:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405804:	2e00      	cmp	r6, #0
  405806:	d0dc      	beq.n	4057c2 <__register_exitproc+0x4a>
  405808:	e7cc      	b.n	4057a4 <__register_exitproc+0x2c>
  40580a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40580e:	430c      	orrs	r4, r1
  405810:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405814:	e7d5      	b.n	4057c2 <__register_exitproc+0x4a>
  405816:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40581a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40581e:	e7bb      	b.n	405798 <__register_exitproc+0x20>
  405820:	6828      	ldr	r0, [r5, #0]
  405822:	f7ff fbd3 	bl	404fcc <__retarget_lock_release_recursive>
  405826:	f04f 30ff 	mov.w	r0, #4294967295
  40582a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40582e:	bf00      	nop
  405830:	20400850 	.word	0x20400850
  405834:	00405dc0 	.word	0x00405dc0
  405838:	00402dad 	.word	0x00402dad

0040583c <_close_r>:
  40583c:	b538      	push	{r3, r4, r5, lr}
  40583e:	4c07      	ldr	r4, [pc, #28]	; (40585c <_close_r+0x20>)
  405840:	2300      	movs	r3, #0
  405842:	4605      	mov	r5, r0
  405844:	4608      	mov	r0, r1
  405846:	6023      	str	r3, [r4, #0]
  405848:	f7fb fa74 	bl	400d34 <_close>
  40584c:	1c43      	adds	r3, r0, #1
  40584e:	d000      	beq.n	405852 <_close_r+0x16>
  405850:	bd38      	pop	{r3, r4, r5, pc}
  405852:	6823      	ldr	r3, [r4, #0]
  405854:	2b00      	cmp	r3, #0
  405856:	d0fb      	beq.n	405850 <_close_r+0x14>
  405858:	602b      	str	r3, [r5, #0]
  40585a:	bd38      	pop	{r3, r4, r5, pc}
  40585c:	20400c40 	.word	0x20400c40

00405860 <_fclose_r>:
  405860:	b570      	push	{r4, r5, r6, lr}
  405862:	b159      	cbz	r1, 40587c <_fclose_r+0x1c>
  405864:	4605      	mov	r5, r0
  405866:	460c      	mov	r4, r1
  405868:	b110      	cbz	r0, 405870 <_fclose_r+0x10>
  40586a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40586c:	2b00      	cmp	r3, #0
  40586e:	d03c      	beq.n	4058ea <_fclose_r+0x8a>
  405870:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405872:	07d8      	lsls	r0, r3, #31
  405874:	d505      	bpl.n	405882 <_fclose_r+0x22>
  405876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40587a:	b92b      	cbnz	r3, 405888 <_fclose_r+0x28>
  40587c:	2600      	movs	r6, #0
  40587e:	4630      	mov	r0, r6
  405880:	bd70      	pop	{r4, r5, r6, pc}
  405882:	89a3      	ldrh	r3, [r4, #12]
  405884:	0599      	lsls	r1, r3, #22
  405886:	d53c      	bpl.n	405902 <_fclose_r+0xa2>
  405888:	4621      	mov	r1, r4
  40588a:	4628      	mov	r0, r5
  40588c:	f7fe fee4 	bl	404658 <__sflush_r>
  405890:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  405892:	4606      	mov	r6, r0
  405894:	b133      	cbz	r3, 4058a4 <_fclose_r+0x44>
  405896:	69e1      	ldr	r1, [r4, #28]
  405898:	4628      	mov	r0, r5
  40589a:	4798      	blx	r3
  40589c:	2800      	cmp	r0, #0
  40589e:	bfb8      	it	lt
  4058a0:	f04f 36ff 	movlt.w	r6, #4294967295
  4058a4:	89a3      	ldrh	r3, [r4, #12]
  4058a6:	061a      	lsls	r2, r3, #24
  4058a8:	d422      	bmi.n	4058f0 <_fclose_r+0x90>
  4058aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4058ac:	b141      	cbz	r1, 4058c0 <_fclose_r+0x60>
  4058ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4058b2:	4299      	cmp	r1, r3
  4058b4:	d002      	beq.n	4058bc <_fclose_r+0x5c>
  4058b6:	4628      	mov	r0, r5
  4058b8:	f7ff f8ec 	bl	404a94 <_free_r>
  4058bc:	2300      	movs	r3, #0
  4058be:	6323      	str	r3, [r4, #48]	; 0x30
  4058c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4058c2:	b121      	cbz	r1, 4058ce <_fclose_r+0x6e>
  4058c4:	4628      	mov	r0, r5
  4058c6:	f7ff f8e5 	bl	404a94 <_free_r>
  4058ca:	2300      	movs	r3, #0
  4058cc:	6463      	str	r3, [r4, #68]	; 0x44
  4058ce:	f7fe ffe7 	bl	4048a0 <__sfp_lock_acquire>
  4058d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4058d4:	2200      	movs	r2, #0
  4058d6:	07db      	lsls	r3, r3, #31
  4058d8:	81a2      	strh	r2, [r4, #12]
  4058da:	d50e      	bpl.n	4058fa <_fclose_r+0x9a>
  4058dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4058de:	f7ff fb71 	bl	404fc4 <__retarget_lock_close_recursive>
  4058e2:	f7fe ffe3 	bl	4048ac <__sfp_lock_release>
  4058e6:	4630      	mov	r0, r6
  4058e8:	bd70      	pop	{r4, r5, r6, pc}
  4058ea:	f7fe ffad 	bl	404848 <__sinit>
  4058ee:	e7bf      	b.n	405870 <_fclose_r+0x10>
  4058f0:	6921      	ldr	r1, [r4, #16]
  4058f2:	4628      	mov	r0, r5
  4058f4:	f7ff f8ce 	bl	404a94 <_free_r>
  4058f8:	e7d7      	b.n	4058aa <_fclose_r+0x4a>
  4058fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4058fc:	f7ff fb66 	bl	404fcc <__retarget_lock_release_recursive>
  405900:	e7ec      	b.n	4058dc <_fclose_r+0x7c>
  405902:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405904:	f7ff fb60 	bl	404fc8 <__retarget_lock_acquire_recursive>
  405908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40590c:	2b00      	cmp	r3, #0
  40590e:	d1bb      	bne.n	405888 <_fclose_r+0x28>
  405910:	6e66      	ldr	r6, [r4, #100]	; 0x64
  405912:	f016 0601 	ands.w	r6, r6, #1
  405916:	d1b1      	bne.n	40587c <_fclose_r+0x1c>
  405918:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40591a:	f7ff fb57 	bl	404fcc <__retarget_lock_release_recursive>
  40591e:	4630      	mov	r0, r6
  405920:	bd70      	pop	{r4, r5, r6, pc}
  405922:	bf00      	nop

00405924 <_fstat_r>:
  405924:	b538      	push	{r3, r4, r5, lr}
  405926:	460b      	mov	r3, r1
  405928:	4c07      	ldr	r4, [pc, #28]	; (405948 <_fstat_r+0x24>)
  40592a:	4605      	mov	r5, r0
  40592c:	4611      	mov	r1, r2
  40592e:	4618      	mov	r0, r3
  405930:	2300      	movs	r3, #0
  405932:	6023      	str	r3, [r4, #0]
  405934:	f7fb fa01 	bl	400d3a <_fstat>
  405938:	1c43      	adds	r3, r0, #1
  40593a:	d000      	beq.n	40593e <_fstat_r+0x1a>
  40593c:	bd38      	pop	{r3, r4, r5, pc}
  40593e:	6823      	ldr	r3, [r4, #0]
  405940:	2b00      	cmp	r3, #0
  405942:	d0fb      	beq.n	40593c <_fstat_r+0x18>
  405944:	602b      	str	r3, [r5, #0]
  405946:	bd38      	pop	{r3, r4, r5, pc}
  405948:	20400c40 	.word	0x20400c40

0040594c <_isatty_r>:
  40594c:	b538      	push	{r3, r4, r5, lr}
  40594e:	4c07      	ldr	r4, [pc, #28]	; (40596c <_isatty_r+0x20>)
  405950:	2300      	movs	r3, #0
  405952:	4605      	mov	r5, r0
  405954:	4608      	mov	r0, r1
  405956:	6023      	str	r3, [r4, #0]
  405958:	f7fb f9f4 	bl	400d44 <_isatty>
  40595c:	1c43      	adds	r3, r0, #1
  40595e:	d000      	beq.n	405962 <_isatty_r+0x16>
  405960:	bd38      	pop	{r3, r4, r5, pc}
  405962:	6823      	ldr	r3, [r4, #0]
  405964:	2b00      	cmp	r3, #0
  405966:	d0fb      	beq.n	405960 <_isatty_r+0x14>
  405968:	602b      	str	r3, [r5, #0]
  40596a:	bd38      	pop	{r3, r4, r5, pc}
  40596c:	20400c40 	.word	0x20400c40

00405970 <_lseek_r>:
  405970:	b570      	push	{r4, r5, r6, lr}
  405972:	460d      	mov	r5, r1
  405974:	4c08      	ldr	r4, [pc, #32]	; (405998 <_lseek_r+0x28>)
  405976:	4611      	mov	r1, r2
  405978:	4606      	mov	r6, r0
  40597a:	461a      	mov	r2, r3
  40597c:	4628      	mov	r0, r5
  40597e:	2300      	movs	r3, #0
  405980:	6023      	str	r3, [r4, #0]
  405982:	f7fb f9e1 	bl	400d48 <_lseek>
  405986:	1c43      	adds	r3, r0, #1
  405988:	d000      	beq.n	40598c <_lseek_r+0x1c>
  40598a:	bd70      	pop	{r4, r5, r6, pc}
  40598c:	6823      	ldr	r3, [r4, #0]
  40598e:	2b00      	cmp	r3, #0
  405990:	d0fb      	beq.n	40598a <_lseek_r+0x1a>
  405992:	6033      	str	r3, [r6, #0]
  405994:	bd70      	pop	{r4, r5, r6, pc}
  405996:	bf00      	nop
  405998:	20400c40 	.word	0x20400c40

0040599c <_read_r>:
  40599c:	b570      	push	{r4, r5, r6, lr}
  40599e:	460d      	mov	r5, r1
  4059a0:	4c08      	ldr	r4, [pc, #32]	; (4059c4 <_read_r+0x28>)
  4059a2:	4611      	mov	r1, r2
  4059a4:	4606      	mov	r6, r0
  4059a6:	461a      	mov	r2, r3
  4059a8:	4628      	mov	r0, r5
  4059aa:	2300      	movs	r3, #0
  4059ac:	6023      	str	r3, [r4, #0]
  4059ae:	f7fa fc49 	bl	400244 <_read>
  4059b2:	1c43      	adds	r3, r0, #1
  4059b4:	d000      	beq.n	4059b8 <_read_r+0x1c>
  4059b6:	bd70      	pop	{r4, r5, r6, pc}
  4059b8:	6823      	ldr	r3, [r4, #0]
  4059ba:	2b00      	cmp	r3, #0
  4059bc:	d0fb      	beq.n	4059b6 <_read_r+0x1a>
  4059be:	6033      	str	r3, [r6, #0]
  4059c0:	bd70      	pop	{r4, r5, r6, pc}
  4059c2:	bf00      	nop
  4059c4:	20400c40 	.word	0x20400c40

004059c8 <__aeabi_uldivmod>:
  4059c8:	b953      	cbnz	r3, 4059e0 <__aeabi_uldivmod+0x18>
  4059ca:	b94a      	cbnz	r2, 4059e0 <__aeabi_uldivmod+0x18>
  4059cc:	2900      	cmp	r1, #0
  4059ce:	bf08      	it	eq
  4059d0:	2800      	cmpeq	r0, #0
  4059d2:	bf1c      	itt	ne
  4059d4:	f04f 31ff 	movne.w	r1, #4294967295
  4059d8:	f04f 30ff 	movne.w	r0, #4294967295
  4059dc:	f000 b97a 	b.w	405cd4 <__aeabi_idiv0>
  4059e0:	f1ad 0c08 	sub.w	ip, sp, #8
  4059e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4059e8:	f000 f806 	bl	4059f8 <__udivmoddi4>
  4059ec:	f8dd e004 	ldr.w	lr, [sp, #4]
  4059f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4059f4:	b004      	add	sp, #16
  4059f6:	4770      	bx	lr

004059f8 <__udivmoddi4>:
  4059f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4059fc:	468c      	mov	ip, r1
  4059fe:	460d      	mov	r5, r1
  405a00:	4604      	mov	r4, r0
  405a02:	9e08      	ldr	r6, [sp, #32]
  405a04:	2b00      	cmp	r3, #0
  405a06:	d151      	bne.n	405aac <__udivmoddi4+0xb4>
  405a08:	428a      	cmp	r2, r1
  405a0a:	4617      	mov	r7, r2
  405a0c:	d96d      	bls.n	405aea <__udivmoddi4+0xf2>
  405a0e:	fab2 fe82 	clz	lr, r2
  405a12:	f1be 0f00 	cmp.w	lr, #0
  405a16:	d00b      	beq.n	405a30 <__udivmoddi4+0x38>
  405a18:	f1ce 0c20 	rsb	ip, lr, #32
  405a1c:	fa01 f50e 	lsl.w	r5, r1, lr
  405a20:	fa20 fc0c 	lsr.w	ip, r0, ip
  405a24:	fa02 f70e 	lsl.w	r7, r2, lr
  405a28:	ea4c 0c05 	orr.w	ip, ip, r5
  405a2c:	fa00 f40e 	lsl.w	r4, r0, lr
  405a30:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  405a34:	0c25      	lsrs	r5, r4, #16
  405a36:	fbbc f8fa 	udiv	r8, ip, sl
  405a3a:	fa1f f987 	uxth.w	r9, r7
  405a3e:	fb0a cc18 	mls	ip, sl, r8, ip
  405a42:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  405a46:	fb08 f309 	mul.w	r3, r8, r9
  405a4a:	42ab      	cmp	r3, r5
  405a4c:	d90a      	bls.n	405a64 <__udivmoddi4+0x6c>
  405a4e:	19ed      	adds	r5, r5, r7
  405a50:	f108 32ff 	add.w	r2, r8, #4294967295
  405a54:	f080 8123 	bcs.w	405c9e <__udivmoddi4+0x2a6>
  405a58:	42ab      	cmp	r3, r5
  405a5a:	f240 8120 	bls.w	405c9e <__udivmoddi4+0x2a6>
  405a5e:	f1a8 0802 	sub.w	r8, r8, #2
  405a62:	443d      	add	r5, r7
  405a64:	1aed      	subs	r5, r5, r3
  405a66:	b2a4      	uxth	r4, r4
  405a68:	fbb5 f0fa 	udiv	r0, r5, sl
  405a6c:	fb0a 5510 	mls	r5, sl, r0, r5
  405a70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  405a74:	fb00 f909 	mul.w	r9, r0, r9
  405a78:	45a1      	cmp	r9, r4
  405a7a:	d909      	bls.n	405a90 <__udivmoddi4+0x98>
  405a7c:	19e4      	adds	r4, r4, r7
  405a7e:	f100 33ff 	add.w	r3, r0, #4294967295
  405a82:	f080 810a 	bcs.w	405c9a <__udivmoddi4+0x2a2>
  405a86:	45a1      	cmp	r9, r4
  405a88:	f240 8107 	bls.w	405c9a <__udivmoddi4+0x2a2>
  405a8c:	3802      	subs	r0, #2
  405a8e:	443c      	add	r4, r7
  405a90:	eba4 0409 	sub.w	r4, r4, r9
  405a94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405a98:	2100      	movs	r1, #0
  405a9a:	2e00      	cmp	r6, #0
  405a9c:	d061      	beq.n	405b62 <__udivmoddi4+0x16a>
  405a9e:	fa24 f40e 	lsr.w	r4, r4, lr
  405aa2:	2300      	movs	r3, #0
  405aa4:	6034      	str	r4, [r6, #0]
  405aa6:	6073      	str	r3, [r6, #4]
  405aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405aac:	428b      	cmp	r3, r1
  405aae:	d907      	bls.n	405ac0 <__udivmoddi4+0xc8>
  405ab0:	2e00      	cmp	r6, #0
  405ab2:	d054      	beq.n	405b5e <__udivmoddi4+0x166>
  405ab4:	2100      	movs	r1, #0
  405ab6:	e886 0021 	stmia.w	r6, {r0, r5}
  405aba:	4608      	mov	r0, r1
  405abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405ac0:	fab3 f183 	clz	r1, r3
  405ac4:	2900      	cmp	r1, #0
  405ac6:	f040 808e 	bne.w	405be6 <__udivmoddi4+0x1ee>
  405aca:	42ab      	cmp	r3, r5
  405acc:	d302      	bcc.n	405ad4 <__udivmoddi4+0xdc>
  405ace:	4282      	cmp	r2, r0
  405ad0:	f200 80fa 	bhi.w	405cc8 <__udivmoddi4+0x2d0>
  405ad4:	1a84      	subs	r4, r0, r2
  405ad6:	eb65 0503 	sbc.w	r5, r5, r3
  405ada:	2001      	movs	r0, #1
  405adc:	46ac      	mov	ip, r5
  405ade:	2e00      	cmp	r6, #0
  405ae0:	d03f      	beq.n	405b62 <__udivmoddi4+0x16a>
  405ae2:	e886 1010 	stmia.w	r6, {r4, ip}
  405ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405aea:	b912      	cbnz	r2, 405af2 <__udivmoddi4+0xfa>
  405aec:	2701      	movs	r7, #1
  405aee:	fbb7 f7f2 	udiv	r7, r7, r2
  405af2:	fab7 fe87 	clz	lr, r7
  405af6:	f1be 0f00 	cmp.w	lr, #0
  405afa:	d134      	bne.n	405b66 <__udivmoddi4+0x16e>
  405afc:	1beb      	subs	r3, r5, r7
  405afe:	0c3a      	lsrs	r2, r7, #16
  405b00:	fa1f fc87 	uxth.w	ip, r7
  405b04:	2101      	movs	r1, #1
  405b06:	fbb3 f8f2 	udiv	r8, r3, r2
  405b0a:	0c25      	lsrs	r5, r4, #16
  405b0c:	fb02 3318 	mls	r3, r2, r8, r3
  405b10:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405b14:	fb0c f308 	mul.w	r3, ip, r8
  405b18:	42ab      	cmp	r3, r5
  405b1a:	d907      	bls.n	405b2c <__udivmoddi4+0x134>
  405b1c:	19ed      	adds	r5, r5, r7
  405b1e:	f108 30ff 	add.w	r0, r8, #4294967295
  405b22:	d202      	bcs.n	405b2a <__udivmoddi4+0x132>
  405b24:	42ab      	cmp	r3, r5
  405b26:	f200 80d1 	bhi.w	405ccc <__udivmoddi4+0x2d4>
  405b2a:	4680      	mov	r8, r0
  405b2c:	1aed      	subs	r5, r5, r3
  405b2e:	b2a3      	uxth	r3, r4
  405b30:	fbb5 f0f2 	udiv	r0, r5, r2
  405b34:	fb02 5510 	mls	r5, r2, r0, r5
  405b38:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  405b3c:	fb0c fc00 	mul.w	ip, ip, r0
  405b40:	45a4      	cmp	ip, r4
  405b42:	d907      	bls.n	405b54 <__udivmoddi4+0x15c>
  405b44:	19e4      	adds	r4, r4, r7
  405b46:	f100 33ff 	add.w	r3, r0, #4294967295
  405b4a:	d202      	bcs.n	405b52 <__udivmoddi4+0x15a>
  405b4c:	45a4      	cmp	ip, r4
  405b4e:	f200 80b8 	bhi.w	405cc2 <__udivmoddi4+0x2ca>
  405b52:	4618      	mov	r0, r3
  405b54:	eba4 040c 	sub.w	r4, r4, ip
  405b58:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  405b5c:	e79d      	b.n	405a9a <__udivmoddi4+0xa2>
  405b5e:	4631      	mov	r1, r6
  405b60:	4630      	mov	r0, r6
  405b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405b66:	f1ce 0420 	rsb	r4, lr, #32
  405b6a:	fa05 f30e 	lsl.w	r3, r5, lr
  405b6e:	fa07 f70e 	lsl.w	r7, r7, lr
  405b72:	fa20 f804 	lsr.w	r8, r0, r4
  405b76:	0c3a      	lsrs	r2, r7, #16
  405b78:	fa25 f404 	lsr.w	r4, r5, r4
  405b7c:	ea48 0803 	orr.w	r8, r8, r3
  405b80:	fbb4 f1f2 	udiv	r1, r4, r2
  405b84:	ea4f 4518 	mov.w	r5, r8, lsr #16
  405b88:	fb02 4411 	mls	r4, r2, r1, r4
  405b8c:	fa1f fc87 	uxth.w	ip, r7
  405b90:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  405b94:	fb01 f30c 	mul.w	r3, r1, ip
  405b98:	42ab      	cmp	r3, r5
  405b9a:	fa00 f40e 	lsl.w	r4, r0, lr
  405b9e:	d909      	bls.n	405bb4 <__udivmoddi4+0x1bc>
  405ba0:	19ed      	adds	r5, r5, r7
  405ba2:	f101 30ff 	add.w	r0, r1, #4294967295
  405ba6:	f080 808a 	bcs.w	405cbe <__udivmoddi4+0x2c6>
  405baa:	42ab      	cmp	r3, r5
  405bac:	f240 8087 	bls.w	405cbe <__udivmoddi4+0x2c6>
  405bb0:	3902      	subs	r1, #2
  405bb2:	443d      	add	r5, r7
  405bb4:	1aeb      	subs	r3, r5, r3
  405bb6:	fa1f f588 	uxth.w	r5, r8
  405bba:	fbb3 f0f2 	udiv	r0, r3, r2
  405bbe:	fb02 3310 	mls	r3, r2, r0, r3
  405bc2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  405bc6:	fb00 f30c 	mul.w	r3, r0, ip
  405bca:	42ab      	cmp	r3, r5
  405bcc:	d907      	bls.n	405bde <__udivmoddi4+0x1e6>
  405bce:	19ed      	adds	r5, r5, r7
  405bd0:	f100 38ff 	add.w	r8, r0, #4294967295
  405bd4:	d26f      	bcs.n	405cb6 <__udivmoddi4+0x2be>
  405bd6:	42ab      	cmp	r3, r5
  405bd8:	d96d      	bls.n	405cb6 <__udivmoddi4+0x2be>
  405bda:	3802      	subs	r0, #2
  405bdc:	443d      	add	r5, r7
  405bde:	1aeb      	subs	r3, r5, r3
  405be0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  405be4:	e78f      	b.n	405b06 <__udivmoddi4+0x10e>
  405be6:	f1c1 0720 	rsb	r7, r1, #32
  405bea:	fa22 f807 	lsr.w	r8, r2, r7
  405bee:	408b      	lsls	r3, r1
  405bf0:	fa05 f401 	lsl.w	r4, r5, r1
  405bf4:	ea48 0303 	orr.w	r3, r8, r3
  405bf8:	fa20 fe07 	lsr.w	lr, r0, r7
  405bfc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  405c00:	40fd      	lsrs	r5, r7
  405c02:	ea4e 0e04 	orr.w	lr, lr, r4
  405c06:	fbb5 f9fc 	udiv	r9, r5, ip
  405c0a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  405c0e:	fb0c 5519 	mls	r5, ip, r9, r5
  405c12:	fa1f f883 	uxth.w	r8, r3
  405c16:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  405c1a:	fb09 f408 	mul.w	r4, r9, r8
  405c1e:	42ac      	cmp	r4, r5
  405c20:	fa02 f201 	lsl.w	r2, r2, r1
  405c24:	fa00 fa01 	lsl.w	sl, r0, r1
  405c28:	d908      	bls.n	405c3c <__udivmoddi4+0x244>
  405c2a:	18ed      	adds	r5, r5, r3
  405c2c:	f109 30ff 	add.w	r0, r9, #4294967295
  405c30:	d243      	bcs.n	405cba <__udivmoddi4+0x2c2>
  405c32:	42ac      	cmp	r4, r5
  405c34:	d941      	bls.n	405cba <__udivmoddi4+0x2c2>
  405c36:	f1a9 0902 	sub.w	r9, r9, #2
  405c3a:	441d      	add	r5, r3
  405c3c:	1b2d      	subs	r5, r5, r4
  405c3e:	fa1f fe8e 	uxth.w	lr, lr
  405c42:	fbb5 f0fc 	udiv	r0, r5, ip
  405c46:	fb0c 5510 	mls	r5, ip, r0, r5
  405c4a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  405c4e:	fb00 f808 	mul.w	r8, r0, r8
  405c52:	45a0      	cmp	r8, r4
  405c54:	d907      	bls.n	405c66 <__udivmoddi4+0x26e>
  405c56:	18e4      	adds	r4, r4, r3
  405c58:	f100 35ff 	add.w	r5, r0, #4294967295
  405c5c:	d229      	bcs.n	405cb2 <__udivmoddi4+0x2ba>
  405c5e:	45a0      	cmp	r8, r4
  405c60:	d927      	bls.n	405cb2 <__udivmoddi4+0x2ba>
  405c62:	3802      	subs	r0, #2
  405c64:	441c      	add	r4, r3
  405c66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  405c6a:	eba4 0408 	sub.w	r4, r4, r8
  405c6e:	fba0 8902 	umull	r8, r9, r0, r2
  405c72:	454c      	cmp	r4, r9
  405c74:	46c6      	mov	lr, r8
  405c76:	464d      	mov	r5, r9
  405c78:	d315      	bcc.n	405ca6 <__udivmoddi4+0x2ae>
  405c7a:	d012      	beq.n	405ca2 <__udivmoddi4+0x2aa>
  405c7c:	b156      	cbz	r6, 405c94 <__udivmoddi4+0x29c>
  405c7e:	ebba 030e 	subs.w	r3, sl, lr
  405c82:	eb64 0405 	sbc.w	r4, r4, r5
  405c86:	fa04 f707 	lsl.w	r7, r4, r7
  405c8a:	40cb      	lsrs	r3, r1
  405c8c:	431f      	orrs	r7, r3
  405c8e:	40cc      	lsrs	r4, r1
  405c90:	6037      	str	r7, [r6, #0]
  405c92:	6074      	str	r4, [r6, #4]
  405c94:	2100      	movs	r1, #0
  405c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405c9a:	4618      	mov	r0, r3
  405c9c:	e6f8      	b.n	405a90 <__udivmoddi4+0x98>
  405c9e:	4690      	mov	r8, r2
  405ca0:	e6e0      	b.n	405a64 <__udivmoddi4+0x6c>
  405ca2:	45c2      	cmp	sl, r8
  405ca4:	d2ea      	bcs.n	405c7c <__udivmoddi4+0x284>
  405ca6:	ebb8 0e02 	subs.w	lr, r8, r2
  405caa:	eb69 0503 	sbc.w	r5, r9, r3
  405cae:	3801      	subs	r0, #1
  405cb0:	e7e4      	b.n	405c7c <__udivmoddi4+0x284>
  405cb2:	4628      	mov	r0, r5
  405cb4:	e7d7      	b.n	405c66 <__udivmoddi4+0x26e>
  405cb6:	4640      	mov	r0, r8
  405cb8:	e791      	b.n	405bde <__udivmoddi4+0x1e6>
  405cba:	4681      	mov	r9, r0
  405cbc:	e7be      	b.n	405c3c <__udivmoddi4+0x244>
  405cbe:	4601      	mov	r1, r0
  405cc0:	e778      	b.n	405bb4 <__udivmoddi4+0x1bc>
  405cc2:	3802      	subs	r0, #2
  405cc4:	443c      	add	r4, r7
  405cc6:	e745      	b.n	405b54 <__udivmoddi4+0x15c>
  405cc8:	4608      	mov	r0, r1
  405cca:	e708      	b.n	405ade <__udivmoddi4+0xe6>
  405ccc:	f1a8 0802 	sub.w	r8, r8, #2
  405cd0:	443d      	add	r5, r7
  405cd2:	e72b      	b.n	405b2c <__udivmoddi4+0x134>

00405cd4 <__aeabi_idiv0>:
  405cd4:	4770      	bx	lr
  405cd6:	bf00      	nop
  405cd8:	454c4449 	.word	0x454c4449
  405cdc:	00000000 	.word	0x00000000
  405ce0:	51726d54 	.word	0x51726d54
  405ce4:	00000000 	.word	0x00000000
  405ce8:	20726d54 	.word	0x20726d54
  405cec:	00637653 	.word	0x00637653
  405cf0:	46202d2d 	.word	0x46202d2d
  405cf4:	72656572 	.word	0x72656572
  405cf8:	20736f74 	.word	0x20736f74
  405cfc:	6d617845 	.word	0x6d617845
  405d00:	20656c70 	.word	0x20656c70
  405d04:	0d0a2d2d 	.word	0x0d0a2d2d
  405d08:	00000000 	.word	0x00000000
  405d0c:	454d4153 	.word	0x454d4153
  405d10:	582d3037 	.word	0x582d3037
  405d14:	00444c50 	.word	0x00444c50
  405d18:	25202d2d 	.word	0x25202d2d
  405d1c:	000d0a73 	.word	0x000d0a73
  405d20:	343a3931 	.word	0x343a3931
  405d24:	35353a33 	.word	0x35353a33
  405d28:	00000000 	.word	0x00000000
  405d2c:	20706553 	.word	0x20706553
  405d30:	32203832 	.word	0x32203832
  405d34:	00333230 	.word	0x00333230
  405d38:	43202d2d 	.word	0x43202d2d
  405d3c:	69706d6f 	.word	0x69706d6f
  405d40:	3a64656c 	.word	0x3a64656c
  405d44:	20732520 	.word	0x20732520
  405d48:	2d207325 	.word	0x2d207325
  405d4c:	000d0a2d 	.word	0x000d0a2d
  405d50:	0064654c 	.word	0x0064654c
  405d54:	6c696146 	.word	0x6c696146
  405d58:	74206465 	.word	0x74206465
  405d5c:	7263206f 	.word	0x7263206f
  405d60:	65746165 	.word	0x65746165
  405d64:	73657420 	.word	0x73657420
  405d68:	656c2074 	.word	0x656c2074
  405d6c:	61742064 	.word	0x61742064
  405d70:	0a0d6b73 	.word	0x0a0d6b73
  405d74:	00000000 	.word	0x00000000
  405d78:	00554d49 	.word	0x00554d49
  405d7c:	5252455b 	.word	0x5252455b
  405d80:	5b205d4f 	.word	0x5b205d4f
  405d84:	5d633269 	.word	0x5d633269
  405d88:	72775b20 	.word	0x72775b20
  405d8c:	5d657469 	.word	0x5d657469
  405d90:	00000a20 	.word	0x00000a20
  405d94:	65637553 	.word	0x65637553
  405d98:	206f7373 	.word	0x206f7373
  405d9c:	0000000a 	.word	0x0000000a
  405da0:	6f727245 	.word	0x6f727245
  405da4:	00000a20 	.word	0x00000a20
  405da8:	63617473 	.word	0x63617473
  405dac:	766f206b 	.word	0x766f206b
  405db0:	6c667265 	.word	0x6c667265
  405db4:	2520776f 	.word	0x2520776f
  405db8:	73252078 	.word	0x73252078
  405dbc:	00000a0d 	.word	0x00000a0d

00405dc0 <_global_impure_ptr>:
  405dc0:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  405dd0:	46454443 00000000 33323130 37363534     CDEF....01234567
  405de0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405df0:	0000296c                                l)..

00405df4 <blanks.7217>:
  405df4:	20202020 20202020 20202020 20202020                     

00405e04 <zeroes.7218>:
  405e04:	30303030 30303030 30303030 30303030     0000000000000000
  405e14:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405e24 <_ctype_>:
  405e24:	20202000 20202020 28282020 20282828     .         ((((( 
  405e34:	20202020 20202020 20202020 20202020                     
  405e44:	10108820 10101010 10101010 10101010      ...............
  405e54:	04040410 04040404 10040404 10101010     ................
  405e64:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405e74:	01010101 01010101 01010101 10101010     ................
  405e84:	42421010 42424242 02020202 02020202     ..BBBBBB........
  405e94:	02020202 02020202 02020202 10101010     ................
  405ea4:	00000020 00000000 00000000 00000000      ...............
	...

00405f28 <_init>:
  405f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f2a:	bf00      	nop
  405f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f2e:	bc08      	pop	{r3}
  405f30:	469e      	mov	lr, r3
  405f32:	4770      	bx	lr

00405f34 <__init_array_start>:
  405f34:	00404639 	.word	0x00404639

00405f38 <__frame_dummy_init_array_entry>:
  405f38:	0040018d                                ..@.

00405f3c <_fini>:
  405f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405f3e:	bf00      	nop
  405f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405f42:	bc08      	pop	{r3}
  405f44:	469e      	mov	lr, r3
  405f46:	4770      	bx	lr

00405f48 <__fini_array_start>:
  405f48:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0c1c 2040                                   ..@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	5731 0040 50c1 0040 0000 0000 5e24 0040     1W@..P@.....$^@.
20400944:	5e20 0040 5d74 0040 5d74 0040 5d74 0040      ^@.t]@.t]@.t]@.
20400954:	5d74 0040 5d74 0040 5d74 0040 5d74 0040     t]@.t]@.t]@.t]@.
20400964:	5d74 0040 5d74 0040 ffff ffff ffff ffff     t]@.t]@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
