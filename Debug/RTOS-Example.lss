
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009410  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00409410  00409410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00409418  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000028c  204009c0  00409dd8  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400c4c  0040a064  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402c50  0040c068  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   000223ba  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000480c  00000000  00000000  00042e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000f108  00000000  00000000  0004760d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001010  00000000  00000000  00056715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000015e8  00000000  00000000  00057725  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000bf5a  00000000  00000000  00058d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011ae6  00000000  00000000  00064c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a1330  00000000  00000000  0007674d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a24  00000000  00000000  00117a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 2c 40 20 85 13 40 00 83 13 40 00 83 13 40 00     P,@ ..@...@...@.
  400010:	83 13 40 00 83 13 40 00 83 13 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	81 17 40 00 83 13 40 00 00 00 00 00 21 18 40 00     ..@...@.....!.@.
  40003c:	85 18 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  40004c:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  40005c:	83 13 40 00 83 13 40 00 00 00 00 00 49 0e 40 00     ..@...@.....I.@.
  40006c:	5d 0e 40 00 71 0e 40 00 83 13 40 00 83 13 40 00     ].@.q.@...@...@.
  40007c:	83 13 40 00 85 0e 40 00 99 0e 40 00 83 13 40 00     ..@...@...@...@.
  40008c:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  40009c:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  4000ac:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  4000bc:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  4000cc:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  4000dc:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  4000ec:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  4000fc:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  40010c:	83 13 40 00 83 13 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 83 13 40 00 83 13 40 00 83 13 40 00     ......@...@...@.
  40012c:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  40013c:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  40014c:	83 13 40 00 83 13 40 00 83 13 40 00 83 13 40 00     ..@...@...@...@.
  40015c:	83 13 40 00 83 13 40 00 83 13 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00409418 	.word	0x00409418

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00409418 	.word	0x00409418
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00409418 	.word	0x00409418
  4001d0:	00000000 	.word	0x00000000

004001d4 <FusionAhrsReset>:
 * @brief Resets the AHRS algorithm.  This is equivalent to reinitialising the
 * algorithm while maintaining the current settings.
 * @param ahrs AHRS algorithm structure.
 */
void FusionAhrsReset(FusionAhrs *const ahrs) {
    ahrs->quaternion = FUSION_IDENTITY_QUATERNION;
  4001d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
  4001d8:	6103      	str	r3, [r0, #16]
  4001da:	2300      	movs	r3, #0
  4001dc:	6143      	str	r3, [r0, #20]
  4001de:	6183      	str	r3, [r0, #24]
  4001e0:	61c3      	str	r3, [r0, #28]
    ahrs->accelerometer = FUSION_VECTOR_ZERO;
  4001e2:	6203      	str	r3, [r0, #32]
  4001e4:	6243      	str	r3, [r0, #36]	; 0x24
  4001e6:	6283      	str	r3, [r0, #40]	; 0x28
    ahrs->initialising = true;
  4001e8:	2201      	movs	r2, #1
  4001ea:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
    ahrs->rampedGain = INITIAL_GAIN;
  4001ee:	4a0a      	ldr	r2, [pc, #40]	; (400218 <FusionAhrsReset+0x44>)
  4001f0:	6302      	str	r2, [r0, #48]	; 0x30
    ahrs->halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  4001f2:	6383      	str	r3, [r0, #56]	; 0x38
  4001f4:	63c3      	str	r3, [r0, #60]	; 0x3c
  4001f6:	6403      	str	r3, [r0, #64]	; 0x40
    ahrs->halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  4001f8:	6443      	str	r3, [r0, #68]	; 0x44
  4001fa:	6483      	str	r3, [r0, #72]	; 0x48
  4001fc:	64c3      	str	r3, [r0, #76]	; 0x4c
    ahrs->accelerometerIgnored = false;
  4001fe:	2300      	movs	r3, #0
  400200:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    ahrs->accelerationRejectionTimer = 0;
  400204:	6543      	str	r3, [r0, #84]	; 0x54
    ahrs->accelerationRejectionTimeout = false;
  400206:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    ahrs->magnetometerIgnored = false;
  40020a:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
    ahrs->magneticRejectionTimer = 0;
  40020e:	65c3      	str	r3, [r0, #92]	; 0x5c
    ahrs->magneticRejectionTimeout = false;
  400210:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  400214:	4770      	bx	lr
  400216:	bf00      	nop
  400218:	41200000 	.word	0x41200000

0040021c <FusionAhrsSetSettings>:
/**
 * @brief Sets the AHRS algorithm settings.
 * @param ahrs AHRS algorithm structure.
 * @param settings Settings.
 */
void FusionAhrsSetSettings(FusionAhrs *const ahrs, const FusionAhrsSettings *const settings) {
  40021c:	b538      	push	{r3, r4, r5, lr}
  40021e:	ed2d 8b02 	vpush	{d8}
  400222:	4604      	mov	r4, r0
  400224:	460d      	mov	r5, r1
    ahrs->settings.gain = settings->gain;
  400226:	ed91 8a00 	vldr	s16, [r1]
  40022a:	ed80 8a00 	vstr	s16, [r0]
    if ((settings->accelerationRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  40022e:	edd1 7a01 	vldr	s15, [r1, #4]
  400232:	eef5 7a40 	vcmp.f32	s15, #0.0
  400236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40023a:	d001      	beq.n	400240 <FusionAhrsSetSettings+0x24>
  40023c:	68cb      	ldr	r3, [r1, #12]
  40023e:	bb03      	cbnz	r3, 400282 <FusionAhrsSetSettings+0x66>
        ahrs->settings.accelerationRejection = FLT_MAX;
  400240:	4b23      	ldr	r3, [pc, #140]	; (4002d0 <FusionAhrsSetSettings+0xb4>)
  400242:	6063      	str	r3, [r4, #4]
    } else {
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
    }
    if ((settings->magneticRejection == 0.0f) || (settings->rejectionTimeout == 0)) {
  400244:	edd5 7a02 	vldr	s15, [r5, #8]
  400248:	eef5 7a40 	vcmp.f32	s15, #0.0
  40024c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400250:	d001      	beq.n	400256 <FusionAhrsSetSettings+0x3a>
  400252:	68eb      	ldr	r3, [r5, #12]
  400254:	bb43      	cbnz	r3, 4002a8 <FusionAhrsSetSettings+0x8c>
        ahrs->settings.magneticRejection = FLT_MAX;
  400256:	4b1e      	ldr	r3, [pc, #120]	; (4002d0 <FusionAhrsSetSettings+0xb4>)
  400258:	60a3      	str	r3, [r4, #8]
    } else {
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
    }
    ahrs->settings.rejectionTimeout = settings->rejectionTimeout;
  40025a:	68eb      	ldr	r3, [r5, #12]
  40025c:	60e3      	str	r3, [r4, #12]
    if (ahrs->initialising == false) {
  40025e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400262:	b90b      	cbnz	r3, 400268 <FusionAhrsSetSettings+0x4c>
        ahrs->rampedGain = ahrs->settings.gain;
  400264:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    }
    ahrs->rampedGainStep = (INITIAL_GAIN - ahrs->settings.gain) / INITIALISATION_PERIOD;
  400268:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  40026c:	ee77 7ac8 	vsub.f32	s15, s15, s16
  400270:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
  400274:	ee87 7aa6 	vdiv.f32	s14, s15, s13
  400278:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
}
  40027c:	ecbd 8b02 	vpop	{d8}
  400280:	bd38      	pop	{r3, r4, r5, pc}
        ahrs->settings.accelerationRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->accelerationRejection)), 2);
  400282:	ed9f 7a14 	vldr	s14, [pc, #80]	; 4002d4 <FusionAhrsSetSettings+0xb8>
  400286:	ee67 7a87 	vmul.f32	s15, s15, s14
  40028a:	ee17 0a90 	vmov	r0, s15
  40028e:	4b12      	ldr	r3, [pc, #72]	; (4002d8 <FusionAhrsSetSettings+0xbc>)
  400290:	4798      	blx	r3
  400292:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  400296:	ee07 0a10 	vmov	s14, r0
  40029a:	ee67 7a27 	vmul.f32	s15, s14, s15
  40029e:	ee67 7aa7 	vmul.f32	s15, s15, s15
  4002a2:	edc4 7a01 	vstr	s15, [r4, #4]
  4002a6:	e7cd      	b.n	400244 <FusionAhrsSetSettings+0x28>
        ahrs->settings.magneticRejection = powf(0.5f * sinf(FusionDegreesToRadians(settings->magneticRejection)), 2);
  4002a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 4002d4 <FusionAhrsSetSettings+0xb8>
  4002ac:	ee67 7a87 	vmul.f32	s15, s15, s14
  4002b0:	ee17 0a90 	vmov	r0, s15
  4002b4:	4b08      	ldr	r3, [pc, #32]	; (4002d8 <FusionAhrsSetSettings+0xbc>)
  4002b6:	4798      	blx	r3
  4002b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  4002bc:	ee07 0a10 	vmov	s14, r0
  4002c0:	ee67 7a27 	vmul.f32	s15, s14, s15
  4002c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
  4002c8:	edc4 7a02 	vstr	s15, [r4, #8]
  4002cc:	e7c5      	b.n	40025a <FusionAhrsSetSettings+0x3e>
  4002ce:	bf00      	nop
  4002d0:	7f7fffff 	.word	0x7f7fffff
  4002d4:	3c8efa35 	.word	0x3c8efa35
  4002d8:	00403e21 	.word	0x00403e21

004002dc <FusionAhrsInitialise>:
void FusionAhrsInitialise(FusionAhrs *const ahrs) {
  4002dc:	b530      	push	{r4, r5, lr}
  4002de:	b085      	sub	sp, #20
  4002e0:	4605      	mov	r5, r0
    const FusionAhrsSettings settings = {
  4002e2:	4b06      	ldr	r3, [pc, #24]	; (4002fc <FusionAhrsInitialise+0x20>)
  4002e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4002e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    FusionAhrsSetSettings(ahrs, &settings);
  4002ea:	4669      	mov	r1, sp
  4002ec:	4628      	mov	r0, r5
  4002ee:	4b04      	ldr	r3, [pc, #16]	; (400300 <FusionAhrsInitialise+0x24>)
  4002f0:	4798      	blx	r3
    FusionAhrsReset(ahrs);
  4002f2:	4628      	mov	r0, r5
  4002f4:	4b03      	ldr	r3, [pc, #12]	; (400304 <FusionAhrsInitialise+0x28>)
  4002f6:	4798      	blx	r3
}
  4002f8:	b005      	add	sp, #20
  4002fa:	bd30      	pop	{r4, r5, pc}
  4002fc:	00408d58 	.word	0x00408d58
  400300:	0040021d 	.word	0x0040021d
  400304:	004001d5 	.word	0x004001d5

00400308 <FusionAhrsGetQuaternion>:
/**
 * @brief Returns the quaternion describing the sensor relative to the Earth.
 * @param ahrs AHRS algorithm structure.
 * @return Quaternion describing the sensor relative to the Earth.
 */
FusionQuaternion FusionAhrsGetQuaternion(const FusionAhrs *const ahrs) {
  400308:	b410      	push	{r4}
  40030a:	4604      	mov	r4, r0
    return ahrs->quaternion;
  40030c:	3110      	adds	r1, #16
  40030e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
  400310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
  400314:	4620      	mov	r0, r4
  400316:	f85d 4b04 	ldr.w	r4, [sp], #4
  40031a:	4770      	bx	lr

0040031c <FusionAhrsSetHeading>:
 * algorithm.  This function can be used to reset drift in heading when the AHRS
 * algorithm is being used without a magnetometer.
 * @param ahrs AHRS algorithm structure.
 * @param heading Heading angle in degrees.
 */
void FusionAhrsSetHeading(FusionAhrs *const ahrs, const float heading) {
  40031c:	b510      	push	{r4, lr}
  40031e:	ed2d 8b04 	vpush	{d8-d9}
  400322:	4604      	mov	r4, r0
  400324:	ee08 1a10 	vmov	s16, r1
#define Q ahrs->quaternion.element
    const float yaw = atan2f(Q.w * Q.z + Q.x * Q.y, 0.5f - Q.y * Q.y - Q.z * Q.z);
  400328:	ed90 7a07 	vldr	s14, [r0, #28]
  40032c:	edd0 7a06 	vldr	s15, [r0, #24]
  400330:	ee67 6aa7 	vmul.f32	s13, s15, s15
  400334:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
  400338:	ee79 6a66 	vsub.f32	s13, s18, s13
  40033c:	ee27 6a07 	vmul.f32	s12, s14, s14
  400340:	edd0 5a04 	vldr	s11, [r0, #16]
  400344:	ee27 7a25 	vmul.f32	s14, s14, s11
  400348:	edd0 5a05 	vldr	s11, [r0, #20]
  40034c:	ee67 7aa5 	vmul.f32	s15, s15, s11
  400350:	ee76 6ac6 	vsub.f32	s13, s13, s12
  400354:	ee16 1a90 	vmov	r1, s13
  400358:	ee77 7a27 	vadd.f32	s15, s14, s15
  40035c:	ee17 0a90 	vmov	r0, s15
  400360:	4b2f      	ldr	r3, [pc, #188]	; (400420 <FusionAhrsSetHeading+0x104>)
  400362:	4798      	blx	r3
 * @brief Converts degrees to radians.
 * @param degrees Degrees.
 * @return Radians.
 */
static inline float FusionDegreesToRadians(const float degrees) {
    return degrees * ((float) M_PI / 180.0f);
  400364:	eddf 8a2f 	vldr	s17, [pc, #188]	; 400424 <FusionAhrsSetHeading+0x108>
  400368:	ee68 8a28 	vmul.f32	s17, s16, s17
    const float halfYawMinusHeading = 0.5f * (yaw - FusionDegreesToRadians(heading));
  40036c:	ee07 0a90 	vmov	s15, r0
  400370:	ee77 8ae8 	vsub.f32	s17, s15, s17
  400374:	ee68 8a89 	vmul.f32	s17, s17, s18
    const FusionQuaternion rotation = {
            .element.w = cosf(halfYawMinusHeading),
  400378:	ee18 0a90 	vmov	r0, s17
  40037c:	4b2a      	ldr	r3, [pc, #168]	; (400428 <FusionAhrsSetHeading+0x10c>)
  40037e:	4798      	blx	r3
  400380:	ee08 0a10 	vmov	s16, r0
            .element.x = 0.0f,
            .element.y = 0.0f,
            .element.z = -1.0f * sinf(halfYawMinusHeading),
  400384:	ee18 0a90 	vmov	r0, s17
  400388:	4b28      	ldr	r3, [pc, #160]	; (40042c <FusionAhrsSetHeading+0x110>)
  40038a:	4798      	blx	r3
  40038c:	ee07 0a90 	vmov	s15, r0
  400390:	eeb1 5a67 	vneg.f32	s10, s15
  400394:	ed94 6a04 	vldr	s12, [r4, #16]
  400398:	edd4 5a05 	vldr	s11, [r4, #20]
  40039c:	edd4 7a06 	vldr	s15, [r4, #24]
  4003a0:	edd4 4a07 	vldr	s9, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiply(const FusionQuaternion quaternionA, const FusionQuaternion quaternionB) {
#define A quaternionA.element
#define B quaternionB.element
    FusionQuaternion result;
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  4003a4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 400430 <FusionAhrsSetHeading+0x114>
  4003a8:	ee25 4a87 	vmul.f32	s8, s11, s14
  4003ac:	ee67 3a87 	vmul.f32	s7, s15, s14
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  4003b0:	ee26 3a07 	vmul.f32	s6, s12, s14
  4003b4:	ee24 7a87 	vmul.f32	s14, s9, s14
    result.element.w = A.w * B.w - A.x * B.x - A.y * B.y - A.z * B.z;
  4003b8:	ee68 6a06 	vmul.f32	s13, s16, s12
  4003bc:	ee76 6ac4 	vsub.f32	s13, s13, s8
  4003c0:	ee76 6ae3 	vsub.f32	s13, s13, s7
  4003c4:	ee65 2a24 	vmul.f32	s5, s10, s9
  4003c8:	ee76 6ae2 	vsub.f32	s13, s13, s5
    };
    ahrs->quaternion = FusionQuaternionMultiply(rotation, ahrs->quaternion);
  4003cc:	edc4 6a04 	vstr	s13, [r4, #16]
    result.element.x = A.w * B.x + A.x * B.w + A.y * B.z - A.z * B.y;
  4003d0:	ee68 6a25 	vmul.f32	s13, s16, s11
  4003d4:	ee76 6a83 	vadd.f32	s13, s13, s6
  4003d8:	ee76 6a87 	vadd.f32	s13, s13, s14
  4003dc:	ee67 2a85 	vmul.f32	s5, s15, s10
  4003e0:	ee76 6ae2 	vsub.f32	s13, s13, s5
  4003e4:	edc4 6a05 	vstr	s13, [r4, #20]
    result.element.y = A.w * B.y - A.x * B.z + A.y * B.w + A.z * B.x;
  4003e8:	ee68 7a27 	vmul.f32	s15, s16, s15
  4003ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4003f0:	ee77 7a83 	vadd.f32	s15, s15, s6
  4003f4:	ee65 5a85 	vmul.f32	s11, s11, s10
  4003f8:	ee77 7aa5 	vadd.f32	s15, s15, s11
  4003fc:	edc4 7a06 	vstr	s15, [r4, #24]
    result.element.z = A.w * B.z + A.x * B.y - A.y * B.x + A.z * B.w;
  400400:	ee28 8a24 	vmul.f32	s16, s16, s9
  400404:	ee38 8a23 	vadd.f32	s16, s16, s7
  400408:	ee38 8a44 	vsub.f32	s16, s16, s8
  40040c:	ee26 6a05 	vmul.f32	s12, s12, s10
  400410:	ee38 8a06 	vadd.f32	s16, s16, s12
  400414:	ed84 8a07 	vstr	s16, [r4, #28]
#undef Q
}
  400418:	ecbd 8b04 	vpop	{d8-d9}
  40041c:	bd10      	pop	{r4, pc}
  40041e:	bf00      	nop
  400420:	00403f3d 	.word	0x00403f3d
  400424:	3c8efa35 	.word	0x3c8efa35
  400428:	00403da9 	.word	0x00403da9
  40042c:	00403e21 	.word	0x00403e21
  400430:	00000000 	.word	0x00000000

00400434 <FusionAhrsUpdate>:
void FusionAhrsUpdate(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const FusionVector magnetometer, const float deltaTime) {
  400434:	b570      	push	{r4, r5, r6, lr}
  400436:	ed2d 8b0a 	vpush	{d8-d12}
  40043a:	b08e      	sub	sp, #56	; 0x38
  40043c:	4604      	mov	r4, r0
  40043e:	a803      	add	r0, sp, #12
  400440:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  400444:	ed9d 9a22 	vldr	s18, [sp, #136]	; 0x88
    ahrs->accelerometer = accelerometer;
  400448:	f104 0320 	add.w	r3, r4, #32
  40044c:	aa1c      	add	r2, sp, #112	; 0x70
  40044e:	ca07      	ldmia	r2, {r0, r1, r2}
  400450:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (ahrs->initialising == true) {
  400454:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400458:	b1bb      	cbz	r3, 40048a <FusionAhrsUpdate+0x56>
        ahrs->rampedGain -= ahrs->rampedGainStep * deltaTime;
  40045a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
  40045e:	ee29 7a27 	vmul.f32	s14, s18, s15
  400462:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
  400466:	ee77 7ac7 	vsub.f32	s15, s15, s14
  40046a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        if (ahrs->rampedGain < ahrs->settings.gain) {
  40046e:	ed94 7a00 	vldr	s14, [r4]
  400472:	eef4 7ac7 	vcmpe.f32	s15, s14
  400476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40047a:	d506      	bpl.n	40048a <FusionAhrsUpdate+0x56>
            ahrs->rampedGain = ahrs->settings.gain;
  40047c:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
            ahrs->initialising = false;
  400480:	2300      	movs	r3, #0
  400482:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            ahrs->accelerationRejectionTimeout = false;
  400486:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
            .axis.x = Q.x * Q.z - Q.w * Q.y,
  40048a:	ed94 6a05 	vldr	s12, [r4, #20]
  40048e:	edd4 9a07 	vldr	s19, [r4, #28]
  400492:	ed94 7a04 	vldr	s14, [r4, #16]
  400496:	edd4 aa06 	vldr	s21, [r4, #24]
  40049a:	ee66 6a29 	vmul.f32	s13, s12, s19
  40049e:	ee67 7a2a 	vmul.f32	s15, s14, s21
  4004a2:	ee36 bae7 	vsub.f32	s22, s13, s15
            .axis.y = Q.y * Q.z + Q.w * Q.x,
  4004a6:	ee69 aaaa 	vmul.f32	s21, s19, s21
  4004aa:	ee26 6a07 	vmul.f32	s12, s12, s14
  4004ae:	ee7a aa86 	vadd.f32	s21, s21, s12
            .axis.z = Q.w * Q.w - 0.5f + Q.z * Q.z,
  4004b2:	ee27 7a07 	vmul.f32	s14, s14, s14
  4004b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
  4004ba:	ee37 7a67 	vsub.f32	s14, s14, s15
  4004be:	ee69 9aa9 	vmul.f32	s19, s19, s19
  4004c2:	ee77 9a29 	vadd.f32	s19, s14, s19
    ahrs->accelerometerIgnored = true;
  4004c6:	2301      	movs	r3, #1
  4004c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  4004cc:	ed9d 8a1c 	vldr	s16, [sp, #112]	; 0x70
  4004d0:	ed9d aa1d 	vldr	s20, [sp, #116]	; 0x74
  4004d4:	eddd 8a1e 	vldr	s17, [sp, #120]	; 0x78
    return (vector.axis.x == 0.0f) && (vector.axis.y == 0.0f) && (vector.axis.z == 0.0f);
  4004d8:	eeb5 aa40 	vcmp.f32	s20, #0.0
  4004dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4004e0:	bf18      	it	ne
  4004e2:	2300      	movne	r3, #0
  4004e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
  4004e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(accelerometer) == false) {
  4004ec:	f003 0301 	and.w	r3, r3, #1
  4004f0:	bf18      	it	ne
  4004f2:	2300      	movne	r3, #0
  4004f4:	b38b      	cbz	r3, 40055a <FusionAhrsUpdate+0x126>
  4004f6:	eef5 8a40 	vcmp.f32	s17, #0.0
  4004fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4004fe:	d12c      	bne.n	40055a <FusionAhrsUpdate+0x126>
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  400500:	ed9f 8ae8 	vldr	s16, [pc, #928]	; 4008a4 <FusionAhrsUpdate+0x470>
  400504:	eef0 8a48 	vmov.f32	s17, s16
  400508:	eeb0 aa48 	vmov.f32	s20, s16
    ahrs->magnetometerIgnored = true;
  40050c:	2301      	movs	r3, #1
  40050e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  400512:	eddd ba1f 	vldr	s23, [sp, #124]	; 0x7c
  400516:	ed9d ca20 	vldr	s24, [sp, #128]	; 0x80
  40051a:	eddd ca21 	vldr	s25, [sp, #132]	; 0x84
  40051e:	eeb5 ca40 	vcmp.f32	s24, #0.0
  400522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400526:	bf18      	it	ne
  400528:	2300      	movne	r3, #0
  40052a:	eef5 ba40 	vcmp.f32	s23, #0.0
  40052e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (FusionVectorIsZero(magnetometer) == false) {
  400532:	f003 0301 	and.w	r3, r3, #1
  400536:	bf18      	it	ne
  400538:	2300      	movne	r3, #0
  40053a:	2b00      	cmp	r3, #0
  40053c:	f000 8089 	beq.w	400652 <FusionAhrsUpdate+0x21e>
  400540:	eef5 ca40 	vcmp.f32	s25, #0.0
  400544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400548:	f040 8083 	bne.w	400652 <FusionAhrsUpdate+0x21e>
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  40054c:	eddf 9ad5 	vldr	s19, [pc, #852]	; 4008a4 <FusionAhrsUpdate+0x470>
  400550:	eef0 6a69 	vmov.f32	s13, s19
  400554:	eeb0 7a69 	vmov.f32	s14, s19
  400558:	e10d      	b.n	400776 <FusionAhrsUpdate+0x342>
        if (ahrs->accelerationRejectionTimer > ahrs->settings.rejectionTimeout) {
  40055a:	6d62      	ldr	r2, [r4, #84]	; 0x54
  40055c:	68e3      	ldr	r3, [r4, #12]
  40055e:	429a      	cmp	r2, r3
  400560:	d859      	bhi.n	400616 <FusionAhrsUpdate+0x1e2>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  400562:	ee68 7a08 	vmul.f32	s15, s16, s16
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  400566:	ee2a 7a0a 	vmul.f32	s14, s20, s20
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40056a:	ee77 7a87 	vadd.f32	s15, s15, s14
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  40056e:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400572:	ee77 7a87 	vadd.f32	s15, s15, s14
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400576:	4bcc      	ldr	r3, [pc, #816]	; (4008a8 <FusionAhrsUpdate+0x474>)
  400578:	ee17 2a90 	vmov	r2, s15
  40057c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400580:	ee06 3a90 	vmov	s13, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400584:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 4008ac <FusionAhrsUpdate+0x478>
  400588:	ee67 7a87 	vmul.f32	s15, s15, s14
  40058c:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400590:	ee67 7aa6 	vmul.f32	s15, s15, s13
  400594:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 4008b0 <FusionAhrsUpdate+0x47c>
  400598:	ee77 7a67 	vsub.f32	s15, s14, s15
  40059c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = vector.axis.x * scalar;
  4005a0:	ee28 8a27 	vmul.f32	s16, s16, s15
    result.axis.y = vector.axis.y * scalar;
  4005a4:	ee2a 6a27 	vmul.f32	s12, s20, s15
    result.axis.z = vector.axis.z * scalar;
  4005a8:	ee68 8aa7 	vmul.f32	s17, s17, s15
    result.axis.x = A.y * B.z - A.z * B.y;
  4005ac:	ee29 7a86 	vmul.f32	s14, s19, s12
  4005b0:	ee6a 7aa8 	vmul.f32	s15, s21, s17
  4005b4:	ee37 aa67 	vsub.f32	s20, s14, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  4005b8:	ee6b 8a28 	vmul.f32	s17, s22, s17
  4005bc:	ee69 6a88 	vmul.f32	s13, s19, s16
  4005c0:	ee78 8ae6 	vsub.f32	s17, s17, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  4005c4:	ee2a 8a88 	vmul.f32	s16, s21, s16
  4005c8:	ee2b 6a06 	vmul.f32	s12, s22, s12
  4005cc:	ee38 8a46 	vsub.f32	s16, s16, s12
        ahrs->halfAccelerometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(accelerometer), halfGravity);
  4005d0:	ed84 aa0e 	vstr	s20, [r4, #56]	; 0x38
  4005d4:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
  4005d8:	ed84 8a10 	vstr	s16, [r4, #64]	; 0x40
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfAccelerometerFeedback) <= ahrs->settings.accelerationRejection)) {
  4005dc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  4005e0:	b973      	cbnz	r3, 400600 <FusionAhrsUpdate+0x1cc>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4005e2:	ee6a 7a0a 	vmul.f32	s15, s20, s20
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4005e6:	ee28 7aa8 	vmul.f32	s14, s17, s17
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4005ea:	ee77 7a87 	vadd.f32	s15, s15, s14
  4005ee:	ee48 7a08 	vmla.f32	s15, s16, s16
  4005f2:	ed94 7a01 	vldr	s14, [r4, #4]
  4005f6:	eef4 7ac7 	vcmpe.f32	s15, s14
  4005fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4005fe:	d81e      	bhi.n	40063e <FusionAhrsUpdate+0x20a>
            ahrs->accelerometerIgnored = false;
  400600:	2300      	movs	r3, #0
  400602:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            ahrs->accelerationRejectionTimer -= ahrs->accelerationRejectionTimer >= 10 ? 10 : 0;
  400606:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400608:	2b09      	cmp	r3, #9
  40060a:	bf8c      	ite	hi
  40060c:	220a      	movhi	r2, #10
  40060e:	2200      	movls	r2, #0
  400610:	1a9b      	subs	r3, r3, r2
  400612:	6563      	str	r3, [r4, #84]	; 0x54
  400614:	e77a      	b.n	40050c <FusionAhrsUpdate+0xd8>
            const FusionQuaternion quaternion = ahrs->quaternion;
  400616:	ae07      	add	r6, sp, #28
  400618:	f104 0510 	add.w	r5, r4, #16
  40061c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  400620:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
            FusionAhrsReset(ahrs);
  400624:	4620      	mov	r0, r4
  400626:	4ba3      	ldr	r3, [pc, #652]	; (4008b4 <FusionAhrsUpdate+0x480>)
  400628:	4798      	blx	r3
            ahrs->quaternion = quaternion;
  40062a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
  40062e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            ahrs->accelerationRejectionTimer = 0;
  400632:	2300      	movs	r3, #0
  400634:	6563      	str	r3, [r4, #84]	; 0x54
            ahrs->accelerationRejectionTimeout = true;
  400636:	2301      	movs	r3, #1
  400638:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  40063c:	e791      	b.n	400562 <FusionAhrsUpdate+0x12e>
            ahrs->accelerationRejectionTimer++;
  40063e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  400640:	3301      	adds	r3, #1
  400642:	6563      	str	r3, [r4, #84]	; 0x54
    FusionVector halfAccelerometerFeedback = FUSION_VECTOR_ZERO;
  400644:	ed9f 8a97 	vldr	s16, [pc, #604]	; 4008a4 <FusionAhrsUpdate+0x470>
  400648:	eef0 8a48 	vmov.f32	s17, s16
  40064c:	eeb0 aa48 	vmov.f32	s20, s16
  400650:	e75c      	b.n	40050c <FusionAhrsUpdate+0xd8>
        ahrs->magneticRejectionTimeout = false;
  400652:	2300      	movs	r3, #0
  400654:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
        if (ahrs->magneticRejectionTimer > ahrs->settings.rejectionTimeout) {
  400658:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  40065a:	68e3      	ldr	r3, [r4, #12]
  40065c:	429a      	cmp	r2, r3
  40065e:	f200 812d 	bhi.w	4008bc <FusionAhrsUpdate+0x488>
                .axis.x = Q.x * Q.y + Q.w * Q.z,
  400662:	edd4 6a05 	vldr	s13, [r4, #20]
  400666:	ed94 7a06 	vldr	s14, [r4, #24]
  40066a:	edd4 4a04 	vldr	s9, [r4, #16]
  40066e:	edd4 5a07 	vldr	s11, [r4, #28]
  400672:	ee26 5a87 	vmul.f32	s10, s13, s14
  400676:	ee64 7aa5 	vmul.f32	s15, s9, s11
  40067a:	ee35 5a27 	vadd.f32	s10, s10, s15
                .axis.y = Q.w * Q.w - 0.5f + Q.y * Q.y,
  40067e:	ee64 7aa4 	vmul.f32	s15, s9, s9
  400682:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
  400686:	ee77 7ac6 	vsub.f32	s15, s15, s12
  40068a:	ee27 6a07 	vmul.f32	s12, s14, s14
  40068e:	ee37 6a86 	vadd.f32	s12, s15, s12
                .axis.z = Q.y * Q.z - Q.w * Q.x
  400692:	ee27 7a25 	vmul.f32	s14, s14, s11
  400696:	ee66 6aa4 	vmul.f32	s13, s13, s9
  40069a:	ee77 4a66 	vsub.f32	s9, s14, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  40069e:	ee6a 5aac 	vmul.f32	s11, s21, s25
  4006a2:	ee69 7a8c 	vmul.f32	s15, s19, s24
  4006a6:	ee75 5ae7 	vsub.f32	s11, s11, s15
    result.axis.y = A.z * B.x - A.x * B.z;
  4006aa:	ee69 9aab 	vmul.f32	s19, s19, s23
  4006ae:	ee6b ca2c 	vmul.f32	s25, s22, s25
  4006b2:	ee79 9aec 	vsub.f32	s19, s19, s25
    result.axis.z = A.x * B.y - A.y * B.x;
  4006b6:	ee6b 6a0c 	vmul.f32	s13, s22, s24
  4006ba:	ee6a 7aab 	vmul.f32	s15, s21, s23
  4006be:	ee76 6ae7 	vsub.f32	s13, s13, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4006c2:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4006c6:	ee69 7aa9 	vmul.f32	s15, s19, s19
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4006ca:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4006ce:	ee66 7aa6 	vmul.f32	s15, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4006d2:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4006d6:	4b74      	ldr	r3, [pc, #464]	; (4008a8 <FusionAhrsUpdate+0x474>)
  4006d8:	ee17 2a10 	vmov	r2, s14
  4006dc:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  4006e0:	ee04 3a10 	vmov	s8, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4006e4:	eddf 7a71 	vldr	s15, [pc, #452]	; 4008ac <FusionAhrsUpdate+0x478>
  4006e8:	ee27 7a27 	vmul.f32	s14, s14, s15
  4006ec:	ee27 7a04 	vmul.f32	s14, s14, s8
  4006f0:	ee27 7a04 	vmul.f32	s14, s14, s8
  4006f4:	eddf 7a6e 	vldr	s15, [pc, #440]	; 4008b0 <FusionAhrsUpdate+0x47c>
  4006f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
  4006fc:	ee67 7a84 	vmul.f32	s15, s15, s8
    result.axis.x = vector.axis.x * scalar;
  400700:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  400704:	ee67 9aa9 	vmul.f32	s19, s15, s19
    result.axis.z = vector.axis.z * scalar;
  400708:	ee67 7aa6 	vmul.f32	s15, s15, s13
    result.axis.x = A.y * B.z - A.z * B.y;
  40070c:	ee24 7aa9 	vmul.f32	s14, s9, s19
  400710:	ee66 6a27 	vmul.f32	s13, s12, s15
  400714:	ee37 7a66 	vsub.f32	s14, s14, s13
    result.axis.y = A.z * B.x - A.x * B.z;
  400718:	ee65 7a27 	vmul.f32	s15, s10, s15
  40071c:	ee64 6aa5 	vmul.f32	s13, s9, s11
  400720:	ee77 6ae6 	vsub.f32	s13, s15, s13
    result.axis.z = A.x * B.y - A.y * B.x;
  400724:	ee66 7a25 	vmul.f32	s15, s12, s11
  400728:	ee65 9a29 	vmul.f32	s19, s10, s19
  40072c:	ee77 9ae9 	vsub.f32	s19, s15, s19
        ahrs->halfMagnetometerFeedback = FusionVectorCrossProduct(FusionVectorNormalise(FusionVectorCrossProduct(halfGravity, magnetometer)), halfWest);
  400730:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
  400734:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
  400738:	edc4 9a13 	vstr	s19, [r4, #76]	; 0x4c
        if ((ahrs->initialising == true) || (FusionVectorMagnitudeSquared(ahrs->halfMagnetometerFeedback) <= ahrs->settings.magneticRejection)) {
  40073c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
  400740:	b97b      	cbnz	r3, 400762 <FusionAhrsUpdate+0x32e>
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  400742:	ee67 7a07 	vmul.f32	s15, s14, s14
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  400746:	ee26 6aa6 	vmul.f32	s12, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  40074a:	ee77 7a86 	vadd.f32	s15, s15, s12
  40074e:	ee49 7aa9 	vmla.f32	s15, s19, s19
  400752:	ed94 6a02 	vldr	s12, [r4, #8]
  400756:	eef4 7ac6 	vcmpe.f32	s15, s12
  40075a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40075e:	f200 80c8 	bhi.w	4008f2 <FusionAhrsUpdate+0x4be>
            ahrs->magnetometerIgnored = false;
  400762:	2300      	movs	r3, #0
  400764:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
            ahrs->magneticRejectionTimer -= ahrs->magneticRejectionTimer >= 10 ? 10 : 0;
  400768:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  40076a:	2b09      	cmp	r3, #9
  40076c:	bf8c      	ite	hi
  40076e:	220a      	movhi	r2, #10
  400770:	2200      	movls	r2, #0
  400772:	1a9b      	subs	r3, r3, r2
  400774:	65e3      	str	r3, [r4, #92]	; 0x5c
    const FusionVector adjustedHalfGyroscope = FusionVectorAdd(halfGyroscope, FusionVectorMultiplyScalar(FusionVectorAdd(halfAccelerometerFeedback, halfMagnetometerFeedback), ahrs->rampedGain));
  400776:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  40077a:	ee37 7a0a 	vadd.f32	s14, s14, s20
    result.axis.x = vector.axis.x * scalar;
  40077e:	ee27 7a27 	vmul.f32	s14, s14, s15
  400782:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 4008b8 <FusionAhrsUpdate+0x484>
  400786:	eddd 5a03 	vldr	s11, [sp, #12]
  40078a:	ee65 5a86 	vmul.f32	s11, s11, s12
    result.axis.x = vectorA.axis.x + vectorB.axis.x;
  40078e:	ee37 7a25 	vadd.f32	s14, s14, s11
    result.axis.x = vector.axis.x * scalar;
  400792:	ee27 7a09 	vmul.f32	s14, s14, s18
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  400796:	ee78 6aa6 	vadd.f32	s13, s17, s13
    result.axis.y = vector.axis.y * scalar;
  40079a:	ee66 6aa7 	vmul.f32	s13, s13, s15
  40079e:	eddd 8a04 	vldr	s17, [sp, #16]
  4007a2:	ee68 8a86 	vmul.f32	s17, s17, s12
    result.axis.y = vectorA.axis.y + vectorB.axis.y;
  4007a6:	ee76 6aa8 	vadd.f32	s13, s13, s17
    result.axis.y = vector.axis.y * scalar;
  4007aa:	ee66 6a89 	vmul.f32	s13, s13, s18
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  4007ae:	ee38 8a29 	vadd.f32	s16, s16, s19
    result.axis.z = vector.axis.z * scalar;
  4007b2:	ee28 8a27 	vmul.f32	s16, s16, s15
  4007b6:	eddd 7a05 	vldr	s15, [sp, #20]
  4007ba:	ee67 7a86 	vmul.f32	s15, s15, s12
    result.axis.z = vectorA.axis.z + vectorB.axis.z;
  4007be:	ee38 8a27 	vadd.f32	s16, s16, s15
    result.axis.z = vector.axis.z * scalar;
  4007c2:	ee68 7a09 	vmul.f32	s15, s16, s18
  4007c6:	ed94 3a04 	vldr	s6, [r4, #16]
  4007ca:	edd4 3a05 	vldr	s7, [r4, #20]
  4007ce:	ed94 4a06 	vldr	s8, [r4, #24]
  4007d2:	ed94 5a07 	vldr	s10, [r4, #28]
 */
static inline FusionQuaternion FusionQuaternionMultiplyVector(const FusionQuaternion quaternion, const FusionVector vector) {
#define Q quaternion.element
#define V vector.axis
    FusionQuaternion result;
    result.element.w = -Q.x * V.x - Q.y * V.y - Q.z * V.z;
  4007d6:	ee63 5ac7 	vnmul.f32	s11, s7, s14
  4007da:	ee26 6a84 	vmul.f32	s12, s13, s8
  4007de:	ee75 5ac6 	vsub.f32	s11, s11, s12
  4007e2:	ee27 6a85 	vmul.f32	s12, s15, s10
  4007e6:	ee75 5ac6 	vsub.f32	s11, s11, s12
    result.element.w = quaternionA.element.w + quaternionB.element.w;
  4007ea:	ee75 5a83 	vadd.f32	s11, s11, s6
    result.element.x = Q.w * V.x + Q.y * V.z - Q.z * V.y;
  4007ee:	ee67 4a03 	vmul.f32	s9, s14, s6
  4007f2:	ee27 6a84 	vmul.f32	s12, s15, s8
  4007f6:	ee74 4a86 	vadd.f32	s9, s9, s12
  4007fa:	ee26 6a85 	vmul.f32	s12, s13, s10
  4007fe:	ee74 4ac6 	vsub.f32	s9, s9, s12
    result.element.x = quaternionA.element.x + quaternionB.element.x;
  400802:	ee74 4aa3 	vadd.f32	s9, s9, s7
    result.element.y = Q.w * V.y - Q.x * V.z + Q.z * V.x;
  400806:	ee26 6a83 	vmul.f32	s12, s13, s6
  40080a:	ee67 2aa3 	vmul.f32	s5, s15, s7
  40080e:	ee36 6a62 	vsub.f32	s12, s12, s5
  400812:	ee67 2a05 	vmul.f32	s5, s14, s10
  400816:	ee36 6a22 	vadd.f32	s12, s12, s5
    result.element.y = quaternionA.element.y + quaternionB.element.y;
  40081a:	ee36 6a04 	vadd.f32	s12, s12, s8
    result.element.z = Q.w * V.z + Q.x * V.y - Q.y * V.x;
  40081e:	ee67 7a83 	vmul.f32	s15, s15, s6
  400822:	ee66 6aa3 	vmul.f32	s13, s13, s7
  400826:	ee77 7aa6 	vadd.f32	s15, s15, s13
  40082a:	ee27 7a04 	vmul.f32	s14, s14, s8
  40082e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    result.element.z = quaternionA.element.z + quaternionB.element.z;
  400832:	ee77 7a85 	vadd.f32	s15, s15, s10
static inline FusionQuaternion FusionQuaternionNormalise(const FusionQuaternion quaternion) {
#define Q quaternion.element
#ifdef FUSION_USE_NORMAL_SQRT
    const float magnitudeReciprocal = 1.0f / sqrtf(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
#else
    const float magnitudeReciprocal = FusionFastInverseSqrt(Q.w * Q.w + Q.x * Q.x + Q.y * Q.y + Q.z * Q.z);
  400836:	ee25 7aa5 	vmul.f32	s14, s11, s11
  40083a:	ee64 6aa4 	vmul.f32	s13, s9, s9
  40083e:	ee37 7a26 	vadd.f32	s14, s14, s13
  400842:	ee66 6a06 	vmul.f32	s13, s12, s12
  400846:	ee37 7a26 	vadd.f32	s14, s14, s13
  40084a:	ee67 6aa7 	vmul.f32	s13, s15, s15
  40084e:	ee37 7a26 	vadd.f32	s14, s14, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400852:	4b15      	ldr	r3, [pc, #84]	; (4008a8 <FusionAhrsUpdate+0x474>)
  400854:	ee17 2a10 	vmov	r2, s14
  400858:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  40085c:	ee05 3a10 	vmov	s10, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400860:	eddf 6a12 	vldr	s13, [pc, #72]	; 4008ac <FusionAhrsUpdate+0x478>
  400864:	ee27 7a26 	vmul.f32	s14, s14, s13
  400868:	ee27 7a05 	vmul.f32	s14, s14, s10
  40086c:	ee27 7a05 	vmul.f32	s14, s14, s10
  400870:	eddf 6a0f 	vldr	s13, [pc, #60]	; 4008b0 <FusionAhrsUpdate+0x47c>
  400874:	ee36 7ac7 	vsub.f32	s14, s13, s14
  400878:	ee27 7a05 	vmul.f32	s14, s14, s10
#endif
    FusionQuaternion normalisedQuaternion;
    normalisedQuaternion.element.w = Q.w * magnitudeReciprocal;
  40087c:	ee67 5a25 	vmul.f32	s11, s14, s11
    ahrs->quaternion = FusionQuaternionNormalise(ahrs->quaternion);
  400880:	edc4 5a04 	vstr	s11, [r4, #16]
    normalisedQuaternion.element.x = Q.x * magnitudeReciprocal;
  400884:	ee67 6a24 	vmul.f32	s13, s14, s9
  400888:	edc4 6a05 	vstr	s13, [r4, #20]
    normalisedQuaternion.element.y = Q.y * magnitudeReciprocal;
  40088c:	ee27 6a06 	vmul.f32	s12, s14, s12
  400890:	ed84 6a06 	vstr	s12, [r4, #24]
    normalisedQuaternion.element.z = Q.z * magnitudeReciprocal;
  400894:	ee27 7a27 	vmul.f32	s14, s14, s15
  400898:	ed84 7a07 	vstr	s14, [r4, #28]
}
  40089c:	b00e      	add	sp, #56	; 0x38
  40089e:	ecbd 8b0a 	vpop	{d8-d12}
  4008a2:	bd70      	pop	{r4, r5, r6, pc}
  4008a4:	00000000 	.word	0x00000000
  4008a8:	5f1f1412 	.word	0x5f1f1412
  4008ac:	3f36d312 	.word	0x3f36d312
  4008b0:	3fd851ff 	.word	0x3fd851ff
  4008b4:	004001d5 	.word	0x004001d5
  4008b8:	3c0efa35 	.word	0x3c0efa35
            FusionAhrsSetHeading(ahrs, FusionCompassCalculateHeading(halfGravity, magnetometer));
  4008bc:	ed8d ba0b 	vstr	s22, [sp, #44]	; 0x2c
  4008c0:	edcd aa0c 	vstr	s21, [sp, #48]	; 0x30
  4008c4:	edcd 9a0d 	vstr	s19, [sp, #52]	; 0x34
  4008c8:	ab20      	add	r3, sp, #128	; 0x80
  4008ca:	e893 0003 	ldmia.w	r3, {r0, r1}
  4008ce:	e88d 0003 	stmia.w	sp, {r0, r1}
  4008d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4008d4:	aa0e      	add	r2, sp, #56	; 0x38
  4008d6:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  4008da:	4d0b      	ldr	r5, [pc, #44]	; (400908 <FusionAhrsUpdate+0x4d4>)
  4008dc:	47a8      	blx	r5
  4008de:	4601      	mov	r1, r0
  4008e0:	4620      	mov	r0, r4
  4008e2:	4b0a      	ldr	r3, [pc, #40]	; (40090c <FusionAhrsUpdate+0x4d8>)
  4008e4:	4798      	blx	r3
            ahrs->magneticRejectionTimer = 0;
  4008e6:	2300      	movs	r3, #0
  4008e8:	65e3      	str	r3, [r4, #92]	; 0x5c
            ahrs->magneticRejectionTimeout = true;
  4008ea:	2301      	movs	r3, #1
  4008ec:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
  4008f0:	e6b7      	b.n	400662 <FusionAhrsUpdate+0x22e>
            ahrs->magneticRejectionTimer++;
  4008f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  4008f4:	3301      	adds	r3, #1
  4008f6:	65e3      	str	r3, [r4, #92]	; 0x5c
    FusionVector halfMagnetometerFeedback = FUSION_VECTOR_ZERO;
  4008f8:	eddf 9a05 	vldr	s19, [pc, #20]	; 400910 <FusionAhrsUpdate+0x4dc>
  4008fc:	eef0 6a69 	vmov.f32	s13, s19
  400900:	eeb0 7a69 	vmov.f32	s14, s19
  400904:	e737      	b.n	400776 <FusionAhrsUpdate+0x342>
  400906:	bf00      	nop
  400908:	00400971 	.word	0x00400971
  40090c:	0040031d 	.word	0x0040031d
  400910:	00000000 	.word	0x00000000

00400914 <FusionAhrsUpdateNoMagnetometer>:
void FusionAhrsUpdateNoMagnetometer(FusionAhrs *const ahrs, const FusionVector gyroscope, const FusionVector accelerometer, const float deltaTime) {
  400914:	b530      	push	{r4, r5, lr}
  400916:	b091      	sub	sp, #68	; 0x44
  400918:	4605      	mov	r5, r0
  40091a:	ac09      	add	r4, sp, #36	; 0x24
  40091c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    FusionAhrsUpdate(ahrs, gyroscope, accelerometer, FUSION_VECTOR_ZERO, deltaTime);
  400920:	2300      	movs	r3, #0
  400922:	930d      	str	r3, [sp, #52]	; 0x34
  400924:	930e      	str	r3, [sp, #56]	; 0x38
  400926:	930f      	str	r3, [sp, #60]	; 0x3c
  400928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40092a:	9306      	str	r3, [sp, #24]
  40092c:	ab03      	add	r3, sp, #12
  40092e:	aa10      	add	r2, sp, #64	; 0x40
  400930:	e912 0007 	ldmdb	r2, {r0, r1, r2}
  400934:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  400938:	ab14      	add	r3, sp, #80	; 0x50
  40093a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  40093e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  400942:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
  400946:	4628      	mov	r0, r5
  400948:	4c07      	ldr	r4, [pc, #28]	; (400968 <FusionAhrsUpdateNoMagnetometer+0x54>)
  40094a:	47a0      	blx	r4
    if ((ahrs->initialising == true) && (ahrs->accelerationRejectionTimeout == false)) {
  40094c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
  400950:	b113      	cbz	r3, 400958 <FusionAhrsUpdateNoMagnetometer+0x44>
  400952:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
  400956:	b10b      	cbz	r3, 40095c <FusionAhrsUpdateNoMagnetometer+0x48>
}
  400958:	b011      	add	sp, #68	; 0x44
  40095a:	bd30      	pop	{r4, r5, pc}
        FusionAhrsSetHeading(ahrs, 0.0f);
  40095c:	2100      	movs	r1, #0
  40095e:	4628      	mov	r0, r5
  400960:	4b02      	ldr	r3, [pc, #8]	; (40096c <FusionAhrsUpdateNoMagnetometer+0x58>)
  400962:	4798      	blx	r3
}
  400964:	e7f8      	b.n	400958 <FusionAhrsUpdateNoMagnetometer+0x44>
  400966:	bf00      	nop
  400968:	00400435 	.word	0x00400435
  40096c:	0040031d 	.word	0x0040031d

00400970 <FusionCompassCalculateHeading>:
 * @brief Calculates the heading relative to magnetic north.
 * @param accelerometer Accelerometer measurement in any calibrated units.
 * @param magnetometer Magnetometer measurement in any calibrated units.
 * @return Heading angle in degrees.
 */
float FusionCompassCalculateHeading(const FusionVector accelerometer, const FusionVector magnetometer) {
  400970:	b082      	sub	sp, #8
  400972:	b500      	push	{lr}
  400974:	b085      	sub	sp, #20
  400976:	f10d 0e10 	add.w	lr, sp, #16
  40097a:	e90e 0007 	stmdb	lr, {r0, r1, r2}
  40097e:	9307      	str	r3, [sp, #28]
  400980:	eddd 3a01 	vldr	s7, [sp, #4]
  400984:	eddd 6a02 	vldr	s13, [sp, #8]
  400988:	ed9d 4a03 	vldr	s8, [sp, #12]
  40098c:	eddd 7a07 	vldr	s15, [sp, #28]
  400990:	ed9d 5a08 	vldr	s10, [sp, #32]
  400994:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
    result.axis.x = A.y * B.z - A.z * B.y;
  400998:	ee66 5a26 	vmul.f32	s11, s12, s13
  40099c:	ee24 7a05 	vmul.f32	s14, s8, s10
  4009a0:	ee75 5ac7 	vsub.f32	s11, s11, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  4009a4:	ee24 7a27 	vmul.f32	s14, s8, s15
  4009a8:	ee26 6a23 	vmul.f32	s12, s12, s7
  4009ac:	ee37 6a46 	vsub.f32	s12, s14, s12
    result.axis.z = A.x * B.y - A.y * B.x;
  4009b0:	ee25 5a23 	vmul.f32	s10, s10, s7
  4009b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4009b8:	ee35 5a67 	vsub.f32	s10, s10, s15
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  4009bc:	ee25 7aa5 	vmul.f32	s14, s11, s11
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  4009c0:	ee66 7a06 	vmul.f32	s15, s12, s12
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4009c4:	ee37 7a27 	vadd.f32	s14, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  4009c8:	ee65 7a05 	vmul.f32	s15, s10, s10
    return vector.axis.x + vector.axis.y + vector.axis.z;
  4009cc:	ee37 7a27 	vadd.f32	s14, s14, s15
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  4009d0:	4b2d      	ldr	r3, [pc, #180]	; (400a88 <FusionCompassCalculateHeading+0x118>)
  4009d2:	ee17 2a10 	vmov	r2, s14
  4009d6:	eba3 0262 	sub.w	r2, r3, r2, asr #1
  4009da:	ee03 2a10 	vmov	s6, r2
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  4009de:	eddf 2a2b 	vldr	s5, [pc, #172]	; 400a8c <FusionCompassCalculateHeading+0x11c>
  4009e2:	ee27 7a22 	vmul.f32	s14, s14, s5
  4009e6:	ee27 7a03 	vmul.f32	s14, s14, s6
  4009ea:	ee27 7a03 	vmul.f32	s14, s14, s6
  4009ee:	eddf 4a28 	vldr	s9, [pc, #160]	; 400a90 <FusionCompassCalculateHeading+0x120>
  4009f2:	ee34 7ac7 	vsub.f32	s14, s9, s14
  4009f6:	ee67 7a03 	vmul.f32	s15, s14, s6
    result.axis.x = vector.axis.x * scalar;
  4009fa:	ee67 5aa5 	vmul.f32	s11, s15, s11
    result.axis.y = vector.axis.y * scalar;
  4009fe:	ee27 6a86 	vmul.f32	s12, s15, s12
    result.axis.z = vector.axis.z * scalar;
  400a02:	ee67 7a85 	vmul.f32	s15, s15, s10
    result.axis.x = A.y * B.z - A.z * B.y;
  400a06:	ee24 5a06 	vmul.f32	s10, s8, s12
  400a0a:	ee26 7aa7 	vmul.f32	s14, s13, s15
  400a0e:	ee35 5a47 	vsub.f32	s10, s10, s14
    result.axis.y = A.z * B.x - A.x * B.z;
  400a12:	ee67 7aa3 	vmul.f32	s15, s15, s7
  400a16:	ee24 4a25 	vmul.f32	s8, s8, s11
  400a1a:	ee77 7ac4 	vsub.f32	s15, s15, s8
    result.axis.z = A.x * B.y - A.y * B.x;
  400a1e:	ee66 6aa5 	vmul.f32	s13, s13, s11
  400a22:	ee26 6a23 	vmul.f32	s12, s12, s7
  400a26:	ee76 6ac6 	vsub.f32	s13, s13, s12
    result.axis.x = vectorA.axis.x * vectorB.axis.x;
  400a2a:	ee25 7a05 	vmul.f32	s14, s10, s10
    result.axis.y = vectorA.axis.y * vectorB.axis.y;
  400a2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400a32:	ee77 7a27 	vadd.f32	s15, s14, s15
    result.axis.z = vectorA.axis.z * vectorB.axis.z;
  400a36:	ee66 6aa6 	vmul.f32	s13, s13, s13
    return vector.axis.x + vector.axis.y + vector.axis.z;
  400a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
    union32.i = 0x5F1F1412 - (union32.i >> 1);
  400a3e:	ee17 2a90 	vmov	r2, s15
  400a42:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  400a46:	ee07 3a10 	vmov	s14, r3
    return union32.f * (1.69000231f - 0.714158168f * x * union32.f * union32.f);
  400a4a:	ee67 7aa2 	vmul.f32	s15, s15, s5
  400a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
  400a52:	ee67 7a87 	vmul.f32	s15, s15, s14
  400a56:	ee74 7ae7 	vsub.f32	s15, s9, s15
  400a5a:	ee67 7a87 	vmul.f32	s15, s15, s14

    // Compute direction of magnetic north (Earth's x axis)
    const FusionVector magneticNorth = FusionVectorNormalise(FusionVectorCrossProduct(magneticWest, accelerometer));

    // Calculate angular heading relative to magnetic north
    return FusionRadiansToDegrees(atan2f(magneticWest.axis.x, magneticNorth.axis.x));
  400a5e:	ee67 7a85 	vmul.f32	s15, s15, s10
  400a62:	ee17 1a90 	vmov	r1, s15
  400a66:	ee15 0a90 	vmov	r0, s11
  400a6a:	4b0a      	ldr	r3, [pc, #40]	; (400a94 <FusionCompassCalculateHeading+0x124>)
  400a6c:	4798      	blx	r3
}
  400a6e:	eddf 7a0a 	vldr	s15, [pc, #40]	; 400a98 <FusionCompassCalculateHeading+0x128>
  400a72:	ee07 0a10 	vmov	s14, r0
  400a76:	ee67 7a27 	vmul.f32	s15, s14, s15
  400a7a:	ee17 0a90 	vmov	r0, s15
  400a7e:	b005      	add	sp, #20
  400a80:	f85d eb04 	ldr.w	lr, [sp], #4
  400a84:	b002      	add	sp, #8
  400a86:	4770      	bx	lr
  400a88:	5f1f1412 	.word	0x5f1f1412
  400a8c:	3f36d312 	.word	0x3f36d312
  400a90:	3fd851ff 	.word	0x3fd851ff
  400a94:	00403f3d 	.word	0x00403f3d
  400a98:	42652ee0 	.word	0x42652ee0

00400a9c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a9c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  400a9e:	4810      	ldr	r0, [pc, #64]	; (400ae0 <sysclk_init+0x44>)
  400aa0:	4b10      	ldr	r3, [pc, #64]	; (400ae4 <sysclk_init+0x48>)
  400aa2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400aa4:	213e      	movs	r1, #62	; 0x3e
  400aa6:	2000      	movs	r0, #0
  400aa8:	4b0f      	ldr	r3, [pc, #60]	; (400ae8 <sysclk_init+0x4c>)
  400aaa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400aac:	4c0f      	ldr	r4, [pc, #60]	; (400aec <sysclk_init+0x50>)
  400aae:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400ab0:	2800      	cmp	r0, #0
  400ab2:	d0fc      	beq.n	400aae <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400ab4:	4b0e      	ldr	r3, [pc, #56]	; (400af0 <sysclk_init+0x54>)
  400ab6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400ab8:	4a0e      	ldr	r2, [pc, #56]	; (400af4 <sysclk_init+0x58>)
  400aba:	4b0f      	ldr	r3, [pc, #60]	; (400af8 <sysclk_init+0x5c>)
  400abc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400abe:	4c0f      	ldr	r4, [pc, #60]	; (400afc <sysclk_init+0x60>)
  400ac0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400ac2:	2800      	cmp	r0, #0
  400ac4:	d0fc      	beq.n	400ac0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400ac6:	2002      	movs	r0, #2
  400ac8:	4b0d      	ldr	r3, [pc, #52]	; (400b00 <sysclk_init+0x64>)
  400aca:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400acc:	2000      	movs	r0, #0
  400ace:	4b0d      	ldr	r3, [pc, #52]	; (400b04 <sysclk_init+0x68>)
  400ad0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400ad2:	4b0d      	ldr	r3, [pc, #52]	; (400b08 <sysclk_init+0x6c>)
  400ad4:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  400ad6:	4802      	ldr	r0, [pc, #8]	; (400ae0 <sysclk_init+0x44>)
  400ad8:	4b02      	ldr	r3, [pc, #8]	; (400ae4 <sysclk_init+0x48>)
  400ada:	4798      	blx	r3
  400adc:	bd10      	pop	{r4, pc}
  400ade:	bf00      	nop
  400ae0:	08f0d180 	.word	0x08f0d180
  400ae4:	00401559 	.word	0x00401559
  400ae8:	00400f49 	.word	0x00400f49
  400aec:	00400f9d 	.word	0x00400f9d
  400af0:	00400fad 	.word	0x00400fad
  400af4:	20183f01 	.word	0x20183f01
  400af8:	400e0600 	.word	0x400e0600
  400afc:	00400fbd 	.word	0x00400fbd
  400b00:	00400ead 	.word	0x00400ead
  400b04:	00400ee5 	.word	0x00400ee5
  400b08:	0040144d 	.word	0x0040144d

00400b0c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400b10:	b980      	cbnz	r0, 400b34 <_read+0x28>
  400b12:	460c      	mov	r4, r1
  400b14:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  400b16:	2a00      	cmp	r2, #0
  400b18:	dd0f      	ble.n	400b3a <_read+0x2e>
  400b1a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400b1c:	4e08      	ldr	r6, [pc, #32]	; (400b40 <_read+0x34>)
  400b1e:	4d09      	ldr	r5, [pc, #36]	; (400b44 <_read+0x38>)
  400b20:	6830      	ldr	r0, [r6, #0]
  400b22:	4621      	mov	r1, r4
  400b24:	682b      	ldr	r3, [r5, #0]
  400b26:	4798      	blx	r3
		ptr++;
  400b28:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400b2a:	42bc      	cmp	r4, r7
  400b2c:	d1f8      	bne.n	400b20 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400b2e:	4640      	mov	r0, r8
  400b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b34:	f04f 38ff 	mov.w	r8, #4294967295
  400b38:	e7f9      	b.n	400b2e <_read+0x22>
	for (; len > 0; --len) {
  400b3a:	4680      	mov	r8, r0
  400b3c:	e7f7      	b.n	400b2e <_read+0x22>
  400b3e:	bf00      	nop
  400b40:	20400bd8 	.word	0x20400bd8
  400b44:	20400bd0 	.word	0x20400bd0

00400b48 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400b48:	3801      	subs	r0, #1
  400b4a:	2802      	cmp	r0, #2
  400b4c:	d815      	bhi.n	400b7a <_write+0x32>
{
  400b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b52:	460e      	mov	r6, r1
  400b54:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  400b56:	b19a      	cbz	r2, 400b80 <_write+0x38>
  400b58:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400b5a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 400b94 <_write+0x4c>
  400b5e:	4f0c      	ldr	r7, [pc, #48]	; (400b90 <_write+0x48>)
  400b60:	f8d8 0000 	ldr.w	r0, [r8]
  400b64:	f815 1b01 	ldrb.w	r1, [r5], #1
  400b68:	683b      	ldr	r3, [r7, #0]
  400b6a:	4798      	blx	r3
  400b6c:	2800      	cmp	r0, #0
  400b6e:	db0a      	blt.n	400b86 <_write+0x3e>
  400b70:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  400b72:	3c01      	subs	r4, #1
  400b74:	d1f4      	bne.n	400b60 <_write+0x18>
  400b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400b7a:	f04f 30ff 	mov.w	r0, #4294967295
  400b7e:	4770      	bx	lr
	for (; len != 0; --len) {
  400b80:	4610      	mov	r0, r2
  400b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  400b86:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b8e:	bf00      	nop
  400b90:	20400bd4 	.word	0x20400bd4
  400b94:	20400bd8 	.word	0x20400bd8

00400b98 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400b9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400b9e:	4b5b      	ldr	r3, [pc, #364]	; (400d0c <board_init+0x174>)
  400ba0:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  400ba2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ba6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  400baa:	4b59      	ldr	r3, [pc, #356]	; (400d10 <board_init+0x178>)
  400bac:	2100      	movs	r1, #0
  400bae:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  400bb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400bb6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  400bba:	695a      	ldr	r2, [r3, #20]
  400bbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400bc0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  400bc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400bc6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400bca:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400bce:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  400bd2:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  400bd6:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400bda:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400bde:	016e      	lsls	r6, r5, #5
  400be0:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400be4:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400be8:	461c      	mov	r4, r3
  400bea:	ea06 000e 	and.w	r0, r6, lr
  400bee:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400bf0:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  400bf2:	ea40 0102 	orr.w	r1, r0, r2
  400bf6:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400bfa:	3b01      	subs	r3, #1
  400bfc:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400c00:	f1b3 3fff 	cmp.w	r3, #4294967295
  400c04:	d1f5      	bne.n	400bf2 <board_init+0x5a>
    } while(sets-- != 0U);
  400c06:	3d01      	subs	r5, #1
  400c08:	3e20      	subs	r6, #32
  400c0a:	f1b5 3fff 	cmp.w	r5, #4294967295
  400c0e:	d1ec      	bne.n	400bea <board_init+0x52>
  400c10:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  400c14:	4b3e      	ldr	r3, [pc, #248]	; (400d10 <board_init+0x178>)
  400c16:	695a      	ldr	r2, [r3, #20]
  400c18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400c1c:	615a      	str	r2, [r3, #20]
  400c1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c22:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c26:	4a3b      	ldr	r2, [pc, #236]	; (400d14 <board_init+0x17c>)
  400c28:	493b      	ldr	r1, [pc, #236]	; (400d18 <board_init+0x180>)
  400c2a:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400c2c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400c30:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  400c32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c36:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400c3a:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400c3e:	f022 0201 	bic.w	r2, r2, #1
  400c42:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400c46:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400c4a:	f022 0201 	bic.w	r2, r2, #1
  400c4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  400c52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c56:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400c5a:	200a      	movs	r0, #10
  400c5c:	4c2f      	ldr	r4, [pc, #188]	; (400d1c <board_init+0x184>)
  400c5e:	47a0      	blx	r4
  400c60:	200b      	movs	r0, #11
  400c62:	47a0      	blx	r4
  400c64:	200c      	movs	r0, #12
  400c66:	47a0      	blx	r4
  400c68:	2010      	movs	r0, #16
  400c6a:	47a0      	blx	r4
  400c6c:	2011      	movs	r0, #17
  400c6e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c70:	4b2b      	ldr	r3, [pc, #172]	; (400d20 <board_init+0x188>)
  400c72:	f44f 7280 	mov.w	r2, #256	; 0x100
  400c76:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c7c:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400c7e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400c86:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400c88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400c8c:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400c8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400c92:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400c94:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400c9a:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400c9c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400ca0:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ca2:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400ca4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400ca8:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400caa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400cae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400cb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400cba:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cc0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400cc2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cc8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400cca:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400cce:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cd0:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400cd2:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400cd6:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400cd8:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400cda:	4a12      	ldr	r2, [pc, #72]	; (400d24 <board_init+0x18c>)
  400cdc:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400ce0:	f043 0310 	orr.w	r3, r3, #16
  400ce4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400ce8:	4b0f      	ldr	r3, [pc, #60]	; (400d28 <board_init+0x190>)
  400cea:	2210      	movs	r2, #16
  400cec:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400cee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cf2:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400cf4:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400cfa:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400cfc:	4311      	orrs	r1, r2
  400cfe:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400d00:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400d02:	4311      	orrs	r1, r2
  400d04:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400d06:	605a      	str	r2, [r3, #4]
  400d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400d0a:	bf00      	nop
  400d0c:	400e1850 	.word	0x400e1850
  400d10:	e000ed00 	.word	0xe000ed00
  400d14:	400e0c00 	.word	0x400e0c00
  400d18:	5a00080c 	.word	0x5a00080c
  400d1c:	00400fcd 	.word	0x00400fcd
  400d20:	400e1200 	.word	0x400e1200
  400d24:	40088000 	.word	0x40088000
  400d28:	400e1000 	.word	0x400e1000

00400d2c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400d2c:	6301      	str	r1, [r0, #48]	; 0x30
  400d2e:	4770      	bx	lr

00400d30 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400d30:	6341      	str	r1, [r0, #52]	; 0x34
  400d32:	4770      	bx	lr

00400d34 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400d34:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400d36:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400d3a:	d03a      	beq.n	400db2 <pio_set_peripheral+0x7e>
  400d3c:	d813      	bhi.n	400d66 <pio_set_peripheral+0x32>
  400d3e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400d42:	d025      	beq.n	400d90 <pio_set_peripheral+0x5c>
  400d44:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400d48:	d10a      	bne.n	400d60 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d4a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d4c:	4313      	orrs	r3, r2
  400d4e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400d50:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400d52:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400d54:	400b      	ands	r3, r1
  400d56:	ea23 0302 	bic.w	r3, r3, r2
  400d5a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400d5c:	6042      	str	r2, [r0, #4]
  400d5e:	4770      	bx	lr
	switch (ul_type) {
  400d60:	2900      	cmp	r1, #0
  400d62:	d1fb      	bne.n	400d5c <pio_set_peripheral+0x28>
  400d64:	4770      	bx	lr
  400d66:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400d6a:	d021      	beq.n	400db0 <pio_set_peripheral+0x7c>
  400d6c:	d809      	bhi.n	400d82 <pio_set_peripheral+0x4e>
  400d6e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400d72:	d1f3      	bne.n	400d5c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400d76:	4313      	orrs	r3, r2
  400d78:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400d7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400d7c:	4313      	orrs	r3, r2
  400d7e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400d80:	e7ec      	b.n	400d5c <pio_set_peripheral+0x28>
	switch (ul_type) {
  400d82:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400d86:	d013      	beq.n	400db0 <pio_set_peripheral+0x7c>
  400d88:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400d8c:	d010      	beq.n	400db0 <pio_set_peripheral+0x7c>
  400d8e:	e7e5      	b.n	400d5c <pio_set_peripheral+0x28>
{
  400d90:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400d92:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400d94:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400d96:	43d3      	mvns	r3, r2
  400d98:	4021      	ands	r1, r4
  400d9a:	461c      	mov	r4, r3
  400d9c:	4019      	ands	r1, r3
  400d9e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400da0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400da2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400da4:	400b      	ands	r3, r1
  400da6:	4023      	ands	r3, r4
  400da8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400daa:	6042      	str	r2, [r0, #4]
}
  400dac:	f85d 4b04 	ldr.w	r4, [sp], #4
  400db0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400db2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400db4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400db6:	400b      	ands	r3, r1
  400db8:	ea23 0302 	bic.w	r3, r3, r2
  400dbc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400dbe:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400dc0:	4313      	orrs	r3, r2
  400dc2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400dc4:	e7ca      	b.n	400d5c <pio_set_peripheral+0x28>

00400dc6 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400dc6:	b410      	push	{r4}
  400dc8:	9c01      	ldr	r4, [sp, #4]
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400dca:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400dcc:	b94c      	cbnz	r4, 400de2 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400dce:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400dd0:	b14b      	cbz	r3, 400de6 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400dd2:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400dd4:	b94a      	cbnz	r2, 400dea <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400dd6:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400dd8:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400dda:	6001      	str	r1, [r0, #0]
}
  400ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
  400de0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400de2:	6641      	str	r1, [r0, #100]	; 0x64
  400de4:	e7f4      	b.n	400dd0 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400de6:	6541      	str	r1, [r0, #84]	; 0x54
  400de8:	e7f4      	b.n	400dd4 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400dea:	6301      	str	r1, [r0, #48]	; 0x30
  400dec:	e7f4      	b.n	400dd8 <pio_set_output+0x12>

00400dee <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400dee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400df0:	4770      	bx	lr

00400df2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400df2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400df4:	4770      	bx	lr
	...

00400df8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400dfc:	4604      	mov	r4, r0
  400dfe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400e00:	4b0e      	ldr	r3, [pc, #56]	; (400e3c <pio_handler_process+0x44>)
  400e02:	4798      	blx	r3
  400e04:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400e06:	4620      	mov	r0, r4
  400e08:	4b0d      	ldr	r3, [pc, #52]	; (400e40 <pio_handler_process+0x48>)
  400e0a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400e0c:	4005      	ands	r5, r0
  400e0e:	d013      	beq.n	400e38 <pio_handler_process+0x40>
  400e10:	4c0c      	ldr	r4, [pc, #48]	; (400e44 <pio_handler_process+0x4c>)
  400e12:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400e16:	e003      	b.n	400e20 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400e18:	42b4      	cmp	r4, r6
  400e1a:	d00d      	beq.n	400e38 <pio_handler_process+0x40>
  400e1c:	3410      	adds	r4, #16
		while (status != 0) {
  400e1e:	b15d      	cbz	r5, 400e38 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400e20:	6820      	ldr	r0, [r4, #0]
  400e22:	4540      	cmp	r0, r8
  400e24:	d1f8      	bne.n	400e18 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400e26:	6861      	ldr	r1, [r4, #4]
  400e28:	4229      	tst	r1, r5
  400e2a:	d0f5      	beq.n	400e18 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400e2c:	68e3      	ldr	r3, [r4, #12]
  400e2e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400e30:	6863      	ldr	r3, [r4, #4]
  400e32:	ea25 0503 	bic.w	r5, r5, r3
  400e36:	e7ef      	b.n	400e18 <pio_handler_process+0x20>
  400e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e3c:	00400def 	.word	0x00400def
  400e40:	00400df3 	.word	0x00400df3
  400e44:	204009dc 	.word	0x204009dc

00400e48 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400e48:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400e4a:	210a      	movs	r1, #10
  400e4c:	4801      	ldr	r0, [pc, #4]	; (400e54 <PIOA_Handler+0xc>)
  400e4e:	4b02      	ldr	r3, [pc, #8]	; (400e58 <PIOA_Handler+0x10>)
  400e50:	4798      	blx	r3
  400e52:	bd08      	pop	{r3, pc}
  400e54:	400e0e00 	.word	0x400e0e00
  400e58:	00400df9 	.word	0x00400df9

00400e5c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400e5c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400e5e:	210b      	movs	r1, #11
  400e60:	4801      	ldr	r0, [pc, #4]	; (400e68 <PIOB_Handler+0xc>)
  400e62:	4b02      	ldr	r3, [pc, #8]	; (400e6c <PIOB_Handler+0x10>)
  400e64:	4798      	blx	r3
  400e66:	bd08      	pop	{r3, pc}
  400e68:	400e1000 	.word	0x400e1000
  400e6c:	00400df9 	.word	0x00400df9

00400e70 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400e70:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400e72:	210c      	movs	r1, #12
  400e74:	4801      	ldr	r0, [pc, #4]	; (400e7c <PIOC_Handler+0xc>)
  400e76:	4b02      	ldr	r3, [pc, #8]	; (400e80 <PIOC_Handler+0x10>)
  400e78:	4798      	blx	r3
  400e7a:	bd08      	pop	{r3, pc}
  400e7c:	400e1200 	.word	0x400e1200
  400e80:	00400df9 	.word	0x00400df9

00400e84 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400e84:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400e86:	2110      	movs	r1, #16
  400e88:	4801      	ldr	r0, [pc, #4]	; (400e90 <PIOD_Handler+0xc>)
  400e8a:	4b02      	ldr	r3, [pc, #8]	; (400e94 <PIOD_Handler+0x10>)
  400e8c:	4798      	blx	r3
  400e8e:	bd08      	pop	{r3, pc}
  400e90:	400e1400 	.word	0x400e1400
  400e94:	00400df9 	.word	0x00400df9

00400e98 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400e98:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400e9a:	2111      	movs	r1, #17
  400e9c:	4801      	ldr	r0, [pc, #4]	; (400ea4 <PIOE_Handler+0xc>)
  400e9e:	4b02      	ldr	r3, [pc, #8]	; (400ea8 <PIOE_Handler+0x10>)
  400ea0:	4798      	blx	r3
  400ea2:	bd08      	pop	{r3, pc}
  400ea4:	400e1600 	.word	0x400e1600
  400ea8:	00400df9 	.word	0x00400df9

00400eac <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400eac:	2803      	cmp	r0, #3
  400eae:	d011      	beq.n	400ed4 <pmc_mck_set_division+0x28>
  400eb0:	2804      	cmp	r0, #4
  400eb2:	d012      	beq.n	400eda <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400eb4:	2802      	cmp	r0, #2
  400eb6:	bf0c      	ite	eq
  400eb8:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400ebc:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400ebe:	4a08      	ldr	r2, [pc, #32]	; (400ee0 <pmc_mck_set_division+0x34>)
  400ec0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400ec6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400ec8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400eca:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ecc:	f013 0f08 	tst.w	r3, #8
  400ed0:	d0fb      	beq.n	400eca <pmc_mck_set_division+0x1e>
}
  400ed2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400ed4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400ed8:	e7f1      	b.n	400ebe <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400eda:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400ede:	e7ee      	b.n	400ebe <pmc_mck_set_division+0x12>
  400ee0:	400e0600 	.word	0x400e0600

00400ee4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400ee4:	4a17      	ldr	r2, [pc, #92]	; (400f44 <pmc_switch_mck_to_pllack+0x60>)
  400ee6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400eec:	4318      	orrs	r0, r3
  400eee:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400ef0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ef2:	f013 0f08 	tst.w	r3, #8
  400ef6:	d10a      	bne.n	400f0e <pmc_switch_mck_to_pllack+0x2a>
  400ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400efc:	4911      	ldr	r1, [pc, #68]	; (400f44 <pmc_switch_mck_to_pllack+0x60>)
  400efe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f00:	f012 0f08 	tst.w	r2, #8
  400f04:	d103      	bne.n	400f0e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f06:	3b01      	subs	r3, #1
  400f08:	d1f9      	bne.n	400efe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400f0a:	2001      	movs	r0, #1
  400f0c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400f0e:	4a0d      	ldr	r2, [pc, #52]	; (400f44 <pmc_switch_mck_to_pllack+0x60>)
  400f10:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400f12:	f023 0303 	bic.w	r3, r3, #3
  400f16:	f043 0302 	orr.w	r3, r3, #2
  400f1a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400f1c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f1e:	f013 0f08 	tst.w	r3, #8
  400f22:	d10a      	bne.n	400f3a <pmc_switch_mck_to_pllack+0x56>
  400f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400f28:	4906      	ldr	r1, [pc, #24]	; (400f44 <pmc_switch_mck_to_pllack+0x60>)
  400f2a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400f2c:	f012 0f08 	tst.w	r2, #8
  400f30:	d105      	bne.n	400f3e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400f32:	3b01      	subs	r3, #1
  400f34:	d1f9      	bne.n	400f2a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400f36:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400f38:	4770      	bx	lr
	return 0;
  400f3a:	2000      	movs	r0, #0
  400f3c:	4770      	bx	lr
  400f3e:	2000      	movs	r0, #0
  400f40:	4770      	bx	lr
  400f42:	bf00      	nop
  400f44:	400e0600 	.word	0x400e0600

00400f48 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400f48:	b9a0      	cbnz	r0, 400f74 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f4a:	480e      	ldr	r0, [pc, #56]	; (400f84 <pmc_switch_mainck_to_xtal+0x3c>)
  400f4c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400f4e:	0209      	lsls	r1, r1, #8
  400f50:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400f52:	4a0d      	ldr	r2, [pc, #52]	; (400f88 <pmc_switch_mainck_to_xtal+0x40>)
  400f54:	401a      	ands	r2, r3
  400f56:	4b0d      	ldr	r3, [pc, #52]	; (400f8c <pmc_switch_mainck_to_xtal+0x44>)
  400f58:	4313      	orrs	r3, r2
  400f5a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400f5c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400f5e:	4602      	mov	r2, r0
  400f60:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400f62:	f013 0f01 	tst.w	r3, #1
  400f66:	d0fb      	beq.n	400f60 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400f68:	4a06      	ldr	r2, [pc, #24]	; (400f84 <pmc_switch_mainck_to_xtal+0x3c>)
  400f6a:	6a11      	ldr	r1, [r2, #32]
  400f6c:	4b08      	ldr	r3, [pc, #32]	; (400f90 <pmc_switch_mainck_to_xtal+0x48>)
  400f6e:	430b      	orrs	r3, r1
  400f70:	6213      	str	r3, [r2, #32]
  400f72:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f74:	4903      	ldr	r1, [pc, #12]	; (400f84 <pmc_switch_mainck_to_xtal+0x3c>)
  400f76:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400f78:	4a06      	ldr	r2, [pc, #24]	; (400f94 <pmc_switch_mainck_to_xtal+0x4c>)
  400f7a:	401a      	ands	r2, r3
  400f7c:	4b06      	ldr	r3, [pc, #24]	; (400f98 <pmc_switch_mainck_to_xtal+0x50>)
  400f7e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400f80:	620b      	str	r3, [r1, #32]
  400f82:	4770      	bx	lr
  400f84:	400e0600 	.word	0x400e0600
  400f88:	ffc8fffc 	.word	0xffc8fffc
  400f8c:	00370001 	.word	0x00370001
  400f90:	01370000 	.word	0x01370000
  400f94:	fec8fffc 	.word	0xfec8fffc
  400f98:	01370002 	.word	0x01370002

00400f9c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400f9c:	4b02      	ldr	r3, [pc, #8]	; (400fa8 <pmc_osc_is_ready_mainck+0xc>)
  400f9e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fa0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400fa4:	4770      	bx	lr
  400fa6:	bf00      	nop
  400fa8:	400e0600 	.word	0x400e0600

00400fac <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400fac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400fb0:	4b01      	ldr	r3, [pc, #4]	; (400fb8 <pmc_disable_pllack+0xc>)
  400fb2:	629a      	str	r2, [r3, #40]	; 0x28
  400fb4:	4770      	bx	lr
  400fb6:	bf00      	nop
  400fb8:	400e0600 	.word	0x400e0600

00400fbc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400fbc:	4b02      	ldr	r3, [pc, #8]	; (400fc8 <pmc_is_locked_pllack+0xc>)
  400fbe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400fc0:	f000 0002 	and.w	r0, r0, #2
  400fc4:	4770      	bx	lr
  400fc6:	bf00      	nop
  400fc8:	400e0600 	.word	0x400e0600

00400fcc <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400fcc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400fd0:	4b05      	ldr	r3, [pc, #20]	; (400fe8 <pmc_enable_periph_clk+0x1c>)
  400fd2:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  400fd6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  400fda:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400fde:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400fe2:	2000      	movs	r0, #0
  400fe4:	4770      	bx	lr
  400fe6:	bf00      	nop
  400fe8:	400e0600 	.word	0x400e0600

00400fec <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  400fec:	4b28      	ldr	r3, [pc, #160]	; (401090 <twihs_set_speed+0xa4>)
  400fee:	4299      	cmp	r1, r3
  400ff0:	d84b      	bhi.n	40108a <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  400ff2:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  400ff6:	4299      	cmp	r1, r3
  400ff8:	d92d      	bls.n	401056 <twihs_set_speed+0x6a>
{
  400ffa:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  400ffc:	4c25      	ldr	r4, [pc, #148]	; (401094 <twihs_set_speed+0xa8>)
  400ffe:	fba4 3402 	umull	r3, r4, r4, r2
  401002:	0ba4      	lsrs	r4, r4, #14
  401004:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401006:	4b24      	ldr	r3, [pc, #144]	; (401098 <twihs_set_speed+0xac>)
  401008:	440b      	add	r3, r1
  40100a:	009b      	lsls	r3, r3, #2
  40100c:	fbb2 f2f3 	udiv	r2, r2, r3
  401010:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401012:	2cff      	cmp	r4, #255	; 0xff
  401014:	d91d      	bls.n	401052 <twihs_set_speed+0x66>
  401016:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401018:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  40101a:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40101c:	2cff      	cmp	r4, #255	; 0xff
  40101e:	d901      	bls.n	401024 <twihs_set_speed+0x38>
  401020:	2906      	cmp	r1, #6
  401022:	d9f9      	bls.n	401018 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401024:	2aff      	cmp	r2, #255	; 0xff
  401026:	d907      	bls.n	401038 <twihs_set_speed+0x4c>
  401028:	2906      	cmp	r1, #6
  40102a:	d805      	bhi.n	401038 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  40102c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40102e:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401030:	2aff      	cmp	r2, #255	; 0xff
  401032:	d901      	bls.n	401038 <twihs_set_speed+0x4c>
  401034:	2906      	cmp	r1, #6
  401036:	d9f9      	bls.n	40102c <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401038:	0213      	lsls	r3, r2, #8
  40103a:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  40103c:	0409      	lsls	r1, r1, #16
  40103e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401042:	430b      	orrs	r3, r1
  401044:	b2e4      	uxtb	r4, r4
  401046:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401048:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  40104a:	2000      	movs	r0, #0
}
  40104c:	f85d 4b04 	ldr.w	r4, [sp], #4
  401050:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401052:	2100      	movs	r1, #0
  401054:	e7e6      	b.n	401024 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401056:	0049      	lsls	r1, r1, #1
  401058:	fbb2 f2f1 	udiv	r2, r2, r1
  40105c:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40105e:	2aff      	cmp	r2, #255	; 0xff
  401060:	d911      	bls.n	401086 <twihs_set_speed+0x9a>
  401062:	2300      	movs	r3, #0
			ckdiv++;
  401064:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  401066:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401068:	2aff      	cmp	r2, #255	; 0xff
  40106a:	d901      	bls.n	401070 <twihs_set_speed+0x84>
  40106c:	2b06      	cmp	r3, #6
  40106e:	d9f9      	bls.n	401064 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401070:	0211      	lsls	r1, r2, #8
  401072:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  401074:	041b      	lsls	r3, r3, #16
  401076:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  40107a:	430b      	orrs	r3, r1
  40107c:	b2d2      	uxtb	r2, r2
  40107e:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401080:	6102      	str	r2, [r0, #16]
	return PASS;
  401082:	2000      	movs	r0, #0
  401084:	4770      	bx	lr
	uint32_t ckdiv = 0;
  401086:	2300      	movs	r3, #0
  401088:	e7f2      	b.n	401070 <twihs_set_speed+0x84>
		return FAIL;
  40108a:	2001      	movs	r0, #1
  40108c:	4770      	bx	lr
  40108e:	bf00      	nop
  401090:	00061a80 	.word	0x00061a80
  401094:	057619f1 	.word	0x057619f1
  401098:	3ffd1200 	.word	0x3ffd1200

0040109c <twihs_master_init>:
{
  40109c:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  40109e:	f04f 32ff 	mov.w	r2, #4294967295
  4010a2:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  4010a4:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  4010a6:	2280      	movs	r2, #128	; 0x80
  4010a8:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  4010aa:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  4010ac:	2208      	movs	r2, #8
  4010ae:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  4010b0:	2220      	movs	r2, #32
  4010b2:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  4010b4:	2204      	movs	r2, #4
  4010b6:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  4010b8:	680a      	ldr	r2, [r1, #0]
  4010ba:	6849      	ldr	r1, [r1, #4]
  4010bc:	4b03      	ldr	r3, [pc, #12]	; (4010cc <twihs_master_init+0x30>)
  4010be:	4798      	blx	r3
}
  4010c0:	2801      	cmp	r0, #1
  4010c2:	bf14      	ite	ne
  4010c4:	2000      	movne	r0, #0
  4010c6:	2001      	moveq	r0, #1
  4010c8:	bd08      	pop	{r3, pc}
  4010ca:	bf00      	nop
  4010cc:	00400fed 	.word	0x00400fed

004010d0 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  4010d0:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4010d2:	2b00      	cmp	r3, #0
  4010d4:	d04b      	beq.n	40116e <twihs_master_read+0x9e>
{
  4010d6:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4010d8:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4010da:	2600      	movs	r6, #0
  4010dc:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4010de:	684a      	ldr	r2, [r1, #4]
  4010e0:	0212      	lsls	r2, r2, #8
  4010e2:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  4010e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4010ea:	7c0d      	ldrb	r5, [r1, #16]
  4010ec:	042d      	lsls	r5, r5, #16
  4010ee:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4010f2:	432a      	orrs	r2, r5
  4010f4:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4010f6:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4010f8:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4010fa:	b15d      	cbz	r5, 401114 <twihs_master_read+0x44>
	val = addr[0];
  4010fc:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4010fe:	2d01      	cmp	r5, #1
  401100:	dd02      	ble.n	401108 <twihs_master_read+0x38>
		val |= addr[1];
  401102:	784e      	ldrb	r6, [r1, #1]
  401104:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401108:	2d02      	cmp	r5, #2
  40110a:	dd04      	ble.n	401116 <twihs_master_read+0x46>
		val |= addr[2];
  40110c:	7889      	ldrb	r1, [r1, #2]
  40110e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401112:	e000      	b.n	401116 <twihs_master_read+0x46>
		return 0;
  401114:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401116:	60c2      	str	r2, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401118:	2201      	movs	r2, #1
  40111a:	6002      	str	r2, [r0, #0]
  40111c:	e006      	b.n	40112c <twihs_master_read+0x5c>
		if (cnt == 1) {
  40111e:	2b01      	cmp	r3, #1
  401120:	d019      	beq.n	401156 <twihs_master_read+0x86>
		*buffer++ = p_twihs->TWIHS_RHR;
  401122:	6b02      	ldr	r2, [r0, #48]	; 0x30
  401124:	f804 2b01 	strb.w	r2, [r4], #1
	while (cnt > 0) {
  401128:	3b01      	subs	r3, #1
  40112a:	d018      	beq.n	40115e <twihs_master_read+0x8e>
		status = p_twihs->TWIHS_SR;
  40112c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40112e:	f412 7f80 	tst.w	r2, #256	; 0x100
  401132:	d122      	bne.n	40117a <twihs_master_read+0xaa>
		if (!(status & TWIHS_SR_RXRDY)) {
  401134:	f012 0f02 	tst.w	r2, #2
  401138:	d1f1      	bne.n	40111e <twihs_master_read+0x4e>
  40113a:	f247 5230 	movw	r2, #30000	; 0x7530
		status = p_twihs->TWIHS_SR;
  40113e:	6a01      	ldr	r1, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401140:	f411 7f80 	tst.w	r1, #256	; 0x100
  401144:	d115      	bne.n	401172 <twihs_master_read+0xa2>
		if (!timeout--) {
  401146:	3a01      	subs	r2, #1
  401148:	d015      	beq.n	401176 <twihs_master_read+0xa6>
		if (!(status & TWIHS_SR_RXRDY)) {
  40114a:	f011 0f02 	tst.w	r1, #2
  40114e:	d1e6      	bne.n	40111e <twihs_master_read+0x4e>
	while (cnt > 0) {
  401150:	2b00      	cmp	r3, #0
  401152:	d1f4      	bne.n	40113e <twihs_master_read+0x6e>
  401154:	e003      	b.n	40115e <twihs_master_read+0x8e>
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  401156:	2302      	movs	r3, #2
  401158:	6003      	str	r3, [r0, #0]
		*buffer++ = p_twihs->TWIHS_RHR;
  40115a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40115c:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40115e:	6a03      	ldr	r3, [r0, #32]
  401160:	f013 0f01 	tst.w	r3, #1
  401164:	d0fb      	beq.n	40115e <twihs_master_read+0x8e>
	p_twihs->TWIHS_SR;
  401166:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401168:	2000      	movs	r0, #0
}
  40116a:	bc70      	pop	{r4, r5, r6}
  40116c:	4770      	bx	lr
		return TWIHS_INVALID_ARGUMENT;
  40116e:	2001      	movs	r0, #1
  401170:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401172:	2005      	movs	r0, #5
  401174:	e7f9      	b.n	40116a <twihs_master_read+0x9a>
			return TWIHS_ERROR_TIMEOUT;
  401176:	2009      	movs	r0, #9
  401178:	e7f7      	b.n	40116a <twihs_master_read+0x9a>
			return TWIHS_RECEIVE_NACK;
  40117a:	2005      	movs	r0, #5
  40117c:	e7f5      	b.n	40116a <twihs_master_read+0x9a>

0040117e <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  40117e:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401180:	2b00      	cmp	r3, #0
  401182:	d043      	beq.n	40120c <twihs_master_write+0x8e>
{
  401184:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401186:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401188:	2600      	movs	r6, #0
  40118a:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40118c:	7c0a      	ldrb	r2, [r1, #16]
  40118e:	0412      	lsls	r2, r2, #16
  401190:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401194:	684d      	ldr	r5, [r1, #4]
  401196:	022d      	lsls	r5, r5, #8
  401198:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  40119c:	432a      	orrs	r2, r5
  40119e:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4011a0:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4011a2:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4011a4:	b15d      	cbz	r5, 4011be <twihs_master_write+0x40>
	val = addr[0];
  4011a6:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  4011a8:	2d01      	cmp	r5, #1
  4011aa:	dd02      	ble.n	4011b2 <twihs_master_write+0x34>
		val |= addr[1];
  4011ac:	784e      	ldrb	r6, [r1, #1]
  4011ae:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  4011b2:	2d02      	cmp	r5, #2
  4011b4:	dd04      	ble.n	4011c0 <twihs_master_write+0x42>
		val |= addr[2];
  4011b6:	7889      	ldrb	r1, [r1, #2]
  4011b8:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  4011bc:	e000      	b.n	4011c0 <twihs_master_write+0x42>
		return 0;
  4011be:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4011c0:	60c2      	str	r2, [r0, #12]
  4011c2:	e004      	b.n	4011ce <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  4011c4:	f814 2b01 	ldrb.w	r2, [r4], #1
  4011c8:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  4011ca:	3b01      	subs	r3, #1
  4011cc:	d00f      	beq.n	4011ee <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  4011ce:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4011d0:	f412 7f80 	tst.w	r2, #256	; 0x100
  4011d4:	d11e      	bne.n	401214 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  4011d6:	f012 0f04 	tst.w	r2, #4
  4011da:	d1f3      	bne.n	4011c4 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  4011dc:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4011de:	f412 7f80 	tst.w	r2, #256	; 0x100
  4011e2:	d115      	bne.n	401210 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  4011e4:	f012 0f04 	tst.w	r2, #4
  4011e8:	d1ec      	bne.n	4011c4 <twihs_master_write+0x46>
	while (cnt > 0) {
  4011ea:	2b00      	cmp	r3, #0
  4011ec:	d1f6      	bne.n	4011dc <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4011ee:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4011f0:	f413 7f80 	tst.w	r3, #256	; 0x100
  4011f4:	d111      	bne.n	40121a <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4011f6:	f013 0f04 	tst.w	r3, #4
  4011fa:	d0f8      	beq.n	4011ee <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4011fc:	2302      	movs	r3, #2
  4011fe:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  401200:	6a03      	ldr	r3, [r0, #32]
  401202:	f013 0f01 	tst.w	r3, #1
  401206:	d0fb      	beq.n	401200 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401208:	2000      	movs	r0, #0
  40120a:	e004      	b.n	401216 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  40120c:	2001      	movs	r0, #1
  40120e:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401210:	2005      	movs	r0, #5
  401212:	e000      	b.n	401216 <twihs_master_write+0x98>
  401214:	2005      	movs	r0, #5
}
  401216:	bc70      	pop	{r4, r5, r6}
  401218:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40121a:	2005      	movs	r0, #5
  40121c:	e7fb      	b.n	401216 <twihs_master_write+0x98>
	...

00401220 <twihs_probe>:
{
  401220:	b500      	push	{lr}
  401222:	b087      	sub	sp, #28
	uint8_t data = 0;
  401224:	2300      	movs	r3, #0
  401226:	aa06      	add	r2, sp, #24
  401228:	f802 3d15 	strb.w	r3, [r2, #-21]!
	packet.buffer = &data;
  40122c:	9203      	str	r2, [sp, #12]
	packet.length = 1;
  40122e:	2201      	movs	r2, #1
  401230:	9204      	str	r2, [sp, #16]
	packet.chip = (uint32_t) uc_slave_addr;
  401232:	f88d 1014 	strb.w	r1, [sp, #20]
	packet.addr[0] = 0;
  401236:	f88d 3004 	strb.w	r3, [sp, #4]
	packet.addr_length = 0;
  40123a:	9302      	str	r3, [sp, #8]
	return (twihs_master_write(p_twihs, &packet));
  40123c:	a901      	add	r1, sp, #4
  40123e:	4b02      	ldr	r3, [pc, #8]	; (401248 <twihs_probe+0x28>)
  401240:	4798      	blx	r3
}
  401242:	b007      	add	sp, #28
  401244:	f85d fb04 	ldr.w	pc, [sp], #4
  401248:	0040117f 	.word	0x0040117f

0040124c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40124c:	6943      	ldr	r3, [r0, #20]
  40124e:	f013 0f02 	tst.w	r3, #2
  401252:	d002      	beq.n	40125a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401254:	61c1      	str	r1, [r0, #28]
	return 0;
  401256:	2000      	movs	r0, #0
  401258:	4770      	bx	lr
		return 1;
  40125a:	2001      	movs	r0, #1
}
  40125c:	4770      	bx	lr

0040125e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40125e:	6943      	ldr	r3, [r0, #20]
  401260:	f013 0f01 	tst.w	r3, #1
  401264:	d003      	beq.n	40126e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401266:	6983      	ldr	r3, [r0, #24]
  401268:	700b      	strb	r3, [r1, #0]
	return 0;
  40126a:	2000      	movs	r0, #0
  40126c:	4770      	bx	lr
		return 1;
  40126e:	2001      	movs	r0, #1
}
  401270:	4770      	bx	lr

00401272 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  401272:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  401274:	010b      	lsls	r3, r1, #4
  401276:	4293      	cmp	r3, r2
  401278:	d914      	bls.n	4012a4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40127a:	00c9      	lsls	r1, r1, #3
  40127c:	084b      	lsrs	r3, r1, #1
  40127e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401282:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401286:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401288:	1e5c      	subs	r4, r3, #1
  40128a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  40128e:	428c      	cmp	r4, r1
  401290:	d901      	bls.n	401296 <usart_set_async_baudrate+0x24>
		return 1;
  401292:	2001      	movs	r0, #1
  401294:	e017      	b.n	4012c6 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401296:	6841      	ldr	r1, [r0, #4]
  401298:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  40129c:	6041      	str	r1, [r0, #4]
  40129e:	e00c      	b.n	4012ba <usart_set_async_baudrate+0x48>
		return 1;
  4012a0:	2001      	movs	r0, #1
  4012a2:	e010      	b.n	4012c6 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4012a4:	0859      	lsrs	r1, r3, #1
  4012a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4012aa:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4012ae:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4012b0:	1e5c      	subs	r4, r3, #1
  4012b2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4012b6:	428c      	cmp	r4, r1
  4012b8:	d8f2      	bhi.n	4012a0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4012ba:	0412      	lsls	r2, r2, #16
  4012bc:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4012c0:	431a      	orrs	r2, r3
  4012c2:	6202      	str	r2, [r0, #32]

	return 0;
  4012c4:	2000      	movs	r0, #0
}
  4012c6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4012ca:	4770      	bx	lr

004012cc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4012cc:	4b08      	ldr	r3, [pc, #32]	; (4012f0 <usart_reset+0x24>)
  4012ce:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  4012d2:	2300      	movs	r3, #0
  4012d4:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  4012d6:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  4012d8:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  4012da:	2388      	movs	r3, #136	; 0x88
  4012dc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  4012de:	2324      	movs	r3, #36	; 0x24
  4012e0:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  4012e2:	f44f 7380 	mov.w	r3, #256	; 0x100
  4012e6:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  4012e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  4012ec:	6003      	str	r3, [r0, #0]
  4012ee:	4770      	bx	lr
  4012f0:	55534100 	.word	0x55534100

004012f4 <usart_init_rs232>:
{
  4012f4:	b570      	push	{r4, r5, r6, lr}
  4012f6:	4605      	mov	r5, r0
  4012f8:	460c      	mov	r4, r1
  4012fa:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4012fc:	4b0f      	ldr	r3, [pc, #60]	; (40133c <usart_init_rs232+0x48>)
  4012fe:	4798      	blx	r3
	ul_reg_val = 0;
  401300:	2200      	movs	r2, #0
  401302:	4b0f      	ldr	r3, [pc, #60]	; (401340 <usart_init_rs232+0x4c>)
  401304:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401306:	b1a4      	cbz	r4, 401332 <usart_init_rs232+0x3e>
  401308:	4632      	mov	r2, r6
  40130a:	6821      	ldr	r1, [r4, #0]
  40130c:	4628      	mov	r0, r5
  40130e:	4b0d      	ldr	r3, [pc, #52]	; (401344 <usart_init_rs232+0x50>)
  401310:	4798      	blx	r3
  401312:	4602      	mov	r2, r0
  401314:	b978      	cbnz	r0, 401336 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401316:	6863      	ldr	r3, [r4, #4]
  401318:	68a1      	ldr	r1, [r4, #8]
  40131a:	430b      	orrs	r3, r1
  40131c:	6921      	ldr	r1, [r4, #16]
  40131e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401320:	68e1      	ldr	r1, [r4, #12]
  401322:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401324:	4906      	ldr	r1, [pc, #24]	; (401340 <usart_init_rs232+0x4c>)
  401326:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401328:	6869      	ldr	r1, [r5, #4]
  40132a:	430b      	orrs	r3, r1
  40132c:	606b      	str	r3, [r5, #4]
}
  40132e:	4610      	mov	r0, r2
  401330:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401332:	2201      	movs	r2, #1
  401334:	e7fb      	b.n	40132e <usart_init_rs232+0x3a>
  401336:	2201      	movs	r2, #1
  401338:	e7f9      	b.n	40132e <usart_init_rs232+0x3a>
  40133a:	bf00      	nop
  40133c:	004012cd 	.word	0x004012cd
  401340:	20400a4c 	.word	0x20400a4c
  401344:	00401273 	.word	0x00401273

00401348 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401348:	2340      	movs	r3, #64	; 0x40
  40134a:	6003      	str	r3, [r0, #0]
  40134c:	4770      	bx	lr

0040134e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40134e:	2310      	movs	r3, #16
  401350:	6003      	str	r3, [r0, #0]
  401352:	4770      	bx	lr

00401354 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401354:	6943      	ldr	r3, [r0, #20]
  401356:	f013 0f02 	tst.w	r3, #2
  40135a:	d004      	beq.n	401366 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40135c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401360:	61c1      	str	r1, [r0, #28]
	return 0;
  401362:	2000      	movs	r0, #0
  401364:	4770      	bx	lr
		return 1;
  401366:	2001      	movs	r0, #1
}
  401368:	4770      	bx	lr

0040136a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40136a:	6943      	ldr	r3, [r0, #20]
  40136c:	f013 0f01 	tst.w	r3, #1
  401370:	d005      	beq.n	40137e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401372:	6983      	ldr	r3, [r0, #24]
  401374:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401378:	600b      	str	r3, [r1, #0]
	return 0;
  40137a:	2000      	movs	r0, #0
  40137c:	4770      	bx	lr
		return 1;
  40137e:	2001      	movs	r0, #1
}
  401380:	4770      	bx	lr

00401382 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401382:	e7fe      	b.n	401382 <Dummy_Handler>

00401384 <Reset_Handler>:
{
  401384:	b500      	push	{lr}
  401386:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401388:	4b25      	ldr	r3, [pc, #148]	; (401420 <Reset_Handler+0x9c>)
  40138a:	4a26      	ldr	r2, [pc, #152]	; (401424 <Reset_Handler+0xa0>)
  40138c:	429a      	cmp	r2, r3
  40138e:	d010      	beq.n	4013b2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401390:	4b25      	ldr	r3, [pc, #148]	; (401428 <Reset_Handler+0xa4>)
  401392:	4a23      	ldr	r2, [pc, #140]	; (401420 <Reset_Handler+0x9c>)
  401394:	429a      	cmp	r2, r3
  401396:	d20c      	bcs.n	4013b2 <Reset_Handler+0x2e>
  401398:	3b01      	subs	r3, #1
  40139a:	1a9b      	subs	r3, r3, r2
  40139c:	f023 0303 	bic.w	r3, r3, #3
  4013a0:	3304      	adds	r3, #4
  4013a2:	4413      	add	r3, r2
  4013a4:	491f      	ldr	r1, [pc, #124]	; (401424 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4013a6:	f851 0b04 	ldr.w	r0, [r1], #4
  4013aa:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4013ae:	429a      	cmp	r2, r3
  4013b0:	d1f9      	bne.n	4013a6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4013b2:	4b1e      	ldr	r3, [pc, #120]	; (40142c <Reset_Handler+0xa8>)
  4013b4:	4a1e      	ldr	r2, [pc, #120]	; (401430 <Reset_Handler+0xac>)
  4013b6:	429a      	cmp	r2, r3
  4013b8:	d20a      	bcs.n	4013d0 <Reset_Handler+0x4c>
  4013ba:	3b01      	subs	r3, #1
  4013bc:	1a9b      	subs	r3, r3, r2
  4013be:	f023 0303 	bic.w	r3, r3, #3
  4013c2:	3304      	adds	r3, #4
  4013c4:	4413      	add	r3, r2
                *pDest++ = 0;
  4013c6:	2100      	movs	r1, #0
  4013c8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4013cc:	4293      	cmp	r3, r2
  4013ce:	d1fb      	bne.n	4013c8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4013d0:	4a18      	ldr	r2, [pc, #96]	; (401434 <Reset_Handler+0xb0>)
  4013d2:	4b19      	ldr	r3, [pc, #100]	; (401438 <Reset_Handler+0xb4>)
  4013d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  4013d8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4013da:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4013de:	fab3 f383 	clz	r3, r3
  4013e2:	095b      	lsrs	r3, r3, #5
  4013e4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4013e6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4013e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4013ec:	2200      	movs	r2, #0
  4013ee:	4b13      	ldr	r3, [pc, #76]	; (40143c <Reset_Handler+0xb8>)
  4013f0:	701a      	strb	r2, [r3, #0]
	return flags;
  4013f2:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4013f4:	4a12      	ldr	r2, [pc, #72]	; (401440 <Reset_Handler+0xbc>)
  4013f6:	6813      	ldr	r3, [r2, #0]
  4013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4013fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  4013fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401402:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401406:	b129      	cbz	r1, 401414 <Reset_Handler+0x90>
		cpu_irq_enable();
  401408:	2201      	movs	r2, #1
  40140a:	4b0c      	ldr	r3, [pc, #48]	; (40143c <Reset_Handler+0xb8>)
  40140c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  40140e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401412:	b662      	cpsie	i
        __libc_init_array();
  401414:	4b0b      	ldr	r3, [pc, #44]	; (401444 <Reset_Handler+0xc0>)
  401416:	4798      	blx	r3
        main();
  401418:	4b0b      	ldr	r3, [pc, #44]	; (401448 <Reset_Handler+0xc4>)
  40141a:	4798      	blx	r3
  40141c:	e7fe      	b.n	40141c <Reset_Handler+0x98>
  40141e:	bf00      	nop
  401420:	20400000 	.word	0x20400000
  401424:	00409418 	.word	0x00409418
  401428:	204009c0 	.word	0x204009c0
  40142c:	20400c4c 	.word	0x20400c4c
  401430:	204009c0 	.word	0x204009c0
  401434:	e000ed00 	.word	0xe000ed00
  401438:	00400000 	.word	0x00400000
  40143c:	20400000 	.word	0x20400000
  401440:	e000ed88 	.word	0xe000ed88
  401444:	00405dc5 	.word	0x00405dc5
  401448:	00403cd5 	.word	0x00403cd5

0040144c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40144c:	4b3b      	ldr	r3, [pc, #236]	; (40153c <SystemCoreClockUpdate+0xf0>)
  40144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401450:	f003 0303 	and.w	r3, r3, #3
  401454:	2b01      	cmp	r3, #1
  401456:	d01d      	beq.n	401494 <SystemCoreClockUpdate+0x48>
  401458:	b183      	cbz	r3, 40147c <SystemCoreClockUpdate+0x30>
  40145a:	2b02      	cmp	r3, #2
  40145c:	d036      	beq.n	4014cc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40145e:	4b37      	ldr	r3, [pc, #220]	; (40153c <SystemCoreClockUpdate+0xf0>)
  401460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401462:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401466:	2b70      	cmp	r3, #112	; 0x70
  401468:	d05f      	beq.n	40152a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40146a:	4b34      	ldr	r3, [pc, #208]	; (40153c <SystemCoreClockUpdate+0xf0>)
  40146c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40146e:	4934      	ldr	r1, [pc, #208]	; (401540 <SystemCoreClockUpdate+0xf4>)
  401470:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401474:	680b      	ldr	r3, [r1, #0]
  401476:	40d3      	lsrs	r3, r2
  401478:	600b      	str	r3, [r1, #0]
  40147a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  40147c:	4b31      	ldr	r3, [pc, #196]	; (401544 <SystemCoreClockUpdate+0xf8>)
  40147e:	695b      	ldr	r3, [r3, #20]
  401480:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401484:	bf14      	ite	ne
  401486:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40148a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40148e:	4b2c      	ldr	r3, [pc, #176]	; (401540 <SystemCoreClockUpdate+0xf4>)
  401490:	601a      	str	r2, [r3, #0]
  401492:	e7e4      	b.n	40145e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401494:	4b29      	ldr	r3, [pc, #164]	; (40153c <SystemCoreClockUpdate+0xf0>)
  401496:	6a1b      	ldr	r3, [r3, #32]
  401498:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40149c:	d003      	beq.n	4014a6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40149e:	4a2a      	ldr	r2, [pc, #168]	; (401548 <SystemCoreClockUpdate+0xfc>)
  4014a0:	4b27      	ldr	r3, [pc, #156]	; (401540 <SystemCoreClockUpdate+0xf4>)
  4014a2:	601a      	str	r2, [r3, #0]
  4014a4:	e7db      	b.n	40145e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4014a6:	4a29      	ldr	r2, [pc, #164]	; (40154c <SystemCoreClockUpdate+0x100>)
  4014a8:	4b25      	ldr	r3, [pc, #148]	; (401540 <SystemCoreClockUpdate+0xf4>)
  4014aa:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4014ac:	4b23      	ldr	r3, [pc, #140]	; (40153c <SystemCoreClockUpdate+0xf0>)
  4014ae:	6a1b      	ldr	r3, [r3, #32]
  4014b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014b4:	2b10      	cmp	r3, #16
  4014b6:	d005      	beq.n	4014c4 <SystemCoreClockUpdate+0x78>
  4014b8:	2b20      	cmp	r3, #32
  4014ba:	d1d0      	bne.n	40145e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  4014bc:	4a22      	ldr	r2, [pc, #136]	; (401548 <SystemCoreClockUpdate+0xfc>)
  4014be:	4b20      	ldr	r3, [pc, #128]	; (401540 <SystemCoreClockUpdate+0xf4>)
  4014c0:	601a      	str	r2, [r3, #0]
          break;
  4014c2:	e7cc      	b.n	40145e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  4014c4:	4a22      	ldr	r2, [pc, #136]	; (401550 <SystemCoreClockUpdate+0x104>)
  4014c6:	4b1e      	ldr	r3, [pc, #120]	; (401540 <SystemCoreClockUpdate+0xf4>)
  4014c8:	601a      	str	r2, [r3, #0]
          break;
  4014ca:	e7c8      	b.n	40145e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4014cc:	4b1b      	ldr	r3, [pc, #108]	; (40153c <SystemCoreClockUpdate+0xf0>)
  4014ce:	6a1b      	ldr	r3, [r3, #32]
  4014d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4014d4:	d016      	beq.n	401504 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  4014d6:	4a1c      	ldr	r2, [pc, #112]	; (401548 <SystemCoreClockUpdate+0xfc>)
  4014d8:	4b19      	ldr	r3, [pc, #100]	; (401540 <SystemCoreClockUpdate+0xf4>)
  4014da:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  4014dc:	4b17      	ldr	r3, [pc, #92]	; (40153c <SystemCoreClockUpdate+0xf0>)
  4014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014e0:	f003 0303 	and.w	r3, r3, #3
  4014e4:	2b02      	cmp	r3, #2
  4014e6:	d1ba      	bne.n	40145e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4014e8:	4a14      	ldr	r2, [pc, #80]	; (40153c <SystemCoreClockUpdate+0xf0>)
  4014ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4014ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4014ee:	4814      	ldr	r0, [pc, #80]	; (401540 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4014f0:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4014f4:	6803      	ldr	r3, [r0, #0]
  4014f6:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4014fa:	b2d2      	uxtb	r2, r2
  4014fc:	fbb3 f3f2 	udiv	r3, r3, r2
  401500:	6003      	str	r3, [r0, #0]
  401502:	e7ac      	b.n	40145e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401504:	4a11      	ldr	r2, [pc, #68]	; (40154c <SystemCoreClockUpdate+0x100>)
  401506:	4b0e      	ldr	r3, [pc, #56]	; (401540 <SystemCoreClockUpdate+0xf4>)
  401508:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40150a:	4b0c      	ldr	r3, [pc, #48]	; (40153c <SystemCoreClockUpdate+0xf0>)
  40150c:	6a1b      	ldr	r3, [r3, #32]
  40150e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401512:	2b10      	cmp	r3, #16
  401514:	d005      	beq.n	401522 <SystemCoreClockUpdate+0xd6>
  401516:	2b20      	cmp	r3, #32
  401518:	d1e0      	bne.n	4014dc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40151a:	4a0b      	ldr	r2, [pc, #44]	; (401548 <SystemCoreClockUpdate+0xfc>)
  40151c:	4b08      	ldr	r3, [pc, #32]	; (401540 <SystemCoreClockUpdate+0xf4>)
  40151e:	601a      	str	r2, [r3, #0]
          break;
  401520:	e7dc      	b.n	4014dc <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401522:	4a0b      	ldr	r2, [pc, #44]	; (401550 <SystemCoreClockUpdate+0x104>)
  401524:	4b06      	ldr	r3, [pc, #24]	; (401540 <SystemCoreClockUpdate+0xf4>)
  401526:	601a      	str	r2, [r3, #0]
          break;
  401528:	e7d8      	b.n	4014dc <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40152a:	4a05      	ldr	r2, [pc, #20]	; (401540 <SystemCoreClockUpdate+0xf4>)
  40152c:	6813      	ldr	r3, [r2, #0]
  40152e:	4909      	ldr	r1, [pc, #36]	; (401554 <SystemCoreClockUpdate+0x108>)
  401530:	fba1 1303 	umull	r1, r3, r1, r3
  401534:	085b      	lsrs	r3, r3, #1
  401536:	6013      	str	r3, [r2, #0]
  401538:	4770      	bx	lr
  40153a:	bf00      	nop
  40153c:	400e0600 	.word	0x400e0600
  401540:	20400004 	.word	0x20400004
  401544:	400e1810 	.word	0x400e1810
  401548:	00b71b00 	.word	0x00b71b00
  40154c:	003d0900 	.word	0x003d0900
  401550:	007a1200 	.word	0x007a1200
  401554:	aaaaaaab 	.word	0xaaaaaaab

00401558 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401558:	4b16      	ldr	r3, [pc, #88]	; (4015b4 <system_init_flash+0x5c>)
  40155a:	4298      	cmp	r0, r3
  40155c:	d913      	bls.n	401586 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  40155e:	4b16      	ldr	r3, [pc, #88]	; (4015b8 <system_init_flash+0x60>)
  401560:	4298      	cmp	r0, r3
  401562:	d915      	bls.n	401590 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401564:	4b15      	ldr	r3, [pc, #84]	; (4015bc <system_init_flash+0x64>)
  401566:	4298      	cmp	r0, r3
  401568:	d916      	bls.n	401598 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40156a:	4b15      	ldr	r3, [pc, #84]	; (4015c0 <system_init_flash+0x68>)
  40156c:	4298      	cmp	r0, r3
  40156e:	d917      	bls.n	4015a0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401570:	4b14      	ldr	r3, [pc, #80]	; (4015c4 <system_init_flash+0x6c>)
  401572:	4298      	cmp	r0, r3
  401574:	d918      	bls.n	4015a8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401576:	4b14      	ldr	r3, [pc, #80]	; (4015c8 <system_init_flash+0x70>)
  401578:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40157a:	bf94      	ite	ls
  40157c:	4a13      	ldrls	r2, [pc, #76]	; (4015cc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40157e:	4a14      	ldrhi	r2, [pc, #80]	; (4015d0 <system_init_flash+0x78>)
  401580:	4b14      	ldr	r3, [pc, #80]	; (4015d4 <system_init_flash+0x7c>)
  401582:	601a      	str	r2, [r3, #0]
  401584:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401586:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40158a:	4b12      	ldr	r3, [pc, #72]	; (4015d4 <system_init_flash+0x7c>)
  40158c:	601a      	str	r2, [r3, #0]
  40158e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401590:	4a11      	ldr	r2, [pc, #68]	; (4015d8 <system_init_flash+0x80>)
  401592:	4b10      	ldr	r3, [pc, #64]	; (4015d4 <system_init_flash+0x7c>)
  401594:	601a      	str	r2, [r3, #0]
  401596:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401598:	4a10      	ldr	r2, [pc, #64]	; (4015dc <system_init_flash+0x84>)
  40159a:	4b0e      	ldr	r3, [pc, #56]	; (4015d4 <system_init_flash+0x7c>)
  40159c:	601a      	str	r2, [r3, #0]
  40159e:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4015a0:	4a0f      	ldr	r2, [pc, #60]	; (4015e0 <system_init_flash+0x88>)
  4015a2:	4b0c      	ldr	r3, [pc, #48]	; (4015d4 <system_init_flash+0x7c>)
  4015a4:	601a      	str	r2, [r3, #0]
  4015a6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4015a8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4015ac:	4b09      	ldr	r3, [pc, #36]	; (4015d4 <system_init_flash+0x7c>)
  4015ae:	601a      	str	r2, [r3, #0]
  4015b0:	4770      	bx	lr
  4015b2:	bf00      	nop
  4015b4:	015ef3bf 	.word	0x015ef3bf
  4015b8:	02bde77f 	.word	0x02bde77f
  4015bc:	041cdb3f 	.word	0x041cdb3f
  4015c0:	057bceff 	.word	0x057bceff
  4015c4:	06dac2bf 	.word	0x06dac2bf
  4015c8:	0839b67f 	.word	0x0839b67f
  4015cc:	04000500 	.word	0x04000500
  4015d0:	04000600 	.word	0x04000600
  4015d4:	400e0c00 	.word	0x400e0c00
  4015d8:	04000100 	.word	0x04000100
  4015dc:	04000200 	.word	0x04000200
  4015e0:	04000300 	.word	0x04000300

004015e4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  4015e4:	4b0a      	ldr	r3, [pc, #40]	; (401610 <_sbrk+0x2c>)
  4015e6:	681b      	ldr	r3, [r3, #0]
  4015e8:	b153      	cbz	r3, 401600 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  4015ea:	4b09      	ldr	r3, [pc, #36]	; (401610 <_sbrk+0x2c>)
  4015ec:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  4015ee:	181a      	adds	r2, r3, r0
  4015f0:	4908      	ldr	r1, [pc, #32]	; (401614 <_sbrk+0x30>)
  4015f2:	4291      	cmp	r1, r2
  4015f4:	db08      	blt.n	401608 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  4015f6:	4610      	mov	r0, r2
  4015f8:	4a05      	ldr	r2, [pc, #20]	; (401610 <_sbrk+0x2c>)
  4015fa:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  4015fc:	4618      	mov	r0, r3
  4015fe:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401600:	4a05      	ldr	r2, [pc, #20]	; (401618 <_sbrk+0x34>)
  401602:	4b03      	ldr	r3, [pc, #12]	; (401610 <_sbrk+0x2c>)
  401604:	601a      	str	r2, [r3, #0]
  401606:	e7f0      	b.n	4015ea <_sbrk+0x6>
		return (caddr_t) -1;	
  401608:	f04f 30ff 	mov.w	r0, #4294967295
}
  40160c:	4770      	bx	lr
  40160e:	bf00      	nop
  401610:	20400a50 	.word	0x20400a50
  401614:	2045fffc 	.word	0x2045fffc
  401618:	20402e50 	.word	0x20402e50

0040161c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  40161c:	f04f 30ff 	mov.w	r0, #4294967295
  401620:	4770      	bx	lr

00401622 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401626:	604b      	str	r3, [r1, #4]

	return 0;
}
  401628:	2000      	movs	r0, #0
  40162a:	4770      	bx	lr

0040162c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  40162c:	2001      	movs	r0, #1
  40162e:	4770      	bx	lr

00401630 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401630:	2000      	movs	r0, #0
  401632:	4770      	bx	lr

00401634 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401634:	f100 0308 	add.w	r3, r0, #8
  401638:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40163a:	f04f 32ff 	mov.w	r2, #4294967295
  40163e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401640:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401642:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401644:	2300      	movs	r3, #0
  401646:	6003      	str	r3, [r0, #0]
  401648:	4770      	bx	lr

0040164a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  40164a:	2300      	movs	r3, #0
  40164c:	6103      	str	r3, [r0, #16]
  40164e:	4770      	bx	lr

00401650 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401650:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401652:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401654:	689a      	ldr	r2, [r3, #8]
  401656:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401658:	689a      	ldr	r2, [r3, #8]
  40165a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  40165c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40165e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401660:	6803      	ldr	r3, [r0, #0]
  401662:	3301      	adds	r3, #1
  401664:	6003      	str	r3, [r0, #0]
  401666:	4770      	bx	lr

00401668 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401668:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  40166a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  40166c:	f1b5 3fff 	cmp.w	r5, #4294967295
  401670:	d002      	beq.n	401678 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401672:	f100 0208 	add.w	r2, r0, #8
  401676:	e002      	b.n	40167e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401678:	6902      	ldr	r2, [r0, #16]
  40167a:	e004      	b.n	401686 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40167c:	461a      	mov	r2, r3
  40167e:	6853      	ldr	r3, [r2, #4]
  401680:	681c      	ldr	r4, [r3, #0]
  401682:	42a5      	cmp	r5, r4
  401684:	d2fa      	bcs.n	40167c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401686:	6853      	ldr	r3, [r2, #4]
  401688:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  40168a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  40168c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40168e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401690:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401692:	6803      	ldr	r3, [r0, #0]
  401694:	3301      	adds	r3, #1
  401696:	6003      	str	r3, [r0, #0]
}
  401698:	bc30      	pop	{r4, r5}
  40169a:	4770      	bx	lr

0040169c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  40169c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40169e:	6842      	ldr	r2, [r0, #4]
  4016a0:	6881      	ldr	r1, [r0, #8]
  4016a2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4016a4:	6882      	ldr	r2, [r0, #8]
  4016a6:	6841      	ldr	r1, [r0, #4]
  4016a8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4016aa:	685a      	ldr	r2, [r3, #4]
  4016ac:	4290      	cmp	r0, r2
  4016ae:	d006      	beq.n	4016be <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4016b0:	2200      	movs	r2, #0
  4016b2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4016b4:	681a      	ldr	r2, [r3, #0]
  4016b6:	3a01      	subs	r2, #1
  4016b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4016ba:	6818      	ldr	r0, [r3, #0]
}
  4016bc:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4016be:	6882      	ldr	r2, [r0, #8]
  4016c0:	605a      	str	r2, [r3, #4]
  4016c2:	e7f5      	b.n	4016b0 <uxListRemove+0x14>

004016c4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  4016c4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  4016c6:	2300      	movs	r3, #0
  4016c8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4016ca:	4b0f      	ldr	r3, [pc, #60]	; (401708 <prvTaskExitError+0x44>)
  4016cc:	681b      	ldr	r3, [r3, #0]
  4016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
  4016d2:	d00a      	beq.n	4016ea <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4016d4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016d8:	b672      	cpsid	i
  4016da:	f383 8811 	msr	BASEPRI, r3
  4016de:	f3bf 8f6f 	isb	sy
  4016e2:	f3bf 8f4f 	dsb	sy
  4016e6:	b662      	cpsie	i
  4016e8:	e7fe      	b.n	4016e8 <prvTaskExitError+0x24>
  4016ea:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ee:	b672      	cpsid	i
  4016f0:	f383 8811 	msr	BASEPRI, r3
  4016f4:	f3bf 8f6f 	isb	sy
  4016f8:	f3bf 8f4f 	dsb	sy
  4016fc:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  4016fe:	9b01      	ldr	r3, [sp, #4]
  401700:	2b00      	cmp	r3, #0
  401702:	d0fc      	beq.n	4016fe <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  401704:	b002      	add	sp, #8
  401706:	4770      	bx	lr
  401708:	20400008 	.word	0x20400008

0040170c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  40170c:	4808      	ldr	r0, [pc, #32]	; (401730 <prvPortStartFirstTask+0x24>)
  40170e:	6800      	ldr	r0, [r0, #0]
  401710:	6800      	ldr	r0, [r0, #0]
  401712:	f380 8808 	msr	MSP, r0
  401716:	f04f 0000 	mov.w	r0, #0
  40171a:	f380 8814 	msr	CONTROL, r0
  40171e:	b662      	cpsie	i
  401720:	b661      	cpsie	f
  401722:	f3bf 8f4f 	dsb	sy
  401726:	f3bf 8f6f 	isb	sy
  40172a:	df00      	svc	0
  40172c:	bf00      	nop
  40172e:	0000      	.short	0x0000
  401730:	e000ed08 	.word	0xe000ed08

00401734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401744 <vPortEnableVFP+0x10>
  401738:	6801      	ldr	r1, [r0, #0]
  40173a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40173e:	6001      	str	r1, [r0, #0]
  401740:	4770      	bx	lr
  401742:	0000      	.short	0x0000
  401744:	e000ed88 	.word	0xe000ed88

00401748 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40174c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  401750:	f021 0101 	bic.w	r1, r1, #1
  401754:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401758:	4b05      	ldr	r3, [pc, #20]	; (401770 <pxPortInitialiseStack+0x28>)
  40175a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40175e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  401762:	f06f 0302 	mvn.w	r3, #2
  401766:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40176a:	3844      	subs	r0, #68	; 0x44
  40176c:	4770      	bx	lr
  40176e:	bf00      	nop
  401770:	004016c5 	.word	0x004016c5
	...

00401780 <SVC_Handler>:
	__asm volatile (
  401780:	4b07      	ldr	r3, [pc, #28]	; (4017a0 <pxCurrentTCBConst2>)
  401782:	6819      	ldr	r1, [r3, #0]
  401784:	6808      	ldr	r0, [r1, #0]
  401786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40178a:	f380 8809 	msr	PSP, r0
  40178e:	f3bf 8f6f 	isb	sy
  401792:	f04f 0000 	mov.w	r0, #0
  401796:	f380 8811 	msr	BASEPRI, r0
  40179a:	4770      	bx	lr
  40179c:	f3af 8000 	nop.w

004017a0 <pxCurrentTCBConst2>:
  4017a0:	20400a5c 	.word	0x20400a5c

004017a4 <vPortEnterCritical>:
  4017a4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017a8:	b672      	cpsid	i
  4017aa:	f383 8811 	msr	BASEPRI, r3
  4017ae:	f3bf 8f6f 	isb	sy
  4017b2:	f3bf 8f4f 	dsb	sy
  4017b6:	b662      	cpsie	i
	uxCriticalNesting++;
  4017b8:	4a0b      	ldr	r2, [pc, #44]	; (4017e8 <vPortEnterCritical+0x44>)
  4017ba:	6813      	ldr	r3, [r2, #0]
  4017bc:	3301      	adds	r3, #1
  4017be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4017c0:	2b01      	cmp	r3, #1
  4017c2:	d10f      	bne.n	4017e4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4017c4:	4b09      	ldr	r3, [pc, #36]	; (4017ec <vPortEnterCritical+0x48>)
  4017c6:	681b      	ldr	r3, [r3, #0]
  4017c8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4017cc:	d00a      	beq.n	4017e4 <vPortEnterCritical+0x40>
  4017ce:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017d2:	b672      	cpsid	i
  4017d4:	f383 8811 	msr	BASEPRI, r3
  4017d8:	f3bf 8f6f 	isb	sy
  4017dc:	f3bf 8f4f 	dsb	sy
  4017e0:	b662      	cpsie	i
  4017e2:	e7fe      	b.n	4017e2 <vPortEnterCritical+0x3e>
  4017e4:	4770      	bx	lr
  4017e6:	bf00      	nop
  4017e8:	20400008 	.word	0x20400008
  4017ec:	e000ed04 	.word	0xe000ed04

004017f0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4017f0:	4b0a      	ldr	r3, [pc, #40]	; (40181c <vPortExitCritical+0x2c>)
  4017f2:	681b      	ldr	r3, [r3, #0]
  4017f4:	b953      	cbnz	r3, 40180c <vPortExitCritical+0x1c>
  4017f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017fa:	b672      	cpsid	i
  4017fc:	f383 8811 	msr	BASEPRI, r3
  401800:	f3bf 8f6f 	isb	sy
  401804:	f3bf 8f4f 	dsb	sy
  401808:	b662      	cpsie	i
  40180a:	e7fe      	b.n	40180a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40180c:	3b01      	subs	r3, #1
  40180e:	4a03      	ldr	r2, [pc, #12]	; (40181c <vPortExitCritical+0x2c>)
  401810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401812:	b90b      	cbnz	r3, 401818 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401814:	f383 8811 	msr	BASEPRI, r3
  401818:	4770      	bx	lr
  40181a:	bf00      	nop
  40181c:	20400008 	.word	0x20400008

00401820 <PendSV_Handler>:
	__asm volatile
  401820:	f3ef 8009 	mrs	r0, PSP
  401824:	f3bf 8f6f 	isb	sy
  401828:	4b15      	ldr	r3, [pc, #84]	; (401880 <pxCurrentTCBConst>)
  40182a:	681a      	ldr	r2, [r3, #0]
  40182c:	f01e 0f10 	tst.w	lr, #16
  401830:	bf08      	it	eq
  401832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40183a:	6010      	str	r0, [r2, #0]
  40183c:	e92d 0009 	stmdb	sp!, {r0, r3}
  401840:	f04f 0080 	mov.w	r0, #128	; 0x80
  401844:	b672      	cpsid	i
  401846:	f380 8811 	msr	BASEPRI, r0
  40184a:	f3bf 8f4f 	dsb	sy
  40184e:	f3bf 8f6f 	isb	sy
  401852:	b662      	cpsie	i
  401854:	f001 f97c 	bl	402b50 <vTaskSwitchContext>
  401858:	f04f 0000 	mov.w	r0, #0
  40185c:	f380 8811 	msr	BASEPRI, r0
  401860:	bc09      	pop	{r0, r3}
  401862:	6819      	ldr	r1, [r3, #0]
  401864:	6808      	ldr	r0, [r1, #0]
  401866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40186a:	f01e 0f10 	tst.w	lr, #16
  40186e:	bf08      	it	eq
  401870:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401874:	f380 8809 	msr	PSP, r0
  401878:	f3bf 8f6f 	isb	sy
  40187c:	4770      	bx	lr
  40187e:	bf00      	nop

00401880 <pxCurrentTCBConst>:
  401880:	20400a5c 	.word	0x20400a5c

00401884 <SysTick_Handler>:
{
  401884:	b508      	push	{r3, lr}
	__asm volatile
  401886:	f04f 0380 	mov.w	r3, #128	; 0x80
  40188a:	b672      	cpsid	i
  40188c:	f383 8811 	msr	BASEPRI, r3
  401890:	f3bf 8f6f 	isb	sy
  401894:	f3bf 8f4f 	dsb	sy
  401898:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40189a:	4b05      	ldr	r3, [pc, #20]	; (4018b0 <SysTick_Handler+0x2c>)
  40189c:	4798      	blx	r3
  40189e:	b118      	cbz	r0, 4018a8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4018a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4018a4:	4b03      	ldr	r3, [pc, #12]	; (4018b4 <SysTick_Handler+0x30>)
  4018a6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4018a8:	2300      	movs	r3, #0
  4018aa:	f383 8811 	msr	BASEPRI, r3
  4018ae:	bd08      	pop	{r3, pc}
  4018b0:	00402895 	.word	0x00402895
  4018b4:	e000ed04 	.word	0xe000ed04

004018b8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4018b8:	4b05      	ldr	r3, [pc, #20]	; (4018d0 <vPortSetupTimerInterrupt+0x18>)
  4018ba:	2200      	movs	r2, #0
  4018bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4018be:	4905      	ldr	r1, [pc, #20]	; (4018d4 <vPortSetupTimerInterrupt+0x1c>)
  4018c0:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4018c2:	4905      	ldr	r1, [pc, #20]	; (4018d8 <vPortSetupTimerInterrupt+0x20>)
  4018c4:	4a05      	ldr	r2, [pc, #20]	; (4018dc <vPortSetupTimerInterrupt+0x24>)
  4018c6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4018c8:	2207      	movs	r2, #7
  4018ca:	601a      	str	r2, [r3, #0]
  4018cc:	4770      	bx	lr
  4018ce:	bf00      	nop
  4018d0:	e000e010 	.word	0xe000e010
  4018d4:	e000e018 	.word	0xe000e018
  4018d8:	000927bf 	.word	0x000927bf
  4018dc:	e000e014 	.word	0xe000e014

004018e0 <xPortStartScheduler>:
{
  4018e0:	b510      	push	{r4, lr}
  4018e2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4018e4:	4b2e      	ldr	r3, [pc, #184]	; (4019a0 <xPortStartScheduler+0xc0>)
  4018e6:	781a      	ldrb	r2, [r3, #0]
  4018e8:	b2d2      	uxtb	r2, r2
  4018ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4018ec:	22ff      	movs	r2, #255	; 0xff
  4018ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4018f0:	781b      	ldrb	r3, [r3, #0]
  4018f2:	b2db      	uxtb	r3, r3
  4018f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4018f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4018fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401900:	4a28      	ldr	r2, [pc, #160]	; (4019a4 <xPortStartScheduler+0xc4>)
  401902:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401904:	2207      	movs	r2, #7
  401906:	4b28      	ldr	r3, [pc, #160]	; (4019a8 <xPortStartScheduler+0xc8>)
  401908:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40190a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40190e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401912:	d012      	beq.n	40193a <xPortStartScheduler+0x5a>
  401914:	2306      	movs	r3, #6
  401916:	e000      	b.n	40191a <xPortStartScheduler+0x3a>
  401918:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40191a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40191e:	0052      	lsls	r2, r2, #1
  401920:	b2d2      	uxtb	r2, r2
  401922:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401926:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40192a:	1e59      	subs	r1, r3, #1
  40192c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401930:	d1f2      	bne.n	401918 <xPortStartScheduler+0x38>
  401932:	4a1d      	ldr	r2, [pc, #116]	; (4019a8 <xPortStartScheduler+0xc8>)
  401934:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401936:	2b04      	cmp	r3, #4
  401938:	d00a      	beq.n	401950 <xPortStartScheduler+0x70>
	__asm volatile
  40193a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40193e:	b672      	cpsid	i
  401940:	f383 8811 	msr	BASEPRI, r3
  401944:	f3bf 8f6f 	isb	sy
  401948:	f3bf 8f4f 	dsb	sy
  40194c:	b662      	cpsie	i
  40194e:	e7fe      	b.n	40194e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401950:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401952:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401956:	4a14      	ldr	r2, [pc, #80]	; (4019a8 <xPortStartScheduler+0xc8>)
  401958:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40195a:	9b01      	ldr	r3, [sp, #4]
  40195c:	b2db      	uxtb	r3, r3
  40195e:	4a10      	ldr	r2, [pc, #64]	; (4019a0 <xPortStartScheduler+0xc0>)
  401960:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401962:	4b12      	ldr	r3, [pc, #72]	; (4019ac <xPortStartScheduler+0xcc>)
  401964:	681a      	ldr	r2, [r3, #0]
  401966:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40196a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40196c:	681a      	ldr	r2, [r3, #0]
  40196e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401972:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401974:	4b0e      	ldr	r3, [pc, #56]	; (4019b0 <xPortStartScheduler+0xd0>)
  401976:	4798      	blx	r3
	uxCriticalNesting = 0;
  401978:	2400      	movs	r4, #0
  40197a:	4b0e      	ldr	r3, [pc, #56]	; (4019b4 <xPortStartScheduler+0xd4>)
  40197c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40197e:	4b0e      	ldr	r3, [pc, #56]	; (4019b8 <xPortStartScheduler+0xd8>)
  401980:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401982:	4a0e      	ldr	r2, [pc, #56]	; (4019bc <xPortStartScheduler+0xdc>)
  401984:	6813      	ldr	r3, [r2, #0]
  401986:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40198a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40198c:	4b0c      	ldr	r3, [pc, #48]	; (4019c0 <xPortStartScheduler+0xe0>)
  40198e:	4798      	blx	r3
	vTaskSwitchContext();
  401990:	4b0c      	ldr	r3, [pc, #48]	; (4019c4 <xPortStartScheduler+0xe4>)
  401992:	4798      	blx	r3
	prvTaskExitError();
  401994:	4b0c      	ldr	r3, [pc, #48]	; (4019c8 <xPortStartScheduler+0xe8>)
  401996:	4798      	blx	r3
}
  401998:	4620      	mov	r0, r4
  40199a:	b002      	add	sp, #8
  40199c:	bd10      	pop	{r4, pc}
  40199e:	bf00      	nop
  4019a0:	e000e400 	.word	0xe000e400
  4019a4:	20400a54 	.word	0x20400a54
  4019a8:	20400a58 	.word	0x20400a58
  4019ac:	e000ed20 	.word	0xe000ed20
  4019b0:	004018b9 	.word	0x004018b9
  4019b4:	20400008 	.word	0x20400008
  4019b8:	00401735 	.word	0x00401735
  4019bc:	e000ef34 	.word	0xe000ef34
  4019c0:	0040170d 	.word	0x0040170d
  4019c4:	00402b51 	.word	0x00402b51
  4019c8:	004016c5 	.word	0x004016c5

004019cc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4019cc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4019d0:	2b0f      	cmp	r3, #15
  4019d2:	d911      	bls.n	4019f8 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4019d4:	4a12      	ldr	r2, [pc, #72]	; (401a20 <vPortValidateInterruptPriority+0x54>)
  4019d6:	5c9b      	ldrb	r3, [r3, r2]
  4019d8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4019da:	4a12      	ldr	r2, [pc, #72]	; (401a24 <vPortValidateInterruptPriority+0x58>)
  4019dc:	7812      	ldrb	r2, [r2, #0]
  4019de:	429a      	cmp	r2, r3
  4019e0:	d90a      	bls.n	4019f8 <vPortValidateInterruptPriority+0x2c>
  4019e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019e6:	b672      	cpsid	i
  4019e8:	f383 8811 	msr	BASEPRI, r3
  4019ec:	f3bf 8f6f 	isb	sy
  4019f0:	f3bf 8f4f 	dsb	sy
  4019f4:	b662      	cpsie	i
  4019f6:	e7fe      	b.n	4019f6 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  4019f8:	4b0b      	ldr	r3, [pc, #44]	; (401a28 <vPortValidateInterruptPriority+0x5c>)
  4019fa:	681b      	ldr	r3, [r3, #0]
  4019fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401a00:	4a0a      	ldr	r2, [pc, #40]	; (401a2c <vPortValidateInterruptPriority+0x60>)
  401a02:	6812      	ldr	r2, [r2, #0]
  401a04:	4293      	cmp	r3, r2
  401a06:	d90a      	bls.n	401a1e <vPortValidateInterruptPriority+0x52>
  401a08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a0c:	b672      	cpsid	i
  401a0e:	f383 8811 	msr	BASEPRI, r3
  401a12:	f3bf 8f6f 	isb	sy
  401a16:	f3bf 8f4f 	dsb	sy
  401a1a:	b662      	cpsie	i
  401a1c:	e7fe      	b.n	401a1c <vPortValidateInterruptPriority+0x50>
  401a1e:	4770      	bx	lr
  401a20:	e000e3f0 	.word	0xe000e3f0
  401a24:	20400a54 	.word	0x20400a54
  401a28:	e000ed0c 	.word	0xe000ed0c
  401a2c:	20400a58 	.word	0x20400a58

00401a30 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401a30:	b510      	push	{r4, lr}
  401a32:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401a34:	4b06      	ldr	r3, [pc, #24]	; (401a50 <pvPortMalloc+0x20>)
  401a36:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401a38:	4620      	mov	r0, r4
  401a3a:	4b06      	ldr	r3, [pc, #24]	; (401a54 <pvPortMalloc+0x24>)
  401a3c:	4798      	blx	r3
  401a3e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401a40:	4b05      	ldr	r3, [pc, #20]	; (401a58 <pvPortMalloc+0x28>)
  401a42:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401a44:	b10c      	cbz	r4, 401a4a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401a46:	4620      	mov	r0, r4
  401a48:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  401a4a:	4b04      	ldr	r3, [pc, #16]	; (401a5c <pvPortMalloc+0x2c>)
  401a4c:	4798      	blx	r3
	return pvReturn;
  401a4e:	e7fa      	b.n	401a46 <pvPortMalloc+0x16>
  401a50:	00402879 	.word	0x00402879
  401a54:	00405e3d 	.word	0x00405e3d
  401a58:	004029dd 	.word	0x004029dd
  401a5c:	0040375d 	.word	0x0040375d

00401a60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401a60:	b148      	cbz	r0, 401a76 <vPortFree+0x16>
{
  401a62:	b510      	push	{r4, lr}
  401a64:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401a66:	4b04      	ldr	r3, [pc, #16]	; (401a78 <vPortFree+0x18>)
  401a68:	4798      	blx	r3
		{
			free( pv );
  401a6a:	4620      	mov	r0, r4
  401a6c:	4b03      	ldr	r3, [pc, #12]	; (401a7c <vPortFree+0x1c>)
  401a6e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401a70:	4b03      	ldr	r3, [pc, #12]	; (401a80 <vPortFree+0x20>)
  401a72:	4798      	blx	r3
  401a74:	bd10      	pop	{r4, pc}
  401a76:	4770      	bx	lr
  401a78:	00402879 	.word	0x00402879
  401a7c:	00405e4d 	.word	0x00405e4d
  401a80:	004029dd 	.word	0x004029dd

00401a84 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  401a84:	b510      	push	{r4, lr}
  401a86:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401a88:	4b04      	ldr	r3, [pc, #16]	; (401a9c <prvIsQueueEmpty+0x18>)
  401a8a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401a8c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  401a8e:	4b04      	ldr	r3, [pc, #16]	; (401aa0 <prvIsQueueEmpty+0x1c>)
  401a90:	4798      	blx	r3

	return xReturn;
}
  401a92:	fab4 f084 	clz	r0, r4
  401a96:	0940      	lsrs	r0, r0, #5
  401a98:	bd10      	pop	{r4, pc}
  401a9a:	bf00      	nop
  401a9c:	004017a5 	.word	0x004017a5
  401aa0:	004017f1 	.word	0x004017f1

00401aa4 <prvCopyDataToQueue>:
{
  401aa4:	b570      	push	{r4, r5, r6, lr}
  401aa6:	4604      	mov	r4, r0
  401aa8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401aaa:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401aac:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401aae:	b952      	cbnz	r2, 401ac6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ab0:	6803      	ldr	r3, [r0, #0]
  401ab2:	2b00      	cmp	r3, #0
  401ab4:	d12a      	bne.n	401b0c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  401ab6:	6840      	ldr	r0, [r0, #4]
  401ab8:	4b17      	ldr	r3, [pc, #92]	; (401b18 <prvCopyDataToQueue+0x74>)
  401aba:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401abc:	2300      	movs	r3, #0
  401abe:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  401ac0:	3501      	adds	r5, #1
  401ac2:	63a5      	str	r5, [r4, #56]	; 0x38
}
  401ac4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  401ac6:	b96e      	cbnz	r6, 401ae4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401ac8:	6880      	ldr	r0, [r0, #8]
  401aca:	4b14      	ldr	r3, [pc, #80]	; (401b1c <prvCopyDataToQueue+0x78>)
  401acc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401ace:	68a3      	ldr	r3, [r4, #8]
  401ad0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  401ad2:	4413      	add	r3, r2
  401ad4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401ad6:	6862      	ldr	r2, [r4, #4]
  401ad8:	4293      	cmp	r3, r2
  401ada:	d319      	bcc.n	401b10 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401adc:	6823      	ldr	r3, [r4, #0]
  401ade:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401ae0:	2000      	movs	r0, #0
  401ae2:	e7ed      	b.n	401ac0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ae4:	68c0      	ldr	r0, [r0, #12]
  401ae6:	4b0d      	ldr	r3, [pc, #52]	; (401b1c <prvCopyDataToQueue+0x78>)
  401ae8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401aec:	425b      	negs	r3, r3
  401aee:	68e2      	ldr	r2, [r4, #12]
  401af0:	441a      	add	r2, r3
  401af2:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401af4:	6821      	ldr	r1, [r4, #0]
  401af6:	428a      	cmp	r2, r1
  401af8:	d202      	bcs.n	401b00 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401afa:	6862      	ldr	r2, [r4, #4]
  401afc:	4413      	add	r3, r2
  401afe:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b00:	b145      	cbz	r5, 401b14 <prvCopyDataToQueue+0x70>
  401b02:	2e02      	cmp	r6, #2
  401b04:	d106      	bne.n	401b14 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401b06:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401b08:	2000      	movs	r0, #0
  401b0a:	e7d9      	b.n	401ac0 <prvCopyDataToQueue+0x1c>
  401b0c:	2000      	movs	r0, #0
  401b0e:	e7d7      	b.n	401ac0 <prvCopyDataToQueue+0x1c>
  401b10:	2000      	movs	r0, #0
  401b12:	e7d5      	b.n	401ac0 <prvCopyDataToQueue+0x1c>
  401b14:	2000      	movs	r0, #0
  401b16:	e7d3      	b.n	401ac0 <prvCopyDataToQueue+0x1c>
  401b18:	00402ed5 	.word	0x00402ed5
  401b1c:	004063bd 	.word	0x004063bd

00401b20 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401b20:	b570      	push	{r4, r5, r6, lr}
  401b22:	b082      	sub	sp, #8
  401b24:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401b26:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401b28:	b174      	cbz	r4, 401b48 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  401b2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401b2e:	429a      	cmp	r2, r3
  401b30:	d315      	bcc.n	401b5e <prvNotifyQueueSetContainer+0x3e>
  401b32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b36:	b672      	cpsid	i
  401b38:	f383 8811 	msr	BASEPRI, r3
  401b3c:	f3bf 8f6f 	isb	sy
  401b40:	f3bf 8f4f 	dsb	sy
  401b44:	b662      	cpsie	i
  401b46:	e7fe      	b.n	401b46 <prvNotifyQueueSetContainer+0x26>
  401b48:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b4c:	b672      	cpsid	i
  401b4e:	f383 8811 	msr	BASEPRI, r3
  401b52:	f3bf 8f6f 	isb	sy
  401b56:	f3bf 8f4f 	dsb	sy
  401b5a:	b662      	cpsie	i
  401b5c:	e7fe      	b.n	401b5c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  401b5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401b60:	4293      	cmp	r3, r2
  401b62:	d803      	bhi.n	401b6c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401b64:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401b66:	4630      	mov	r0, r6
  401b68:	b002      	add	sp, #8
  401b6a:	bd70      	pop	{r4, r5, r6, pc}
  401b6c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  401b6e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401b72:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401b74:	a901      	add	r1, sp, #4
  401b76:	4620      	mov	r0, r4
  401b78:	4b0a      	ldr	r3, [pc, #40]	; (401ba4 <prvNotifyQueueSetContainer+0x84>)
  401b7a:	4798      	blx	r3
  401b7c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  401b7e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401b82:	d10a      	bne.n	401b9a <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b86:	2b00      	cmp	r3, #0
  401b88:	d0ed      	beq.n	401b66 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401b8a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b8e:	4b06      	ldr	r3, [pc, #24]	; (401ba8 <prvNotifyQueueSetContainer+0x88>)
  401b90:	4798      	blx	r3
  401b92:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401b94:	bf18      	it	ne
  401b96:	2601      	movne	r6, #1
  401b98:	e7e5      	b.n	401b66 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401b9a:	1c6b      	adds	r3, r5, #1
  401b9c:	b25b      	sxtb	r3, r3
  401b9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401ba2:	e7e0      	b.n	401b66 <prvNotifyQueueSetContainer+0x46>
  401ba4:	00401aa5 	.word	0x00401aa5
  401ba8:	00402ca5 	.word	0x00402ca5

00401bac <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  401bac:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401bae:	b172      	cbz	r2, 401bce <prvCopyDataFromQueue+0x22>
{
  401bb0:	b510      	push	{r4, lr}
  401bb2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401bb4:	68c4      	ldr	r4, [r0, #12]
  401bb6:	4414      	add	r4, r2
  401bb8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  401bba:	6840      	ldr	r0, [r0, #4]
  401bbc:	4284      	cmp	r4, r0
  401bbe:	d301      	bcc.n	401bc4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401bc0:	6818      	ldr	r0, [r3, #0]
  401bc2:	60d8      	str	r0, [r3, #12]
  401bc4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401bc6:	68d9      	ldr	r1, [r3, #12]
  401bc8:	4b01      	ldr	r3, [pc, #4]	; (401bd0 <prvCopyDataFromQueue+0x24>)
  401bca:	4798      	blx	r3
  401bcc:	bd10      	pop	{r4, pc}
  401bce:	4770      	bx	lr
  401bd0:	004063bd 	.word	0x004063bd

00401bd4 <prvUnlockQueue>:
{
  401bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401bd8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  401bda:	4b23      	ldr	r3, [pc, #140]	; (401c68 <prvUnlockQueue+0x94>)
  401bdc:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  401bde:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  401be2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401be4:	2c00      	cmp	r4, #0
  401be6:	dd19      	ble.n	401c1c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401be8:	4e20      	ldr	r6, [pc, #128]	; (401c6c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  401bea:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401c78 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bee:	4f20      	ldr	r7, [pc, #128]	; (401c70 <prvUnlockQueue+0x9c>)
  401bf0:	e008      	b.n	401c04 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401bf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401bf4:	b193      	cbz	r3, 401c1c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401bf6:	f105 0024 	add.w	r0, r5, #36	; 0x24
  401bfa:	47b8      	blx	r7
  401bfc:	b960      	cbnz	r0, 401c18 <prvUnlockQueue+0x44>
  401bfe:	3c01      	subs	r4, #1
  401c00:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401c02:	b15c      	cbz	r4, 401c1c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401c04:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401c06:	2b00      	cmp	r3, #0
  401c08:	d0f3      	beq.n	401bf2 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  401c0a:	2100      	movs	r1, #0
  401c0c:	4628      	mov	r0, r5
  401c0e:	47b0      	blx	r6
  401c10:	2800      	cmp	r0, #0
  401c12:	d0f4      	beq.n	401bfe <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401c14:	47c0      	blx	r8
  401c16:	e7f2      	b.n	401bfe <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401c18:	47c0      	blx	r8
  401c1a:	e7f0      	b.n	401bfe <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  401c1c:	23ff      	movs	r3, #255	; 0xff
  401c1e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401c22:	4b14      	ldr	r3, [pc, #80]	; (401c74 <prvUnlockQueue+0xa0>)
  401c24:	4798      	blx	r3
	taskENTER_CRITICAL();
  401c26:	4b10      	ldr	r3, [pc, #64]	; (401c68 <prvUnlockQueue+0x94>)
  401c28:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  401c2a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  401c2e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401c30:	2c00      	cmp	r4, #0
  401c32:	dd12      	ble.n	401c5a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c34:	692b      	ldr	r3, [r5, #16]
  401c36:	b183      	cbz	r3, 401c5a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c38:	f105 0710 	add.w	r7, r5, #16
  401c3c:	4e0c      	ldr	r6, [pc, #48]	; (401c70 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401c3e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401c78 <prvUnlockQueue+0xa4>
  401c42:	e004      	b.n	401c4e <prvUnlockQueue+0x7a>
  401c44:	3c01      	subs	r4, #1
  401c46:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401c48:	b13c      	cbz	r4, 401c5a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c4a:	692b      	ldr	r3, [r5, #16]
  401c4c:	b12b      	cbz	r3, 401c5a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c4e:	4638      	mov	r0, r7
  401c50:	47b0      	blx	r6
  401c52:	2800      	cmp	r0, #0
  401c54:	d0f6      	beq.n	401c44 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401c56:	47c0      	blx	r8
  401c58:	e7f4      	b.n	401c44 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  401c5a:	23ff      	movs	r3, #255	; 0xff
  401c5c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401c60:	4b04      	ldr	r3, [pc, #16]	; (401c74 <prvUnlockQueue+0xa0>)
  401c62:	4798      	blx	r3
  401c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c68:	004017a5 	.word	0x004017a5
  401c6c:	00401b21 	.word	0x00401b21
  401c70:	00402ca5 	.word	0x00402ca5
  401c74:	004017f1 	.word	0x004017f1
  401c78:	00402de9 	.word	0x00402de9

00401c7c <xQueueGenericReset>:
{
  401c7c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401c7e:	b330      	cbz	r0, 401cce <xQueueGenericReset+0x52>
  401c80:	4604      	mov	r4, r0
  401c82:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401c84:	4b1d      	ldr	r3, [pc, #116]	; (401cfc <xQueueGenericReset+0x80>)
  401c86:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401c88:	6822      	ldr	r2, [r4, #0]
  401c8a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401c8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c8e:	fb03 f301 	mul.w	r3, r3, r1
  401c92:	18d0      	adds	r0, r2, r3
  401c94:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401c96:	2000      	movs	r0, #0
  401c98:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401c9a:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401c9c:	1a5b      	subs	r3, r3, r1
  401c9e:	4413      	add	r3, r2
  401ca0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  401ca2:	23ff      	movs	r3, #255	; 0xff
  401ca4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  401ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  401cac:	b9d5      	cbnz	r5, 401ce4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401cae:	6923      	ldr	r3, [r4, #16]
  401cb0:	b1fb      	cbz	r3, 401cf2 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401cb2:	f104 0010 	add.w	r0, r4, #16
  401cb6:	4b12      	ldr	r3, [pc, #72]	; (401d00 <xQueueGenericReset+0x84>)
  401cb8:	4798      	blx	r3
  401cba:	b1d0      	cbz	r0, 401cf2 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  401cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401cc0:	4b10      	ldr	r3, [pc, #64]	; (401d04 <xQueueGenericReset+0x88>)
  401cc2:	601a      	str	r2, [r3, #0]
  401cc4:	f3bf 8f4f 	dsb	sy
  401cc8:	f3bf 8f6f 	isb	sy
  401ccc:	e011      	b.n	401cf2 <xQueueGenericReset+0x76>
  401cce:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cd2:	b672      	cpsid	i
  401cd4:	f383 8811 	msr	BASEPRI, r3
  401cd8:	f3bf 8f6f 	isb	sy
  401cdc:	f3bf 8f4f 	dsb	sy
  401ce0:	b662      	cpsie	i
  401ce2:	e7fe      	b.n	401ce2 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401ce4:	f104 0010 	add.w	r0, r4, #16
  401ce8:	4d07      	ldr	r5, [pc, #28]	; (401d08 <xQueueGenericReset+0x8c>)
  401cea:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401cec:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cf0:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401cf2:	4b06      	ldr	r3, [pc, #24]	; (401d0c <xQueueGenericReset+0x90>)
  401cf4:	4798      	blx	r3
}
  401cf6:	2001      	movs	r0, #1
  401cf8:	bd38      	pop	{r3, r4, r5, pc}
  401cfa:	bf00      	nop
  401cfc:	004017a5 	.word	0x004017a5
  401d00:	00402ca5 	.word	0x00402ca5
  401d04:	e000ed04 	.word	0xe000ed04
  401d08:	00401635 	.word	0x00401635
  401d0c:	004017f1 	.word	0x004017f1

00401d10 <xQueueGenericCreate>:
	{
  401d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401d12:	b950      	cbnz	r0, 401d2a <xQueueGenericCreate+0x1a>
  401d14:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d18:	b672      	cpsid	i
  401d1a:	f383 8811 	msr	BASEPRI, r3
  401d1e:	f3bf 8f6f 	isb	sy
  401d22:	f3bf 8f4f 	dsb	sy
  401d26:	b662      	cpsie	i
  401d28:	e7fe      	b.n	401d28 <xQueueGenericCreate+0x18>
  401d2a:	4606      	mov	r6, r0
  401d2c:	4617      	mov	r7, r2
  401d2e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d30:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401d34:	3054      	adds	r0, #84	; 0x54
  401d36:	4b0b      	ldr	r3, [pc, #44]	; (401d64 <xQueueGenericCreate+0x54>)
  401d38:	4798      	blx	r3
		if( pxNewQueue != NULL )
  401d3a:	4604      	mov	r4, r0
  401d3c:	b178      	cbz	r0, 401d5e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  401d3e:	b11d      	cbz	r5, 401d48 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401d40:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401d44:	6003      	str	r3, [r0, #0]
  401d46:	e000      	b.n	401d4a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401d48:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  401d4a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  401d4c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401d4e:	2101      	movs	r1, #1
  401d50:	4620      	mov	r0, r4
  401d52:	4b05      	ldr	r3, [pc, #20]	; (401d68 <xQueueGenericCreate+0x58>)
  401d54:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401d56:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  401d5a:	2300      	movs	r3, #0
  401d5c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  401d5e:	4620      	mov	r0, r4
  401d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401d62:	bf00      	nop
  401d64:	00401a31 	.word	0x00401a31
  401d68:	00401c7d 	.word	0x00401c7d

00401d6c <xQueueGenericSend>:
{
  401d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d70:	b085      	sub	sp, #20
  401d72:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401d74:	b1b8      	cbz	r0, 401da6 <xQueueGenericSend+0x3a>
  401d76:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d78:	b301      	cbz	r1, 401dbc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401d7a:	2b02      	cmp	r3, #2
  401d7c:	d02c      	beq.n	401dd8 <xQueueGenericSend+0x6c>
  401d7e:	461e      	mov	r6, r3
  401d80:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401d82:	4b69      	ldr	r3, [pc, #420]	; (401f28 <xQueueGenericSend+0x1bc>)
  401d84:	4798      	blx	r3
  401d86:	2800      	cmp	r0, #0
  401d88:	d134      	bne.n	401df4 <xQueueGenericSend+0x88>
  401d8a:	9b01      	ldr	r3, [sp, #4]
  401d8c:	2b00      	cmp	r3, #0
  401d8e:	d039      	beq.n	401e04 <xQueueGenericSend+0x98>
  401d90:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d94:	b672      	cpsid	i
  401d96:	f383 8811 	msr	BASEPRI, r3
  401d9a:	f3bf 8f6f 	isb	sy
  401d9e:	f3bf 8f4f 	dsb	sy
  401da2:	b662      	cpsie	i
  401da4:	e7fe      	b.n	401da4 <xQueueGenericSend+0x38>
  401da6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401daa:	b672      	cpsid	i
  401dac:	f383 8811 	msr	BASEPRI, r3
  401db0:	f3bf 8f6f 	isb	sy
  401db4:	f3bf 8f4f 	dsb	sy
  401db8:	b662      	cpsie	i
  401dba:	e7fe      	b.n	401dba <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401dbc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401dbe:	2a00      	cmp	r2, #0
  401dc0:	d0db      	beq.n	401d7a <xQueueGenericSend+0xe>
  401dc2:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dc6:	b672      	cpsid	i
  401dc8:	f383 8811 	msr	BASEPRI, r3
  401dcc:	f3bf 8f6f 	isb	sy
  401dd0:	f3bf 8f4f 	dsb	sy
  401dd4:	b662      	cpsie	i
  401dd6:	e7fe      	b.n	401dd6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401dd8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401dda:	2a01      	cmp	r2, #1
  401ddc:	d0cf      	beq.n	401d7e <xQueueGenericSend+0x12>
  401dde:	f04f 0380 	mov.w	r3, #128	; 0x80
  401de2:	b672      	cpsid	i
  401de4:	f383 8811 	msr	BASEPRI, r3
  401de8:	f3bf 8f6f 	isb	sy
  401dec:	f3bf 8f4f 	dsb	sy
  401df0:	b662      	cpsie	i
  401df2:	e7fe      	b.n	401df2 <xQueueGenericSend+0x86>
  401df4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401df6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401f54 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401dfa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401f58 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  401dfe:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401f34 <xQueueGenericSend+0x1c8>
  401e02:	e041      	b.n	401e88 <xQueueGenericSend+0x11c>
  401e04:	2500      	movs	r5, #0
  401e06:	e7f6      	b.n	401df6 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401e08:	4632      	mov	r2, r6
  401e0a:	4639      	mov	r1, r7
  401e0c:	4620      	mov	r0, r4
  401e0e:	4b47      	ldr	r3, [pc, #284]	; (401f2c <xQueueGenericSend+0x1c0>)
  401e10:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401e12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e14:	b193      	cbz	r3, 401e3c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401e16:	4631      	mov	r1, r6
  401e18:	4620      	mov	r0, r4
  401e1a:	4b45      	ldr	r3, [pc, #276]	; (401f30 <xQueueGenericSend+0x1c4>)
  401e1c:	4798      	blx	r3
  401e1e:	b138      	cbz	r0, 401e30 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e24:	4b43      	ldr	r3, [pc, #268]	; (401f34 <xQueueGenericSend+0x1c8>)
  401e26:	601a      	str	r2, [r3, #0]
  401e28:	f3bf 8f4f 	dsb	sy
  401e2c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401e30:	4b41      	ldr	r3, [pc, #260]	; (401f38 <xQueueGenericSend+0x1cc>)
  401e32:	4798      	blx	r3
				return pdPASS;
  401e34:	2001      	movs	r0, #1
}
  401e36:	b005      	add	sp, #20
  401e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e3e:	b173      	cbz	r3, 401e5e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401e40:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e44:	4b3d      	ldr	r3, [pc, #244]	; (401f3c <xQueueGenericSend+0x1d0>)
  401e46:	4798      	blx	r3
  401e48:	2800      	cmp	r0, #0
  401e4a:	d0f1      	beq.n	401e30 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e50:	4b38      	ldr	r3, [pc, #224]	; (401f34 <xQueueGenericSend+0x1c8>)
  401e52:	601a      	str	r2, [r3, #0]
  401e54:	f3bf 8f4f 	dsb	sy
  401e58:	f3bf 8f6f 	isb	sy
  401e5c:	e7e8      	b.n	401e30 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401e5e:	2800      	cmp	r0, #0
  401e60:	d0e6      	beq.n	401e30 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401e66:	4b33      	ldr	r3, [pc, #204]	; (401f34 <xQueueGenericSend+0x1c8>)
  401e68:	601a      	str	r2, [r3, #0]
  401e6a:	f3bf 8f4f 	dsb	sy
  401e6e:	f3bf 8f6f 	isb	sy
  401e72:	e7dd      	b.n	401e30 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401e74:	4b30      	ldr	r3, [pc, #192]	; (401f38 <xQueueGenericSend+0x1cc>)
  401e76:	4798      	blx	r3
					return errQUEUE_FULL;
  401e78:	2000      	movs	r0, #0
  401e7a:	e7dc      	b.n	401e36 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401e7c:	4620      	mov	r0, r4
  401e7e:	4b30      	ldr	r3, [pc, #192]	; (401f40 <xQueueGenericSend+0x1d4>)
  401e80:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401e82:	4b30      	ldr	r3, [pc, #192]	; (401f44 <xQueueGenericSend+0x1d8>)
  401e84:	4798      	blx	r3
  401e86:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  401e88:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401e8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401e8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401e8e:	429a      	cmp	r2, r3
  401e90:	d3ba      	bcc.n	401e08 <xQueueGenericSend+0x9c>
  401e92:	2e02      	cmp	r6, #2
  401e94:	d0b8      	beq.n	401e08 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  401e96:	9b01      	ldr	r3, [sp, #4]
  401e98:	2b00      	cmp	r3, #0
  401e9a:	d0eb      	beq.n	401e74 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401e9c:	b90d      	cbnz	r5, 401ea2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401e9e:	a802      	add	r0, sp, #8
  401ea0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401ea2:	4b25      	ldr	r3, [pc, #148]	; (401f38 <xQueueGenericSend+0x1cc>)
  401ea4:	4798      	blx	r3
		vTaskSuspendAll();
  401ea6:	4b28      	ldr	r3, [pc, #160]	; (401f48 <xQueueGenericSend+0x1dc>)
  401ea8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401eaa:	47c0      	blx	r8
  401eac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401eb0:	b25b      	sxtb	r3, r3
  401eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401eb6:	d102      	bne.n	401ebe <xQueueGenericSend+0x152>
  401eb8:	2300      	movs	r3, #0
  401eba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401ebe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401ec2:	b25b      	sxtb	r3, r3
  401ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ec8:	d102      	bne.n	401ed0 <xQueueGenericSend+0x164>
  401eca:	2300      	movs	r3, #0
  401ecc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401ed0:	4b19      	ldr	r3, [pc, #100]	; (401f38 <xQueueGenericSend+0x1cc>)
  401ed2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401ed4:	a901      	add	r1, sp, #4
  401ed6:	a802      	add	r0, sp, #8
  401ed8:	4b1c      	ldr	r3, [pc, #112]	; (401f4c <xQueueGenericSend+0x1e0>)
  401eda:	4798      	blx	r3
  401edc:	b9e0      	cbnz	r0, 401f18 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  401ede:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401ee0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401ee4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401ee6:	4b14      	ldr	r3, [pc, #80]	; (401f38 <xQueueGenericSend+0x1cc>)
  401ee8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401eea:	45ab      	cmp	fp, r5
  401eec:	d1c6      	bne.n	401e7c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401eee:	9901      	ldr	r1, [sp, #4]
  401ef0:	f104 0010 	add.w	r0, r4, #16
  401ef4:	4b16      	ldr	r3, [pc, #88]	; (401f50 <xQueueGenericSend+0x1e4>)
  401ef6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401ef8:	4620      	mov	r0, r4
  401efa:	4b11      	ldr	r3, [pc, #68]	; (401f40 <xQueueGenericSend+0x1d4>)
  401efc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401efe:	4b11      	ldr	r3, [pc, #68]	; (401f44 <xQueueGenericSend+0x1d8>)
  401f00:	4798      	blx	r3
  401f02:	2800      	cmp	r0, #0
  401f04:	d1bf      	bne.n	401e86 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401f06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401f0a:	f8c9 3000 	str.w	r3, [r9]
  401f0e:	f3bf 8f4f 	dsb	sy
  401f12:	f3bf 8f6f 	isb	sy
  401f16:	e7b6      	b.n	401e86 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401f18:	4620      	mov	r0, r4
  401f1a:	4b09      	ldr	r3, [pc, #36]	; (401f40 <xQueueGenericSend+0x1d4>)
  401f1c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401f1e:	4b09      	ldr	r3, [pc, #36]	; (401f44 <xQueueGenericSend+0x1d8>)
  401f20:	4798      	blx	r3
			return errQUEUE_FULL;
  401f22:	2000      	movs	r0, #0
  401f24:	e787      	b.n	401e36 <xQueueGenericSend+0xca>
  401f26:	bf00      	nop
  401f28:	00402df5 	.word	0x00402df5
  401f2c:	00401aa5 	.word	0x00401aa5
  401f30:	00401b21 	.word	0x00401b21
  401f34:	e000ed04 	.word	0xe000ed04
  401f38:	004017f1 	.word	0x004017f1
  401f3c:	00402ca5 	.word	0x00402ca5
  401f40:	00401bd5 	.word	0x00401bd5
  401f44:	004029dd 	.word	0x004029dd
  401f48:	00402879 	.word	0x00402879
  401f4c:	00402d55 	.word	0x00402d55
  401f50:	00402c21 	.word	0x00402c21
  401f54:	004017a5 	.word	0x004017a5
  401f58:	00402d3d 	.word	0x00402d3d

00401f5c <xQueueGenericSendFromISR>:
{
  401f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401f60:	2800      	cmp	r0, #0
  401f62:	d039      	beq.n	401fd8 <xQueueGenericSendFromISR+0x7c>
  401f64:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401f66:	2900      	cmp	r1, #0
  401f68:	d041      	beq.n	401fee <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401f6a:	2b02      	cmp	r3, #2
  401f6c:	d04d      	beq.n	40200a <xQueueGenericSendFromISR+0xae>
  401f6e:	461f      	mov	r7, r3
  401f70:	4690      	mov	r8, r2
  401f72:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401f74:	4b3a      	ldr	r3, [pc, #232]	; (402060 <xQueueGenericSendFromISR+0x104>)
  401f76:	4798      	blx	r3
	__asm volatile
  401f78:	f3ef 8611 	mrs	r6, BASEPRI
  401f7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f80:	b672      	cpsid	i
  401f82:	f383 8811 	msr	BASEPRI, r3
  401f86:	f3bf 8f6f 	isb	sy
  401f8a:	f3bf 8f4f 	dsb	sy
  401f8e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401f90:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401f92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401f94:	429a      	cmp	r2, r3
  401f96:	d301      	bcc.n	401f9c <xQueueGenericSendFromISR+0x40>
  401f98:	2f02      	cmp	r7, #2
  401f9a:	d158      	bne.n	40204e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  401f9c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401fa0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401fa2:	463a      	mov	r2, r7
  401fa4:	4649      	mov	r1, r9
  401fa6:	4620      	mov	r0, r4
  401fa8:	4b2e      	ldr	r3, [pc, #184]	; (402064 <xQueueGenericSendFromISR+0x108>)
  401faa:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  401fac:	f1b5 3fff 	cmp.w	r5, #4294967295
  401fb0:	d147      	bne.n	402042 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  401fb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fb4:	2b00      	cmp	r3, #0
  401fb6:	d036      	beq.n	402026 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401fb8:	4639      	mov	r1, r7
  401fba:	4620      	mov	r0, r4
  401fbc:	4b2a      	ldr	r3, [pc, #168]	; (402068 <xQueueGenericSendFromISR+0x10c>)
  401fbe:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401fc0:	f1b8 0f00 	cmp.w	r8, #0
  401fc4:	d045      	beq.n	402052 <xQueueGenericSendFromISR+0xf6>
  401fc6:	2800      	cmp	r0, #0
  401fc8:	d043      	beq.n	402052 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401fca:	2001      	movs	r0, #1
  401fcc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  401fd0:	f386 8811 	msr	BASEPRI, r6
}
  401fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  401fd8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fdc:	b672      	cpsid	i
  401fde:	f383 8811 	msr	BASEPRI, r3
  401fe2:	f3bf 8f6f 	isb	sy
  401fe6:	f3bf 8f4f 	dsb	sy
  401fea:	b662      	cpsie	i
  401fec:	e7fe      	b.n	401fec <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401fee:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401ff0:	2800      	cmp	r0, #0
  401ff2:	d0ba      	beq.n	401f6a <xQueueGenericSendFromISR+0xe>
  401ff4:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ff8:	b672      	cpsid	i
  401ffa:	f383 8811 	msr	BASEPRI, r3
  401ffe:	f3bf 8f6f 	isb	sy
  402002:	f3bf 8f4f 	dsb	sy
  402006:	b662      	cpsie	i
  402008:	e7fe      	b.n	402008 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40200a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40200c:	2801      	cmp	r0, #1
  40200e:	d0ae      	beq.n	401f6e <xQueueGenericSendFromISR+0x12>
  402010:	f04f 0380 	mov.w	r3, #128	; 0x80
  402014:	b672      	cpsid	i
  402016:	f383 8811 	msr	BASEPRI, r3
  40201a:	f3bf 8f6f 	isb	sy
  40201e:	f3bf 8f4f 	dsb	sy
  402022:	b662      	cpsie	i
  402024:	e7fe      	b.n	402024 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402026:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402028:	b1ab      	cbz	r3, 402056 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40202a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40202e:	4b0f      	ldr	r3, [pc, #60]	; (40206c <xQueueGenericSendFromISR+0x110>)
  402030:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  402032:	f1b8 0f00 	cmp.w	r8, #0
  402036:	d010      	beq.n	40205a <xQueueGenericSendFromISR+0xfe>
  402038:	b178      	cbz	r0, 40205a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40203a:	2001      	movs	r0, #1
  40203c:	f8c8 0000 	str.w	r0, [r8]
  402040:	e7c6      	b.n	401fd0 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  402042:	1c6b      	adds	r3, r5, #1
  402044:	b25b      	sxtb	r3, r3
  402046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40204a:	2001      	movs	r0, #1
  40204c:	e7c0      	b.n	401fd0 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40204e:	2000      	movs	r0, #0
  402050:	e7be      	b.n	401fd0 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  402052:	2001      	movs	r0, #1
  402054:	e7bc      	b.n	401fd0 <xQueueGenericSendFromISR+0x74>
  402056:	2001      	movs	r0, #1
  402058:	e7ba      	b.n	401fd0 <xQueueGenericSendFromISR+0x74>
  40205a:	2001      	movs	r0, #1
  40205c:	e7b8      	b.n	401fd0 <xQueueGenericSendFromISR+0x74>
  40205e:	bf00      	nop
  402060:	004019cd 	.word	0x004019cd
  402064:	00401aa5 	.word	0x00401aa5
  402068:	00401b21 	.word	0x00401b21
  40206c:	00402ca5 	.word	0x00402ca5

00402070 <xQueueReceive>:
{
  402070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402074:	b084      	sub	sp, #16
  402076:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  402078:	b190      	cbz	r0, 4020a0 <xQueueReceive+0x30>
  40207a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40207c:	b1d9      	cbz	r1, 4020b6 <xQueueReceive+0x46>
  40207e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402080:	4b54      	ldr	r3, [pc, #336]	; (4021d4 <xQueueReceive+0x164>)
  402082:	4798      	blx	r3
  402084:	bb28      	cbnz	r0, 4020d2 <xQueueReceive+0x62>
  402086:	9b01      	ldr	r3, [sp, #4]
  402088:	b35b      	cbz	r3, 4020e2 <xQueueReceive+0x72>
  40208a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40208e:	b672      	cpsid	i
  402090:	f383 8811 	msr	BASEPRI, r3
  402094:	f3bf 8f6f 	isb	sy
  402098:	f3bf 8f4f 	dsb	sy
  40209c:	b662      	cpsie	i
  40209e:	e7fe      	b.n	40209e <xQueueReceive+0x2e>
  4020a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020a4:	b672      	cpsid	i
  4020a6:	f383 8811 	msr	BASEPRI, r3
  4020aa:	f3bf 8f6f 	isb	sy
  4020ae:	f3bf 8f4f 	dsb	sy
  4020b2:	b662      	cpsie	i
  4020b4:	e7fe      	b.n	4020b4 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4020b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4020b8:	2b00      	cmp	r3, #0
  4020ba:	d0e0      	beq.n	40207e <xQueueReceive+0xe>
  4020bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4020c0:	b672      	cpsid	i
  4020c2:	f383 8811 	msr	BASEPRI, r3
  4020c6:	f3bf 8f6f 	isb	sy
  4020ca:	f3bf 8f4f 	dsb	sy
  4020ce:	b662      	cpsie	i
  4020d0:	e7fe      	b.n	4020d0 <xQueueReceive+0x60>
  4020d2:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  4020d4:	f8df 8128 	ldr.w	r8, [pc, #296]	; 402200 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4020d8:	f8df a128 	ldr.w	sl, [pc, #296]	; 402204 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  4020dc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 4021e0 <xQueueReceive+0x170>
  4020e0:	e031      	b.n	402146 <xQueueReceive+0xd6>
  4020e2:	2700      	movs	r7, #0
  4020e4:	e7f6      	b.n	4020d4 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  4020e6:	4631      	mov	r1, r6
  4020e8:	4620      	mov	r0, r4
  4020ea:	4b3b      	ldr	r3, [pc, #236]	; (4021d8 <xQueueReceive+0x168>)
  4020ec:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  4020ee:	3d01      	subs	r5, #1
  4020f0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4020f2:	6923      	ldr	r3, [r4, #16]
  4020f4:	b163      	cbz	r3, 402110 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4020f6:	f104 0010 	add.w	r0, r4, #16
  4020fa:	4b38      	ldr	r3, [pc, #224]	; (4021dc <xQueueReceive+0x16c>)
  4020fc:	4798      	blx	r3
  4020fe:	b138      	cbz	r0, 402110 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  402100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402104:	4b36      	ldr	r3, [pc, #216]	; (4021e0 <xQueueReceive+0x170>)
  402106:	601a      	str	r2, [r3, #0]
  402108:	f3bf 8f4f 	dsb	sy
  40210c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402110:	4b34      	ldr	r3, [pc, #208]	; (4021e4 <xQueueReceive+0x174>)
  402112:	4798      	blx	r3
				return pdPASS;
  402114:	2001      	movs	r0, #1
}
  402116:	b004      	add	sp, #16
  402118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  40211c:	4b31      	ldr	r3, [pc, #196]	; (4021e4 <xQueueReceive+0x174>)
  40211e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  402120:	2000      	movs	r0, #0
  402122:	e7f8      	b.n	402116 <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  402124:	a802      	add	r0, sp, #8
  402126:	47d0      	blx	sl
  402128:	e016      	b.n	402158 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  40212a:	2300      	movs	r3, #0
  40212c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  402130:	e01d      	b.n	40216e <xQueueReceive+0xfe>
  402132:	2300      	movs	r3, #0
  402134:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  402138:	e01f      	b.n	40217a <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  40213a:	4620      	mov	r0, r4
  40213c:	4b2a      	ldr	r3, [pc, #168]	; (4021e8 <xQueueReceive+0x178>)
  40213e:	4798      	blx	r3
				( void ) xTaskResumeAll();
  402140:	4b2a      	ldr	r3, [pc, #168]	; (4021ec <xQueueReceive+0x17c>)
  402142:	4798      	blx	r3
  402144:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  402146:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  402148:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40214a:	2d00      	cmp	r5, #0
  40214c:	d1cb      	bne.n	4020e6 <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  40214e:	9b01      	ldr	r3, [sp, #4]
  402150:	2b00      	cmp	r3, #0
  402152:	d0e3      	beq.n	40211c <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  402154:	2f00      	cmp	r7, #0
  402156:	d0e5      	beq.n	402124 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  402158:	4b22      	ldr	r3, [pc, #136]	; (4021e4 <xQueueReceive+0x174>)
  40215a:	4798      	blx	r3
		vTaskSuspendAll();
  40215c:	4b24      	ldr	r3, [pc, #144]	; (4021f0 <xQueueReceive+0x180>)
  40215e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402160:	47c0      	blx	r8
  402162:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  402166:	b25b      	sxtb	r3, r3
  402168:	f1b3 3fff 	cmp.w	r3, #4294967295
  40216c:	d0dd      	beq.n	40212a <xQueueReceive+0xba>
  40216e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  402172:	b25b      	sxtb	r3, r3
  402174:	f1b3 3fff 	cmp.w	r3, #4294967295
  402178:	d0db      	beq.n	402132 <xQueueReceive+0xc2>
  40217a:	4b1a      	ldr	r3, [pc, #104]	; (4021e4 <xQueueReceive+0x174>)
  40217c:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  40217e:	a901      	add	r1, sp, #4
  402180:	a802      	add	r0, sp, #8
  402182:	4b1c      	ldr	r3, [pc, #112]	; (4021f4 <xQueueReceive+0x184>)
  402184:	4798      	blx	r3
  402186:	b9c8      	cbnz	r0, 4021bc <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402188:	4620      	mov	r0, r4
  40218a:	4b1b      	ldr	r3, [pc, #108]	; (4021f8 <xQueueReceive+0x188>)
  40218c:	4798      	blx	r3
  40218e:	2800      	cmp	r0, #0
  402190:	d0d3      	beq.n	40213a <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402192:	9901      	ldr	r1, [sp, #4]
  402194:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402198:	4b18      	ldr	r3, [pc, #96]	; (4021fc <xQueueReceive+0x18c>)
  40219a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40219c:	4620      	mov	r0, r4
  40219e:	4b12      	ldr	r3, [pc, #72]	; (4021e8 <xQueueReceive+0x178>)
  4021a0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4021a2:	4b12      	ldr	r3, [pc, #72]	; (4021ec <xQueueReceive+0x17c>)
  4021a4:	4798      	blx	r3
  4021a6:	2800      	cmp	r0, #0
  4021a8:	d1cc      	bne.n	402144 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  4021aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4021ae:	f8c9 3000 	str.w	r3, [r9]
  4021b2:	f3bf 8f4f 	dsb	sy
  4021b6:	f3bf 8f6f 	isb	sy
  4021ba:	e7c3      	b.n	402144 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  4021bc:	4620      	mov	r0, r4
  4021be:	4b0a      	ldr	r3, [pc, #40]	; (4021e8 <xQueueReceive+0x178>)
  4021c0:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4021c2:	4b0a      	ldr	r3, [pc, #40]	; (4021ec <xQueueReceive+0x17c>)
  4021c4:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  4021c6:	4620      	mov	r0, r4
  4021c8:	4b0b      	ldr	r3, [pc, #44]	; (4021f8 <xQueueReceive+0x188>)
  4021ca:	4798      	blx	r3
  4021cc:	2800      	cmp	r0, #0
  4021ce:	d0b9      	beq.n	402144 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  4021d0:	2000      	movs	r0, #0
  4021d2:	e7a0      	b.n	402116 <xQueueReceive+0xa6>
  4021d4:	00402df5 	.word	0x00402df5
  4021d8:	00401bad 	.word	0x00401bad
  4021dc:	00402ca5 	.word	0x00402ca5
  4021e0:	e000ed04 	.word	0xe000ed04
  4021e4:	004017f1 	.word	0x004017f1
  4021e8:	00401bd5 	.word	0x00401bd5
  4021ec:	004029dd 	.word	0x004029dd
  4021f0:	00402879 	.word	0x00402879
  4021f4:	00402d55 	.word	0x00402d55
  4021f8:	00401a85 	.word	0x00401a85
  4021fc:	00402c21 	.word	0x00402c21
  402200:	004017a5 	.word	0x004017a5
  402204:	00402d3d 	.word	0x00402d3d

00402208 <xQueueSemaphoreTake>:
{
  402208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40220c:	b085      	sub	sp, #20
  40220e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  402210:	b168      	cbz	r0, 40222e <xQueueSemaphoreTake+0x26>
  402212:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  402214:	6c03      	ldr	r3, [r0, #64]	; 0x40
  402216:	b1ab      	cbz	r3, 402244 <xQueueSemaphoreTake+0x3c>
  402218:	f04f 0380 	mov.w	r3, #128	; 0x80
  40221c:	b672      	cpsid	i
  40221e:	f383 8811 	msr	BASEPRI, r3
  402222:	f3bf 8f6f 	isb	sy
  402226:	f3bf 8f4f 	dsb	sy
  40222a:	b662      	cpsie	i
  40222c:	e7fe      	b.n	40222c <xQueueSemaphoreTake+0x24>
  40222e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402232:	b672      	cpsid	i
  402234:	f383 8811 	msr	BASEPRI, r3
  402238:	f3bf 8f6f 	isb	sy
  40223c:	f3bf 8f4f 	dsb	sy
  402240:	b662      	cpsie	i
  402242:	e7fe      	b.n	402242 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  402244:	4b5e      	ldr	r3, [pc, #376]	; (4023c0 <xQueueSemaphoreTake+0x1b8>)
  402246:	4798      	blx	r3
  402248:	b960      	cbnz	r0, 402264 <xQueueSemaphoreTake+0x5c>
  40224a:	9b01      	ldr	r3, [sp, #4]
  40224c:	b193      	cbz	r3, 402274 <xQueueSemaphoreTake+0x6c>
  40224e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402252:	b672      	cpsid	i
  402254:	f383 8811 	msr	BASEPRI, r3
  402258:	f3bf 8f6f 	isb	sy
  40225c:	f3bf 8f4f 	dsb	sy
  402260:	b662      	cpsie	i
  402262:	e7fe      	b.n	402262 <xQueueSemaphoreTake+0x5a>
  402264:	2500      	movs	r5, #0
  402266:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  402268:	4e56      	ldr	r6, [pc, #344]	; (4023c4 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  40226a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 4023f8 <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  40226e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4023d0 <xQueueSemaphoreTake+0x1c8>
  402272:	e052      	b.n	40231a <xQueueSemaphoreTake+0x112>
  402274:	2500      	movs	r5, #0
  402276:	462f      	mov	r7, r5
  402278:	e7f6      	b.n	402268 <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  40227a:	3b01      	subs	r3, #1
  40227c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40227e:	6823      	ldr	r3, [r4, #0]
  402280:	b913      	cbnz	r3, 402288 <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402282:	4b51      	ldr	r3, [pc, #324]	; (4023c8 <xQueueSemaphoreTake+0x1c0>)
  402284:	4798      	blx	r3
  402286:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402288:	6923      	ldr	r3, [r4, #16]
  40228a:	b163      	cbz	r3, 4022a6 <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40228c:	f104 0010 	add.w	r0, r4, #16
  402290:	4b4e      	ldr	r3, [pc, #312]	; (4023cc <xQueueSemaphoreTake+0x1c4>)
  402292:	4798      	blx	r3
  402294:	b138      	cbz	r0, 4022a6 <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  402296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40229a:	4b4d      	ldr	r3, [pc, #308]	; (4023d0 <xQueueSemaphoreTake+0x1c8>)
  40229c:	601a      	str	r2, [r3, #0]
  40229e:	f3bf 8f4f 	dsb	sy
  4022a2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4022a6:	4b4b      	ldr	r3, [pc, #300]	; (4023d4 <xQueueSemaphoreTake+0x1cc>)
  4022a8:	4798      	blx	r3
				return pdPASS;
  4022aa:	2501      	movs	r5, #1
}
  4022ac:	4628      	mov	r0, r5
  4022ae:	b005      	add	sp, #20
  4022b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  4022b4:	b155      	cbz	r5, 4022cc <xQueueSemaphoreTake+0xc4>
  4022b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ba:	b672      	cpsid	i
  4022bc:	f383 8811 	msr	BASEPRI, r3
  4022c0:	f3bf 8f6f 	isb	sy
  4022c4:	f3bf 8f4f 	dsb	sy
  4022c8:	b662      	cpsie	i
  4022ca:	e7fe      	b.n	4022ca <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  4022cc:	4b41      	ldr	r3, [pc, #260]	; (4023d4 <xQueueSemaphoreTake+0x1cc>)
  4022ce:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4022d0:	e7ec      	b.n	4022ac <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4022d2:	a802      	add	r0, sp, #8
  4022d4:	47c8      	blx	r9
  4022d6:	e029      	b.n	40232c <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  4022d8:	2300      	movs	r3, #0
  4022da:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4022de:	e030      	b.n	402342 <xQueueSemaphoreTake+0x13a>
  4022e0:	2300      	movs	r3, #0
  4022e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4022e6:	e032      	b.n	40234e <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  4022e8:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4022ea:	6860      	ldr	r0, [r4, #4]
  4022ec:	4b3a      	ldr	r3, [pc, #232]	; (4023d8 <xQueueSemaphoreTake+0x1d0>)
  4022ee:	4798      	blx	r3
  4022f0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  4022f2:	4b38      	ldr	r3, [pc, #224]	; (4023d4 <xQueueSemaphoreTake+0x1cc>)
  4022f4:	4798      	blx	r3
  4022f6:	e03a      	b.n	40236e <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  4022f8:	4620      	mov	r0, r4
  4022fa:	4b38      	ldr	r3, [pc, #224]	; (4023dc <xQueueSemaphoreTake+0x1d4>)
  4022fc:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4022fe:	4b38      	ldr	r3, [pc, #224]	; (4023e0 <xQueueSemaphoreTake+0x1d8>)
  402300:	4798      	blx	r3
  402302:	e009      	b.n	402318 <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  402304:	4620      	mov	r0, r4
  402306:	4b35      	ldr	r3, [pc, #212]	; (4023dc <xQueueSemaphoreTake+0x1d4>)
  402308:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40230a:	4b35      	ldr	r3, [pc, #212]	; (4023e0 <xQueueSemaphoreTake+0x1d8>)
  40230c:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40230e:	4620      	mov	r0, r4
  402310:	4b34      	ldr	r3, [pc, #208]	; (4023e4 <xQueueSemaphoreTake+0x1dc>)
  402312:	4798      	blx	r3
  402314:	2800      	cmp	r0, #0
  402316:	d13f      	bne.n	402398 <xQueueSemaphoreTake+0x190>
  402318:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  40231a:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  40231c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  40231e:	2b00      	cmp	r3, #0
  402320:	d1ab      	bne.n	40227a <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  402322:	9b01      	ldr	r3, [sp, #4]
  402324:	2b00      	cmp	r3, #0
  402326:	d0c5      	beq.n	4022b4 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  402328:	2f00      	cmp	r7, #0
  40232a:	d0d2      	beq.n	4022d2 <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  40232c:	4b29      	ldr	r3, [pc, #164]	; (4023d4 <xQueueSemaphoreTake+0x1cc>)
  40232e:	4798      	blx	r3
		vTaskSuspendAll();
  402330:	4b2d      	ldr	r3, [pc, #180]	; (4023e8 <xQueueSemaphoreTake+0x1e0>)
  402332:	4798      	blx	r3
		prvLockQueue( pxQueue );
  402334:	47b0      	blx	r6
  402336:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  40233a:	b25b      	sxtb	r3, r3
  40233c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402340:	d0ca      	beq.n	4022d8 <xQueueSemaphoreTake+0xd0>
  402342:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  402346:	b25b      	sxtb	r3, r3
  402348:	f1b3 3fff 	cmp.w	r3, #4294967295
  40234c:	d0c8      	beq.n	4022e0 <xQueueSemaphoreTake+0xd8>
  40234e:	4b21      	ldr	r3, [pc, #132]	; (4023d4 <xQueueSemaphoreTake+0x1cc>)
  402350:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402352:	a901      	add	r1, sp, #4
  402354:	a802      	add	r0, sp, #8
  402356:	4b25      	ldr	r3, [pc, #148]	; (4023ec <xQueueSemaphoreTake+0x1e4>)
  402358:	4798      	blx	r3
  40235a:	2800      	cmp	r0, #0
  40235c:	d1d2      	bne.n	402304 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  40235e:	4620      	mov	r0, r4
  402360:	4b20      	ldr	r3, [pc, #128]	; (4023e4 <xQueueSemaphoreTake+0x1dc>)
  402362:	4798      	blx	r3
  402364:	2800      	cmp	r0, #0
  402366:	d0c7      	beq.n	4022f8 <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  402368:	6823      	ldr	r3, [r4, #0]
  40236a:	2b00      	cmp	r3, #0
  40236c:	d0bc      	beq.n	4022e8 <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  40236e:	9901      	ldr	r1, [sp, #4]
  402370:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402374:	4b1e      	ldr	r3, [pc, #120]	; (4023f0 <xQueueSemaphoreTake+0x1e8>)
  402376:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  402378:	4620      	mov	r0, r4
  40237a:	4b18      	ldr	r3, [pc, #96]	; (4023dc <xQueueSemaphoreTake+0x1d4>)
  40237c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40237e:	4b18      	ldr	r3, [pc, #96]	; (4023e0 <xQueueSemaphoreTake+0x1d8>)
  402380:	4798      	blx	r3
  402382:	2800      	cmp	r0, #0
  402384:	d1c8      	bne.n	402318 <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  402386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40238a:	f8c8 3000 	str.w	r3, [r8]
  40238e:	f3bf 8f4f 	dsb	sy
  402392:	f3bf 8f6f 	isb	sy
  402396:	e7bf      	b.n	402318 <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  402398:	2d00      	cmp	r5, #0
  40239a:	d087      	beq.n	4022ac <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  40239c:	4b09      	ldr	r3, [pc, #36]	; (4023c4 <xQueueSemaphoreTake+0x1bc>)
  40239e:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  4023a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4023a2:	b153      	cbz	r3, 4023ba <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  4023a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  4023a6:	6819      	ldr	r1, [r3, #0]
  4023a8:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  4023ac:	6860      	ldr	r0, [r4, #4]
  4023ae:	4b11      	ldr	r3, [pc, #68]	; (4023f4 <xQueueSemaphoreTake+0x1ec>)
  4023b0:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4023b2:	4b08      	ldr	r3, [pc, #32]	; (4023d4 <xQueueSemaphoreTake+0x1cc>)
  4023b4:	4798      	blx	r3
				return errQUEUE_EMPTY;
  4023b6:	2500      	movs	r5, #0
  4023b8:	e778      	b.n	4022ac <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  4023ba:	2100      	movs	r1, #0
  4023bc:	e7f6      	b.n	4023ac <xQueueSemaphoreTake+0x1a4>
  4023be:	bf00      	nop
  4023c0:	00402df5 	.word	0x00402df5
  4023c4:	004017a5 	.word	0x004017a5
  4023c8:	0040305d 	.word	0x0040305d
  4023cc:	00402ca5 	.word	0x00402ca5
  4023d0:	e000ed04 	.word	0xe000ed04
  4023d4:	004017f1 	.word	0x004017f1
  4023d8:	00402e15 	.word	0x00402e15
  4023dc:	00401bd5 	.word	0x00401bd5
  4023e0:	004029dd 	.word	0x004029dd
  4023e4:	00401a85 	.word	0x00401a85
  4023e8:	00402879 	.word	0x00402879
  4023ec:	00402d55 	.word	0x00402d55
  4023f0:	00402c21 	.word	0x00402c21
  4023f4:	00402f91 	.word	0x00402f91
  4023f8:	00402d3d 	.word	0x00402d3d

004023fc <vQueueAddToRegistry>:
	{
  4023fc:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  4023fe:	4b0b      	ldr	r3, [pc, #44]	; (40242c <vQueueAddToRegistry+0x30>)
  402400:	681b      	ldr	r3, [r3, #0]
  402402:	b153      	cbz	r3, 40241a <vQueueAddToRegistry+0x1e>
  402404:	2301      	movs	r3, #1
  402406:	4c09      	ldr	r4, [pc, #36]	; (40242c <vQueueAddToRegistry+0x30>)
  402408:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  40240c:	b132      	cbz	r2, 40241c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40240e:	3301      	adds	r3, #1
  402410:	2b08      	cmp	r3, #8
  402412:	d1f9      	bne.n	402408 <vQueueAddToRegistry+0xc>
	}
  402414:	f85d 4b04 	ldr.w	r4, [sp], #4
  402418:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40241a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  40241c:	4a03      	ldr	r2, [pc, #12]	; (40242c <vQueueAddToRegistry+0x30>)
  40241e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402422:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  402426:	6058      	str	r0, [r3, #4]
				break;
  402428:	e7f4      	b.n	402414 <vQueueAddToRegistry+0x18>
  40242a:	bf00      	nop
  40242c:	20400bdc 	.word	0x20400bdc

00402430 <vQueueWaitForMessageRestricted>:
	{
  402430:	b570      	push	{r4, r5, r6, lr}
  402432:	4604      	mov	r4, r0
  402434:	460d      	mov	r5, r1
  402436:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402438:	4b12      	ldr	r3, [pc, #72]	; (402484 <vQueueWaitForMessageRestricted+0x54>)
  40243a:	4798      	blx	r3
  40243c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  402440:	b25b      	sxtb	r3, r3
  402442:	f1b3 3fff 	cmp.w	r3, #4294967295
  402446:	d00d      	beq.n	402464 <vQueueWaitForMessageRestricted+0x34>
  402448:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  40244c:	b25b      	sxtb	r3, r3
  40244e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402452:	d00b      	beq.n	40246c <vQueueWaitForMessageRestricted+0x3c>
  402454:	4b0c      	ldr	r3, [pc, #48]	; (402488 <vQueueWaitForMessageRestricted+0x58>)
  402456:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402458:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40245a:	b15b      	cbz	r3, 402474 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  40245c:	4620      	mov	r0, r4
  40245e:	4b0b      	ldr	r3, [pc, #44]	; (40248c <vQueueWaitForMessageRestricted+0x5c>)
  402460:	4798      	blx	r3
  402462:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402464:	2300      	movs	r3, #0
  402466:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  40246a:	e7ed      	b.n	402448 <vQueueWaitForMessageRestricted+0x18>
  40246c:	2300      	movs	r3, #0
  40246e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  402472:	e7ef      	b.n	402454 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  402474:	4632      	mov	r2, r6
  402476:	4629      	mov	r1, r5
  402478:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40247c:	4b04      	ldr	r3, [pc, #16]	; (402490 <vQueueWaitForMessageRestricted+0x60>)
  40247e:	4798      	blx	r3
  402480:	e7ec      	b.n	40245c <vQueueWaitForMessageRestricted+0x2c>
  402482:	bf00      	nop
  402484:	004017a5 	.word	0x004017a5
  402488:	004017f1 	.word	0x004017f1
  40248c:	00401bd5 	.word	0x00401bd5
  402490:	00402c5d 	.word	0x00402c5d

00402494 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402494:	4b08      	ldr	r3, [pc, #32]	; (4024b8 <prvResetNextTaskUnblockTime+0x24>)
  402496:	681b      	ldr	r3, [r3, #0]
  402498:	681b      	ldr	r3, [r3, #0]
  40249a:	b13b      	cbz	r3, 4024ac <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  40249c:	4b06      	ldr	r3, [pc, #24]	; (4024b8 <prvResetNextTaskUnblockTime+0x24>)
  40249e:	681b      	ldr	r3, [r3, #0]
  4024a0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  4024a2:	68db      	ldr	r3, [r3, #12]
  4024a4:	685a      	ldr	r2, [r3, #4]
  4024a6:	4b05      	ldr	r3, [pc, #20]	; (4024bc <prvResetNextTaskUnblockTime+0x28>)
  4024a8:	601a      	str	r2, [r3, #0]
  4024aa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  4024ac:	f04f 32ff 	mov.w	r2, #4294967295
  4024b0:	4b02      	ldr	r3, [pc, #8]	; (4024bc <prvResetNextTaskUnblockTime+0x28>)
  4024b2:	601a      	str	r2, [r3, #0]
  4024b4:	4770      	bx	lr
  4024b6:	bf00      	nop
  4024b8:	20400a60 	.word	0x20400a60
  4024bc:	20400b10 	.word	0x20400b10

004024c0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  4024c0:	b570      	push	{r4, r5, r6, lr}
  4024c2:	4604      	mov	r4, r0
  4024c4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  4024c6:	4b1c      	ldr	r3, [pc, #112]	; (402538 <prvAddCurrentTaskToDelayedList+0x78>)
  4024c8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  4024ca:	4b1c      	ldr	r3, [pc, #112]	; (40253c <prvAddCurrentTaskToDelayedList+0x7c>)
  4024cc:	6818      	ldr	r0, [r3, #0]
  4024ce:	3004      	adds	r0, #4
  4024d0:	4b1b      	ldr	r3, [pc, #108]	; (402540 <prvAddCurrentTaskToDelayedList+0x80>)
  4024d2:	4798      	blx	r3
  4024d4:	b948      	cbnz	r0, 4024ea <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4024d6:	4b19      	ldr	r3, [pc, #100]	; (40253c <prvAddCurrentTaskToDelayedList+0x7c>)
  4024d8:	681a      	ldr	r2, [r3, #0]
  4024da:	491a      	ldr	r1, [pc, #104]	; (402544 <prvAddCurrentTaskToDelayedList+0x84>)
  4024dc:	680b      	ldr	r3, [r1, #0]
  4024de:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4024e0:	2201      	movs	r2, #1
  4024e2:	4082      	lsls	r2, r0
  4024e4:	ea23 0302 	bic.w	r3, r3, r2
  4024e8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  4024ea:	f1b4 3fff 	cmp.w	r4, #4294967295
  4024ee:	d100      	bne.n	4024f2 <prvAddCurrentTaskToDelayedList+0x32>
  4024f0:	b99e      	cbnz	r6, 40251a <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  4024f2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  4024f4:	4b11      	ldr	r3, [pc, #68]	; (40253c <prvAddCurrentTaskToDelayedList+0x7c>)
  4024f6:	681b      	ldr	r3, [r3, #0]
  4024f8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  4024fa:	42a5      	cmp	r5, r4
  4024fc:	d814      	bhi.n	402528 <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  4024fe:	4b12      	ldr	r3, [pc, #72]	; (402548 <prvAddCurrentTaskToDelayedList+0x88>)
  402500:	6818      	ldr	r0, [r3, #0]
  402502:	4b0e      	ldr	r3, [pc, #56]	; (40253c <prvAddCurrentTaskToDelayedList+0x7c>)
  402504:	6819      	ldr	r1, [r3, #0]
  402506:	3104      	adds	r1, #4
  402508:	4b10      	ldr	r3, [pc, #64]	; (40254c <prvAddCurrentTaskToDelayedList+0x8c>)
  40250a:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  40250c:	4b10      	ldr	r3, [pc, #64]	; (402550 <prvAddCurrentTaskToDelayedList+0x90>)
  40250e:	681b      	ldr	r3, [r3, #0]
  402510:	429c      	cmp	r4, r3
  402512:	d201      	bcs.n	402518 <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  402514:	4b0e      	ldr	r3, [pc, #56]	; (402550 <prvAddCurrentTaskToDelayedList+0x90>)
  402516:	601c      	str	r4, [r3, #0]
  402518:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  40251a:	4b08      	ldr	r3, [pc, #32]	; (40253c <prvAddCurrentTaskToDelayedList+0x7c>)
  40251c:	6819      	ldr	r1, [r3, #0]
  40251e:	3104      	adds	r1, #4
  402520:	480c      	ldr	r0, [pc, #48]	; (402554 <prvAddCurrentTaskToDelayedList+0x94>)
  402522:	4b0d      	ldr	r3, [pc, #52]	; (402558 <prvAddCurrentTaskToDelayedList+0x98>)
  402524:	4798      	blx	r3
  402526:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  402528:	4b0c      	ldr	r3, [pc, #48]	; (40255c <prvAddCurrentTaskToDelayedList+0x9c>)
  40252a:	6818      	ldr	r0, [r3, #0]
  40252c:	4b03      	ldr	r3, [pc, #12]	; (40253c <prvAddCurrentTaskToDelayedList+0x7c>)
  40252e:	6819      	ldr	r1, [r3, #0]
  402530:	3104      	adds	r1, #4
  402532:	4b06      	ldr	r3, [pc, #24]	; (40254c <prvAddCurrentTaskToDelayedList+0x8c>)
  402534:	4798      	blx	r3
  402536:	bd70      	pop	{r4, r5, r6, pc}
  402538:	20400b58 	.word	0x20400b58
  40253c:	20400a5c 	.word	0x20400a5c
  402540:	0040169d 	.word	0x0040169d
  402544:	20400ae0 	.word	0x20400ae0
  402548:	20400a60 	.word	0x20400a60
  40254c:	00401669 	.word	0x00401669
  402550:	20400b10 	.word	0x20400b10
  402554:	20400b30 	.word	0x20400b30
  402558:	00401651 	.word	0x00401651
  40255c:	20400a64 	.word	0x20400a64

00402560 <prvIdleTask>:
{
  402560:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  402562:	4d18      	ldr	r5, [pc, #96]	; (4025c4 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  402564:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4025e0 <prvIdleTask+0x80>
				taskYIELD();
  402568:	f8df 9078 	ldr.w	r9, [pc, #120]	; 4025e4 <prvIdleTask+0x84>
  40256c:	e001      	b.n	402572 <prvIdleTask+0x12>
			vApplicationIdleHook();
  40256e:	4b16      	ldr	r3, [pc, #88]	; (4025c8 <prvIdleTask+0x68>)
  402570:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  402572:	682b      	ldr	r3, [r5, #0]
  402574:	b1c3      	cbz	r3, 4025a8 <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402576:	4f15      	ldr	r7, [pc, #84]	; (4025cc <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402578:	4e15      	ldr	r6, [pc, #84]	; (4025d0 <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  40257a:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40257c:	68fb      	ldr	r3, [r7, #12]
  40257e:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402580:	1d20      	adds	r0, r4, #4
  402582:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  402584:	4a13      	ldr	r2, [pc, #76]	; (4025d4 <prvIdleTask+0x74>)
  402586:	6813      	ldr	r3, [r2, #0]
  402588:	3b01      	subs	r3, #1
  40258a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  40258c:	682b      	ldr	r3, [r5, #0]
  40258e:	3b01      	subs	r3, #1
  402590:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  402592:	4b11      	ldr	r3, [pc, #68]	; (4025d8 <prvIdleTask+0x78>)
  402594:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  402596:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402598:	f8df a04c 	ldr.w	sl, [pc, #76]	; 4025e8 <prvIdleTask+0x88>
  40259c:	47d0      	blx	sl
			vPortFree( pxTCB );
  40259e:	4620      	mov	r0, r4
  4025a0:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  4025a2:	682b      	ldr	r3, [r5, #0]
  4025a4:	2b00      	cmp	r3, #0
  4025a6:	d1e8      	bne.n	40257a <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4025a8:	4b0c      	ldr	r3, [pc, #48]	; (4025dc <prvIdleTask+0x7c>)
  4025aa:	681b      	ldr	r3, [r3, #0]
  4025ac:	2b01      	cmp	r3, #1
  4025ae:	d9de      	bls.n	40256e <prvIdleTask+0xe>
				taskYIELD();
  4025b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4025b4:	f8c9 3000 	str.w	r3, [r9]
  4025b8:	f3bf 8f4f 	dsb	sy
  4025bc:	f3bf 8f6f 	isb	sy
  4025c0:	e7d5      	b.n	40256e <prvIdleTask+0xe>
  4025c2:	bf00      	nop
  4025c4:	20400ad0 	.word	0x20400ad0
  4025c8:	00403759 	.word	0x00403759
  4025cc:	20400b44 	.word	0x20400b44
  4025d0:	0040169d 	.word	0x0040169d
  4025d4:	20400acc 	.word	0x20400acc
  4025d8:	004017f1 	.word	0x004017f1
  4025dc:	20400a68 	.word	0x20400a68
  4025e0:	004017a5 	.word	0x004017a5
  4025e4:	e000ed04 	.word	0xe000ed04
  4025e8:	00401a61 	.word	0x00401a61

004025ec <xTaskCreate>:
	{
  4025ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025f0:	b083      	sub	sp, #12
  4025f2:	4683      	mov	fp, r0
  4025f4:	460d      	mov	r5, r1
  4025f6:	9301      	str	r3, [sp, #4]
  4025f8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4025fc:	0096      	lsls	r6, r2, #2
  4025fe:	4630      	mov	r0, r6
  402600:	4b60      	ldr	r3, [pc, #384]	; (402784 <xTaskCreate+0x198>)
  402602:	4798      	blx	r3
			if( pxStack != NULL )
  402604:	2800      	cmp	r0, #0
  402606:	f000 808d 	beq.w	402724 <xTaskCreate+0x138>
  40260a:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  40260c:	2058      	movs	r0, #88	; 0x58
  40260e:	4b5d      	ldr	r3, [pc, #372]	; (402784 <xTaskCreate+0x198>)
  402610:	4798      	blx	r3
				if( pxNewTCB != NULL )
  402612:	4604      	mov	r4, r0
  402614:	2800      	cmp	r0, #0
  402616:	f000 8082 	beq.w	40271e <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  40261a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  40261c:	4632      	mov	r2, r6
  40261e:	21a5      	movs	r1, #165	; 0xa5
  402620:	4638      	mov	r0, r7
  402622:	4b59      	ldr	r3, [pc, #356]	; (402788 <xTaskCreate+0x19c>)
  402624:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  402626:	3e04      	subs	r6, #4
  402628:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40262a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  40262c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402630:	782b      	ldrb	r3, [r5, #0]
  402632:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402636:	782b      	ldrb	r3, [r5, #0]
  402638:	b163      	cbz	r3, 402654 <xTaskCreate+0x68>
  40263a:	462b      	mov	r3, r5
  40263c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402640:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402644:	7858      	ldrb	r0, [r3, #1]
  402646:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40264a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  40264e:	b108      	cbz	r0, 402654 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402650:	428b      	cmp	r3, r1
  402652:	d1f7      	bne.n	402644 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402654:	2700      	movs	r7, #0
  402656:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  40265a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  40265c:	2d04      	cmp	r5, #4
  40265e:	bf28      	it	cs
  402660:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  402662:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  402664:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  402666:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  402668:	f104 0804 	add.w	r8, r4, #4
  40266c:	4640      	mov	r0, r8
  40266e:	f8df 916c 	ldr.w	r9, [pc, #364]	; 4027dc <xTaskCreate+0x1f0>
  402672:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  402674:	f104 0018 	add.w	r0, r4, #24
  402678:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40267a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40267c:	f1c5 0505 	rsb	r5, r5, #5
  402680:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  402682:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  402684:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  402686:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40268a:	9a01      	ldr	r2, [sp, #4]
  40268c:	4659      	mov	r1, fp
  40268e:	4630      	mov	r0, r6
  402690:	4b3e      	ldr	r3, [pc, #248]	; (40278c <xTaskCreate+0x1a0>)
  402692:	4798      	blx	r3
  402694:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  402696:	f1ba 0f00 	cmp.w	sl, #0
  40269a:	d001      	beq.n	4026a0 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  40269c:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  4026a0:	4b3b      	ldr	r3, [pc, #236]	; (402790 <xTaskCreate+0x1a4>)
  4026a2:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  4026a4:	4a3b      	ldr	r2, [pc, #236]	; (402794 <xTaskCreate+0x1a8>)
  4026a6:	6813      	ldr	r3, [r2, #0]
  4026a8:	3301      	adds	r3, #1
  4026aa:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4026ac:	4b3a      	ldr	r3, [pc, #232]	; (402798 <xTaskCreate+0x1ac>)
  4026ae:	681b      	ldr	r3, [r3, #0]
  4026b0:	2b00      	cmp	r3, #0
  4026b2:	d03a      	beq.n	40272a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  4026b4:	4b39      	ldr	r3, [pc, #228]	; (40279c <xTaskCreate+0x1b0>)
  4026b6:	681b      	ldr	r3, [r3, #0]
  4026b8:	b93b      	cbnz	r3, 4026ca <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4026ba:	4b37      	ldr	r3, [pc, #220]	; (402798 <xTaskCreate+0x1ac>)
  4026bc:	681b      	ldr	r3, [r3, #0]
  4026be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4026c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4026c2:	429a      	cmp	r2, r3
  4026c4:	d801      	bhi.n	4026ca <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  4026c6:	4b34      	ldr	r3, [pc, #208]	; (402798 <xTaskCreate+0x1ac>)
  4026c8:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  4026ca:	4a35      	ldr	r2, [pc, #212]	; (4027a0 <xTaskCreate+0x1b4>)
  4026cc:	6813      	ldr	r3, [r2, #0]
  4026ce:	3301      	adds	r3, #1
  4026d0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  4026d2:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  4026d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4026d6:	4a33      	ldr	r2, [pc, #204]	; (4027a4 <xTaskCreate+0x1b8>)
  4026d8:	6811      	ldr	r1, [r2, #0]
  4026da:	2301      	movs	r3, #1
  4026dc:	4083      	lsls	r3, r0
  4026de:	430b      	orrs	r3, r1
  4026e0:	6013      	str	r3, [r2, #0]
  4026e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4026e6:	4641      	mov	r1, r8
  4026e8:	4b2f      	ldr	r3, [pc, #188]	; (4027a8 <xTaskCreate+0x1bc>)
  4026ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4026ee:	4b2f      	ldr	r3, [pc, #188]	; (4027ac <xTaskCreate+0x1c0>)
  4026f0:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4026f2:	4b2f      	ldr	r3, [pc, #188]	; (4027b0 <xTaskCreate+0x1c4>)
  4026f4:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  4026f6:	4b29      	ldr	r3, [pc, #164]	; (40279c <xTaskCreate+0x1b0>)
  4026f8:	681b      	ldr	r3, [r3, #0]
  4026fa:	2b00      	cmp	r3, #0
  4026fc:	d03b      	beq.n	402776 <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4026fe:	4b26      	ldr	r3, [pc, #152]	; (402798 <xTaskCreate+0x1ac>)
  402700:	681b      	ldr	r3, [r3, #0]
  402702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402704:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402706:	429a      	cmp	r2, r3
  402708:	d239      	bcs.n	40277e <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  40270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40270e:	4b29      	ldr	r3, [pc, #164]	; (4027b4 <xTaskCreate+0x1c8>)
  402710:	601a      	str	r2, [r3, #0]
  402712:	f3bf 8f4f 	dsb	sy
  402716:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40271a:	2001      	movs	r0, #1
  40271c:	e02c      	b.n	402778 <xTaskCreate+0x18c>
					vPortFree( pxStack );
  40271e:	4638      	mov	r0, r7
  402720:	4b25      	ldr	r3, [pc, #148]	; (4027b8 <xTaskCreate+0x1cc>)
  402722:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402724:	f04f 30ff 	mov.w	r0, #4294967295
  402728:	e026      	b.n	402778 <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  40272a:	4b1b      	ldr	r3, [pc, #108]	; (402798 <xTaskCreate+0x1ac>)
  40272c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  40272e:	6813      	ldr	r3, [r2, #0]
  402730:	2b01      	cmp	r3, #1
  402732:	d1ca      	bne.n	4026ca <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402734:	4e1c      	ldr	r6, [pc, #112]	; (4027a8 <xTaskCreate+0x1bc>)
  402736:	4630      	mov	r0, r6
  402738:	4d20      	ldr	r5, [pc, #128]	; (4027bc <xTaskCreate+0x1d0>)
  40273a:	47a8      	blx	r5
  40273c:	f106 0014 	add.w	r0, r6, #20
  402740:	47a8      	blx	r5
  402742:	f106 0028 	add.w	r0, r6, #40	; 0x28
  402746:	47a8      	blx	r5
  402748:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  40274c:	47a8      	blx	r5
  40274e:	f106 0050 	add.w	r0, r6, #80	; 0x50
  402752:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  402754:	4f1a      	ldr	r7, [pc, #104]	; (4027c0 <xTaskCreate+0x1d4>)
  402756:	4638      	mov	r0, r7
  402758:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40275a:	4e1a      	ldr	r6, [pc, #104]	; (4027c4 <xTaskCreate+0x1d8>)
  40275c:	4630      	mov	r0, r6
  40275e:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  402760:	4819      	ldr	r0, [pc, #100]	; (4027c8 <xTaskCreate+0x1dc>)
  402762:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  402764:	4819      	ldr	r0, [pc, #100]	; (4027cc <xTaskCreate+0x1e0>)
  402766:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  402768:	4819      	ldr	r0, [pc, #100]	; (4027d0 <xTaskCreate+0x1e4>)
  40276a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  40276c:	4b19      	ldr	r3, [pc, #100]	; (4027d4 <xTaskCreate+0x1e8>)
  40276e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402770:	4b19      	ldr	r3, [pc, #100]	; (4027d8 <xTaskCreate+0x1ec>)
  402772:	601e      	str	r6, [r3, #0]
  402774:	e7a9      	b.n	4026ca <xTaskCreate+0xde>
			xReturn = pdPASS;
  402776:	2001      	movs	r0, #1
	}
  402778:	b003      	add	sp, #12
  40277a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  40277e:	2001      	movs	r0, #1
		return xReturn;
  402780:	e7fa      	b.n	402778 <xTaskCreate+0x18c>
  402782:	bf00      	nop
  402784:	00401a31 	.word	0x00401a31
  402788:	004064f1 	.word	0x004064f1
  40278c:	00401749 	.word	0x00401749
  402790:	004017a5 	.word	0x004017a5
  402794:	20400acc 	.word	0x20400acc
  402798:	20400a5c 	.word	0x20400a5c
  40279c:	20400b2c 	.word	0x20400b2c
  4027a0:	20400adc 	.word	0x20400adc
  4027a4:	20400ae0 	.word	0x20400ae0
  4027a8:	20400a68 	.word	0x20400a68
  4027ac:	00401651 	.word	0x00401651
  4027b0:	004017f1 	.word	0x004017f1
  4027b4:	e000ed04 	.word	0xe000ed04
  4027b8:	00401a61 	.word	0x00401a61
  4027bc:	00401635 	.word	0x00401635
  4027c0:	20400ae4 	.word	0x20400ae4
  4027c4:	20400af8 	.word	0x20400af8
  4027c8:	20400b18 	.word	0x20400b18
  4027cc:	20400b44 	.word	0x20400b44
  4027d0:	20400b30 	.word	0x20400b30
  4027d4:	20400a60 	.word	0x20400a60
  4027d8:	20400a64 	.word	0x20400a64
  4027dc:	0040164b 	.word	0x0040164b

004027e0 <vTaskStartScheduler>:
{
  4027e0:	b510      	push	{r4, lr}
  4027e2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  4027e4:	4b1b      	ldr	r3, [pc, #108]	; (402854 <vTaskStartScheduler+0x74>)
  4027e6:	9301      	str	r3, [sp, #4]
  4027e8:	2300      	movs	r3, #0
  4027ea:	9300      	str	r3, [sp, #0]
  4027ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4027f0:	4919      	ldr	r1, [pc, #100]	; (402858 <vTaskStartScheduler+0x78>)
  4027f2:	481a      	ldr	r0, [pc, #104]	; (40285c <vTaskStartScheduler+0x7c>)
  4027f4:	4c1a      	ldr	r4, [pc, #104]	; (402860 <vTaskStartScheduler+0x80>)
  4027f6:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4027f8:	2801      	cmp	r0, #1
  4027fa:	d004      	beq.n	402806 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  4027fc:	f1b0 3fff 	cmp.w	r0, #4294967295
  402800:	d01c      	beq.n	40283c <vTaskStartScheduler+0x5c>
}
  402802:	b002      	add	sp, #8
  402804:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  402806:	4b17      	ldr	r3, [pc, #92]	; (402864 <vTaskStartScheduler+0x84>)
  402808:	4798      	blx	r3
	if( xReturn == pdPASS )
  40280a:	2801      	cmp	r0, #1
  40280c:	d1f6      	bne.n	4027fc <vTaskStartScheduler+0x1c>
  40280e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402812:	b672      	cpsid	i
  402814:	f383 8811 	msr	BASEPRI, r3
  402818:	f3bf 8f6f 	isb	sy
  40281c:	f3bf 8f4f 	dsb	sy
  402820:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402822:	f04f 32ff 	mov.w	r2, #4294967295
  402826:	4b10      	ldr	r3, [pc, #64]	; (402868 <vTaskStartScheduler+0x88>)
  402828:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40282a:	2201      	movs	r2, #1
  40282c:	4b0f      	ldr	r3, [pc, #60]	; (40286c <vTaskStartScheduler+0x8c>)
  40282e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402830:	2200      	movs	r2, #0
  402832:	4b0f      	ldr	r3, [pc, #60]	; (402870 <vTaskStartScheduler+0x90>)
  402834:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402836:	4b0f      	ldr	r3, [pc, #60]	; (402874 <vTaskStartScheduler+0x94>)
  402838:	4798      	blx	r3
  40283a:	e7e2      	b.n	402802 <vTaskStartScheduler+0x22>
  40283c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402840:	b672      	cpsid	i
  402842:	f383 8811 	msr	BASEPRI, r3
  402846:	f3bf 8f6f 	isb	sy
  40284a:	f3bf 8f4f 	dsb	sy
  40284e:	b662      	cpsie	i
  402850:	e7fe      	b.n	402850 <vTaskStartScheduler+0x70>
  402852:	bf00      	nop
  402854:	20400b0c 	.word	0x20400b0c
  402858:	00408d68 	.word	0x00408d68
  40285c:	00402561 	.word	0x00402561
  402860:	004025ed 	.word	0x004025ed
  402864:	00403135 	.word	0x00403135
  402868:	20400b10 	.word	0x20400b10
  40286c:	20400b2c 	.word	0x20400b2c
  402870:	20400b58 	.word	0x20400b58
  402874:	004018e1 	.word	0x004018e1

00402878 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402878:	4a02      	ldr	r2, [pc, #8]	; (402884 <vTaskSuspendAll+0xc>)
  40287a:	6813      	ldr	r3, [r2, #0]
  40287c:	3301      	adds	r3, #1
  40287e:	6013      	str	r3, [r2, #0]
  402880:	4770      	bx	lr
  402882:	bf00      	nop
  402884:	20400ad8 	.word	0x20400ad8

00402888 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402888:	4b01      	ldr	r3, [pc, #4]	; (402890 <xTaskGetTickCount+0x8>)
  40288a:	6818      	ldr	r0, [r3, #0]
}
  40288c:	4770      	bx	lr
  40288e:	bf00      	nop
  402890:	20400b58 	.word	0x20400b58

00402894 <xTaskIncrementTick>:
{
  402894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402898:	4b41      	ldr	r3, [pc, #260]	; (4029a0 <xTaskIncrementTick+0x10c>)
  40289a:	681b      	ldr	r3, [r3, #0]
  40289c:	2b00      	cmp	r3, #0
  40289e:	d177      	bne.n	402990 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4028a0:	4b40      	ldr	r3, [pc, #256]	; (4029a4 <xTaskIncrementTick+0x110>)
  4028a2:	681d      	ldr	r5, [r3, #0]
  4028a4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  4028a6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4028a8:	b9d5      	cbnz	r5, 4028e0 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  4028aa:	4b3f      	ldr	r3, [pc, #252]	; (4029a8 <xTaskIncrementTick+0x114>)
  4028ac:	681b      	ldr	r3, [r3, #0]
  4028ae:	681b      	ldr	r3, [r3, #0]
  4028b0:	b153      	cbz	r3, 4028c8 <xTaskIncrementTick+0x34>
  4028b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4028b6:	b672      	cpsid	i
  4028b8:	f383 8811 	msr	BASEPRI, r3
  4028bc:	f3bf 8f6f 	isb	sy
  4028c0:	f3bf 8f4f 	dsb	sy
  4028c4:	b662      	cpsie	i
  4028c6:	e7fe      	b.n	4028c6 <xTaskIncrementTick+0x32>
  4028c8:	4a37      	ldr	r2, [pc, #220]	; (4029a8 <xTaskIncrementTick+0x114>)
  4028ca:	6811      	ldr	r1, [r2, #0]
  4028cc:	4b37      	ldr	r3, [pc, #220]	; (4029ac <xTaskIncrementTick+0x118>)
  4028ce:	6818      	ldr	r0, [r3, #0]
  4028d0:	6010      	str	r0, [r2, #0]
  4028d2:	6019      	str	r1, [r3, #0]
  4028d4:	4a36      	ldr	r2, [pc, #216]	; (4029b0 <xTaskIncrementTick+0x11c>)
  4028d6:	6813      	ldr	r3, [r2, #0]
  4028d8:	3301      	adds	r3, #1
  4028da:	6013      	str	r3, [r2, #0]
  4028dc:	4b35      	ldr	r3, [pc, #212]	; (4029b4 <xTaskIncrementTick+0x120>)
  4028de:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  4028e0:	4b35      	ldr	r3, [pc, #212]	; (4029b8 <xTaskIncrementTick+0x124>)
  4028e2:	681b      	ldr	r3, [r3, #0]
  4028e4:	429d      	cmp	r5, r3
  4028e6:	d218      	bcs.n	40291a <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  4028e8:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4028ea:	4b34      	ldr	r3, [pc, #208]	; (4029bc <xTaskIncrementTick+0x128>)
  4028ec:	681b      	ldr	r3, [r3, #0]
  4028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4028f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4028f4:	009b      	lsls	r3, r3, #2
  4028f6:	4a32      	ldr	r2, [pc, #200]	; (4029c0 <xTaskIncrementTick+0x12c>)
  4028f8:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  4028fa:	2b02      	cmp	r3, #2
  4028fc:	bf28      	it	cs
  4028fe:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402900:	4b30      	ldr	r3, [pc, #192]	; (4029c4 <xTaskIncrementTick+0x130>)
  402902:	681b      	ldr	r3, [r3, #0]
  402904:	b90b      	cbnz	r3, 40290a <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  402906:	4b30      	ldr	r3, [pc, #192]	; (4029c8 <xTaskIncrementTick+0x134>)
  402908:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40290a:	4b30      	ldr	r3, [pc, #192]	; (4029cc <xTaskIncrementTick+0x138>)
  40290c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  40290e:	2b00      	cmp	r3, #0
}
  402910:	bf0c      	ite	eq
  402912:	4620      	moveq	r0, r4
  402914:	2001      	movne	r0, #1
  402916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40291a:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40291c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 4029a8 <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402920:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4029d8 <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  402924:	4f2a      	ldr	r7, [pc, #168]	; (4029d0 <xTaskIncrementTick+0x13c>)
  402926:	e01f      	b.n	402968 <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402928:	f04f 32ff 	mov.w	r2, #4294967295
  40292c:	4b22      	ldr	r3, [pc, #136]	; (4029b8 <xTaskIncrementTick+0x124>)
  40292e:	601a      	str	r2, [r3, #0]
					break;
  402930:	e7db      	b.n	4028ea <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  402932:	4a21      	ldr	r2, [pc, #132]	; (4029b8 <xTaskIncrementTick+0x124>)
  402934:	6013      	str	r3, [r2, #0]
						break;
  402936:	e7d8      	b.n	4028ea <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402938:	f106 0018 	add.w	r0, r6, #24
  40293c:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  40293e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  402940:	683a      	ldr	r2, [r7, #0]
  402942:	2301      	movs	r3, #1
  402944:	4083      	lsls	r3, r0
  402946:	4313      	orrs	r3, r2
  402948:	603b      	str	r3, [r7, #0]
  40294a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40294e:	4651      	mov	r1, sl
  402950:	4b1b      	ldr	r3, [pc, #108]	; (4029c0 <xTaskIncrementTick+0x12c>)
  402952:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402956:	4b1f      	ldr	r3, [pc, #124]	; (4029d4 <xTaskIncrementTick+0x140>)
  402958:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40295a:	4b18      	ldr	r3, [pc, #96]	; (4029bc <xTaskIncrementTick+0x128>)
  40295c:	681b      	ldr	r3, [r3, #0]
  40295e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  402960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  402962:	429a      	cmp	r2, r3
  402964:	bf28      	it	cs
  402966:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402968:	f8d9 3000 	ldr.w	r3, [r9]
  40296c:	681b      	ldr	r3, [r3, #0]
  40296e:	2b00      	cmp	r3, #0
  402970:	d0da      	beq.n	402928 <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402972:	f8d9 3000 	ldr.w	r3, [r9]
  402976:	68db      	ldr	r3, [r3, #12]
  402978:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  40297a:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  40297c:	429d      	cmp	r5, r3
  40297e:	d3d8      	bcc.n	402932 <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402980:	f106 0a04 	add.w	sl, r6, #4
  402984:	4650      	mov	r0, sl
  402986:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402988:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  40298a:	2b00      	cmp	r3, #0
  40298c:	d1d4      	bne.n	402938 <xTaskIncrementTick+0xa4>
  40298e:	e7d6      	b.n	40293e <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  402990:	4a0c      	ldr	r2, [pc, #48]	; (4029c4 <xTaskIncrementTick+0x130>)
  402992:	6813      	ldr	r3, [r2, #0]
  402994:	3301      	adds	r3, #1
  402996:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402998:	4b0b      	ldr	r3, [pc, #44]	; (4029c8 <xTaskIncrementTick+0x134>)
  40299a:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40299c:	2400      	movs	r4, #0
  40299e:	e7b4      	b.n	40290a <xTaskIncrementTick+0x76>
  4029a0:	20400ad8 	.word	0x20400ad8
  4029a4:	20400b58 	.word	0x20400b58
  4029a8:	20400a60 	.word	0x20400a60
  4029ac:	20400a64 	.word	0x20400a64
  4029b0:	20400b14 	.word	0x20400b14
  4029b4:	00402495 	.word	0x00402495
  4029b8:	20400b10 	.word	0x20400b10
  4029bc:	20400a5c 	.word	0x20400a5c
  4029c0:	20400a68 	.word	0x20400a68
  4029c4:	20400ad4 	.word	0x20400ad4
  4029c8:	0040375b 	.word	0x0040375b
  4029cc:	20400b5c 	.word	0x20400b5c
  4029d0:	20400ae0 	.word	0x20400ae0
  4029d4:	00401651 	.word	0x00401651
  4029d8:	0040169d 	.word	0x0040169d

004029dc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  4029dc:	4b36      	ldr	r3, [pc, #216]	; (402ab8 <xTaskResumeAll+0xdc>)
  4029de:	681b      	ldr	r3, [r3, #0]
  4029e0:	b953      	cbnz	r3, 4029f8 <xTaskResumeAll+0x1c>
  4029e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029e6:	b672      	cpsid	i
  4029e8:	f383 8811 	msr	BASEPRI, r3
  4029ec:	f3bf 8f6f 	isb	sy
  4029f0:	f3bf 8f4f 	dsb	sy
  4029f4:	b662      	cpsie	i
  4029f6:	e7fe      	b.n	4029f6 <xTaskResumeAll+0x1a>
{
  4029f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  4029fc:	4b2f      	ldr	r3, [pc, #188]	; (402abc <xTaskResumeAll+0xe0>)
  4029fe:	4798      	blx	r3
		--uxSchedulerSuspended;
  402a00:	4b2d      	ldr	r3, [pc, #180]	; (402ab8 <xTaskResumeAll+0xdc>)
  402a02:	681a      	ldr	r2, [r3, #0]
  402a04:	3a01      	subs	r2, #1
  402a06:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a08:	681b      	ldr	r3, [r3, #0]
  402a0a:	2b00      	cmp	r3, #0
  402a0c:	d150      	bne.n	402ab0 <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402a0e:	4b2c      	ldr	r3, [pc, #176]	; (402ac0 <xTaskResumeAll+0xe4>)
  402a10:	681b      	ldr	r3, [r3, #0]
  402a12:	b92b      	cbnz	r3, 402a20 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  402a14:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402a16:	4b2b      	ldr	r3, [pc, #172]	; (402ac4 <xTaskResumeAll+0xe8>)
  402a18:	4798      	blx	r3
}
  402a1a:	4620      	mov	r0, r4
  402a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402a20:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402a22:	4f29      	ldr	r7, [pc, #164]	; (402ac8 <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402a24:	4e29      	ldr	r6, [pc, #164]	; (402acc <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  402a26:	4d2a      	ldr	r5, [pc, #168]	; (402ad0 <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402a28:	683b      	ldr	r3, [r7, #0]
  402a2a:	b303      	cbz	r3, 402a6e <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402a2c:	68fb      	ldr	r3, [r7, #12]
  402a2e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402a30:	f104 0018 	add.w	r0, r4, #24
  402a34:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402a36:	f104 0804 	add.w	r8, r4, #4
  402a3a:	4640      	mov	r0, r8
  402a3c:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402a3e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402a40:	682a      	ldr	r2, [r5, #0]
  402a42:	2301      	movs	r3, #1
  402a44:	4083      	lsls	r3, r0
  402a46:	4313      	orrs	r3, r2
  402a48:	602b      	str	r3, [r5, #0]
  402a4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402a4e:	4641      	mov	r1, r8
  402a50:	4b20      	ldr	r3, [pc, #128]	; (402ad4 <xTaskResumeAll+0xf8>)
  402a52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402a56:	4b20      	ldr	r3, [pc, #128]	; (402ad8 <xTaskResumeAll+0xfc>)
  402a58:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402a5a:	4b20      	ldr	r3, [pc, #128]	; (402adc <xTaskResumeAll+0x100>)
  402a5c:	681b      	ldr	r3, [r3, #0]
  402a5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a62:	429a      	cmp	r2, r3
  402a64:	d3e0      	bcc.n	402a28 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  402a66:	2201      	movs	r2, #1
  402a68:	4b1d      	ldr	r3, [pc, #116]	; (402ae0 <xTaskResumeAll+0x104>)
  402a6a:	601a      	str	r2, [r3, #0]
  402a6c:	e7dc      	b.n	402a28 <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  402a6e:	b10c      	cbz	r4, 402a74 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  402a70:	4b1c      	ldr	r3, [pc, #112]	; (402ae4 <xTaskResumeAll+0x108>)
  402a72:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  402a74:	4b1c      	ldr	r3, [pc, #112]	; (402ae8 <xTaskResumeAll+0x10c>)
  402a76:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  402a78:	b16c      	cbz	r4, 402a96 <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  402a7a:	4f1c      	ldr	r7, [pc, #112]	; (402aec <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  402a7c:	4e18      	ldr	r6, [pc, #96]	; (402ae0 <xTaskResumeAll+0x104>)
  402a7e:	2501      	movs	r5, #1
  402a80:	e001      	b.n	402a86 <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  402a82:	3c01      	subs	r4, #1
  402a84:	d004      	beq.n	402a90 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  402a86:	47b8      	blx	r7
  402a88:	2800      	cmp	r0, #0
  402a8a:	d0fa      	beq.n	402a82 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  402a8c:	6035      	str	r5, [r6, #0]
  402a8e:	e7f8      	b.n	402a82 <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  402a90:	2200      	movs	r2, #0
  402a92:	4b15      	ldr	r3, [pc, #84]	; (402ae8 <xTaskResumeAll+0x10c>)
  402a94:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  402a96:	4b12      	ldr	r3, [pc, #72]	; (402ae0 <xTaskResumeAll+0x104>)
  402a98:	681b      	ldr	r3, [r3, #0]
  402a9a:	b15b      	cbz	r3, 402ab4 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  402a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402aa0:	4b13      	ldr	r3, [pc, #76]	; (402af0 <xTaskResumeAll+0x114>)
  402aa2:	601a      	str	r2, [r3, #0]
  402aa4:	f3bf 8f4f 	dsb	sy
  402aa8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402aac:	2401      	movs	r4, #1
  402aae:	e7b2      	b.n	402a16 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  402ab0:	2400      	movs	r4, #0
  402ab2:	e7b0      	b.n	402a16 <xTaskResumeAll+0x3a>
  402ab4:	2400      	movs	r4, #0
  402ab6:	e7ae      	b.n	402a16 <xTaskResumeAll+0x3a>
  402ab8:	20400ad8 	.word	0x20400ad8
  402abc:	004017a5 	.word	0x004017a5
  402ac0:	20400acc 	.word	0x20400acc
  402ac4:	004017f1 	.word	0x004017f1
  402ac8:	20400b18 	.word	0x20400b18
  402acc:	0040169d 	.word	0x0040169d
  402ad0:	20400ae0 	.word	0x20400ae0
  402ad4:	20400a68 	.word	0x20400a68
  402ad8:	00401651 	.word	0x00401651
  402adc:	20400a5c 	.word	0x20400a5c
  402ae0:	20400b5c 	.word	0x20400b5c
  402ae4:	00402495 	.word	0x00402495
  402ae8:	20400ad4 	.word	0x20400ad4
  402aec:	00402895 	.word	0x00402895
  402af0:	e000ed04 	.word	0xe000ed04

00402af4 <vTaskDelay>:
	{
  402af4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402af6:	b1b8      	cbz	r0, 402b28 <vTaskDelay+0x34>
  402af8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402afa:	4b10      	ldr	r3, [pc, #64]	; (402b3c <vTaskDelay+0x48>)
  402afc:	681b      	ldr	r3, [r3, #0]
  402afe:	b153      	cbz	r3, 402b16 <vTaskDelay+0x22>
  402b00:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b04:	b672      	cpsid	i
  402b06:	f383 8811 	msr	BASEPRI, r3
  402b0a:	f3bf 8f6f 	isb	sy
  402b0e:	f3bf 8f4f 	dsb	sy
  402b12:	b662      	cpsie	i
  402b14:	e7fe      	b.n	402b14 <vTaskDelay+0x20>
			vTaskSuspendAll();
  402b16:	4b0a      	ldr	r3, [pc, #40]	; (402b40 <vTaskDelay+0x4c>)
  402b18:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  402b1a:	2100      	movs	r1, #0
  402b1c:	4620      	mov	r0, r4
  402b1e:	4b09      	ldr	r3, [pc, #36]	; (402b44 <vTaskDelay+0x50>)
  402b20:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  402b22:	4b09      	ldr	r3, [pc, #36]	; (402b48 <vTaskDelay+0x54>)
  402b24:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  402b26:	b938      	cbnz	r0, 402b38 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  402b28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402b2c:	4b07      	ldr	r3, [pc, #28]	; (402b4c <vTaskDelay+0x58>)
  402b2e:	601a      	str	r2, [r3, #0]
  402b30:	f3bf 8f4f 	dsb	sy
  402b34:	f3bf 8f6f 	isb	sy
  402b38:	bd10      	pop	{r4, pc}
  402b3a:	bf00      	nop
  402b3c:	20400ad8 	.word	0x20400ad8
  402b40:	00402879 	.word	0x00402879
  402b44:	004024c1 	.word	0x004024c1
  402b48:	004029dd 	.word	0x004029dd
  402b4c:	e000ed04 	.word	0xe000ed04

00402b50 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  402b50:	4b2d      	ldr	r3, [pc, #180]	; (402c08 <vTaskSwitchContext+0xb8>)
  402b52:	681b      	ldr	r3, [r3, #0]
  402b54:	2b00      	cmp	r3, #0
  402b56:	d12c      	bne.n	402bb2 <vTaskSwitchContext+0x62>
{
  402b58:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402b5a:	2200      	movs	r2, #0
  402b5c:	4b2b      	ldr	r3, [pc, #172]	; (402c0c <vTaskSwitchContext+0xbc>)
  402b5e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  402b60:	4b2b      	ldr	r3, [pc, #172]	; (402c10 <vTaskSwitchContext+0xc0>)
  402b62:	681b      	ldr	r3, [r3, #0]
  402b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402b66:	681a      	ldr	r2, [r3, #0]
  402b68:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402b6c:	d103      	bne.n	402b76 <vTaskSwitchContext+0x26>
  402b6e:	685a      	ldr	r2, [r3, #4]
  402b70:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402b74:	d021      	beq.n	402bba <vTaskSwitchContext+0x6a>
  402b76:	4b26      	ldr	r3, [pc, #152]	; (402c10 <vTaskSwitchContext+0xc0>)
  402b78:	6818      	ldr	r0, [r3, #0]
  402b7a:	6819      	ldr	r1, [r3, #0]
  402b7c:	3134      	adds	r1, #52	; 0x34
  402b7e:	4b25      	ldr	r3, [pc, #148]	; (402c14 <vTaskSwitchContext+0xc4>)
  402b80:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402b82:	4b25      	ldr	r3, [pc, #148]	; (402c18 <vTaskSwitchContext+0xc8>)
  402b84:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  402b86:	fab3 f383 	clz	r3, r3
  402b8a:	b2db      	uxtb	r3, r3
  402b8c:	f1c3 031f 	rsb	r3, r3, #31
  402b90:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402b94:	0092      	lsls	r2, r2, #2
  402b96:	4921      	ldr	r1, [pc, #132]	; (402c1c <vTaskSwitchContext+0xcc>)
  402b98:	588a      	ldr	r2, [r1, r2]
  402b9a:	b9ba      	cbnz	r2, 402bcc <vTaskSwitchContext+0x7c>
	__asm volatile
  402b9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ba0:	b672      	cpsid	i
  402ba2:	f383 8811 	msr	BASEPRI, r3
  402ba6:	f3bf 8f6f 	isb	sy
  402baa:	f3bf 8f4f 	dsb	sy
  402bae:	b662      	cpsie	i
  402bb0:	e7fe      	b.n	402bb0 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402bb2:	2201      	movs	r2, #1
  402bb4:	4b15      	ldr	r3, [pc, #84]	; (402c0c <vTaskSwitchContext+0xbc>)
  402bb6:	601a      	str	r2, [r3, #0]
  402bb8:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402bba:	689a      	ldr	r2, [r3, #8]
  402bbc:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402bc0:	d1d9      	bne.n	402b76 <vTaskSwitchContext+0x26>
  402bc2:	68db      	ldr	r3, [r3, #12]
  402bc4:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402bc8:	d1d5      	bne.n	402b76 <vTaskSwitchContext+0x26>
  402bca:	e7da      	b.n	402b82 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402bcc:	4a13      	ldr	r2, [pc, #76]	; (402c1c <vTaskSwitchContext+0xcc>)
  402bce:	0099      	lsls	r1, r3, #2
  402bd0:	18c8      	adds	r0, r1, r3
  402bd2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402bd6:	6844      	ldr	r4, [r0, #4]
  402bd8:	6864      	ldr	r4, [r4, #4]
  402bda:	6044      	str	r4, [r0, #4]
  402bdc:	4419      	add	r1, r3
  402bde:	4602      	mov	r2, r0
  402be0:	3208      	adds	r2, #8
  402be2:	4294      	cmp	r4, r2
  402be4:	d009      	beq.n	402bfa <vTaskSwitchContext+0xaa>
  402be6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402bea:	4a0c      	ldr	r2, [pc, #48]	; (402c1c <vTaskSwitchContext+0xcc>)
  402bec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402bf0:	685b      	ldr	r3, [r3, #4]
  402bf2:	68da      	ldr	r2, [r3, #12]
  402bf4:	4b06      	ldr	r3, [pc, #24]	; (402c10 <vTaskSwitchContext+0xc0>)
  402bf6:	601a      	str	r2, [r3, #0]
  402bf8:	bd10      	pop	{r4, pc}
  402bfa:	6860      	ldr	r0, [r4, #4]
  402bfc:	4a07      	ldr	r2, [pc, #28]	; (402c1c <vTaskSwitchContext+0xcc>)
  402bfe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402c02:	6050      	str	r0, [r2, #4]
  402c04:	e7ef      	b.n	402be6 <vTaskSwitchContext+0x96>
  402c06:	bf00      	nop
  402c08:	20400ad8 	.word	0x20400ad8
  402c0c:	20400b5c 	.word	0x20400b5c
  402c10:	20400a5c 	.word	0x20400a5c
  402c14:	00403741 	.word	0x00403741
  402c18:	20400ae0 	.word	0x20400ae0
  402c1c:	20400a68 	.word	0x20400a68

00402c20 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  402c20:	b950      	cbnz	r0, 402c38 <vTaskPlaceOnEventList+0x18>
  402c22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c26:	b672      	cpsid	i
  402c28:	f383 8811 	msr	BASEPRI, r3
  402c2c:	f3bf 8f6f 	isb	sy
  402c30:	f3bf 8f4f 	dsb	sy
  402c34:	b662      	cpsie	i
  402c36:	e7fe      	b.n	402c36 <vTaskPlaceOnEventList+0x16>
{
  402c38:	b510      	push	{r4, lr}
  402c3a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402c3c:	4b04      	ldr	r3, [pc, #16]	; (402c50 <vTaskPlaceOnEventList+0x30>)
  402c3e:	6819      	ldr	r1, [r3, #0]
  402c40:	3118      	adds	r1, #24
  402c42:	4b04      	ldr	r3, [pc, #16]	; (402c54 <vTaskPlaceOnEventList+0x34>)
  402c44:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  402c46:	2101      	movs	r1, #1
  402c48:	4620      	mov	r0, r4
  402c4a:	4b03      	ldr	r3, [pc, #12]	; (402c58 <vTaskPlaceOnEventList+0x38>)
  402c4c:	4798      	blx	r3
  402c4e:	bd10      	pop	{r4, pc}
  402c50:	20400a5c 	.word	0x20400a5c
  402c54:	00401669 	.word	0x00401669
  402c58:	004024c1 	.word	0x004024c1

00402c5c <vTaskPlaceOnEventListRestricted>:
	{
  402c5c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  402c5e:	b178      	cbz	r0, 402c80 <vTaskPlaceOnEventListRestricted+0x24>
  402c60:	4614      	mov	r4, r2
  402c62:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402c64:	4b0c      	ldr	r3, [pc, #48]	; (402c98 <vTaskPlaceOnEventListRestricted+0x3c>)
  402c66:	6819      	ldr	r1, [r3, #0]
  402c68:	3118      	adds	r1, #24
  402c6a:	4b0c      	ldr	r3, [pc, #48]	; (402c9c <vTaskPlaceOnEventListRestricted+0x40>)
  402c6c:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  402c6e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  402c70:	4621      	mov	r1, r4
  402c72:	bf0c      	ite	eq
  402c74:	4628      	moveq	r0, r5
  402c76:	f04f 30ff 	movne.w	r0, #4294967295
  402c7a:	4b09      	ldr	r3, [pc, #36]	; (402ca0 <vTaskPlaceOnEventListRestricted+0x44>)
  402c7c:	4798      	blx	r3
  402c7e:	bd38      	pop	{r3, r4, r5, pc}
  402c80:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c84:	b672      	cpsid	i
  402c86:	f383 8811 	msr	BASEPRI, r3
  402c8a:	f3bf 8f6f 	isb	sy
  402c8e:	f3bf 8f4f 	dsb	sy
  402c92:	b662      	cpsie	i
  402c94:	e7fe      	b.n	402c94 <vTaskPlaceOnEventListRestricted+0x38>
  402c96:	bf00      	nop
  402c98:	20400a5c 	.word	0x20400a5c
  402c9c:	00401651 	.word	0x00401651
  402ca0:	004024c1 	.word	0x004024c1

00402ca4 <xTaskRemoveFromEventList>:
{
  402ca4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402ca6:	68c3      	ldr	r3, [r0, #12]
  402ca8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402caa:	b324      	cbz	r4, 402cf6 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402cac:	f104 0518 	add.w	r5, r4, #24
  402cb0:	4628      	mov	r0, r5
  402cb2:	4b1a      	ldr	r3, [pc, #104]	; (402d1c <xTaskRemoveFromEventList+0x78>)
  402cb4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402cb6:	4b1a      	ldr	r3, [pc, #104]	; (402d20 <xTaskRemoveFromEventList+0x7c>)
  402cb8:	681b      	ldr	r3, [r3, #0]
  402cba:	bb3b      	cbnz	r3, 402d0c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  402cbc:	1d25      	adds	r5, r4, #4
  402cbe:	4628      	mov	r0, r5
  402cc0:	4b16      	ldr	r3, [pc, #88]	; (402d1c <xTaskRemoveFromEventList+0x78>)
  402cc2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402cc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402cc6:	4a17      	ldr	r2, [pc, #92]	; (402d24 <xTaskRemoveFromEventList+0x80>)
  402cc8:	6811      	ldr	r1, [r2, #0]
  402cca:	2301      	movs	r3, #1
  402ccc:	4083      	lsls	r3, r0
  402cce:	430b      	orrs	r3, r1
  402cd0:	6013      	str	r3, [r2, #0]
  402cd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402cd6:	4629      	mov	r1, r5
  402cd8:	4b13      	ldr	r3, [pc, #76]	; (402d28 <xTaskRemoveFromEventList+0x84>)
  402cda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402cde:	4b13      	ldr	r3, [pc, #76]	; (402d2c <xTaskRemoveFromEventList+0x88>)
  402ce0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402ce2:	4b13      	ldr	r3, [pc, #76]	; (402d30 <xTaskRemoveFromEventList+0x8c>)
  402ce4:	681b      	ldr	r3, [r3, #0]
  402ce6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402cea:	429a      	cmp	r2, r3
  402cec:	d913      	bls.n	402d16 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402cee:	2001      	movs	r0, #1
  402cf0:	4b10      	ldr	r3, [pc, #64]	; (402d34 <xTaskRemoveFromEventList+0x90>)
  402cf2:	6018      	str	r0, [r3, #0]
  402cf4:	bd38      	pop	{r3, r4, r5, pc}
  402cf6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cfa:	b672      	cpsid	i
  402cfc:	f383 8811 	msr	BASEPRI, r3
  402d00:	f3bf 8f6f 	isb	sy
  402d04:	f3bf 8f4f 	dsb	sy
  402d08:	b662      	cpsie	i
  402d0a:	e7fe      	b.n	402d0a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402d0c:	4629      	mov	r1, r5
  402d0e:	480a      	ldr	r0, [pc, #40]	; (402d38 <xTaskRemoveFromEventList+0x94>)
  402d10:	4b06      	ldr	r3, [pc, #24]	; (402d2c <xTaskRemoveFromEventList+0x88>)
  402d12:	4798      	blx	r3
  402d14:	e7e5      	b.n	402ce2 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402d16:	2000      	movs	r0, #0
}
  402d18:	bd38      	pop	{r3, r4, r5, pc}
  402d1a:	bf00      	nop
  402d1c:	0040169d 	.word	0x0040169d
  402d20:	20400ad8 	.word	0x20400ad8
  402d24:	20400ae0 	.word	0x20400ae0
  402d28:	20400a68 	.word	0x20400a68
  402d2c:	00401651 	.word	0x00401651
  402d30:	20400a5c 	.word	0x20400a5c
  402d34:	20400b5c 	.word	0x20400b5c
  402d38:	20400b18 	.word	0x20400b18

00402d3c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402d3c:	4b03      	ldr	r3, [pc, #12]	; (402d4c <vTaskInternalSetTimeOutState+0x10>)
  402d3e:	681b      	ldr	r3, [r3, #0]
  402d40:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402d42:	4b03      	ldr	r3, [pc, #12]	; (402d50 <vTaskInternalSetTimeOutState+0x14>)
  402d44:	681b      	ldr	r3, [r3, #0]
  402d46:	6043      	str	r3, [r0, #4]
  402d48:	4770      	bx	lr
  402d4a:	bf00      	nop
  402d4c:	20400b14 	.word	0x20400b14
  402d50:	20400b58 	.word	0x20400b58

00402d54 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  402d54:	b1a8      	cbz	r0, 402d82 <xTaskCheckForTimeOut+0x2e>
{
  402d56:	b570      	push	{r4, r5, r6, lr}
  402d58:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  402d5a:	b1e9      	cbz	r1, 402d98 <xTaskCheckForTimeOut+0x44>
  402d5c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  402d5e:	4b1d      	ldr	r3, [pc, #116]	; (402dd4 <xTaskCheckForTimeOut+0x80>)
  402d60:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402d62:	4b1d      	ldr	r3, [pc, #116]	; (402dd8 <xTaskCheckForTimeOut+0x84>)
  402d64:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402d66:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  402d68:	6823      	ldr	r3, [r4, #0]
  402d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
  402d6e:	d02f      	beq.n	402dd0 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402d70:	481a      	ldr	r0, [pc, #104]	; (402ddc <xTaskCheckForTimeOut+0x88>)
  402d72:	6800      	ldr	r0, [r0, #0]
  402d74:	682e      	ldr	r6, [r5, #0]
  402d76:	4286      	cmp	r6, r0
  402d78:	d019      	beq.n	402dae <xTaskCheckForTimeOut+0x5a>
  402d7a:	428a      	cmp	r2, r1
  402d7c:	d317      	bcc.n	402dae <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  402d7e:	2401      	movs	r4, #1
  402d80:	e01b      	b.n	402dba <xTaskCheckForTimeOut+0x66>
  402d82:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d86:	b672      	cpsid	i
  402d88:	f383 8811 	msr	BASEPRI, r3
  402d8c:	f3bf 8f6f 	isb	sy
  402d90:	f3bf 8f4f 	dsb	sy
  402d94:	b662      	cpsie	i
  402d96:	e7fe      	b.n	402d96 <xTaskCheckForTimeOut+0x42>
  402d98:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d9c:	b672      	cpsid	i
  402d9e:	f383 8811 	msr	BASEPRI, r3
  402da2:	f3bf 8f6f 	isb	sy
  402da6:	f3bf 8f4f 	dsb	sy
  402daa:	b662      	cpsie	i
  402dac:	e7fe      	b.n	402dac <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402dae:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  402db0:	429a      	cmp	r2, r3
  402db2:	d306      	bcc.n	402dc2 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  402db4:	2300      	movs	r3, #0
  402db6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  402db8:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  402dba:	4b09      	ldr	r3, [pc, #36]	; (402de0 <xTaskCheckForTimeOut+0x8c>)
  402dbc:	4798      	blx	r3
}
  402dbe:	4620      	mov	r0, r4
  402dc0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  402dc2:	1a9b      	subs	r3, r3, r2
  402dc4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  402dc6:	4628      	mov	r0, r5
  402dc8:	4b06      	ldr	r3, [pc, #24]	; (402de4 <xTaskCheckForTimeOut+0x90>)
  402dca:	4798      	blx	r3
			xReturn = pdFALSE;
  402dcc:	2400      	movs	r4, #0
  402dce:	e7f4      	b.n	402dba <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  402dd0:	2400      	movs	r4, #0
  402dd2:	e7f2      	b.n	402dba <xTaskCheckForTimeOut+0x66>
  402dd4:	004017a5 	.word	0x004017a5
  402dd8:	20400b58 	.word	0x20400b58
  402ddc:	20400b14 	.word	0x20400b14
  402de0:	004017f1 	.word	0x004017f1
  402de4:	00402d3d 	.word	0x00402d3d

00402de8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402de8:	2201      	movs	r2, #1
  402dea:	4b01      	ldr	r3, [pc, #4]	; (402df0 <vTaskMissedYield+0x8>)
  402dec:	601a      	str	r2, [r3, #0]
  402dee:	4770      	bx	lr
  402df0:	20400b5c 	.word	0x20400b5c

00402df4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  402df4:	4b05      	ldr	r3, [pc, #20]	; (402e0c <xTaskGetSchedulerState+0x18>)
  402df6:	681b      	ldr	r3, [r3, #0]
  402df8:	b133      	cbz	r3, 402e08 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402dfa:	4b05      	ldr	r3, [pc, #20]	; (402e10 <xTaskGetSchedulerState+0x1c>)
  402dfc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  402dfe:	2b00      	cmp	r3, #0
  402e00:	bf0c      	ite	eq
  402e02:	2002      	moveq	r0, #2
  402e04:	2000      	movne	r0, #0
  402e06:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402e08:	2001      	movs	r0, #1
	}
  402e0a:	4770      	bx	lr
  402e0c:	20400b2c 	.word	0x20400b2c
  402e10:	20400ad8 	.word	0x20400ad8

00402e14 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  402e14:	2800      	cmp	r0, #0
  402e16:	d050      	beq.n	402eba <xTaskPriorityInherit+0xa6>
	{
  402e18:	b538      	push	{r3, r4, r5, lr}
  402e1a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  402e1c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402e1e:	4928      	ldr	r1, [pc, #160]	; (402ec0 <xTaskPriorityInherit+0xac>)
  402e20:	6809      	ldr	r1, [r1, #0]
  402e22:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e24:	428a      	cmp	r2, r1
  402e26:	d23f      	bcs.n	402ea8 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402e28:	6981      	ldr	r1, [r0, #24]
  402e2a:	2900      	cmp	r1, #0
  402e2c:	db05      	blt.n	402e3a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402e2e:	4924      	ldr	r1, [pc, #144]	; (402ec0 <xTaskPriorityInherit+0xac>)
  402e30:	6809      	ldr	r1, [r1, #0]
  402e32:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402e34:	f1c1 0105 	rsb	r1, r1, #5
  402e38:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  402e3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402e3e:	4921      	ldr	r1, [pc, #132]	; (402ec4 <xTaskPriorityInherit+0xb0>)
  402e40:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402e44:	6961      	ldr	r1, [r4, #20]
  402e46:	4291      	cmp	r1, r2
  402e48:	d005      	beq.n	402e56 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e4a:	4a1d      	ldr	r2, [pc, #116]	; (402ec0 <xTaskPriorityInherit+0xac>)
  402e4c:	6812      	ldr	r2, [r2, #0]
  402e4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402e50:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  402e52:	2001      	movs	r0, #1
  402e54:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402e56:	1d25      	adds	r5, r4, #4
  402e58:	4628      	mov	r0, r5
  402e5a:	4b1b      	ldr	r3, [pc, #108]	; (402ec8 <xTaskPriorityInherit+0xb4>)
  402e5c:	4798      	blx	r3
  402e5e:	b970      	cbnz	r0, 402e7e <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  402e60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402e62:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402e66:	009b      	lsls	r3, r3, #2
  402e68:	4916      	ldr	r1, [pc, #88]	; (402ec4 <xTaskPriorityInherit+0xb0>)
  402e6a:	58cb      	ldr	r3, [r1, r3]
  402e6c:	b93b      	cbnz	r3, 402e7e <xTaskPriorityInherit+0x6a>
  402e6e:	4817      	ldr	r0, [pc, #92]	; (402ecc <xTaskPriorityInherit+0xb8>)
  402e70:	6803      	ldr	r3, [r0, #0]
  402e72:	2101      	movs	r1, #1
  402e74:	fa01 f202 	lsl.w	r2, r1, r2
  402e78:	ea23 0202 	bic.w	r2, r3, r2
  402e7c:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  402e7e:	4b10      	ldr	r3, [pc, #64]	; (402ec0 <xTaskPriorityInherit+0xac>)
  402e80:	681b      	ldr	r3, [r3, #0]
  402e82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402e84:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  402e86:	4a11      	ldr	r2, [pc, #68]	; (402ecc <xTaskPriorityInherit+0xb8>)
  402e88:	6811      	ldr	r1, [r2, #0]
  402e8a:	2401      	movs	r4, #1
  402e8c:	fa04 f300 	lsl.w	r3, r4, r0
  402e90:	430b      	orrs	r3, r1
  402e92:	6013      	str	r3, [r2, #0]
  402e94:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402e98:	4629      	mov	r1, r5
  402e9a:	4b0a      	ldr	r3, [pc, #40]	; (402ec4 <xTaskPriorityInherit+0xb0>)
  402e9c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ea0:	4b0b      	ldr	r3, [pc, #44]	; (402ed0 <xTaskPriorityInherit+0xbc>)
  402ea2:	4798      	blx	r3
				xReturn = pdTRUE;
  402ea4:	4620      	mov	r0, r4
  402ea6:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  402ea8:	4a05      	ldr	r2, [pc, #20]	; (402ec0 <xTaskPriorityInherit+0xac>)
  402eaa:	6812      	ldr	r2, [r2, #0]
  402eac:	6c80      	ldr	r0, [r0, #72]	; 0x48
  402eae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402eb0:	4298      	cmp	r0, r3
  402eb2:	bf2c      	ite	cs
  402eb4:	2000      	movcs	r0, #0
  402eb6:	2001      	movcc	r0, #1
  402eb8:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402eba:	2000      	movs	r0, #0
		return xReturn;
  402ebc:	4770      	bx	lr
  402ebe:	bf00      	nop
  402ec0:	20400a5c 	.word	0x20400a5c
  402ec4:	20400a68 	.word	0x20400a68
  402ec8:	0040169d 	.word	0x0040169d
  402ecc:	20400ae0 	.word	0x20400ae0
  402ed0:	00401651 	.word	0x00401651

00402ed4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  402ed4:	2800      	cmp	r0, #0
  402ed6:	d04d      	beq.n	402f74 <xTaskPriorityDisinherit+0xa0>
	{
  402ed8:	b538      	push	{r3, r4, r5, lr}
  402eda:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  402edc:	4a27      	ldr	r2, [pc, #156]	; (402f7c <xTaskPriorityDisinherit+0xa8>)
  402ede:	6812      	ldr	r2, [r2, #0]
  402ee0:	4290      	cmp	r0, r2
  402ee2:	d00a      	beq.n	402efa <xTaskPriorityDisinherit+0x26>
  402ee4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ee8:	b672      	cpsid	i
  402eea:	f383 8811 	msr	BASEPRI, r3
  402eee:	f3bf 8f6f 	isb	sy
  402ef2:	f3bf 8f4f 	dsb	sy
  402ef6:	b662      	cpsie	i
  402ef8:	e7fe      	b.n	402ef8 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  402efa:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402efc:	b952      	cbnz	r2, 402f14 <xTaskPriorityDisinherit+0x40>
  402efe:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f02:	b672      	cpsid	i
  402f04:	f383 8811 	msr	BASEPRI, r3
  402f08:	f3bf 8f6f 	isb	sy
  402f0c:	f3bf 8f4f 	dsb	sy
  402f10:	b662      	cpsie	i
  402f12:	e7fe      	b.n	402f12 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402f14:	3a01      	subs	r2, #1
  402f16:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402f18:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402f1a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402f1c:	4288      	cmp	r0, r1
  402f1e:	d02b      	beq.n	402f78 <xTaskPriorityDisinherit+0xa4>
  402f20:	bb52      	cbnz	r2, 402f78 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402f22:	1d25      	adds	r5, r4, #4
  402f24:	4628      	mov	r0, r5
  402f26:	4b16      	ldr	r3, [pc, #88]	; (402f80 <xTaskPriorityDisinherit+0xac>)
  402f28:	4798      	blx	r3
  402f2a:	b968      	cbnz	r0, 402f48 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402f2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402f2e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402f32:	009b      	lsls	r3, r3, #2
  402f34:	4a13      	ldr	r2, [pc, #76]	; (402f84 <xTaskPriorityDisinherit+0xb0>)
  402f36:	58d3      	ldr	r3, [r2, r3]
  402f38:	b933      	cbnz	r3, 402f48 <xTaskPriorityDisinherit+0x74>
  402f3a:	4813      	ldr	r0, [pc, #76]	; (402f88 <xTaskPriorityDisinherit+0xb4>)
  402f3c:	6803      	ldr	r3, [r0, #0]
  402f3e:	2201      	movs	r2, #1
  402f40:	408a      	lsls	r2, r1
  402f42:	ea23 0302 	bic.w	r3, r3, r2
  402f46:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402f48:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402f4a:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402f4c:	f1c0 0305 	rsb	r3, r0, #5
  402f50:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402f52:	4a0d      	ldr	r2, [pc, #52]	; (402f88 <xTaskPriorityDisinherit+0xb4>)
  402f54:	6811      	ldr	r1, [r2, #0]
  402f56:	2401      	movs	r4, #1
  402f58:	fa04 f300 	lsl.w	r3, r4, r0
  402f5c:	430b      	orrs	r3, r1
  402f5e:	6013      	str	r3, [r2, #0]
  402f60:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f64:	4629      	mov	r1, r5
  402f66:	4b07      	ldr	r3, [pc, #28]	; (402f84 <xTaskPriorityDisinherit+0xb0>)
  402f68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402f6c:	4b07      	ldr	r3, [pc, #28]	; (402f8c <xTaskPriorityDisinherit+0xb8>)
  402f6e:	4798      	blx	r3
					xReturn = pdTRUE;
  402f70:	4620      	mov	r0, r4
  402f72:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402f74:	2000      	movs	r0, #0
  402f76:	4770      	bx	lr
  402f78:	2000      	movs	r0, #0
	}
  402f7a:	bd38      	pop	{r3, r4, r5, pc}
  402f7c:	20400a5c 	.word	0x20400a5c
  402f80:	0040169d 	.word	0x0040169d
  402f84:	20400a68 	.word	0x20400a68
  402f88:	20400ae0 	.word	0x20400ae0
  402f8c:	00401651 	.word	0x00401651

00402f90 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  402f90:	2800      	cmp	r0, #0
  402f92:	d058      	beq.n	403046 <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  402f94:	b538      	push	{r3, r4, r5, lr}
  402f96:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  402f98:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  402f9a:	b950      	cbnz	r0, 402fb2 <vTaskPriorityDisinheritAfterTimeout+0x22>
  402f9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fa0:	b672      	cpsid	i
  402fa2:	f383 8811 	msr	BASEPRI, r3
  402fa6:	f3bf 8f6f 	isb	sy
  402faa:	f3bf 8f4f 	dsb	sy
  402fae:	b662      	cpsie	i
  402fb0:	e7fe      	b.n	402fb0 <vTaskPriorityDisinheritAfterTimeout+0x20>
  402fb2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  402fb4:	428a      	cmp	r2, r1
  402fb6:	bf38      	it	cc
  402fb8:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  402fba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  402fbc:	2801      	cmp	r0, #1
  402fbe:	d141      	bne.n	403044 <vTaskPriorityDisinheritAfterTimeout+0xb4>
  402fc0:	4291      	cmp	r1, r2
  402fc2:	d03f      	beq.n	403044 <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  402fc4:	4820      	ldr	r0, [pc, #128]	; (403048 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  402fc6:	6800      	ldr	r0, [r0, #0]
  402fc8:	4284      	cmp	r4, r0
  402fca:	d10a      	bne.n	402fe2 <vTaskPriorityDisinheritAfterTimeout+0x52>
  402fcc:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fd0:	b672      	cpsid	i
  402fd2:	f383 8811 	msr	BASEPRI, r3
  402fd6:	f3bf 8f6f 	isb	sy
  402fda:	f3bf 8f4f 	dsb	sy
  402fde:	b662      	cpsie	i
  402fe0:	e7fe      	b.n	402fe0 <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  402fe2:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402fe4:	69a0      	ldr	r0, [r4, #24]
  402fe6:	2800      	cmp	r0, #0
  402fe8:	db02      	blt.n	402ff0 <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402fea:	f1c2 0205 	rsb	r2, r2, #5
  402fee:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  402ff0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402ff4:	4a15      	ldr	r2, [pc, #84]	; (40304c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402ff6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  402ffa:	6962      	ldr	r2, [r4, #20]
  402ffc:	428a      	cmp	r2, r1
  402ffe:	d121      	bne.n	403044 <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  403000:	1d25      	adds	r5, r4, #4
  403002:	4628      	mov	r0, r5
  403004:	4b12      	ldr	r3, [pc, #72]	; (403050 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  403006:	4798      	blx	r3
  403008:	b968      	cbnz	r0, 403026 <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40300a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40300c:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  403010:	009b      	lsls	r3, r3, #2
  403012:	4a0e      	ldr	r2, [pc, #56]	; (40304c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  403014:	58d3      	ldr	r3, [r2, r3]
  403016:	b933      	cbnz	r3, 403026 <vTaskPriorityDisinheritAfterTimeout+0x96>
  403018:	480e      	ldr	r0, [pc, #56]	; (403054 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  40301a:	6803      	ldr	r3, [r0, #0]
  40301c:	2201      	movs	r2, #1
  40301e:	408a      	lsls	r2, r1
  403020:	ea23 0302 	bic.w	r3, r3, r2
  403024:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  403026:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403028:	4a0a      	ldr	r2, [pc, #40]	; (403054 <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  40302a:	6811      	ldr	r1, [r2, #0]
  40302c:	2301      	movs	r3, #1
  40302e:	4083      	lsls	r3, r0
  403030:	430b      	orrs	r3, r1
  403032:	6013      	str	r3, [r2, #0]
  403034:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403038:	4629      	mov	r1, r5
  40303a:	4b04      	ldr	r3, [pc, #16]	; (40304c <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  40303c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  403040:	4b05      	ldr	r3, [pc, #20]	; (403058 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  403042:	4798      	blx	r3
  403044:	bd38      	pop	{r3, r4, r5, pc}
  403046:	4770      	bx	lr
  403048:	20400a5c 	.word	0x20400a5c
  40304c:	20400a68 	.word	0x20400a68
  403050:	0040169d 	.word	0x0040169d
  403054:	20400ae0 	.word	0x20400ae0
  403058:	00401651 	.word	0x00401651

0040305c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  40305c:	4b05      	ldr	r3, [pc, #20]	; (403074 <pvTaskIncrementMutexHeldCount+0x18>)
  40305e:	681b      	ldr	r3, [r3, #0]
  403060:	b123      	cbz	r3, 40306c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  403062:	4b04      	ldr	r3, [pc, #16]	; (403074 <pvTaskIncrementMutexHeldCount+0x18>)
  403064:	681a      	ldr	r2, [r3, #0]
  403066:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  403068:	3301      	adds	r3, #1
  40306a:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  40306c:	4b01      	ldr	r3, [pc, #4]	; (403074 <pvTaskIncrementMutexHeldCount+0x18>)
  40306e:	6818      	ldr	r0, [r3, #0]
	}
  403070:	4770      	bx	lr
  403072:	bf00      	nop
  403074:	20400a5c 	.word	0x20400a5c

00403078 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  403078:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  40307a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40307c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40307e:	4291      	cmp	r1, r2
  403080:	d80c      	bhi.n	40309c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403082:	1ad2      	subs	r2, r2, r3
  403084:	6983      	ldr	r3, [r0, #24]
  403086:	429a      	cmp	r2, r3
  403088:	d301      	bcc.n	40308e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  40308a:	2001      	movs	r0, #1
  40308c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40308e:	1d01      	adds	r1, r0, #4
  403090:	4b09      	ldr	r3, [pc, #36]	; (4030b8 <prvInsertTimerInActiveList+0x40>)
  403092:	6818      	ldr	r0, [r3, #0]
  403094:	4b09      	ldr	r3, [pc, #36]	; (4030bc <prvInsertTimerInActiveList+0x44>)
  403096:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403098:	2000      	movs	r0, #0
  40309a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40309c:	429a      	cmp	r2, r3
  40309e:	d203      	bcs.n	4030a8 <prvInsertTimerInActiveList+0x30>
  4030a0:	4299      	cmp	r1, r3
  4030a2:	d301      	bcc.n	4030a8 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4030a4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4030a6:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4030a8:	1d01      	adds	r1, r0, #4
  4030aa:	4b05      	ldr	r3, [pc, #20]	; (4030c0 <prvInsertTimerInActiveList+0x48>)
  4030ac:	6818      	ldr	r0, [r3, #0]
  4030ae:	4b03      	ldr	r3, [pc, #12]	; (4030bc <prvInsertTimerInActiveList+0x44>)
  4030b0:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4030b2:	2000      	movs	r0, #0
  4030b4:	bd08      	pop	{r3, pc}
  4030b6:	bf00      	nop
  4030b8:	20400b64 	.word	0x20400b64
  4030bc:	00401669 	.word	0x00401669
  4030c0:	20400b60 	.word	0x20400b60

004030c4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4030c4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4030c6:	4b10      	ldr	r3, [pc, #64]	; (403108 <prvCheckForValidListAndQueue+0x44>)
  4030c8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4030ca:	4b10      	ldr	r3, [pc, #64]	; (40310c <prvCheckForValidListAndQueue+0x48>)
  4030cc:	681b      	ldr	r3, [r3, #0]
  4030ce:	b113      	cbz	r3, 4030d6 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4030d0:	4b0f      	ldr	r3, [pc, #60]	; (403110 <prvCheckForValidListAndQueue+0x4c>)
  4030d2:	4798      	blx	r3
  4030d4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4030d6:	4d0f      	ldr	r5, [pc, #60]	; (403114 <prvCheckForValidListAndQueue+0x50>)
  4030d8:	4628      	mov	r0, r5
  4030da:	4e0f      	ldr	r6, [pc, #60]	; (403118 <prvCheckForValidListAndQueue+0x54>)
  4030dc:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4030de:	4c0f      	ldr	r4, [pc, #60]	; (40311c <prvCheckForValidListAndQueue+0x58>)
  4030e0:	4620      	mov	r0, r4
  4030e2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4030e4:	4b0e      	ldr	r3, [pc, #56]	; (403120 <prvCheckForValidListAndQueue+0x5c>)
  4030e6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4030e8:	4b0e      	ldr	r3, [pc, #56]	; (403124 <prvCheckForValidListAndQueue+0x60>)
  4030ea:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4030ec:	2200      	movs	r2, #0
  4030ee:	2110      	movs	r1, #16
  4030f0:	2005      	movs	r0, #5
  4030f2:	4b0d      	ldr	r3, [pc, #52]	; (403128 <prvCheckForValidListAndQueue+0x64>)
  4030f4:	4798      	blx	r3
  4030f6:	4b05      	ldr	r3, [pc, #20]	; (40310c <prvCheckForValidListAndQueue+0x48>)
  4030f8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  4030fa:	2800      	cmp	r0, #0
  4030fc:	d0e8      	beq.n	4030d0 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4030fe:	490b      	ldr	r1, [pc, #44]	; (40312c <prvCheckForValidListAndQueue+0x68>)
  403100:	4b0b      	ldr	r3, [pc, #44]	; (403130 <prvCheckForValidListAndQueue+0x6c>)
  403102:	4798      	blx	r3
  403104:	e7e4      	b.n	4030d0 <prvCheckForValidListAndQueue+0xc>
  403106:	bf00      	nop
  403108:	004017a5 	.word	0x004017a5
  40310c:	20400b94 	.word	0x20400b94
  403110:	004017f1 	.word	0x004017f1
  403114:	20400b68 	.word	0x20400b68
  403118:	00401635 	.word	0x00401635
  40311c:	20400b7c 	.word	0x20400b7c
  403120:	20400b60 	.word	0x20400b60
  403124:	20400b64 	.word	0x20400b64
  403128:	00401d11 	.word	0x00401d11
  40312c:	00408d70 	.word	0x00408d70
  403130:	004023fd 	.word	0x004023fd

00403134 <xTimerCreateTimerTask>:
{
  403134:	b510      	push	{r4, lr}
  403136:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  403138:	4b0e      	ldr	r3, [pc, #56]	; (403174 <xTimerCreateTimerTask+0x40>)
  40313a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40313c:	4b0e      	ldr	r3, [pc, #56]	; (403178 <xTimerCreateTimerTask+0x44>)
  40313e:	681b      	ldr	r3, [r3, #0]
  403140:	b16b      	cbz	r3, 40315e <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  403142:	4b0e      	ldr	r3, [pc, #56]	; (40317c <xTimerCreateTimerTask+0x48>)
  403144:	9301      	str	r3, [sp, #4]
  403146:	2304      	movs	r3, #4
  403148:	9300      	str	r3, [sp, #0]
  40314a:	2300      	movs	r3, #0
  40314c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403150:	490b      	ldr	r1, [pc, #44]	; (403180 <xTimerCreateTimerTask+0x4c>)
  403152:	480c      	ldr	r0, [pc, #48]	; (403184 <xTimerCreateTimerTask+0x50>)
  403154:	4c0c      	ldr	r4, [pc, #48]	; (403188 <xTimerCreateTimerTask+0x54>)
  403156:	47a0      	blx	r4
	configASSERT( xReturn );
  403158:	b108      	cbz	r0, 40315e <xTimerCreateTimerTask+0x2a>
}
  40315a:	b002      	add	sp, #8
  40315c:	bd10      	pop	{r4, pc}
  40315e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403162:	b672      	cpsid	i
  403164:	f383 8811 	msr	BASEPRI, r3
  403168:	f3bf 8f6f 	isb	sy
  40316c:	f3bf 8f4f 	dsb	sy
  403170:	b662      	cpsie	i
  403172:	e7fe      	b.n	403172 <xTimerCreateTimerTask+0x3e>
  403174:	004030c5 	.word	0x004030c5
  403178:	20400b94 	.word	0x20400b94
  40317c:	20400b98 	.word	0x20400b98
  403180:	00408d78 	.word	0x00408d78
  403184:	004032b5 	.word	0x004032b5
  403188:	004025ed 	.word	0x004025ed

0040318c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40318c:	b1d8      	cbz	r0, 4031c6 <xTimerGenericCommand+0x3a>
{
  40318e:	b530      	push	{r4, r5, lr}
  403190:	b085      	sub	sp, #20
  403192:	4615      	mov	r5, r2
  403194:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  403196:	4a15      	ldr	r2, [pc, #84]	; (4031ec <xTimerGenericCommand+0x60>)
  403198:	6810      	ldr	r0, [r2, #0]
  40319a:	b320      	cbz	r0, 4031e6 <xTimerGenericCommand+0x5a>
  40319c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40319e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4031a0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4031a2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4031a4:	2905      	cmp	r1, #5
  4031a6:	dc19      	bgt.n	4031dc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4031a8:	4b11      	ldr	r3, [pc, #68]	; (4031f0 <xTimerGenericCommand+0x64>)
  4031aa:	4798      	blx	r3
  4031ac:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4031ae:	f04f 0300 	mov.w	r3, #0
  4031b2:	bf0c      	ite	eq
  4031b4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4031b6:	461a      	movne	r2, r3
  4031b8:	4669      	mov	r1, sp
  4031ba:	480c      	ldr	r0, [pc, #48]	; (4031ec <xTimerGenericCommand+0x60>)
  4031bc:	6800      	ldr	r0, [r0, #0]
  4031be:	4c0d      	ldr	r4, [pc, #52]	; (4031f4 <xTimerGenericCommand+0x68>)
  4031c0:	47a0      	blx	r4
}
  4031c2:	b005      	add	sp, #20
  4031c4:	bd30      	pop	{r4, r5, pc}
  4031c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031ca:	b672      	cpsid	i
  4031cc:	f383 8811 	msr	BASEPRI, r3
  4031d0:	f3bf 8f6f 	isb	sy
  4031d4:	f3bf 8f4f 	dsb	sy
  4031d8:	b662      	cpsie	i
  4031da:	e7fe      	b.n	4031da <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4031dc:	2300      	movs	r3, #0
  4031de:	4669      	mov	r1, sp
  4031e0:	4c05      	ldr	r4, [pc, #20]	; (4031f8 <xTimerGenericCommand+0x6c>)
  4031e2:	47a0      	blx	r4
  4031e4:	e7ed      	b.n	4031c2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4031e6:	2000      	movs	r0, #0
	return xReturn;
  4031e8:	e7eb      	b.n	4031c2 <xTimerGenericCommand+0x36>
  4031ea:	bf00      	nop
  4031ec:	20400b94 	.word	0x20400b94
  4031f0:	00402df5 	.word	0x00402df5
  4031f4:	00401d6d 	.word	0x00401d6d
  4031f8:	00401f5d 	.word	0x00401f5d

004031fc <prvSampleTimeNow>:
{
  4031fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403200:	b082      	sub	sp, #8
  403202:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403204:	4b24      	ldr	r3, [pc, #144]	; (403298 <prvSampleTimeNow+0x9c>)
  403206:	4798      	blx	r3
  403208:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40320a:	4b24      	ldr	r3, [pc, #144]	; (40329c <prvSampleTimeNow+0xa0>)
  40320c:	681b      	ldr	r3, [r3, #0]
  40320e:	4298      	cmp	r0, r3
  403210:	d31b      	bcc.n	40324a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403212:	2300      	movs	r3, #0
  403214:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  403218:	4b20      	ldr	r3, [pc, #128]	; (40329c <prvSampleTimeNow+0xa0>)
  40321a:	601f      	str	r7, [r3, #0]
}
  40321c:	4638      	mov	r0, r7
  40321e:	b002      	add	sp, #8
  403220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403224:	2100      	movs	r1, #0
  403226:	9100      	str	r1, [sp, #0]
  403228:	460b      	mov	r3, r1
  40322a:	4652      	mov	r2, sl
  40322c:	4620      	mov	r0, r4
  40322e:	4c1c      	ldr	r4, [pc, #112]	; (4032a0 <prvSampleTimeNow+0xa4>)
  403230:	47a0      	blx	r4
				configASSERT( xResult );
  403232:	b960      	cbnz	r0, 40324e <prvSampleTimeNow+0x52>
  403234:	f04f 0380 	mov.w	r3, #128	; 0x80
  403238:	b672      	cpsid	i
  40323a:	f383 8811 	msr	BASEPRI, r3
  40323e:	f3bf 8f6f 	isb	sy
  403242:	f3bf 8f4f 	dsb	sy
  403246:	b662      	cpsie	i
  403248:	e7fe      	b.n	403248 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40324a:	4d16      	ldr	r5, [pc, #88]	; (4032a4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40324c:	4e16      	ldr	r6, [pc, #88]	; (4032a8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40324e:	682b      	ldr	r3, [r5, #0]
  403250:	681a      	ldr	r2, [r3, #0]
  403252:	b1c2      	cbz	r2, 403286 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403254:	68db      	ldr	r3, [r3, #12]
  403256:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40325a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40325c:	f104 0904 	add.w	r9, r4, #4
  403260:	4648      	mov	r0, r9
  403262:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403264:	6a63      	ldr	r3, [r4, #36]	; 0x24
  403266:	4620      	mov	r0, r4
  403268:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40326a:	69e3      	ldr	r3, [r4, #28]
  40326c:	2b01      	cmp	r3, #1
  40326e:	d1ee      	bne.n	40324e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  403270:	69a3      	ldr	r3, [r4, #24]
  403272:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  403274:	459a      	cmp	sl, r3
  403276:	d2d5      	bcs.n	403224 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  403278:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40327a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40327c:	4649      	mov	r1, r9
  40327e:	6828      	ldr	r0, [r5, #0]
  403280:	4b0a      	ldr	r3, [pc, #40]	; (4032ac <prvSampleTimeNow+0xb0>)
  403282:	4798      	blx	r3
  403284:	e7e3      	b.n	40324e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  403286:	4a0a      	ldr	r2, [pc, #40]	; (4032b0 <prvSampleTimeNow+0xb4>)
  403288:	6810      	ldr	r0, [r2, #0]
  40328a:	4906      	ldr	r1, [pc, #24]	; (4032a4 <prvSampleTimeNow+0xa8>)
  40328c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40328e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403290:	2301      	movs	r3, #1
  403292:	f8c8 3000 	str.w	r3, [r8]
  403296:	e7bf      	b.n	403218 <prvSampleTimeNow+0x1c>
  403298:	00402889 	.word	0x00402889
  40329c:	20400b90 	.word	0x20400b90
  4032a0:	0040318d 	.word	0x0040318d
  4032a4:	20400b60 	.word	0x20400b60
  4032a8:	0040169d 	.word	0x0040169d
  4032ac:	00401669 	.word	0x00401669
  4032b0:	20400b64 	.word	0x20400b64

004032b4 <prvTimerTask>:
{
  4032b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4032b8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4032ba:	4e75      	ldr	r6, [pc, #468]	; (403490 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4032bc:	4f75      	ldr	r7, [pc, #468]	; (403494 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4032be:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 4034bc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4032c2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 4034c0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4032c6:	6833      	ldr	r3, [r6, #0]
  4032c8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  4032ca:	2a00      	cmp	r2, #0
  4032cc:	f000 80ce 	beq.w	40346c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4032d0:	68db      	ldr	r3, [r3, #12]
  4032d2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4032d4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4032d6:	a804      	add	r0, sp, #16
  4032d8:	4b6f      	ldr	r3, [pc, #444]	; (403498 <prvTimerTask+0x1e4>)
  4032da:	4798      	blx	r3
  4032dc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4032de:	9b04      	ldr	r3, [sp, #16]
  4032e0:	2b00      	cmp	r3, #0
  4032e2:	d144      	bne.n	40336e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4032e4:	42a0      	cmp	r0, r4
  4032e6:	d212      	bcs.n	40330e <prvTimerTask+0x5a>
  4032e8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4032ea:	1b61      	subs	r1, r4, r5
  4032ec:	4b6b      	ldr	r3, [pc, #428]	; (40349c <prvTimerTask+0x1e8>)
  4032ee:	6818      	ldr	r0, [r3, #0]
  4032f0:	4b6b      	ldr	r3, [pc, #428]	; (4034a0 <prvTimerTask+0x1ec>)
  4032f2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4032f4:	4b6b      	ldr	r3, [pc, #428]	; (4034a4 <prvTimerTask+0x1f0>)
  4032f6:	4798      	blx	r3
  4032f8:	2800      	cmp	r0, #0
  4032fa:	d13a      	bne.n	403372 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4032fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403300:	f8c9 3000 	str.w	r3, [r9]
  403304:	f3bf 8f4f 	dsb	sy
  403308:	f3bf 8f6f 	isb	sy
  40330c:	e031      	b.n	403372 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40330e:	4b65      	ldr	r3, [pc, #404]	; (4034a4 <prvTimerTask+0x1f0>)
  403310:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403312:	6833      	ldr	r3, [r6, #0]
  403314:	68db      	ldr	r3, [r3, #12]
  403316:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40331a:	f10a 0004 	add.w	r0, sl, #4
  40331e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403320:	f8da 301c 	ldr.w	r3, [sl, #28]
  403324:	2b01      	cmp	r3, #1
  403326:	d004      	beq.n	403332 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403328:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40332c:	4650      	mov	r0, sl
  40332e:	4798      	blx	r3
  403330:	e01f      	b.n	403372 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  403332:	f8da 1018 	ldr.w	r1, [sl, #24]
  403336:	4623      	mov	r3, r4
  403338:	462a      	mov	r2, r5
  40333a:	4421      	add	r1, r4
  40333c:	4650      	mov	r0, sl
  40333e:	4d5a      	ldr	r5, [pc, #360]	; (4034a8 <prvTimerTask+0x1f4>)
  403340:	47a8      	blx	r5
  403342:	2800      	cmp	r0, #0
  403344:	d0f0      	beq.n	403328 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403346:	2100      	movs	r1, #0
  403348:	9100      	str	r1, [sp, #0]
  40334a:	460b      	mov	r3, r1
  40334c:	4622      	mov	r2, r4
  40334e:	4650      	mov	r0, sl
  403350:	4c56      	ldr	r4, [pc, #344]	; (4034ac <prvTimerTask+0x1f8>)
  403352:	47a0      	blx	r4
			configASSERT( xResult );
  403354:	2800      	cmp	r0, #0
  403356:	d1e7      	bne.n	403328 <prvTimerTask+0x74>
  403358:	f04f 0380 	mov.w	r3, #128	; 0x80
  40335c:	b672      	cpsid	i
  40335e:	f383 8811 	msr	BASEPRI, r3
  403362:	f3bf 8f6f 	isb	sy
  403366:	f3bf 8f4f 	dsb	sy
  40336a:	b662      	cpsie	i
  40336c:	e7fe      	b.n	40336c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40336e:	4b4d      	ldr	r3, [pc, #308]	; (4034a4 <prvTimerTask+0x1f0>)
  403370:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403372:	4d4a      	ldr	r5, [pc, #296]	; (40349c <prvTimerTask+0x1e8>)
  403374:	4c4e      	ldr	r4, [pc, #312]	; (4034b0 <prvTimerTask+0x1fc>)
  403376:	e006      	b.n	403386 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  403378:	9907      	ldr	r1, [sp, #28]
  40337a:	9806      	ldr	r0, [sp, #24]
  40337c:	9b05      	ldr	r3, [sp, #20]
  40337e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403380:	9b04      	ldr	r3, [sp, #16]
  403382:	2b00      	cmp	r3, #0
  403384:	da08      	bge.n	403398 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  403386:	2200      	movs	r2, #0
  403388:	a904      	add	r1, sp, #16
  40338a:	6828      	ldr	r0, [r5, #0]
  40338c:	47a0      	blx	r4
  40338e:	2800      	cmp	r0, #0
  403390:	d099      	beq.n	4032c6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403392:	9b04      	ldr	r3, [sp, #16]
  403394:	2b00      	cmp	r3, #0
  403396:	dbef      	blt.n	403378 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403398:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  40339c:	f8da 3014 	ldr.w	r3, [sl, #20]
  4033a0:	b113      	cbz	r3, 4033a8 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4033a2:	f10a 0004 	add.w	r0, sl, #4
  4033a6:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4033a8:	a803      	add	r0, sp, #12
  4033aa:	4b3b      	ldr	r3, [pc, #236]	; (403498 <prvTimerTask+0x1e4>)
  4033ac:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4033ae:	9b04      	ldr	r3, [sp, #16]
  4033b0:	2b09      	cmp	r3, #9
  4033b2:	d8e8      	bhi.n	403386 <prvTimerTask+0xd2>
  4033b4:	a201      	add	r2, pc, #4	; (adr r2, 4033bc <prvTimerTask+0x108>)
  4033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4033ba:	bf00      	nop
  4033bc:	004033e5 	.word	0x004033e5
  4033c0:	004033e5 	.word	0x004033e5
  4033c4:	004033e5 	.word	0x004033e5
  4033c8:	00403387 	.word	0x00403387
  4033cc:	00403439 	.word	0x00403439
  4033d0:	00403465 	.word	0x00403465
  4033d4:	004033e5 	.word	0x004033e5
  4033d8:	004033e5 	.word	0x004033e5
  4033dc:	00403387 	.word	0x00403387
  4033e0:	00403439 	.word	0x00403439
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  4033e4:	9c05      	ldr	r4, [sp, #20]
  4033e6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4033ea:	4623      	mov	r3, r4
  4033ec:	4602      	mov	r2, r0
  4033ee:	4421      	add	r1, r4
  4033f0:	4650      	mov	r0, sl
  4033f2:	4c2d      	ldr	r4, [pc, #180]	; (4034a8 <prvTimerTask+0x1f4>)
  4033f4:	47a0      	blx	r4
  4033f6:	2800      	cmp	r0, #0
  4033f8:	d0bc      	beq.n	403374 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4033fa:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4033fe:	4650      	mov	r0, sl
  403400:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403402:	f8da 301c 	ldr.w	r3, [sl, #28]
  403406:	2b01      	cmp	r3, #1
  403408:	d1b4      	bne.n	403374 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40340a:	f8da 2018 	ldr.w	r2, [sl, #24]
  40340e:	2100      	movs	r1, #0
  403410:	9100      	str	r1, [sp, #0]
  403412:	460b      	mov	r3, r1
  403414:	9805      	ldr	r0, [sp, #20]
  403416:	4402      	add	r2, r0
  403418:	4650      	mov	r0, sl
  40341a:	4c24      	ldr	r4, [pc, #144]	; (4034ac <prvTimerTask+0x1f8>)
  40341c:	47a0      	blx	r4
							configASSERT( xResult );
  40341e:	2800      	cmp	r0, #0
  403420:	d1a8      	bne.n	403374 <prvTimerTask+0xc0>
  403422:	f04f 0380 	mov.w	r3, #128	; 0x80
  403426:	b672      	cpsid	i
  403428:	f383 8811 	msr	BASEPRI, r3
  40342c:	f3bf 8f6f 	isb	sy
  403430:	f3bf 8f4f 	dsb	sy
  403434:	b662      	cpsie	i
  403436:	e7fe      	b.n	403436 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403438:	9905      	ldr	r1, [sp, #20]
  40343a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  40343e:	b131      	cbz	r1, 40344e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403440:	4603      	mov	r3, r0
  403442:	4602      	mov	r2, r0
  403444:	4401      	add	r1, r0
  403446:	4650      	mov	r0, sl
  403448:	4c17      	ldr	r4, [pc, #92]	; (4034a8 <prvTimerTask+0x1f4>)
  40344a:	47a0      	blx	r4
  40344c:	e792      	b.n	403374 <prvTimerTask+0xc0>
  40344e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403452:	b672      	cpsid	i
  403454:	f383 8811 	msr	BASEPRI, r3
  403458:	f3bf 8f6f 	isb	sy
  40345c:	f3bf 8f4f 	dsb	sy
  403460:	b662      	cpsie	i
  403462:	e7fe      	b.n	403462 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  403464:	4650      	mov	r0, sl
  403466:	4b13      	ldr	r3, [pc, #76]	; (4034b4 <prvTimerTask+0x200>)
  403468:	4798      	blx	r3
  40346a:	e783      	b.n	403374 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  40346c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40346e:	a804      	add	r0, sp, #16
  403470:	4b09      	ldr	r3, [pc, #36]	; (403498 <prvTimerTask+0x1e4>)
  403472:	4798      	blx	r3
  403474:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403476:	9b04      	ldr	r3, [sp, #16]
  403478:	2b00      	cmp	r3, #0
  40347a:	f47f af78 	bne.w	40336e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40347e:	4b0e      	ldr	r3, [pc, #56]	; (4034b8 <prvTimerTask+0x204>)
  403480:	681b      	ldr	r3, [r3, #0]
  403482:	681a      	ldr	r2, [r3, #0]
  403484:	fab2 f282 	clz	r2, r2
  403488:	0952      	lsrs	r2, r2, #5
  40348a:	2400      	movs	r4, #0
  40348c:	e72d      	b.n	4032ea <prvTimerTask+0x36>
  40348e:	bf00      	nop
  403490:	20400b60 	.word	0x20400b60
  403494:	00402879 	.word	0x00402879
  403498:	004031fd 	.word	0x004031fd
  40349c:	20400b94 	.word	0x20400b94
  4034a0:	00402431 	.word	0x00402431
  4034a4:	004029dd 	.word	0x004029dd
  4034a8:	00403079 	.word	0x00403079
  4034ac:	0040318d 	.word	0x0040318d
  4034b0:	00402071 	.word	0x00402071
  4034b4:	00401a61 	.word	0x00401a61
  4034b8:	20400b64 	.word	0x20400b64
  4034bc:	e000ed04 	.word	0xe000ed04
  4034c0:	0040169d 	.word	0x0040169d

004034c4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  4034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034c6:	b083      	sub	sp, #12
  4034c8:	4605      	mov	r5, r0
  4034ca:	460c      	mov	r4, r1
	uint32_t val = 0;
  4034cc:	2300      	movs	r3, #0
  4034ce:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  4034d0:	4b2a      	ldr	r3, [pc, #168]	; (40357c <usart_serial_getchar+0xb8>)
  4034d2:	4298      	cmp	r0, r3
  4034d4:	d013      	beq.n	4034fe <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  4034d6:	4b2a      	ldr	r3, [pc, #168]	; (403580 <usart_serial_getchar+0xbc>)
  4034d8:	4298      	cmp	r0, r3
  4034da:	d018      	beq.n	40350e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  4034dc:	4b29      	ldr	r3, [pc, #164]	; (403584 <usart_serial_getchar+0xc0>)
  4034de:	4298      	cmp	r0, r3
  4034e0:	d01d      	beq.n	40351e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  4034e2:	4b29      	ldr	r3, [pc, #164]	; (403588 <usart_serial_getchar+0xc4>)
  4034e4:	429d      	cmp	r5, r3
  4034e6:	d022      	beq.n	40352e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  4034e8:	4b28      	ldr	r3, [pc, #160]	; (40358c <usart_serial_getchar+0xc8>)
  4034ea:	429d      	cmp	r5, r3
  4034ec:	d027      	beq.n	40353e <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  4034ee:	4b28      	ldr	r3, [pc, #160]	; (403590 <usart_serial_getchar+0xcc>)
  4034f0:	429d      	cmp	r5, r3
  4034f2:	d02e      	beq.n	403552 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  4034f4:	4b27      	ldr	r3, [pc, #156]	; (403594 <usart_serial_getchar+0xd0>)
  4034f6:	429d      	cmp	r5, r3
  4034f8:	d035      	beq.n	403566 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  4034fa:	b003      	add	sp, #12
  4034fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  4034fe:	461f      	mov	r7, r3
  403500:	4e25      	ldr	r6, [pc, #148]	; (403598 <usart_serial_getchar+0xd4>)
  403502:	4621      	mov	r1, r4
  403504:	4638      	mov	r0, r7
  403506:	47b0      	blx	r6
  403508:	2800      	cmp	r0, #0
  40350a:	d1fa      	bne.n	403502 <usart_serial_getchar+0x3e>
  40350c:	e7e9      	b.n	4034e2 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40350e:	461f      	mov	r7, r3
  403510:	4e21      	ldr	r6, [pc, #132]	; (403598 <usart_serial_getchar+0xd4>)
  403512:	4621      	mov	r1, r4
  403514:	4638      	mov	r0, r7
  403516:	47b0      	blx	r6
  403518:	2800      	cmp	r0, #0
  40351a:	d1fa      	bne.n	403512 <usart_serial_getchar+0x4e>
  40351c:	e7e4      	b.n	4034e8 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40351e:	461f      	mov	r7, r3
  403520:	4e1d      	ldr	r6, [pc, #116]	; (403598 <usart_serial_getchar+0xd4>)
  403522:	4621      	mov	r1, r4
  403524:	4638      	mov	r0, r7
  403526:	47b0      	blx	r6
  403528:	2800      	cmp	r0, #0
  40352a:	d1fa      	bne.n	403522 <usart_serial_getchar+0x5e>
  40352c:	e7df      	b.n	4034ee <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40352e:	461f      	mov	r7, r3
  403530:	4e19      	ldr	r6, [pc, #100]	; (403598 <usart_serial_getchar+0xd4>)
  403532:	4621      	mov	r1, r4
  403534:	4638      	mov	r0, r7
  403536:	47b0      	blx	r6
  403538:	2800      	cmp	r0, #0
  40353a:	d1fa      	bne.n	403532 <usart_serial_getchar+0x6e>
  40353c:	e7da      	b.n	4034f4 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  40353e:	461e      	mov	r6, r3
  403540:	4d16      	ldr	r5, [pc, #88]	; (40359c <usart_serial_getchar+0xd8>)
  403542:	a901      	add	r1, sp, #4
  403544:	4630      	mov	r0, r6
  403546:	47a8      	blx	r5
  403548:	2800      	cmp	r0, #0
  40354a:	d1fa      	bne.n	403542 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  40354c:	9b01      	ldr	r3, [sp, #4]
  40354e:	7023      	strb	r3, [r4, #0]
  403550:	e7d3      	b.n	4034fa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403552:	461e      	mov	r6, r3
  403554:	4d11      	ldr	r5, [pc, #68]	; (40359c <usart_serial_getchar+0xd8>)
  403556:	a901      	add	r1, sp, #4
  403558:	4630      	mov	r0, r6
  40355a:	47a8      	blx	r5
  40355c:	2800      	cmp	r0, #0
  40355e:	d1fa      	bne.n	403556 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403560:	9b01      	ldr	r3, [sp, #4]
  403562:	7023      	strb	r3, [r4, #0]
  403564:	e7c9      	b.n	4034fa <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403566:	461e      	mov	r6, r3
  403568:	4d0c      	ldr	r5, [pc, #48]	; (40359c <usart_serial_getchar+0xd8>)
  40356a:	a901      	add	r1, sp, #4
  40356c:	4630      	mov	r0, r6
  40356e:	47a8      	blx	r5
  403570:	2800      	cmp	r0, #0
  403572:	d1fa      	bne.n	40356a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403574:	9b01      	ldr	r3, [sp, #4]
  403576:	7023      	strb	r3, [r4, #0]
}
  403578:	e7bf      	b.n	4034fa <usart_serial_getchar+0x36>
  40357a:	bf00      	nop
  40357c:	400e0800 	.word	0x400e0800
  403580:	400e0a00 	.word	0x400e0a00
  403584:	400e1a00 	.word	0x400e1a00
  403588:	400e1c00 	.word	0x400e1c00
  40358c:	40024000 	.word	0x40024000
  403590:	40028000 	.word	0x40028000
  403594:	4002c000 	.word	0x4002c000
  403598:	0040125f 	.word	0x0040125f
  40359c:	0040136b 	.word	0x0040136b

004035a0 <usart_serial_putchar>:
{
  4035a0:	b570      	push	{r4, r5, r6, lr}
  4035a2:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  4035a4:	4b2a      	ldr	r3, [pc, #168]	; (403650 <usart_serial_putchar+0xb0>)
  4035a6:	4298      	cmp	r0, r3
  4035a8:	d013      	beq.n	4035d2 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  4035aa:	4b2a      	ldr	r3, [pc, #168]	; (403654 <usart_serial_putchar+0xb4>)
  4035ac:	4298      	cmp	r0, r3
  4035ae:	d019      	beq.n	4035e4 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  4035b0:	4b29      	ldr	r3, [pc, #164]	; (403658 <usart_serial_putchar+0xb8>)
  4035b2:	4298      	cmp	r0, r3
  4035b4:	d01f      	beq.n	4035f6 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  4035b6:	4b29      	ldr	r3, [pc, #164]	; (40365c <usart_serial_putchar+0xbc>)
  4035b8:	4298      	cmp	r0, r3
  4035ba:	d025      	beq.n	403608 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  4035bc:	4b28      	ldr	r3, [pc, #160]	; (403660 <usart_serial_putchar+0xc0>)
  4035be:	4298      	cmp	r0, r3
  4035c0:	d02b      	beq.n	40361a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  4035c2:	4b28      	ldr	r3, [pc, #160]	; (403664 <usart_serial_putchar+0xc4>)
  4035c4:	4298      	cmp	r0, r3
  4035c6:	d031      	beq.n	40362c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  4035c8:	4b27      	ldr	r3, [pc, #156]	; (403668 <usart_serial_putchar+0xc8>)
  4035ca:	4298      	cmp	r0, r3
  4035cc:	d037      	beq.n	40363e <usart_serial_putchar+0x9e>
	return 0;
  4035ce:	2000      	movs	r0, #0
}
  4035d0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4035d2:	461e      	mov	r6, r3
  4035d4:	4d25      	ldr	r5, [pc, #148]	; (40366c <usart_serial_putchar+0xcc>)
  4035d6:	4621      	mov	r1, r4
  4035d8:	4630      	mov	r0, r6
  4035da:	47a8      	blx	r5
  4035dc:	2800      	cmp	r0, #0
  4035de:	d1fa      	bne.n	4035d6 <usart_serial_putchar+0x36>
		return 1;
  4035e0:	2001      	movs	r0, #1
  4035e2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4035e4:	461e      	mov	r6, r3
  4035e6:	4d21      	ldr	r5, [pc, #132]	; (40366c <usart_serial_putchar+0xcc>)
  4035e8:	4621      	mov	r1, r4
  4035ea:	4630      	mov	r0, r6
  4035ec:	47a8      	blx	r5
  4035ee:	2800      	cmp	r0, #0
  4035f0:	d1fa      	bne.n	4035e8 <usart_serial_putchar+0x48>
		return 1;
  4035f2:	2001      	movs	r0, #1
  4035f4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  4035f6:	461e      	mov	r6, r3
  4035f8:	4d1c      	ldr	r5, [pc, #112]	; (40366c <usart_serial_putchar+0xcc>)
  4035fa:	4621      	mov	r1, r4
  4035fc:	4630      	mov	r0, r6
  4035fe:	47a8      	blx	r5
  403600:	2800      	cmp	r0, #0
  403602:	d1fa      	bne.n	4035fa <usart_serial_putchar+0x5a>
		return 1;
  403604:	2001      	movs	r0, #1
  403606:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403608:	461e      	mov	r6, r3
  40360a:	4d18      	ldr	r5, [pc, #96]	; (40366c <usart_serial_putchar+0xcc>)
  40360c:	4621      	mov	r1, r4
  40360e:	4630      	mov	r0, r6
  403610:	47a8      	blx	r5
  403612:	2800      	cmp	r0, #0
  403614:	d1fa      	bne.n	40360c <usart_serial_putchar+0x6c>
		return 1;
  403616:	2001      	movs	r0, #1
  403618:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40361a:	461e      	mov	r6, r3
  40361c:	4d14      	ldr	r5, [pc, #80]	; (403670 <usart_serial_putchar+0xd0>)
  40361e:	4621      	mov	r1, r4
  403620:	4630      	mov	r0, r6
  403622:	47a8      	blx	r5
  403624:	2800      	cmp	r0, #0
  403626:	d1fa      	bne.n	40361e <usart_serial_putchar+0x7e>
		return 1;
  403628:	2001      	movs	r0, #1
  40362a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40362c:	461e      	mov	r6, r3
  40362e:	4d10      	ldr	r5, [pc, #64]	; (403670 <usart_serial_putchar+0xd0>)
  403630:	4621      	mov	r1, r4
  403632:	4630      	mov	r0, r6
  403634:	47a8      	blx	r5
  403636:	2800      	cmp	r0, #0
  403638:	d1fa      	bne.n	403630 <usart_serial_putchar+0x90>
		return 1;
  40363a:	2001      	movs	r0, #1
  40363c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40363e:	461e      	mov	r6, r3
  403640:	4d0b      	ldr	r5, [pc, #44]	; (403670 <usart_serial_putchar+0xd0>)
  403642:	4621      	mov	r1, r4
  403644:	4630      	mov	r0, r6
  403646:	47a8      	blx	r5
  403648:	2800      	cmp	r0, #0
  40364a:	d1fa      	bne.n	403642 <usart_serial_putchar+0xa2>
		return 1;
  40364c:	2001      	movs	r0, #1
  40364e:	bd70      	pop	{r4, r5, r6, pc}
  403650:	400e0800 	.word	0x400e0800
  403654:	400e0a00 	.word	0x400e0a00
  403658:	400e1a00 	.word	0x400e1a00
  40365c:	400e1c00 	.word	0x400e1c00
  403660:	40024000 	.word	0x40024000
  403664:	40028000 	.word	0x40028000
  403668:	4002c000 	.word	0x4002c000
  40366c:	0040124d 	.word	0x0040124d
  403670:	00401355 	.word	0x00401355

00403674 <task_orientacao>:
		}
		vTaskDelay(1000);
	}
}

static void task_orientacao (void *pvParameters) {
  403674:	b580      	push	{r7, lr}
  403676:	b082      	sub	sp, #8
	enum orientacao msg;
  	for (;;) {
		/* verifica se chegou algum dado na queue, e espera por 0 ticks */
		if (xQueueReceive(xQueueOrientacao, &msg, (TickType_t) 0)) {
  403678:	4d1b      	ldr	r5, [pc, #108]	; (4036e8 <task_orientacao+0x74>)
			} else if (msg == FRENTE) { /* acende LED 2 */
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
			    pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
			} else { /* acende LED 1 */
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  40367a:	4f1c      	ldr	r7, [pc, #112]	; (4036ec <task_orientacao+0x78>)
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
			    pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  40367c:	4e1c      	ldr	r6, [pc, #112]	; (4036f0 <task_orientacao+0x7c>)
  40367e:	e018      	b.n	4036b2 <task_orientacao+0x3e>
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  403680:	2101      	movs	r1, #1
  403682:	4630      	mov	r0, r6
  403684:	4c1b      	ldr	r4, [pc, #108]	; (4036f4 <task_orientacao+0x80>)
  403686:	47a0      	blx	r4
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  403688:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40368c:	4638      	mov	r0, r7
  40368e:	47a0      	blx	r4
			    pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  403690:	2104      	movs	r1, #4
  403692:	4819      	ldr	r0, [pc, #100]	; (4036f8 <task_orientacao+0x84>)
  403694:	4b19      	ldr	r3, [pc, #100]	; (4036fc <task_orientacao+0x88>)
  403696:	4798      	blx	r3
  403698:	e00b      	b.n	4036b2 <task_orientacao+0x3e>
				pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  40369a:	2101      	movs	r1, #1
  40369c:	4630      	mov	r0, r6
  40369e:	4c15      	ldr	r4, [pc, #84]	; (4036f4 <task_orientacao+0x80>)
  4036a0:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4036a2:	2104      	movs	r1, #4
  4036a4:	4814      	ldr	r0, [pc, #80]	; (4036f8 <task_orientacao+0x84>)
  4036a6:	47a0      	blx	r4
			    pio_clear(LED2_PIO, LED2_PIO_IDX_MASK);
  4036a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4036ac:	4638      	mov	r0, r7
  4036ae:	4b13      	ldr	r3, [pc, #76]	; (4036fc <task_orientacao+0x88>)
  4036b0:	4798      	blx	r3
		if (xQueueReceive(xQueueOrientacao, &msg, (TickType_t) 0)) {
  4036b2:	4c13      	ldr	r4, [pc, #76]	; (403700 <task_orientacao+0x8c>)
  4036b4:	2200      	movs	r2, #0
  4036b6:	f10d 0107 	add.w	r1, sp, #7
  4036ba:	6828      	ldr	r0, [r5, #0]
  4036bc:	47a0      	blx	r4
  4036be:	2800      	cmp	r0, #0
  4036c0:	d0f8      	beq.n	4036b4 <task_orientacao+0x40>
			if (msg == DIREITA) { /* acende LED 3 */
  4036c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
  4036c6:	2b02      	cmp	r3, #2
  4036c8:	d0da      	beq.n	403680 <task_orientacao+0xc>
			} else if (msg == FRENTE) { /* acende LED 2 */
  4036ca:	2b01      	cmp	r3, #1
  4036cc:	d0e5      	beq.n	40369a <task_orientacao+0x26>
				pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  4036ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4036d2:	4638      	mov	r0, r7
  4036d4:	4c07      	ldr	r4, [pc, #28]	; (4036f4 <task_orientacao+0x80>)
  4036d6:	47a0      	blx	r4
				pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  4036d8:	2104      	movs	r1, #4
  4036da:	4807      	ldr	r0, [pc, #28]	; (4036f8 <task_orientacao+0x84>)
  4036dc:	47a0      	blx	r4
			    pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  4036de:	2101      	movs	r1, #1
  4036e0:	4630      	mov	r0, r6
  4036e2:	4b06      	ldr	r3, [pc, #24]	; (4036fc <task_orientacao+0x88>)
  4036e4:	4798      	blx	r3
  4036e6:	e7e4      	b.n	4036b2 <task_orientacao+0x3e>
  4036e8:	20400c1c 	.word	0x20400c1c
  4036ec:	400e1200 	.word	0x400e1200
  4036f0:	400e0e00 	.word	0x400e0e00
  4036f4:	00400d2d 	.word	0x00400d2d
  4036f8:	400e1000 	.word	0x400e1000
  4036fc:	00400d31 	.word	0x00400d31
  403700:	00402071 	.word	0x00402071

00403704 <task_house_down>:
static void task_house_down (void *pvParameters) {
  403704:	b508      	push	{r3, lr}
		if (xSemaphoreTake(xFallSemaphore, portMAX_DELAY) == pdTRUE) {
  403706:	4d09      	ldr	r5, [pc, #36]	; (40372c <task_house_down+0x28>)
  403708:	4c09      	ldr	r4, [pc, #36]	; (403730 <task_house_down+0x2c>)
			printf("Caiu\r\n");
  40370a:	4e0a      	ldr	r6, [pc, #40]	; (403734 <task_house_down+0x30>)
  40370c:	e003      	b.n	403716 <task_house_down+0x12>
		vTaskDelay(1000);
  40370e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  403712:	4b09      	ldr	r3, [pc, #36]	; (403738 <task_house_down+0x34>)
  403714:	4798      	blx	r3
		if (xSemaphoreTake(xFallSemaphore, portMAX_DELAY) == pdTRUE) {
  403716:	f04f 31ff 	mov.w	r1, #4294967295
  40371a:	6828      	ldr	r0, [r5, #0]
  40371c:	47a0      	blx	r4
  40371e:	2801      	cmp	r0, #1
  403720:	d1f5      	bne.n	40370e <task_house_down+0xa>
			printf("Caiu\r\n");
  403722:	4630      	mov	r0, r6
  403724:	4b05      	ldr	r3, [pc, #20]	; (40373c <task_house_down+0x38>)
  403726:	4798      	blx	r3
  403728:	e7f1      	b.n	40370e <task_house_down+0xa>
  40372a:	bf00      	nop
  40372c:	20400c20 	.word	0x20400c20
  403730:	00402209 	.word	0x00402209
  403734:	00408df8 	.word	0x00408df8
  403738:	00402af5 	.word	0x00402af5
  40373c:	00405e15 	.word	0x00405e15

00403740 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  403740:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403742:	460a      	mov	r2, r1
  403744:	4601      	mov	r1, r0
  403746:	4802      	ldr	r0, [pc, #8]	; (403750 <vApplicationStackOverflowHook+0x10>)
  403748:	4b02      	ldr	r3, [pc, #8]	; (403754 <vApplicationStackOverflowHook+0x14>)
  40374a:	4798      	blx	r3
  40374c:	e7fe      	b.n	40374c <vApplicationStackOverflowHook+0xc>
  40374e:	bf00      	nop
  403750:	00408e74 	.word	0x00408e74
  403754:	00405e15 	.word	0x00405e15

00403758 <vApplicationIdleHook>:
extern void vApplicationIdleHook(void) { }
  403758:	4770      	bx	lr

0040375a <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  40375a:	4770      	bx	lr

0040375c <vApplicationMallocFailedHook>:
  40375c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403760:	b672      	cpsid	i
  403762:	f383 8811 	msr	BASEPRI, r3
  403766:	f3bf 8f6f 	isb	sy
  40376a:	f3bf 8f4f 	dsb	sy
  40376e:	b662      	cpsie	i
  403770:	e7fe      	b.n	403770 <vApplicationMallocFailedHook+0x14>
	...

00403774 <mcu6050_i2c_bus_init>:

	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
}

void mcu6050_i2c_bus_init(void) {
  403774:	b530      	push	{r4, r5, lr}
  403776:	b085      	sub	sp, #20
    twihs_options_t mcu6050_option;
    pmc_enable_periph_clk(ID_TWIHS2);
  403778:	2029      	movs	r0, #41	; 0x29
  40377a:	4c0e      	ldr	r4, [pc, #56]	; (4037b4 <mcu6050_i2c_bus_init+0x40>)
  40377c:	47a0      	blx	r4

    /* Configure the options of TWI driver */
    mcu6050_option.master_clk = sysclk_get_cpu_hz();
  40377e:	4b0e      	ldr	r3, [pc, #56]	; (4037b8 <mcu6050_i2c_bus_init+0x44>)
  403780:	9301      	str	r3, [sp, #4]
    mcu6050_option.speed      = 40000;
  403782:	f649 4340 	movw	r3, #40000	; 0x9c40
  403786:	9302      	str	r3, [sp, #8]
    twihs_master_init(TWIHS2, &mcu6050_option);
  403788:	a901      	add	r1, sp, #4
  40378a:	480c      	ldr	r0, [pc, #48]	; (4037bc <mcu6050_i2c_bus_init+0x48>)
  40378c:	4b0c      	ldr	r3, [pc, #48]	; (4037c0 <mcu6050_i2c_bus_init+0x4c>)
  40378e:	4798      	blx	r3
	/** Enable TWIHS port to control PIO pins */
	pmc_enable_periph_clk(ID_PIOD);
  403790:	2010      	movs	r0, #16
  403792:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 28);
  403794:	4d0b      	ldr	r5, [pc, #44]	; (4037c4 <mcu6050_i2c_bus_init+0x50>)
  403796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40379a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40379e:	4628      	mov	r0, r5
  4037a0:	4c09      	ldr	r4, [pc, #36]	; (4037c8 <mcu6050_i2c_bus_init+0x54>)
  4037a2:	47a0      	blx	r4
	pio_set_peripheral(PIOD, PIO_TYPE_PIO_PERIPH_C, 1 << 27);
  4037a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4037a8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4037ac:	4628      	mov	r0, r5
  4037ae:	47a0      	blx	r4
}
  4037b0:	b005      	add	sp, #20
  4037b2:	bd30      	pop	{r4, r5, pc}
  4037b4:	00400fcd 	.word	0x00400fcd
  4037b8:	11e1a300 	.word	0x11e1a300
  4037bc:	40060000 	.word	0x40060000
  4037c0:	0040109d 	.word	0x0040109d
  4037c4:	400e1400 	.word	0x400e1400
  4037c8:	00400d35 	.word	0x00400d35

004037cc <mcu6050_i2c_bus_write>:

int8_t mcu6050_i2c_bus_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt) {
  4037cc:	b500      	push	{lr}
  4037ce:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  4037d0:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  4037d4:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  4037d8:	2101      	movs	r1, #1
  4037da:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  4037dc:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  4037de:	9304      	str	r3, [sp, #16]

    ierror = twihs_master_write(TWIHS2, &p_packet);
  4037e0:	a901      	add	r1, sp, #4
  4037e2:	4803      	ldr	r0, [pc, #12]	; (4037f0 <mcu6050_i2c_bus_write+0x24>)
  4037e4:	4b03      	ldr	r3, [pc, #12]	; (4037f4 <mcu6050_i2c_bus_write+0x28>)
  4037e6:	4798      	blx	r3

    return (int8_t)ierror;
}
  4037e8:	b240      	sxtb	r0, r0
  4037ea:	b007      	add	sp, #28
  4037ec:	f85d fb04 	ldr.w	pc, [sp], #4
  4037f0:	40060000 	.word	0x40060000
  4037f4:	0040117f 	.word	0x0040117f

004037f8 <mcu6050_i2c_bus_read>:

int8_t mcu6050_i2c_bus_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *reg_data, uint8_t cnt) {
  4037f8:	b500      	push	{lr}
  4037fa:	b087      	sub	sp, #28
    int32_t ierror = 0x00;

    twihs_packet_t p_packet;
    p_packet.chip         = dev_addr;
  4037fc:	f88d 0014 	strb.w	r0, [sp, #20]
    p_packet.addr[0]      = reg_addr;
  403800:	f88d 1004 	strb.w	r1, [sp, #4]
    p_packet.addr_length  = 1;
  403804:	2101      	movs	r1, #1
  403806:	9102      	str	r1, [sp, #8]
    p_packet.buffer       = reg_data;
  403808:	9203      	str	r2, [sp, #12]
    p_packet.length       = cnt;
  40380a:	9304      	str	r3, [sp, #16]

	// TODO: Algum problema no SPI faz com que devemos ler duas vezes o registrador para
	//       conseguirmos pegar o valor correto.
    ierror = twihs_master_read(TWIHS2, &p_packet);
  40380c:	a901      	add	r1, sp, #4
  40380e:	4803      	ldr	r0, [pc, #12]	; (40381c <mcu6050_i2c_bus_read+0x24>)
  403810:	4b03      	ldr	r3, [pc, #12]	; (403820 <mcu6050_i2c_bus_read+0x28>)
  403812:	4798      	blx	r3

    return (int8_t)ierror;
}
  403814:	b240      	sxtb	r0, r0
  403816:	b007      	add	sp, #28
  403818:	f85d fb04 	ldr.w	pc, [sp], #4
  40381c:	40060000 	.word	0x40060000
  403820:	004010d1 	.word	0x004010d1

00403824 <task_imu>:
static void task_imu(void *pvParameters) {
  403824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403828:	ed2d 8b08 	vpush	{d8-d11}
  40382c:	b0b2      	sub	sp, #200	; 0xc8
	mcu6050_i2c_bus_init();
  40382e:	4b38      	ldr	r3, [pc, #224]	; (403910 <task_imu+0xec>)
  403830:	4798      	blx	r3
	rtn = twihs_probe(TWIHS2, MPU6050_DEFAULT_ADDRESS);
  403832:	2168      	movs	r1, #104	; 0x68
  403834:	4837      	ldr	r0, [pc, #220]	; (403914 <task_imu+0xf0>)
  403836:	4b38      	ldr	r3, [pc, #224]	; (403918 <task_imu+0xf4>)
  403838:	4798      	blx	r3
    if (rtn != TWIHS_SUCCESS) {
  40383a:	b2c0      	uxtb	r0, r0
  40383c:	2800      	cmp	r0, #0
  40383e:	d037      	beq.n	4038b0 <task_imu+0x8c>
        printf("[ERRO] [i2c] [probe] \n");
  403840:	4836      	ldr	r0, [pc, #216]	; (40391c <task_imu+0xf8>)
  403842:	4b37      	ldr	r3, [pc, #220]	; (403920 <task_imu+0xfc>)
  403844:	4798      	blx	r3
	rtn = mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_WHO_AM_I, bufferRX, 1);
  403846:	2301      	movs	r3, #1
  403848:	aa2b      	add	r2, sp, #172	; 0xac
  40384a:	2175      	movs	r1, #117	; 0x75
  40384c:	2068      	movs	r0, #104	; 0x68
  40384e:	4c35      	ldr	r4, [pc, #212]	; (403924 <task_imu+0x100>)
  403850:	47a0      	blx	r4
	if (rtn != TWIHS_SUCCESS) {
  403852:	2800      	cmp	r0, #0
  403854:	d030      	beq.n	4038b8 <task_imu+0x94>
		printf("[ERRO] [i2c] [read] \n");
  403856:	4834      	ldr	r0, [pc, #208]	; (403928 <task_imu+0x104>)
  403858:	4b31      	ldr	r3, [pc, #196]	; (403920 <task_imu+0xfc>)
  40385a:	4798      	blx	r3
	bufferTX[0] = MPU6050_CLOCK_PLL_XGYRO;
  40385c:	2301      	movs	r3, #1
  40385e:	aa32      	add	r2, sp, #200	; 0xc8
  403860:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, bufferTX, 1);
  403864:	216b      	movs	r1, #107	; 0x6b
  403866:	2068      	movs	r0, #104	; 0x68
  403868:	4c30      	ldr	r4, [pc, #192]	; (40392c <task_imu+0x108>)
  40386a:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  40386c:	bb58      	cbnz	r0, 4038c6 <task_imu+0xa2>
	bufferTX[0] = MPU6050_ACCEL_FS_2 << MPU6050_ACONFIG_AFS_SEL_BIT; 
  40386e:	aa32      	add	r2, sp, #200	; 0xc8
  403870:	2300      	movs	r3, #0
  403872:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_CONFIG, bufferTX, 1);
  403876:	2301      	movs	r3, #1
  403878:	211c      	movs	r1, #28
  40387a:	2068      	movs	r0, #104	; 0x68
  40387c:	4c2b      	ldr	r4, [pc, #172]	; (40392c <task_imu+0x108>)
  40387e:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403880:	bb28      	cbnz	r0, 4038ce <task_imu+0xaa>
	bufferTX[0] = 0x00; // 250 °/s
  403882:	aa32      	add	r2, sp, #200	; 0xc8
  403884:	2300      	movs	r3, #0
  403886:	f802 3d28 	strb.w	r3, [r2, #-40]!
	rtn = mcu6050_i2c_bus_write(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_CONFIG, bufferTX, 1);
  40388a:	2301      	movs	r3, #1
  40388c:	211b      	movs	r1, #27
  40388e:	2068      	movs	r0, #104	; 0x68
  403890:	4c26      	ldr	r4, [pc, #152]	; (40392c <task_imu+0x108>)
  403892:	47a0      	blx	r4
	if(rtn != TWIHS_SUCCESS)
  403894:	b9f8      	cbnz	r0, 4038d6 <task_imu+0xb2>
	FusionAhrsInitialise(&ahrs); 
  403896:	a80c      	add	r0, sp, #48	; 0x30
  403898:	4b25      	ldr	r3, [pc, #148]	; (403930 <task_imu+0x10c>)
  40389a:	4798      	blx	r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  40389c:	2401      	movs	r4, #1
  40389e:	2668      	movs	r6, #104	; 0x68
		proc_acc_x = (float)raw_acc_x/16384;
  4038a0:	eddf 9a24 	vldr	s19, [pc, #144]	; 403934 <task_imu+0x110>
		proc_gyr_x = (float)raw_gyr_x/131;
  4038a4:	ed9f 9a24 	vldr	s18, [pc, #144]	; 403938 <task_imu+0x114>
			xSemaphoreGive(xFallSemaphore);
  4038a8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 403954 <task_imu+0x130>
 */
static inline FusionEuler FusionQuaternionToEuler(const FusionQuaternion quaternion) {
#define Q quaternion.element
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
    FusionEuler euler;
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  4038ac:	4f23      	ldr	r7, [pc, #140]	; (40393c <task_imu+0x118>)
  4038ae:	e069      	b.n	403984 <task_imu+0x160>
        printf("[DADO] [i2c] probe OK\n" );
  4038b0:	4823      	ldr	r0, [pc, #140]	; (403940 <task_imu+0x11c>)
  4038b2:	4b1b      	ldr	r3, [pc, #108]	; (403920 <task_imu+0xfc>)
  4038b4:	4798      	blx	r3
  4038b6:	e7c6      	b.n	403846 <task_imu+0x22>
		printf("[DADO] [i2c] %x:%x", MPU6050_RA_WHO_AM_I, bufferRX[0]);
  4038b8:	f89d 20ac 	ldrb.w	r2, [sp, #172]	; 0xac
  4038bc:	2175      	movs	r1, #117	; 0x75
  4038be:	4821      	ldr	r0, [pc, #132]	; (403944 <task_imu+0x120>)
  4038c0:	4b17      	ldr	r3, [pc, #92]	; (403920 <task_imu+0xfc>)
  4038c2:	4798      	blx	r3
  4038c4:	e7ca      	b.n	40385c <task_imu+0x38>
		printf("[ERRO] [i2c] [write] \n");
  4038c6:	4820      	ldr	r0, [pc, #128]	; (403948 <task_imu+0x124>)
  4038c8:	4b15      	ldr	r3, [pc, #84]	; (403920 <task_imu+0xfc>)
  4038ca:	4798      	blx	r3
  4038cc:	e7cf      	b.n	40386e <task_imu+0x4a>
		printf("[ERRO] [i2c] [write] \n");
  4038ce:	481e      	ldr	r0, [pc, #120]	; (403948 <task_imu+0x124>)
  4038d0:	4b13      	ldr	r3, [pc, #76]	; (403920 <task_imu+0xfc>)
  4038d2:	4798      	blx	r3
  4038d4:	e7d5      	b.n	403882 <task_imu+0x5e>
		printf("[ERRO] [i2c] [write] \n");
  4038d6:	481c      	ldr	r0, [pc, #112]	; (403948 <task_imu+0x124>)
  4038d8:	4b11      	ldr	r3, [pc, #68]	; (403920 <task_imu+0xfc>)
  4038da:	4798      	blx	r3
  4038dc:	e7db      	b.n	403896 <task_imu+0x72>
			xSemaphoreGive(xFallSemaphore);
  4038de:	2300      	movs	r3, #0
  4038e0:	461a      	mov	r2, r3
  4038e2:	4619      	mov	r1, r3
  4038e4:	4819      	ldr	r0, [pc, #100]	; (40394c <task_imu+0x128>)
  4038e6:	6800      	ldr	r0, [r0, #0]
  4038e8:	47c0      	blx	r8
  4038ea:	e0f1      	b.n	403ad0 <task_imu+0x2ac>
  4038ec:	eef4 7a47 	vcmp.f32	s15, s14
  4038f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4038f4:	dc07      	bgt.n	403906 <task_imu+0xe2>
  4038f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  4038fa:	eef4 7a47 	vcmp.f32	s15, s14
  4038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403902:	f140 8135 	bpl.w	403b70 <task_imu+0x34c>
    return asinf(value);
  403906:	ee17 0a90 	vmov	r0, s15
  40390a:	4b11      	ldr	r3, [pc, #68]	; (403950 <task_imu+0x12c>)
  40390c:	4798      	blx	r3
  40390e:	e12f      	b.n	403b70 <task_imu+0x34c>
  403910:	00403775 	.word	0x00403775
  403914:	40060000 	.word	0x40060000
  403918:	00401221 	.word	0x00401221
  40391c:	00408e00 	.word	0x00408e00
  403920:	00405e15 	.word	0x00405e15
  403924:	004037f9 	.word	0x004037f9
  403928:	00408e30 	.word	0x00408e30
  40392c:	004037cd 	.word	0x004037cd
  403930:	004002dd 	.word	0x004002dd
  403934:	38800000 	.word	0x38800000
  403938:	43030000 	.word	0x43030000
  40393c:	00403f3d 	.word	0x00403f3d
  403940:	00408e18 	.word	0x00408e18
  403944:	00408e48 	.word	0x00408e48
  403948:	00408e5c 	.word	0x00408e5c
  40394c:	20400c20 	.word	0x20400c20
  403950:	00403e9d 	.word	0x00403e9d
  403954:	00401d6d 	.word	0x00401d6d
		} else if (euler.angle.yaw < 30) {
  403958:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
  40395c:	eef4 7ac7 	vcmpe.f32	s15, s14
  403960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403964:	f140 8125 	bpl.w	403bb2 <task_imu+0x38e>
			orient = FRENTE;
  403968:	f88d 4013 	strb.w	r4, [sp, #19]
		BaseType_t xHigherPriorityTaskWoken = pdTRUE;
  40396c:	aa32      	add	r2, sp, #200	; 0xc8
  40396e:	f842 4db4 	str.w	r4, [r2, #-180]!
		xQueueSend(xQueueOrientacao, (void *)&orient, &xHigherPriorityTaskWoken);
  403972:	2300      	movs	r3, #0
  403974:	f10d 0113 	add.w	r1, sp, #19
  403978:	4890      	ldr	r0, [pc, #576]	; (403bbc <task_imu+0x398>)
  40397a:	6800      	ldr	r0, [r0, #0]
  40397c:	47c0      	blx	r8
		vTaskDelay(1);
  40397e:	4620      	mov	r0, r4
  403980:	4b8f      	ldr	r3, [pc, #572]	; (403bc0 <task_imu+0x39c>)
  403982:	4798      	blx	r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_H, &raw_acc_xHigh, 1);
  403984:	4623      	mov	r3, r4
  403986:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
  40398a:	213b      	movs	r1, #59	; 0x3b
  40398c:	4630      	mov	r0, r6
  40398e:	4d8d      	ldr	r5, [pc, #564]	; (403bc4 <task_imu+0x3a0>)
  403990:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_XOUT_L, &raw_acc_xLow,  1);
  403992:	4623      	mov	r3, r4
  403994:	aa27      	add	r2, sp, #156	; 0x9c
  403996:	213c      	movs	r1, #60	; 0x3c
  403998:	4630      	mov	r0, r6
  40399a:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_YOUT_H, &raw_acc_yHigh, 1);
  40399c:	4623      	mov	r3, r4
  40399e:	f10d 029e 	add.w	r2, sp, #158	; 0x9e
  4039a2:	213d      	movs	r1, #61	; 0x3d
  4039a4:	4630      	mov	r0, r6
  4039a6:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_yLow,  1);
  4039a8:	4623      	mov	r3, r4
  4039aa:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
  4039ae:	2140      	movs	r1, #64	; 0x40
  4039b0:	4630      	mov	r0, r6
  4039b2:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_H, &raw_acc_zHigh, 1);
  4039b4:	4623      	mov	r3, r4
  4039b6:	f10d 029d 	add.w	r2, sp, #157	; 0x9d
  4039ba:	213f      	movs	r1, #63	; 0x3f
  4039bc:	4630      	mov	r0, r6
  4039be:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_ACCEL_ZOUT_L, &raw_acc_zLow,  1);
  4039c0:	4623      	mov	r3, r4
  4039c2:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
  4039c6:	2140      	movs	r1, #64	; 0x40
  4039c8:	4630      	mov	r0, r6
  4039ca:	47a8      	blx	r5
		raw_acc_x = (raw_acc_xHigh << 8) | (raw_acc_xLow << 0);
  4039cc:	f89d 209f 	ldrb.w	r2, [sp, #159]	; 0x9f
  4039d0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
  4039d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4039d8:	b21b      	sxth	r3, r3
  4039da:	ee0a 3a10 	vmov	s20, r3
		raw_acc_y = (raw_acc_yHigh << 8) | (raw_acc_yLow << 0);
  4039de:	f89d 209e 	ldrb.w	r2, [sp, #158]	; 0x9e
  4039e2:	f89d 309b 	ldrb.w	r3, [sp, #155]	; 0x9b
  4039e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4039ea:	b21b      	sxth	r3, r3
  4039ec:	ee08 3a90 	vmov	s17, r3
		raw_acc_z = (raw_acc_zHigh << 8) | (raw_acc_zLow << 0);
  4039f0:	f89d 209d 	ldrb.w	r2, [sp, #157]	; 0x9d
  4039f4:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
  4039f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  4039fc:	b21b      	sxth	r3, r3
  4039fe:	ee08 3a10 	vmov	s16, r3
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_H, &raw_gyr_xHigh, 1);
  403a02:	4623      	mov	r3, r4
  403a04:	f10d 0299 	add.w	r2, sp, #153	; 0x99
  403a08:	2143      	movs	r1, #67	; 0x43
  403a0a:	4630      	mov	r0, r6
  403a0c:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_XOUT_L, &raw_gyr_xLow,  1);
  403a0e:	4623      	mov	r3, r4
  403a10:	f10d 0296 	add.w	r2, sp, #150	; 0x96
  403a14:	2144      	movs	r1, #68	; 0x44
  403a16:	4630      	mov	r0, r6
  403a18:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_YOUT_H, &raw_gyr_yHigh, 1);
  403a1a:	4623      	mov	r3, r4
  403a1c:	aa26      	add	r2, sp, #152	; 0x98
  403a1e:	2145      	movs	r1, #69	; 0x45
  403a20:	4630      	mov	r0, r6
  403a22:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_yLow,  1);
  403a24:	4623      	mov	r3, r4
  403a26:	f10d 0295 	add.w	r2, sp, #149	; 0x95
  403a2a:	2148      	movs	r1, #72	; 0x48
  403a2c:	4630      	mov	r0, r6
  403a2e:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_H, &raw_gyr_zHigh, 1);
  403a30:	4623      	mov	r3, r4
  403a32:	f10d 0297 	add.w	r2, sp, #151	; 0x97
  403a36:	2147      	movs	r1, #71	; 0x47
  403a38:	4630      	mov	r0, r6
  403a3a:	47a8      	blx	r5
		mcu6050_i2c_bus_read(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_GYRO_ZOUT_L, &raw_gyr_zLow,  1);
  403a3c:	4623      	mov	r3, r4
  403a3e:	aa25      	add	r2, sp, #148	; 0x94
  403a40:	2148      	movs	r1, #72	; 0x48
  403a42:	4630      	mov	r0, r6
  403a44:	47a8      	blx	r5
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  403a46:	f89d e099 	ldrb.w	lr, [sp, #153]	; 0x99
  403a4a:	f89d 1096 	ldrb.w	r1, [sp, #150]	; 0x96
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  403a4e:	f89d 5098 	ldrb.w	r5, [sp, #152]	; 0x98
  403a52:	f89d 2095 	ldrb.w	r2, [sp, #149]	; 0x95
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  403a56:	f89d 0097 	ldrb.w	r0, [sp, #151]	; 0x97
  403a5a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
		proc_acc_x = (float)raw_acc_x/16384;
  403a5e:	eeb8 aaca 	vcvt.f32.s32	s20, s20
  403a62:	ee2a aa29 	vmul.f32	s20, s20, s19
		proc_acc_y = (float)raw_acc_y/16384;
  403a66:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  403a6a:	ee68 8aa9 	vmul.f32	s17, s17, s19
		proc_acc_z = (float)raw_acc_z/16384;
  403a6e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  403a72:	ee28 8a29 	vmul.f32	s16, s16, s19
		raw_gyr_x = (raw_gyr_xHigh << 8) | (raw_gyr_xLow << 0);
  403a76:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
		proc_gyr_x = (float)raw_gyr_x/131;
  403a7a:	b209      	sxth	r1, r1
  403a7c:	ee07 1a90 	vmov	s15, r1
  403a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403a84:	eec7 ba89 	vdiv.f32	s23, s15, s18
		raw_gyr_y = (raw_gyr_yHigh << 8) | (raw_gyr_yLow << 0);
  403a88:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
		proc_gyr_y = (float)raw_gyr_y/131;
  403a8c:	b212      	sxth	r2, r2
  403a8e:	ee07 2a90 	vmov	s15, r2
  403a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403a96:	ee87 ba89 	vdiv.f32	s22, s15, s18
		raw_gyr_z = (raw_gyr_zHigh << 8) | (raw_gyr_zLow << 0);
  403a9a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
		proc_gyr_z = (float)raw_gyr_z/131;
  403a9e:	b21b      	sxth	r3, r3
  403aa0:	ee07 3a90 	vmov	s15, r3
  403aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  403aa8:	eec7 aa89 	vdiv.f32	s21, s15, s18
		acc = (proc_acc_x*proc_acc_x + proc_acc_y*proc_acc_y + proc_acc_z*proc_acc_z);
  403aac:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  403ab0:	ee28 7aa8 	vmul.f32	s14, s17, s17
  403ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
  403ab8:	ee28 7a08 	vmul.f32	s14, s16, s16
  403abc:	ee77 7a87 	vadd.f32	s15, s15, s14
		if (acc > 5) {
  403ac0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
  403ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
  403ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403acc:	f73f af07 	bgt.w	4038de <task_imu+0xba>
		const FusionVector gyroscope = {proc_gyr_x, proc_gyr_y, proc_gyr_z}; 
  403ad0:	edcd ba06 	vstr	s23, [sp, #24]
  403ad4:	ed8d ba07 	vstr	s22, [sp, #28]
  403ad8:	edcd aa08 	vstr	s21, [sp, #32]
		const FusionVector accelerometer = {proc_acc_x, proc_acc_y, proc_acc_z};
  403adc:	ed8d aa09 	vstr	s20, [sp, #36]	; 0x24
  403ae0:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
  403ae4:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
		FusionAhrsUpdateNoMagnetometer(&ahrs, gyroscope, accelerometer, dT);
  403ae8:	4b37      	ldr	r3, [pc, #220]	; (403bc8 <task_imu+0x3a4>)
  403aea:	9303      	str	r3, [sp, #12]
  403aec:	ab09      	add	r3, sp, #36	; 0x24
  403aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
  403af2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  403af6:	ab06      	add	r3, sp, #24
  403af8:	cb0e      	ldmia	r3, {r1, r2, r3}
  403afa:	a80c      	add	r0, sp, #48	; 0x30
  403afc:	4d33      	ldr	r5, [pc, #204]	; (403bcc <task_imu+0x3a8>)
  403afe:	47a8      	blx	r5
		const FusionEuler euler = FusionQuaternionToEuler(FusionAhrsGetQuaternion(&ahrs));
  403b00:	a90c      	add	r1, sp, #48	; 0x30
  403b02:	a82e      	add	r0, sp, #184	; 0xb8
  403b04:	4b32      	ldr	r3, [pc, #200]	; (403bd0 <task_imu+0x3ac>)
  403b06:	4798      	blx	r3
  403b08:	eddd 8a2e 	vldr	s17, [sp, #184]	; 0xb8
  403b0c:	ed9d 8a2f 	vldr	s16, [sp, #188]	; 0xbc
  403b10:	ed9d aa30 	vldr	s20, [sp, #192]	; 0xc0
  403b14:	eddd aa31 	vldr	s21, [sp, #196]	; 0xc4
    const float halfMinusQySquared = 0.5f - Q.y * Q.y; // calculate common terms to avoid repeated operations
  403b18:	ee6a 7a0a 	vmul.f32	s15, s20, s20
  403b1c:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
  403b20:	ee3b ba67 	vsub.f32	s22, s22, s15
    euler.angle.roll = FusionRadiansToDegrees(atan2f(Q.w * Q.x + Q.y * Q.z, halfMinusQySquared - Q.x * Q.x));
  403b24:	ee68 6a08 	vmul.f32	s13, s16, s16
  403b28:	ee28 7a28 	vmul.f32	s14, s16, s17
  403b2c:	ee6a 7a2a 	vmul.f32	s15, s20, s21
  403b30:	ee7b 6a66 	vsub.f32	s13, s22, s13
  403b34:	ee16 1a90 	vmov	r1, s13
  403b38:	ee77 7a27 	vadd.f32	s15, s14, s15
  403b3c:	ee17 0a90 	vmov	r0, s15
  403b40:	47b8      	blx	r7
    euler.angle.pitch = FusionRadiansToDegrees(FusionAsin(2.0f * (Q.w * Q.y - Q.z * Q.x)));
  403b42:	ee6a 7a28 	vmul.f32	s15, s20, s17
  403b46:	ee28 7a2a 	vmul.f32	s14, s16, s21
  403b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
  403b4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
    if (value <= -1.0f) {
  403b52:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  403b56:	eef4 7ac7 	vcmpe.f32	s15, s14
  403b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b5e:	d907      	bls.n	403b70 <task_imu+0x34c>
    if (value >= 1.0f) {
  403b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  403b64:	eef4 7ac7 	vcmpe.f32	s15, s14
  403b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403b6c:	f6ff aebe 	blt.w	4038ec <task_imu+0xc8>
    euler.angle.yaw = FusionRadiansToDegrees(atan2f(Q.w * Q.z + Q.x * Q.y, halfMinusQySquared - Q.z * Q.z));
  403b70:	ee2a 7aaa 	vmul.f32	s14, s21, s21
  403b74:	ee68 8aaa 	vmul.f32	s17, s17, s21
  403b78:	ee68 7a0a 	vmul.f32	s15, s16, s20
  403b7c:	ee3b 7a47 	vsub.f32	s14, s22, s14
  403b80:	ee17 1a10 	vmov	r1, s14
  403b84:	ee78 7aa7 	vadd.f32	s15, s17, s15
  403b88:	ee17 0a90 	vmov	r0, s15
  403b8c:	47b8      	blx	r7
    return radians * (180.0f / (float) M_PI);
  403b8e:	eddf 7a11 	vldr	s15, [pc, #68]	; 403bd4 <task_imu+0x3b0>
  403b92:	ee07 0a10 	vmov	s14, r0
  403b96:	ee67 7a27 	vmul.f32	s15, s14, s15
		if (euler.angle.yaw < -30) {
  403b9a:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
  403b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
  403ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  403ba6:	f57f aed7 	bpl.w	403958 <task_imu+0x134>
			orient = DIREITA;
  403baa:	2302      	movs	r3, #2
  403bac:	f88d 3013 	strb.w	r3, [sp, #19]
  403bb0:	e6dc      	b.n	40396c <task_imu+0x148>
			orient = ESQUERDA;
  403bb2:	2300      	movs	r3, #0
  403bb4:	f88d 3013 	strb.w	r3, [sp, #19]
  403bb8:	e6d8      	b.n	40396c <task_imu+0x148>
  403bba:	bf00      	nop
  403bbc:	20400c1c 	.word	0x20400c1c
  403bc0:	00402af5 	.word	0x00402af5
  403bc4:	004037f9 	.word	0x004037f9
  403bc8:	3dcccccd 	.word	0x3dcccccd
  403bcc:	00400915 	.word	0x00400915
  403bd0:	00400309 	.word	0x00400309
  403bd4:	42652ee0 	.word	0x42652ee0

00403bd8 <init>:

void init(void) {
  403bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  403bda:	b089      	sub	sp, #36	; 0x24
	/* Initialize the SAM system */
	board_init();
  403bdc:	4b29      	ldr	r3, [pc, #164]	; (403c84 <init+0xac>)
  403bde:	4798      	blx	r3

	// Initialize the board clock
	sysclk_init();
  403be0:	4b29      	ldr	r3, [pc, #164]	; (403c88 <init+0xb0>)
  403be2:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403be4:	4e29      	ldr	r6, [pc, #164]	; (403c8c <init+0xb4>)
  403be6:	4b2a      	ldr	r3, [pc, #168]	; (403c90 <init+0xb8>)
  403be8:	601e      	str	r6, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403bea:	4a2a      	ldr	r2, [pc, #168]	; (403c94 <init+0xbc>)
  403bec:	4b2a      	ldr	r3, [pc, #168]	; (403c98 <init+0xc0>)
  403bee:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403bf0:	4a2a      	ldr	r2, [pc, #168]	; (403c9c <init+0xc4>)
  403bf2:	4b2b      	ldr	r3, [pc, #172]	; (403ca0 <init+0xc8>)
  403bf4:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403bf6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403bfa:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403bfc:	23c0      	movs	r3, #192	; 0xc0
  403bfe:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  403c00:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403c04:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403c06:	2400      	movs	r4, #0
  403c08:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403c0a:	9406      	str	r4, [sp, #24]
  403c0c:	200e      	movs	r0, #14
  403c0e:	4d25      	ldr	r5, [pc, #148]	; (403ca4 <init+0xcc>)
  403c10:	47a8      	blx	r5
		usart_init_rs232(p_usart, &usart_settings,
  403c12:	4a25      	ldr	r2, [pc, #148]	; (403ca8 <init+0xd0>)
  403c14:	a902      	add	r1, sp, #8
  403c16:	4630      	mov	r0, r6
  403c18:	4b24      	ldr	r3, [pc, #144]	; (403cac <init+0xd4>)
  403c1a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403c1c:	4630      	mov	r0, r6
  403c1e:	4b24      	ldr	r3, [pc, #144]	; (403cb0 <init+0xd8>)
  403c20:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403c22:	4630      	mov	r0, r6
  403c24:	4b23      	ldr	r3, [pc, #140]	; (403cb4 <init+0xdc>)
  403c26:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403c28:	4f23      	ldr	r7, [pc, #140]	; (403cb8 <init+0xe0>)
  403c2a:	683b      	ldr	r3, [r7, #0]
  403c2c:	4621      	mov	r1, r4
  403c2e:	6898      	ldr	r0, [r3, #8]
  403c30:	4e22      	ldr	r6, [pc, #136]	; (403cbc <init+0xe4>)
  403c32:	47b0      	blx	r6
	setbuf(stdin, NULL);
  403c34:	683b      	ldr	r3, [r7, #0]
  403c36:	4621      	mov	r1, r4
  403c38:	6858      	ldr	r0, [r3, #4]
  403c3a:	47b0      	blx	r6
	setbuf(stdout, NULL);
  403c3c:	683b      	ldr	r3, [r7, #0]
  403c3e:	4621      	mov	r1, r4
  403c40:	6898      	ldr	r0, [r3, #8]
  403c42:	47b0      	blx	r6

	/* Initialize the console uart */
	configure_console();

	// Deactivate WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  403c44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  403c48:	4b1d      	ldr	r3, [pc, #116]	; (403cc0 <init+0xe8>)
  403c4a:	605a      	str	r2, [r3, #4]
	// Activate the PIO that the LED connects
	// so we can control the LED.
	pmc_enable_periph_clk(LED1_PIO_ID);
  403c4c:	200a      	movs	r0, #10
  403c4e:	47a8      	blx	r5
	pmc_enable_periph_clk(LED2_PIO_ID);
  403c50:	200c      	movs	r0, #12
  403c52:	47a8      	blx	r5
	pmc_enable_periph_clk(LED3_PIO_ID);
  403c54:	200b      	movs	r0, #11
  403c56:	47a8      	blx	r5
	// Set LED_PIO as output (no multi drive and no pull-up resistor)
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 0, 0, 0);
  403c58:	9400      	str	r4, [sp, #0]
  403c5a:	4623      	mov	r3, r4
  403c5c:	4622      	mov	r2, r4
  403c5e:	2101      	movs	r1, #1
  403c60:	4818      	ldr	r0, [pc, #96]	; (403cc4 <init+0xec>)
  403c62:	4d19      	ldr	r5, [pc, #100]	; (403cc8 <init+0xf0>)
  403c64:	47a8      	blx	r5
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 0, 0, 0);
  403c66:	9400      	str	r4, [sp, #0]
  403c68:	4623      	mov	r3, r4
  403c6a:	4622      	mov	r2, r4
  403c6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403c70:	4816      	ldr	r0, [pc, #88]	; (403ccc <init+0xf4>)
  403c72:	47a8      	blx	r5
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 0, 0, 0);
  403c74:	9400      	str	r4, [sp, #0]
  403c76:	4623      	mov	r3, r4
  403c78:	4622      	mov	r2, r4
  403c7a:	2104      	movs	r1, #4
  403c7c:	4814      	ldr	r0, [pc, #80]	; (403cd0 <init+0xf8>)
  403c7e:	47a8      	blx	r5
}
  403c80:	b009      	add	sp, #36	; 0x24
  403c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403c84:	00400b99 	.word	0x00400b99
  403c88:	00400a9d 	.word	0x00400a9d
  403c8c:	40028000 	.word	0x40028000
  403c90:	20400bd8 	.word	0x20400bd8
  403c94:	004035a1 	.word	0x004035a1
  403c98:	20400bd4 	.word	0x20400bd4
  403c9c:	004034c5 	.word	0x004034c5
  403ca0:	20400bd0 	.word	0x20400bd0
  403ca4:	00400fcd 	.word	0x00400fcd
  403ca8:	08f0d180 	.word	0x08f0d180
  403cac:	004012f5 	.word	0x004012f5
  403cb0:	00401349 	.word	0x00401349
  403cb4:	0040134f 	.word	0x0040134f
  403cb8:	20400010 	.word	0x20400010
  403cbc:	004065c9 	.word	0x004065c9
  403cc0:	400e1850 	.word	0x400e1850
  403cc4:	400e0e00 	.word	0x400e0e00
  403cc8:	00400dc7 	.word	0x00400dc7
  403ccc:	400e1200 	.word	0x400e1200
  403cd0:	400e1000 	.word	0x400e1000

00403cd4 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void) {
  403cd4:	b500      	push	{lr}
  403cd6:	b083      	sub	sp, #12
	init();
  403cd8:	4b23      	ldr	r3, [pc, #140]	; (403d68 <main+0x94>)
  403cda:	4798      	blx	r3

	/* Create task to control imu */
	if (xTaskCreate(task_imu, "oled", TASK_IMU_STACK_SIZE, NULL, TASK_IMU_STACK_PRIORITY, NULL) != pdPASS) {
  403cdc:	2300      	movs	r3, #0
  403cde:	9301      	str	r3, [sp, #4]
  403ce0:	9300      	str	r3, [sp, #0]
  403ce2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403ce6:	4921      	ldr	r1, [pc, #132]	; (403d6c <main+0x98>)
  403ce8:	4821      	ldr	r0, [pc, #132]	; (403d70 <main+0x9c>)
  403cea:	4c22      	ldr	r4, [pc, #136]	; (403d74 <main+0xa0>)
  403cec:	47a0      	blx	r4
  403cee:	2801      	cmp	r0, #1
  403cf0:	d002      	beq.n	403cf8 <main+0x24>
	  printf("Failed to create imu task\r\n");
  403cf2:	4821      	ldr	r0, [pc, #132]	; (403d78 <main+0xa4>)
  403cf4:	4b21      	ldr	r3, [pc, #132]	; (403d7c <main+0xa8>)
  403cf6:	4798      	blx	r3
	}

	/* cada espaço possui o tamanho de um inteiro*/
	xQueueOrientacao = xQueueCreate(32, sizeof(uint32_t));
  403cf8:	2200      	movs	r2, #0
  403cfa:	2104      	movs	r1, #4
  403cfc:	2020      	movs	r0, #32
  403cfe:	4b20      	ldr	r3, [pc, #128]	; (403d80 <main+0xac>)
  403d00:	4798      	blx	r3
  403d02:	4b20      	ldr	r3, [pc, #128]	; (403d84 <main+0xb0>)
  403d04:	6018      	str	r0, [r3, #0]
	if (xQueueOrientacao == NULL) {
  403d06:	b330      	cbz	r0, 403d56 <main+0x82>
		printf("falha em criar as queues \n");
	}
	/* Create task to control imu */
	if (xTaskCreate(task_house_down, "house_down", TASK_HOUSE_DOWN_STACK_SIZE, NULL, TASK_HOUSE_DOWN_STACK_PRIORITY, NULL) != pdPASS) {
  403d08:	2300      	movs	r3, #0
  403d0a:	9301      	str	r3, [sp, #4]
  403d0c:	9300      	str	r3, [sp, #0]
  403d0e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403d12:	491d      	ldr	r1, [pc, #116]	; (403d88 <main+0xb4>)
  403d14:	481d      	ldr	r0, [pc, #116]	; (403d8c <main+0xb8>)
  403d16:	4c17      	ldr	r4, [pc, #92]	; (403d74 <main+0xa0>)
  403d18:	47a0      	blx	r4
  403d1a:	2801      	cmp	r0, #1
  403d1c:	d002      	beq.n	403d24 <main+0x50>
	  printf("Failed to create imu task\r\n");
  403d1e:	4816      	ldr	r0, [pc, #88]	; (403d78 <main+0xa4>)
  403d20:	4b16      	ldr	r3, [pc, #88]	; (403d7c <main+0xa8>)
  403d22:	4798      	blx	r3
	}

	/* Create task to control imu */
	if (xTaskCreate(task_orientacao, "orientacao", TASK_ORIENTACAO_STACK_SIZE, NULL, TASK_ORIENTACAO_STACK_PRIORITY, NULL) != pdPASS) {
  403d24:	2300      	movs	r3, #0
  403d26:	9301      	str	r3, [sp, #4]
  403d28:	9300      	str	r3, [sp, #0]
  403d2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  403d2e:	4918      	ldr	r1, [pc, #96]	; (403d90 <main+0xbc>)
  403d30:	4818      	ldr	r0, [pc, #96]	; (403d94 <main+0xc0>)
  403d32:	4c10      	ldr	r4, [pc, #64]	; (403d74 <main+0xa0>)
  403d34:	47a0      	blx	r4
  403d36:	2801      	cmp	r0, #1
  403d38:	d002      	beq.n	403d40 <main+0x6c>
	  printf("Failed to create imu task\r\n");
  403d3a:	480f      	ldr	r0, [pc, #60]	; (403d78 <main+0xa4>)
  403d3c:	4b0f      	ldr	r3, [pc, #60]	; (403d7c <main+0xa8>)
  403d3e:	4798      	blx	r3
	}

	xFallSemaphore = xSemaphoreCreateBinary();
  403d40:	2203      	movs	r2, #3
  403d42:	2100      	movs	r1, #0
  403d44:	2001      	movs	r0, #1
  403d46:	4b0e      	ldr	r3, [pc, #56]	; (403d80 <main+0xac>)
  403d48:	4798      	blx	r3
  403d4a:	4b13      	ldr	r3, [pc, #76]	; (403d98 <main+0xc4>)
  403d4c:	6018      	str	r0, [r3, #0]
 	if (xFallSemaphore == NULL) {
  403d4e:	b130      	cbz	r0, 403d5e <main+0x8a>
    	printf("falha em criar os semaforos\r\n");
	}

	/* Start the scheduler. */
	vTaskStartScheduler();
  403d50:	4b12      	ldr	r3, [pc, #72]	; (403d9c <main+0xc8>)
  403d52:	4798      	blx	r3
  403d54:	e7fe      	b.n	403d54 <main+0x80>
		printf("falha em criar as queues \n");
  403d56:	4812      	ldr	r0, [pc, #72]	; (403da0 <main+0xcc>)
  403d58:	4b08      	ldr	r3, [pc, #32]	; (403d7c <main+0xa8>)
  403d5a:	4798      	blx	r3
  403d5c:	e7d4      	b.n	403d08 <main+0x34>
    	printf("falha em criar os semaforos\r\n");
  403d5e:	4811      	ldr	r0, [pc, #68]	; (403da4 <main+0xd0>)
  403d60:	4b06      	ldr	r3, [pc, #24]	; (403d7c <main+0xa8>)
  403d62:	4798      	blx	r3
  403d64:	e7f4      	b.n	403d50 <main+0x7c>
  403d66:	bf00      	nop
  403d68:	00403bd9 	.word	0x00403bd9
  403d6c:	00408d80 	.word	0x00408d80
  403d70:	00403825 	.word	0x00403825
  403d74:	004025ed 	.word	0x004025ed
  403d78:	00408d88 	.word	0x00408d88
  403d7c:	00405e15 	.word	0x00405e15
  403d80:	00401d11 	.word	0x00401d11
  403d84:	20400c1c 	.word	0x20400c1c
  403d88:	00408dc0 	.word	0x00408dc0
  403d8c:	00403705 	.word	0x00403705
  403d90:	00408dcc 	.word	0x00408dcc
  403d94:	00403675 	.word	0x00403675
  403d98:	20400c20 	.word	0x20400c20
  403d9c:	004027e1 	.word	0x004027e1
  403da0:	00408da4 	.word	0x00408da4
  403da4:	00408dd8 	.word	0x00408dd8

00403da8 <cosf>:
  403da8:	b500      	push	{lr}
  403daa:	4a1c      	ldr	r2, [pc, #112]	; (403e1c <cosf+0x74>)
  403dac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  403db0:	4293      	cmp	r3, r2
  403db2:	b083      	sub	sp, #12
  403db4:	dd18      	ble.n	403de8 <cosf+0x40>
  403db6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  403dba:	db05      	blt.n	403dc8 <cosf+0x20>
  403dbc:	4601      	mov	r1, r0
  403dbe:	f001 fcef 	bl	4057a0 <__aeabi_fsub>
  403dc2:	b003      	add	sp, #12
  403dc4:	f85d fb04 	ldr.w	pc, [sp], #4
  403dc8:	4669      	mov	r1, sp
  403dca:	f000 fa95 	bl	4042f8 <__ieee754_rem_pio2f>
  403dce:	f000 0203 	and.w	r2, r0, #3
  403dd2:	2a01      	cmp	r2, #1
  403dd4:	d015      	beq.n	403e02 <cosf+0x5a>
  403dd6:	2a02      	cmp	r2, #2
  403dd8:	d00c      	beq.n	403df4 <cosf+0x4c>
  403dda:	b1ca      	cbz	r2, 403e10 <cosf+0x68>
  403ddc:	2201      	movs	r2, #1
  403dde:	9901      	ldr	r1, [sp, #4]
  403de0:	9800      	ldr	r0, [sp, #0]
  403de2:	f001 f895 	bl	404f10 <__kernel_sinf>
  403de6:	e7ec      	b.n	403dc2 <cosf+0x1a>
  403de8:	2100      	movs	r1, #0
  403dea:	f000 fc47 	bl	40467c <__kernel_cosf>
  403dee:	b003      	add	sp, #12
  403df0:	f85d fb04 	ldr.w	pc, [sp], #4
  403df4:	9901      	ldr	r1, [sp, #4]
  403df6:	9800      	ldr	r0, [sp, #0]
  403df8:	f000 fc40 	bl	40467c <__kernel_cosf>
  403dfc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403e00:	e7df      	b.n	403dc2 <cosf+0x1a>
  403e02:	9901      	ldr	r1, [sp, #4]
  403e04:	9800      	ldr	r0, [sp, #0]
  403e06:	f001 f883 	bl	404f10 <__kernel_sinf>
  403e0a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403e0e:	e7d8      	b.n	403dc2 <cosf+0x1a>
  403e10:	9901      	ldr	r1, [sp, #4]
  403e12:	9800      	ldr	r0, [sp, #0]
  403e14:	f000 fc32 	bl	40467c <__kernel_cosf>
  403e18:	e7d3      	b.n	403dc2 <cosf+0x1a>
  403e1a:	bf00      	nop
  403e1c:	3f490fd8 	.word	0x3f490fd8

00403e20 <sinf>:
  403e20:	b500      	push	{lr}
  403e22:	4a1d      	ldr	r2, [pc, #116]	; (403e98 <sinf+0x78>)
  403e24:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  403e28:	4293      	cmp	r3, r2
  403e2a:	b083      	sub	sp, #12
  403e2c:	dd19      	ble.n	403e62 <sinf+0x42>
  403e2e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
  403e32:	db05      	blt.n	403e40 <sinf+0x20>
  403e34:	4601      	mov	r1, r0
  403e36:	f001 fcb3 	bl	4057a0 <__aeabi_fsub>
  403e3a:	b003      	add	sp, #12
  403e3c:	f85d fb04 	ldr.w	pc, [sp], #4
  403e40:	4669      	mov	r1, sp
  403e42:	f000 fa59 	bl	4042f8 <__ieee754_rem_pio2f>
  403e46:	f000 0003 	and.w	r0, r0, #3
  403e4a:	2801      	cmp	r0, #1
  403e4c:	d018      	beq.n	403e80 <sinf+0x60>
  403e4e:	2802      	cmp	r0, #2
  403e50:	d00e      	beq.n	403e70 <sinf+0x50>
  403e52:	b1d0      	cbz	r0, 403e8a <sinf+0x6a>
  403e54:	9901      	ldr	r1, [sp, #4]
  403e56:	9800      	ldr	r0, [sp, #0]
  403e58:	f000 fc10 	bl	40467c <__kernel_cosf>
  403e5c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403e60:	e7eb      	b.n	403e3a <sinf+0x1a>
  403e62:	2200      	movs	r2, #0
  403e64:	2100      	movs	r1, #0
  403e66:	f001 f853 	bl	404f10 <__kernel_sinf>
  403e6a:	b003      	add	sp, #12
  403e6c:	f85d fb04 	ldr.w	pc, [sp], #4
  403e70:	2201      	movs	r2, #1
  403e72:	9901      	ldr	r1, [sp, #4]
  403e74:	9800      	ldr	r0, [sp, #0]
  403e76:	f001 f84b 	bl	404f10 <__kernel_sinf>
  403e7a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  403e7e:	e7dc      	b.n	403e3a <sinf+0x1a>
  403e80:	9901      	ldr	r1, [sp, #4]
  403e82:	9800      	ldr	r0, [sp, #0]
  403e84:	f000 fbfa 	bl	40467c <__kernel_cosf>
  403e88:	e7d7      	b.n	403e3a <sinf+0x1a>
  403e8a:	2201      	movs	r2, #1
  403e8c:	9901      	ldr	r1, [sp, #4]
  403e8e:	9800      	ldr	r0, [sp, #0]
  403e90:	f001 f83e 	bl	404f10 <__kernel_sinf>
  403e94:	e7d1      	b.n	403e3a <sinf+0x1a>
  403e96:	bf00      	nop
  403e98:	3f490fd8 	.word	0x3f490fd8

00403e9c <asinf>:
  403e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  403e9e:	4e24      	ldr	r6, [pc, #144]	; (403f30 <asinf+0x94>)
  403ea0:	b08b      	sub	sp, #44	; 0x2c
  403ea2:	4604      	mov	r4, r0
  403ea4:	f000 f84c 	bl	403f40 <__ieee754_asinf>
  403ea8:	f996 3000 	ldrsb.w	r3, [r6]
  403eac:	3301      	adds	r3, #1
  403eae:	4605      	mov	r5, r0
  403eb0:	d02f      	beq.n	403f12 <asinf+0x76>
  403eb2:	4621      	mov	r1, r4
  403eb4:	4620      	mov	r0, r4
  403eb6:	f001 ff43 	bl	405d40 <__aeabi_fcmpun>
  403eba:	4607      	mov	r7, r0
  403ebc:	bb48      	cbnz	r0, 403f12 <asinf+0x76>
  403ebe:	4620      	mov	r0, r4
  403ec0:	f001 f9ba 	bl	405238 <fabsf>
  403ec4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  403ec8:	f001 ff30 	bl	405d2c <__aeabi_fcmpgt>
  403ecc:	b308      	cbz	r0, 403f12 <asinf+0x76>
  403ece:	4b19      	ldr	r3, [pc, #100]	; (403f34 <asinf+0x98>)
  403ed0:	9708      	str	r7, [sp, #32]
  403ed2:	2201      	movs	r2, #1
  403ed4:	4620      	mov	r0, r4
  403ed6:	e88d 000c 	stmia.w	sp, {r2, r3}
  403eda:	f001 fbb9 	bl	405650 <__aeabi_f2d>
  403ede:	4602      	mov	r2, r0
  403ee0:	460b      	mov	r3, r1
  403ee2:	4815      	ldr	r0, [pc, #84]	; (403f38 <asinf+0x9c>)
  403ee4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  403ee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  403eec:	f001 f888 	bl	405000 <nan>
  403ef0:	f996 3000 	ldrsb.w	r3, [r6]
  403ef4:	2b02      	cmp	r3, #2
  403ef6:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403efa:	d00d      	beq.n	403f18 <asinf+0x7c>
  403efc:	4668      	mov	r0, sp
  403efe:	f001 f87d 	bl	404ffc <matherr>
  403f02:	b148      	cbz	r0, 403f18 <asinf+0x7c>
  403f04:	9b08      	ldr	r3, [sp, #32]
  403f06:	b973      	cbnz	r3, 403f26 <asinf+0x8a>
  403f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
  403f0c:	f001 fbf4 	bl	4056f8 <__aeabi_d2f>
  403f10:	4605      	mov	r5, r0
  403f12:	4628      	mov	r0, r5
  403f14:	b00b      	add	sp, #44	; 0x2c
  403f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403f18:	f001 ff4e 	bl	405db8 <__errno>
  403f1c:	2321      	movs	r3, #33	; 0x21
  403f1e:	6003      	str	r3, [r0, #0]
  403f20:	9b08      	ldr	r3, [sp, #32]
  403f22:	2b00      	cmp	r3, #0
  403f24:	d0f0      	beq.n	403f08 <asinf+0x6c>
  403f26:	f001 ff47 	bl	405db8 <__errno>
  403f2a:	9b08      	ldr	r3, [sp, #32]
  403f2c:	6003      	str	r3, [r0, #0]
  403f2e:	e7eb      	b.n	403f08 <asinf+0x6c>
  403f30:	2040000c 	.word	0x2040000c
  403f34:	00408e8c 	.word	0x00408e8c
  403f38:	00408d6c 	.word	0x00408d6c

00403f3c <atan2f>:
  403f3c:	f000 b94a 	b.w	4041d4 <__ieee754_atan2f>

00403f40 <__ieee754_asinf>:
  403f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  403f44:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  403f48:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
  403f4c:	4604      	mov	r4, r0
  403f4e:	f000 80c6 	beq.w	4040de <__ieee754_asinf+0x19e>
  403f52:	dc12      	bgt.n	403f7a <__ieee754_asinf+0x3a>
  403f54:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
  403f58:	4606      	mov	r6, r0
  403f5a:	da16      	bge.n	403f8a <__ieee754_asinf+0x4a>
  403f5c:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
  403f60:	f280 80cb 	bge.w	4040fa <__ieee754_asinf+0x1ba>
  403f64:	498b      	ldr	r1, [pc, #556]	; (404194 <__ieee754_asinf+0x254>)
  403f66:	f001 fc1d 	bl	4057a4 <__addsf3>
  403f6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  403f6e:	f001 fedd 	bl	405d2c <__aeabi_fcmpgt>
  403f72:	b150      	cbz	r0, 403f8a <__ieee754_asinf+0x4a>
  403f74:	4620      	mov	r0, r4
  403f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f7a:	4601      	mov	r1, r0
  403f7c:	f001 fc10 	bl	4057a0 <__aeabi_fsub>
  403f80:	4601      	mov	r1, r0
  403f82:	f001 fdcb 	bl	405b1c <__aeabi_fdiv>
  403f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403f8a:	4620      	mov	r0, r4
  403f8c:	f001 f954 	bl	405238 <fabsf>
  403f90:	4601      	mov	r1, r0
  403f92:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  403f96:	f001 fc03 	bl	4057a0 <__aeabi_fsub>
  403f9a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  403f9e:	f001 fd09 	bl	4059b4 <__aeabi_fmul>
  403fa2:	497d      	ldr	r1, [pc, #500]	; (404198 <__ieee754_asinf+0x258>)
  403fa4:	4604      	mov	r4, r0
  403fa6:	f001 fd05 	bl	4059b4 <__aeabi_fmul>
  403faa:	497c      	ldr	r1, [pc, #496]	; (40419c <__ieee754_asinf+0x25c>)
  403fac:	f001 fbfa 	bl	4057a4 <__addsf3>
  403fb0:	4621      	mov	r1, r4
  403fb2:	f001 fcff 	bl	4059b4 <__aeabi_fmul>
  403fb6:	497a      	ldr	r1, [pc, #488]	; (4041a0 <__ieee754_asinf+0x260>)
  403fb8:	f001 fbf2 	bl	4057a0 <__aeabi_fsub>
  403fbc:	4621      	mov	r1, r4
  403fbe:	f001 fcf9 	bl	4059b4 <__aeabi_fmul>
  403fc2:	4978      	ldr	r1, [pc, #480]	; (4041a4 <__ieee754_asinf+0x264>)
  403fc4:	f001 fbee 	bl	4057a4 <__addsf3>
  403fc8:	4621      	mov	r1, r4
  403fca:	f001 fcf3 	bl	4059b4 <__aeabi_fmul>
  403fce:	4976      	ldr	r1, [pc, #472]	; (4041a8 <__ieee754_asinf+0x268>)
  403fd0:	f001 fbe6 	bl	4057a0 <__aeabi_fsub>
  403fd4:	4621      	mov	r1, r4
  403fd6:	f001 fced 	bl	4059b4 <__aeabi_fmul>
  403fda:	4974      	ldr	r1, [pc, #464]	; (4041ac <__ieee754_asinf+0x26c>)
  403fdc:	f001 fbe2 	bl	4057a4 <__addsf3>
  403fe0:	4621      	mov	r1, r4
  403fe2:	f001 fce7 	bl	4059b4 <__aeabi_fmul>
  403fe6:	4972      	ldr	r1, [pc, #456]	; (4041b0 <__ieee754_asinf+0x270>)
  403fe8:	4680      	mov	r8, r0
  403fea:	4620      	mov	r0, r4
  403fec:	f001 fce2 	bl	4059b4 <__aeabi_fmul>
  403ff0:	4970      	ldr	r1, [pc, #448]	; (4041b4 <__ieee754_asinf+0x274>)
  403ff2:	f001 fbd5 	bl	4057a0 <__aeabi_fsub>
  403ff6:	4621      	mov	r1, r4
  403ff8:	f001 fcdc 	bl	4059b4 <__aeabi_fmul>
  403ffc:	496e      	ldr	r1, [pc, #440]	; (4041b8 <__ieee754_asinf+0x278>)
  403ffe:	f001 fbd1 	bl	4057a4 <__addsf3>
  404002:	4621      	mov	r1, r4
  404004:	f001 fcd6 	bl	4059b4 <__aeabi_fmul>
  404008:	496c      	ldr	r1, [pc, #432]	; (4041bc <__ieee754_asinf+0x27c>)
  40400a:	f001 fbc9 	bl	4057a0 <__aeabi_fsub>
  40400e:	4621      	mov	r1, r4
  404010:	f001 fcd0 	bl	4059b4 <__aeabi_fmul>
  404014:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404018:	f001 fbc4 	bl	4057a4 <__addsf3>
  40401c:	4681      	mov	r9, r0
  40401e:	4620      	mov	r0, r4
  404020:	f000 fad8 	bl	4045d4 <__ieee754_sqrtf>
  404024:	4b66      	ldr	r3, [pc, #408]	; (4041c0 <__ieee754_asinf+0x280>)
  404026:	429d      	cmp	r5, r3
  404028:	4607      	mov	r7, r0
  40402a:	4649      	mov	r1, r9
  40402c:	4640      	mov	r0, r8
  40402e:	dc43      	bgt.n	4040b8 <__ieee754_asinf+0x178>
  404030:	f001 fd74 	bl	405b1c <__aeabi_fdiv>
  404034:	4639      	mov	r1, r7
  404036:	4680      	mov	r8, r0
  404038:	4638      	mov	r0, r7
  40403a:	f001 fbb3 	bl	4057a4 <__addsf3>
  40403e:	4601      	mov	r1, r0
  404040:	4640      	mov	r0, r8
  404042:	f001 fcb7 	bl	4059b4 <__aeabi_fmul>
  404046:	f427 657f 	bic.w	r5, r7, #4080	; 0xff0
  40404a:	f025 050f 	bic.w	r5, r5, #15
  40404e:	4680      	mov	r8, r0
  404050:	4629      	mov	r1, r5
  404052:	4628      	mov	r0, r5
  404054:	f001 fcae 	bl	4059b4 <__aeabi_fmul>
  404058:	4601      	mov	r1, r0
  40405a:	4620      	mov	r0, r4
  40405c:	f001 fba0 	bl	4057a0 <__aeabi_fsub>
  404060:	4639      	mov	r1, r7
  404062:	4604      	mov	r4, r0
  404064:	4628      	mov	r0, r5
  404066:	f001 fb9d 	bl	4057a4 <__addsf3>
  40406a:	4601      	mov	r1, r0
  40406c:	4620      	mov	r0, r4
  40406e:	f001 fd55 	bl	405b1c <__aeabi_fdiv>
  404072:	4601      	mov	r1, r0
  404074:	f001 fb96 	bl	4057a4 <__addsf3>
  404078:	4601      	mov	r1, r0
  40407a:	4852      	ldr	r0, [pc, #328]	; (4041c4 <__ieee754_asinf+0x284>)
  40407c:	f001 fb90 	bl	4057a0 <__aeabi_fsub>
  404080:	4601      	mov	r1, r0
  404082:	4640      	mov	r0, r8
  404084:	f001 fb8c 	bl	4057a0 <__aeabi_fsub>
  404088:	4629      	mov	r1, r5
  40408a:	4604      	mov	r4, r0
  40408c:	4628      	mov	r0, r5
  40408e:	f001 fb89 	bl	4057a4 <__addsf3>
  404092:	4601      	mov	r1, r0
  404094:	484c      	ldr	r0, [pc, #304]	; (4041c8 <__ieee754_asinf+0x288>)
  404096:	f001 fb83 	bl	4057a0 <__aeabi_fsub>
  40409a:	4601      	mov	r1, r0
  40409c:	4620      	mov	r0, r4
  40409e:	f001 fb7f 	bl	4057a0 <__aeabi_fsub>
  4040a2:	4601      	mov	r1, r0
  4040a4:	4848      	ldr	r0, [pc, #288]	; (4041c8 <__ieee754_asinf+0x288>)
  4040a6:	f001 fb7b 	bl	4057a0 <__aeabi_fsub>
  4040aa:	2e00      	cmp	r6, #0
  4040ac:	f73f af63 	bgt.w	403f76 <__ieee754_asinf+0x36>
  4040b0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4040b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4040b8:	f001 fd30 	bl	405b1c <__aeabi_fdiv>
  4040bc:	4639      	mov	r1, r7
  4040be:	f001 fc79 	bl	4059b4 <__aeabi_fmul>
  4040c2:	4639      	mov	r1, r7
  4040c4:	f001 fb6e 	bl	4057a4 <__addsf3>
  4040c8:	4601      	mov	r1, r0
  4040ca:	f001 fb6b 	bl	4057a4 <__addsf3>
  4040ce:	493f      	ldr	r1, [pc, #252]	; (4041cc <__ieee754_asinf+0x28c>)
  4040d0:	f001 fb68 	bl	4057a4 <__addsf3>
  4040d4:	4601      	mov	r1, r0
  4040d6:	483e      	ldr	r0, [pc, #248]	; (4041d0 <__ieee754_asinf+0x290>)
  4040d8:	f001 fb62 	bl	4057a0 <__aeabi_fsub>
  4040dc:	e7e5      	b.n	4040aa <__ieee754_asinf+0x16a>
  4040de:	493c      	ldr	r1, [pc, #240]	; (4041d0 <__ieee754_asinf+0x290>)
  4040e0:	f001 fc68 	bl	4059b4 <__aeabi_fmul>
  4040e4:	4937      	ldr	r1, [pc, #220]	; (4041c4 <__ieee754_asinf+0x284>)
  4040e6:	4605      	mov	r5, r0
  4040e8:	4620      	mov	r0, r4
  4040ea:	f001 fc63 	bl	4059b4 <__aeabi_fmul>
  4040ee:	4601      	mov	r1, r0
  4040f0:	4628      	mov	r0, r5
  4040f2:	f001 fb57 	bl	4057a4 <__addsf3>
  4040f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4040fa:	4601      	mov	r1, r0
  4040fc:	f001 fc5a 	bl	4059b4 <__aeabi_fmul>
  404100:	4925      	ldr	r1, [pc, #148]	; (404198 <__ieee754_asinf+0x258>)
  404102:	4605      	mov	r5, r0
  404104:	f001 fc56 	bl	4059b4 <__aeabi_fmul>
  404108:	4924      	ldr	r1, [pc, #144]	; (40419c <__ieee754_asinf+0x25c>)
  40410a:	f001 fb4b 	bl	4057a4 <__addsf3>
  40410e:	4629      	mov	r1, r5
  404110:	f001 fc50 	bl	4059b4 <__aeabi_fmul>
  404114:	4922      	ldr	r1, [pc, #136]	; (4041a0 <__ieee754_asinf+0x260>)
  404116:	f001 fb43 	bl	4057a0 <__aeabi_fsub>
  40411a:	4629      	mov	r1, r5
  40411c:	f001 fc4a 	bl	4059b4 <__aeabi_fmul>
  404120:	4920      	ldr	r1, [pc, #128]	; (4041a4 <__ieee754_asinf+0x264>)
  404122:	f001 fb3f 	bl	4057a4 <__addsf3>
  404126:	4629      	mov	r1, r5
  404128:	f001 fc44 	bl	4059b4 <__aeabi_fmul>
  40412c:	491e      	ldr	r1, [pc, #120]	; (4041a8 <__ieee754_asinf+0x268>)
  40412e:	f001 fb37 	bl	4057a0 <__aeabi_fsub>
  404132:	4629      	mov	r1, r5
  404134:	f001 fc3e 	bl	4059b4 <__aeabi_fmul>
  404138:	491c      	ldr	r1, [pc, #112]	; (4041ac <__ieee754_asinf+0x26c>)
  40413a:	f001 fb33 	bl	4057a4 <__addsf3>
  40413e:	4629      	mov	r1, r5
  404140:	f001 fc38 	bl	4059b4 <__aeabi_fmul>
  404144:	491a      	ldr	r1, [pc, #104]	; (4041b0 <__ieee754_asinf+0x270>)
  404146:	4606      	mov	r6, r0
  404148:	4628      	mov	r0, r5
  40414a:	f001 fc33 	bl	4059b4 <__aeabi_fmul>
  40414e:	4919      	ldr	r1, [pc, #100]	; (4041b4 <__ieee754_asinf+0x274>)
  404150:	f001 fb26 	bl	4057a0 <__aeabi_fsub>
  404154:	4629      	mov	r1, r5
  404156:	f001 fc2d 	bl	4059b4 <__aeabi_fmul>
  40415a:	4917      	ldr	r1, [pc, #92]	; (4041b8 <__ieee754_asinf+0x278>)
  40415c:	f001 fb22 	bl	4057a4 <__addsf3>
  404160:	4629      	mov	r1, r5
  404162:	f001 fc27 	bl	4059b4 <__aeabi_fmul>
  404166:	4915      	ldr	r1, [pc, #84]	; (4041bc <__ieee754_asinf+0x27c>)
  404168:	f001 fb1a 	bl	4057a0 <__aeabi_fsub>
  40416c:	4629      	mov	r1, r5
  40416e:	f001 fc21 	bl	4059b4 <__aeabi_fmul>
  404172:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  404176:	f001 fb15 	bl	4057a4 <__addsf3>
  40417a:	4601      	mov	r1, r0
  40417c:	4630      	mov	r0, r6
  40417e:	f001 fccd 	bl	405b1c <__aeabi_fdiv>
  404182:	4621      	mov	r1, r4
  404184:	f001 fc16 	bl	4059b4 <__aeabi_fmul>
  404188:	4621      	mov	r1, r4
  40418a:	f001 fb0b 	bl	4057a4 <__addsf3>
  40418e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404192:	bf00      	nop
  404194:	7149f2ca 	.word	0x7149f2ca
  404198:	3811ef08 	.word	0x3811ef08
  40419c:	3a4f7f04 	.word	0x3a4f7f04
  4041a0:	3d241146 	.word	0x3d241146
  4041a4:	3e4e0aa8 	.word	0x3e4e0aa8
  4041a8:	3ea6b090 	.word	0x3ea6b090
  4041ac:	3e2aaaab 	.word	0x3e2aaaab
  4041b0:	3d9dc62e 	.word	0x3d9dc62e
  4041b4:	3f303361 	.word	0x3f303361
  4041b8:	4001572d 	.word	0x4001572d
  4041bc:	4019d139 	.word	0x4019d139
  4041c0:	3f799999 	.word	0x3f799999
  4041c4:	b33bbd2e 	.word	0xb33bbd2e
  4041c8:	3f490fdb 	.word	0x3f490fdb
  4041cc:	333bbd2e 	.word	0x333bbd2e
  4041d0:	3fc90fdb 	.word	0x3fc90fdb

004041d4 <__ieee754_atan2f>:
  4041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4041d6:	460c      	mov	r4, r1
  4041d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4041dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  4041e0:	4603      	mov	r3, r0
  4041e2:	dc14      	bgt.n	40420e <__ieee754_atan2f+0x3a>
  4041e4:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
  4041e8:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  4041ec:	4607      	mov	r7, r0
  4041ee:	dc0e      	bgt.n	40420e <__ieee754_atan2f+0x3a>
  4041f0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
  4041f4:	d03d      	beq.n	404272 <__ieee754_atan2f+0x9e>
  4041f6:	17a5      	asrs	r5, r4, #30
  4041f8:	f005 0502 	and.w	r5, r5, #2
  4041fc:	ea45 75d0 	orr.w	r5, r5, r0, lsr #31
  404200:	b956      	cbnz	r6, 404218 <__ieee754_atan2f+0x44>
  404202:	2d02      	cmp	r5, #2
  404204:	d030      	beq.n	404268 <__ieee754_atan2f+0x94>
  404206:	2d03      	cmp	r5, #3
  404208:	d130      	bne.n	40426c <__ieee754_atan2f+0x98>
  40420a:	4832      	ldr	r0, [pc, #200]	; (4042d4 <__ieee754_atan2f+0x100>)
  40420c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40420e:	4619      	mov	r1, r3
  404210:	4620      	mov	r0, r4
  404212:	f001 fac7 	bl	4057a4 <__addsf3>
  404216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404218:	b301      	cbz	r1, 40425c <__ieee754_atan2f+0x88>
  40421a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
  40421e:	d02c      	beq.n	40427a <__ieee754_atan2f+0xa6>
  404220:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  404224:	d01a      	beq.n	40425c <__ieee754_atan2f+0x88>
  404226:	1a71      	subs	r1, r6, r1
  404228:	15c9      	asrs	r1, r1, #23
  40422a:	293c      	cmp	r1, #60	; 0x3c
  40422c:	dc1a      	bgt.n	404264 <__ieee754_atan2f+0x90>
  40422e:	2c00      	cmp	r4, #0
  404230:	db39      	blt.n	4042a6 <__ieee754_atan2f+0xd2>
  404232:	4621      	mov	r1, r4
  404234:	4618      	mov	r0, r3
  404236:	f001 fc71 	bl	405b1c <__aeabi_fdiv>
  40423a:	f000 fffd 	bl	405238 <fabsf>
  40423e:	f000 fee5 	bl	40500c <atanf>
  404242:	2d01      	cmp	r5, #1
  404244:	d02c      	beq.n	4042a0 <__ieee754_atan2f+0xcc>
  404246:	2d02      	cmp	r5, #2
  404248:	d022      	beq.n	404290 <__ieee754_atan2f+0xbc>
  40424a:	2d00      	cmp	r5, #0
  40424c:	d02f      	beq.n	4042ae <__ieee754_atan2f+0xda>
  40424e:	4922      	ldr	r1, [pc, #136]	; (4042d8 <__ieee754_atan2f+0x104>)
  404250:	f001 faa8 	bl	4057a4 <__addsf3>
  404254:	4921      	ldr	r1, [pc, #132]	; (4042dc <__ieee754_atan2f+0x108>)
  404256:	f001 faa3 	bl	4057a0 <__aeabi_fsub>
  40425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40425c:	2f00      	cmp	r7, #0
  40425e:	db06      	blt.n	40426e <__ieee754_atan2f+0x9a>
  404260:	481f      	ldr	r0, [pc, #124]	; (4042e0 <__ieee754_atan2f+0x10c>)
  404262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404264:	481e      	ldr	r0, [pc, #120]	; (4042e0 <__ieee754_atan2f+0x10c>)
  404266:	e7ec      	b.n	404242 <__ieee754_atan2f+0x6e>
  404268:	481c      	ldr	r0, [pc, #112]	; (4042dc <__ieee754_atan2f+0x108>)
  40426a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40426e:	481d      	ldr	r0, [pc, #116]	; (4042e4 <__ieee754_atan2f+0x110>)
  404270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  404276:	f000 bec9 	b.w	40500c <atanf>
  40427a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
  40427e:	d017      	beq.n	4042b0 <__ieee754_atan2f+0xdc>
  404280:	2d02      	cmp	r5, #2
  404282:	d0f1      	beq.n	404268 <__ieee754_atan2f+0x94>
  404284:	2d03      	cmp	r5, #3
  404286:	d0c0      	beq.n	40420a <__ieee754_atan2f+0x36>
  404288:	2d01      	cmp	r5, #1
  40428a:	d019      	beq.n	4042c0 <__ieee754_atan2f+0xec>
  40428c:	2000      	movs	r0, #0
  40428e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404290:	4911      	ldr	r1, [pc, #68]	; (4042d8 <__ieee754_atan2f+0x104>)
  404292:	f001 fa87 	bl	4057a4 <__addsf3>
  404296:	4601      	mov	r1, r0
  404298:	4810      	ldr	r0, [pc, #64]	; (4042dc <__ieee754_atan2f+0x108>)
  40429a:	f001 fa81 	bl	4057a0 <__aeabi_fsub>
  40429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042a0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4042a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042a6:	313c      	adds	r1, #60	; 0x3c
  4042a8:	dac3      	bge.n	404232 <__ieee754_atan2f+0x5e>
  4042aa:	2000      	movs	r0, #0
  4042ac:	e7c9      	b.n	404242 <__ieee754_atan2f+0x6e>
  4042ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042b0:	2d02      	cmp	r5, #2
  4042b2:	d00c      	beq.n	4042ce <__ieee754_atan2f+0xfa>
  4042b4:	2d03      	cmp	r5, #3
  4042b6:	d008      	beq.n	4042ca <__ieee754_atan2f+0xf6>
  4042b8:	2d01      	cmp	r5, #1
  4042ba:	d004      	beq.n	4042c6 <__ieee754_atan2f+0xf2>
  4042bc:	480a      	ldr	r0, [pc, #40]	; (4042e8 <__ieee754_atan2f+0x114>)
  4042be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042c0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  4042c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042c6:	4809      	ldr	r0, [pc, #36]	; (4042ec <__ieee754_atan2f+0x118>)
  4042c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042ca:	4809      	ldr	r0, [pc, #36]	; (4042f0 <__ieee754_atan2f+0x11c>)
  4042cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042ce:	4809      	ldr	r0, [pc, #36]	; (4042f4 <__ieee754_atan2f+0x120>)
  4042d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4042d2:	bf00      	nop
  4042d4:	c0490fdb 	.word	0xc0490fdb
  4042d8:	33bbbd2e 	.word	0x33bbbd2e
  4042dc:	40490fdb 	.word	0x40490fdb
  4042e0:	3fc90fdb 	.word	0x3fc90fdb
  4042e4:	bfc90fdb 	.word	0xbfc90fdb
  4042e8:	3f490fdb 	.word	0x3f490fdb
  4042ec:	bf490fdb 	.word	0xbf490fdb
  4042f0:	c016cbe4 	.word	0xc016cbe4
  4042f4:	4016cbe4 	.word	0x4016cbe4

004042f8 <__ieee754_rem_pio2f>:
  4042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4042fc:	4aa8      	ldr	r2, [pc, #672]	; (4045a0 <__ieee754_rem_pio2f+0x2a8>)
  4042fe:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404302:	4294      	cmp	r4, r2
  404304:	b089      	sub	sp, #36	; 0x24
  404306:	dd6e      	ble.n	4043e6 <__ieee754_rem_pio2f+0xee>
  404308:	4aa6      	ldr	r2, [pc, #664]	; (4045a4 <__ieee754_rem_pio2f+0x2ac>)
  40430a:	4294      	cmp	r4, r2
  40430c:	4606      	mov	r6, r0
  40430e:	460d      	mov	r5, r1
  404310:	dc1c      	bgt.n	40434c <__ieee754_rem_pio2f+0x54>
  404312:	2800      	cmp	r0, #0
  404314:	49a4      	ldr	r1, [pc, #656]	; (4045a8 <__ieee754_rem_pio2f+0x2b0>)
  404316:	f340 80fc 	ble.w	404512 <__ieee754_rem_pio2f+0x21a>
  40431a:	f001 fa41 	bl	4057a0 <__aeabi_fsub>
  40431e:	4ba3      	ldr	r3, [pc, #652]	; (4045ac <__ieee754_rem_pio2f+0x2b4>)
  404320:	f024 040f 	bic.w	r4, r4, #15
  404324:	429c      	cmp	r4, r3
  404326:	4606      	mov	r6, r0
  404328:	d06c      	beq.n	404404 <__ieee754_rem_pio2f+0x10c>
  40432a:	49a1      	ldr	r1, [pc, #644]	; (4045b0 <__ieee754_rem_pio2f+0x2b8>)
  40432c:	f001 fa38 	bl	4057a0 <__aeabi_fsub>
  404330:	4601      	mov	r1, r0
  404332:	6028      	str	r0, [r5, #0]
  404334:	4630      	mov	r0, r6
  404336:	f001 fa33 	bl	4057a0 <__aeabi_fsub>
  40433a:	499d      	ldr	r1, [pc, #628]	; (4045b0 <__ieee754_rem_pio2f+0x2b8>)
  40433c:	f001 fa30 	bl	4057a0 <__aeabi_fsub>
  404340:	2701      	movs	r7, #1
  404342:	6068      	str	r0, [r5, #4]
  404344:	4638      	mov	r0, r7
  404346:	b009      	add	sp, #36	; 0x24
  404348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40434c:	4a99      	ldr	r2, [pc, #612]	; (4045b4 <__ieee754_rem_pio2f+0x2bc>)
  40434e:	4294      	cmp	r4, r2
  404350:	dd6a      	ble.n	404428 <__ieee754_rem_pio2f+0x130>
  404352:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
  404356:	da4e      	bge.n	4043f6 <__ieee754_rem_pio2f+0xfe>
  404358:	15e7      	asrs	r7, r4, #23
  40435a:	3f86      	subs	r7, #134	; 0x86
  40435c:	eba4 54c7 	sub.w	r4, r4, r7, lsl #23
  404360:	4620      	mov	r0, r4
  404362:	f001 fd03 	bl	405d6c <__aeabi_f2iz>
  404366:	f001 fad1 	bl	40590c <__aeabi_i2f>
  40436a:	4603      	mov	r3, r0
  40436c:	4601      	mov	r1, r0
  40436e:	4620      	mov	r0, r4
  404370:	9305      	str	r3, [sp, #20]
  404372:	f001 fa15 	bl	4057a0 <__aeabi_fsub>
  404376:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  40437a:	f001 fb1b 	bl	4059b4 <__aeabi_fmul>
  40437e:	4680      	mov	r8, r0
  404380:	f001 fcf4 	bl	405d6c <__aeabi_f2iz>
  404384:	f001 fac2 	bl	40590c <__aeabi_i2f>
  404388:	4601      	mov	r1, r0
  40438a:	4604      	mov	r4, r0
  40438c:	4640      	mov	r0, r8
  40438e:	9406      	str	r4, [sp, #24]
  404390:	f001 fa06 	bl	4057a0 <__aeabi_fsub>
  404394:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404398:	f001 fb0c 	bl	4059b4 <__aeabi_fmul>
  40439c:	2100      	movs	r1, #0
  40439e:	9007      	str	r0, [sp, #28]
  4043a0:	f001 fc9c 	bl	405cdc <__aeabi_fcmpeq>
  4043a4:	2800      	cmp	r0, #0
  4043a6:	f000 80cb 	beq.w	404540 <__ieee754_rem_pio2f+0x248>
  4043aa:	4620      	mov	r0, r4
  4043ac:	2100      	movs	r1, #0
  4043ae:	f001 fc95 	bl	405cdc <__aeabi_fcmpeq>
  4043b2:	2800      	cmp	r0, #0
  4043b4:	bf14      	ite	ne
  4043b6:	2301      	movne	r3, #1
  4043b8:	2302      	moveq	r3, #2
  4043ba:	4a7f      	ldr	r2, [pc, #508]	; (4045b8 <__ieee754_rem_pio2f+0x2c0>)
  4043bc:	9201      	str	r2, [sp, #4]
  4043be:	2102      	movs	r1, #2
  4043c0:	463a      	mov	r2, r7
  4043c2:	9100      	str	r1, [sp, #0]
  4043c4:	a805      	add	r0, sp, #20
  4043c6:	4629      	mov	r1, r5
  4043c8:	f000 fa1c 	bl	404804 <__kernel_rem_pio2f>
  4043cc:	2e00      	cmp	r6, #0
  4043ce:	4607      	mov	r7, r0
  4043d0:	da0d      	bge.n	4043ee <__ieee754_rem_pio2f+0xf6>
  4043d2:	e895 000c 	ldmia.w	r5, {r2, r3}
  4043d6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  4043da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  4043de:	4247      	negs	r7, r0
  4043e0:	602a      	str	r2, [r5, #0]
  4043e2:	606b      	str	r3, [r5, #4]
  4043e4:	e003      	b.n	4043ee <__ieee754_rem_pio2f+0xf6>
  4043e6:	2200      	movs	r2, #0
  4043e8:	6008      	str	r0, [r1, #0]
  4043ea:	604a      	str	r2, [r1, #4]
  4043ec:	2700      	movs	r7, #0
  4043ee:	4638      	mov	r0, r7
  4043f0:	b009      	add	sp, #36	; 0x24
  4043f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4043f6:	4601      	mov	r1, r0
  4043f8:	f001 f9d2 	bl	4057a0 <__aeabi_fsub>
  4043fc:	2700      	movs	r7, #0
  4043fe:	6068      	str	r0, [r5, #4]
  404400:	6028      	str	r0, [r5, #0]
  404402:	e7f4      	b.n	4043ee <__ieee754_rem_pio2f+0xf6>
  404404:	496d      	ldr	r1, [pc, #436]	; (4045bc <__ieee754_rem_pio2f+0x2c4>)
  404406:	f001 f9cb 	bl	4057a0 <__aeabi_fsub>
  40440a:	496d      	ldr	r1, [pc, #436]	; (4045c0 <__ieee754_rem_pio2f+0x2c8>)
  40440c:	4604      	mov	r4, r0
  40440e:	f001 f9c7 	bl	4057a0 <__aeabi_fsub>
  404412:	4601      	mov	r1, r0
  404414:	6028      	str	r0, [r5, #0]
  404416:	4620      	mov	r0, r4
  404418:	f001 f9c2 	bl	4057a0 <__aeabi_fsub>
  40441c:	4968      	ldr	r1, [pc, #416]	; (4045c0 <__ieee754_rem_pio2f+0x2c8>)
  40441e:	f001 f9bf 	bl	4057a0 <__aeabi_fsub>
  404422:	2701      	movs	r7, #1
  404424:	6068      	str	r0, [r5, #4]
  404426:	e7e2      	b.n	4043ee <__ieee754_rem_pio2f+0xf6>
  404428:	f000 ff06 	bl	405238 <fabsf>
  40442c:	4965      	ldr	r1, [pc, #404]	; (4045c4 <__ieee754_rem_pio2f+0x2cc>)
  40442e:	4680      	mov	r8, r0
  404430:	f001 fac0 	bl	4059b4 <__aeabi_fmul>
  404434:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404438:	f001 f9b4 	bl	4057a4 <__addsf3>
  40443c:	f001 fc96 	bl	405d6c <__aeabi_f2iz>
  404440:	4607      	mov	r7, r0
  404442:	f001 fa63 	bl	40590c <__aeabi_i2f>
  404446:	4958      	ldr	r1, [pc, #352]	; (4045a8 <__ieee754_rem_pio2f+0x2b0>)
  404448:	4683      	mov	fp, r0
  40444a:	f001 fab3 	bl	4059b4 <__aeabi_fmul>
  40444e:	4601      	mov	r1, r0
  404450:	4640      	mov	r0, r8
  404452:	f001 f9a5 	bl	4057a0 <__aeabi_fsub>
  404456:	4956      	ldr	r1, [pc, #344]	; (4045b0 <__ieee754_rem_pio2f+0x2b8>)
  404458:	4681      	mov	r9, r0
  40445a:	4658      	mov	r0, fp
  40445c:	f001 faaa 	bl	4059b4 <__aeabi_fmul>
  404460:	2f1f      	cmp	r7, #31
  404462:	4682      	mov	sl, r0
  404464:	dc21      	bgt.n	4044aa <__ieee754_rem_pio2f+0x1b2>
  404466:	4a58      	ldr	r2, [pc, #352]	; (4045c8 <__ieee754_rem_pio2f+0x2d0>)
  404468:	1e79      	subs	r1, r7, #1
  40446a:	f024 03ff 	bic.w	r3, r4, #255	; 0xff
  40446e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  404472:	4293      	cmp	r3, r2
  404474:	d019      	beq.n	4044aa <__ieee754_rem_pio2f+0x1b2>
  404476:	4651      	mov	r1, sl
  404478:	4648      	mov	r0, r9
  40447a:	f001 f991 	bl	4057a0 <__aeabi_fsub>
  40447e:	4680      	mov	r8, r0
  404480:	f8c5 8000 	str.w	r8, [r5]
  404484:	4641      	mov	r1, r8
  404486:	4648      	mov	r0, r9
  404488:	f001 f98a 	bl	4057a0 <__aeabi_fsub>
  40448c:	4651      	mov	r1, sl
  40448e:	f001 f987 	bl	4057a0 <__aeabi_fsub>
  404492:	2e00      	cmp	r6, #0
  404494:	6068      	str	r0, [r5, #4]
  404496:	daaa      	bge.n	4043ee <__ieee754_rem_pio2f+0xf6>
  404498:	f108 4800 	add.w	r8, r8, #2147483648	; 0x80000000
  40449c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  4044a0:	f8c5 8000 	str.w	r8, [r5]
  4044a4:	6068      	str	r0, [r5, #4]
  4044a6:	427f      	negs	r7, r7
  4044a8:	e7a1      	b.n	4043ee <__ieee754_rem_pio2f+0xf6>
  4044aa:	4651      	mov	r1, sl
  4044ac:	4648      	mov	r0, r9
  4044ae:	f001 f977 	bl	4057a0 <__aeabi_fsub>
  4044b2:	15e2      	asrs	r2, r4, #23
  4044b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  4044b8:	1ad3      	subs	r3, r2, r3
  4044ba:	2b08      	cmp	r3, #8
  4044bc:	4680      	mov	r8, r0
  4044be:	dddf      	ble.n	404480 <__ieee754_rem_pio2f+0x188>
  4044c0:	493e      	ldr	r1, [pc, #248]	; (4045bc <__ieee754_rem_pio2f+0x2c4>)
  4044c2:	9203      	str	r2, [sp, #12]
  4044c4:	4658      	mov	r0, fp
  4044c6:	f001 fa75 	bl	4059b4 <__aeabi_fmul>
  4044ca:	4680      	mov	r8, r0
  4044cc:	4601      	mov	r1, r0
  4044ce:	4648      	mov	r0, r9
  4044d0:	f001 f966 	bl	4057a0 <__aeabi_fsub>
  4044d4:	4601      	mov	r1, r0
  4044d6:	4604      	mov	r4, r0
  4044d8:	4648      	mov	r0, r9
  4044da:	f001 f961 	bl	4057a0 <__aeabi_fsub>
  4044de:	4641      	mov	r1, r8
  4044e0:	f001 f95e 	bl	4057a0 <__aeabi_fsub>
  4044e4:	4936      	ldr	r1, [pc, #216]	; (4045c0 <__ieee754_rem_pio2f+0x2c8>)
  4044e6:	4680      	mov	r8, r0
  4044e8:	4658      	mov	r0, fp
  4044ea:	f001 fa63 	bl	4059b4 <__aeabi_fmul>
  4044ee:	4641      	mov	r1, r8
  4044f0:	f001 f956 	bl	4057a0 <__aeabi_fsub>
  4044f4:	4601      	mov	r1, r0
  4044f6:	4682      	mov	sl, r0
  4044f8:	4620      	mov	r0, r4
  4044fa:	f001 f951 	bl	4057a0 <__aeabi_fsub>
  4044fe:	9a03      	ldr	r2, [sp, #12]
  404500:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  404504:	1ad2      	subs	r2, r2, r3
  404506:	2a19      	cmp	r2, #25
  404508:	4680      	mov	r8, r0
  40450a:	dc2e      	bgt.n	40456a <__ieee754_rem_pio2f+0x272>
  40450c:	6028      	str	r0, [r5, #0]
  40450e:	46a1      	mov	r9, r4
  404510:	e7b8      	b.n	404484 <__ieee754_rem_pio2f+0x18c>
  404512:	f001 f947 	bl	4057a4 <__addsf3>
  404516:	4b25      	ldr	r3, [pc, #148]	; (4045ac <__ieee754_rem_pio2f+0x2b4>)
  404518:	f024 040f 	bic.w	r4, r4, #15
  40451c:	429c      	cmp	r4, r3
  40451e:	4606      	mov	r6, r0
  404520:	d010      	beq.n	404544 <__ieee754_rem_pio2f+0x24c>
  404522:	4923      	ldr	r1, [pc, #140]	; (4045b0 <__ieee754_rem_pio2f+0x2b8>)
  404524:	f001 f93e 	bl	4057a4 <__addsf3>
  404528:	4601      	mov	r1, r0
  40452a:	6028      	str	r0, [r5, #0]
  40452c:	4630      	mov	r0, r6
  40452e:	f001 f937 	bl	4057a0 <__aeabi_fsub>
  404532:	491f      	ldr	r1, [pc, #124]	; (4045b0 <__ieee754_rem_pio2f+0x2b8>)
  404534:	f001 f936 	bl	4057a4 <__addsf3>
  404538:	f04f 37ff 	mov.w	r7, #4294967295
  40453c:	6068      	str	r0, [r5, #4]
  40453e:	e756      	b.n	4043ee <__ieee754_rem_pio2f+0xf6>
  404540:	2303      	movs	r3, #3
  404542:	e73a      	b.n	4043ba <__ieee754_rem_pio2f+0xc2>
  404544:	491d      	ldr	r1, [pc, #116]	; (4045bc <__ieee754_rem_pio2f+0x2c4>)
  404546:	f001 f92d 	bl	4057a4 <__addsf3>
  40454a:	491d      	ldr	r1, [pc, #116]	; (4045c0 <__ieee754_rem_pio2f+0x2c8>)
  40454c:	4604      	mov	r4, r0
  40454e:	f001 f929 	bl	4057a4 <__addsf3>
  404552:	4601      	mov	r1, r0
  404554:	6028      	str	r0, [r5, #0]
  404556:	4620      	mov	r0, r4
  404558:	f001 f922 	bl	4057a0 <__aeabi_fsub>
  40455c:	4918      	ldr	r1, [pc, #96]	; (4045c0 <__ieee754_rem_pio2f+0x2c8>)
  40455e:	f001 f921 	bl	4057a4 <__addsf3>
  404562:	f04f 37ff 	mov.w	r7, #4294967295
  404566:	6068      	str	r0, [r5, #4]
  404568:	e741      	b.n	4043ee <__ieee754_rem_pio2f+0xf6>
  40456a:	4918      	ldr	r1, [pc, #96]	; (4045cc <__ieee754_rem_pio2f+0x2d4>)
  40456c:	4658      	mov	r0, fp
  40456e:	f001 fa21 	bl	4059b4 <__aeabi_fmul>
  404572:	4601      	mov	r1, r0
  404574:	4680      	mov	r8, r0
  404576:	4620      	mov	r0, r4
  404578:	f001 f912 	bl	4057a0 <__aeabi_fsub>
  40457c:	4601      	mov	r1, r0
  40457e:	4681      	mov	r9, r0
  404580:	4620      	mov	r0, r4
  404582:	f001 f90d 	bl	4057a0 <__aeabi_fsub>
  404586:	4641      	mov	r1, r8
  404588:	f001 f90a 	bl	4057a0 <__aeabi_fsub>
  40458c:	4910      	ldr	r1, [pc, #64]	; (4045d0 <__ieee754_rem_pio2f+0x2d8>)
  40458e:	4604      	mov	r4, r0
  404590:	4658      	mov	r0, fp
  404592:	f001 fa0f 	bl	4059b4 <__aeabi_fmul>
  404596:	4621      	mov	r1, r4
  404598:	f001 f902 	bl	4057a0 <__aeabi_fsub>
  40459c:	4682      	mov	sl, r0
  40459e:	e76a      	b.n	404476 <__ieee754_rem_pio2f+0x17e>
  4045a0:	3f490fd8 	.word	0x3f490fd8
  4045a4:	4016cbe3 	.word	0x4016cbe3
  4045a8:	3fc90f80 	.word	0x3fc90f80
  4045ac:	3fc90fd0 	.word	0x3fc90fd0
  4045b0:	37354443 	.word	0x37354443
  4045b4:	43490f80 	.word	0x43490f80
  4045b8:	00408f14 	.word	0x00408f14
  4045bc:	37354400 	.word	0x37354400
  4045c0:	2e85a308 	.word	0x2e85a308
  4045c4:	3f22f984 	.word	0x3f22f984
  4045c8:	00408e94 	.word	0x00408e94
  4045cc:	2e85a300 	.word	0x2e85a300
  4045d0:	248d3132 	.word	0x248d3132

004045d4 <__ieee754_sqrtf>:
  4045d4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
  4045d8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  4045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4045de:	4604      	mov	r4, r0
  4045e0:	d22e      	bcs.n	404640 <__ieee754_sqrtf+0x6c>
  4045e2:	b362      	cbz	r2, 40463e <__ieee754_sqrtf+0x6a>
  4045e4:	2800      	cmp	r0, #0
  4045e6:	4603      	mov	r3, r0
  4045e8:	db3d      	blt.n	404666 <__ieee754_sqrtf+0x92>
  4045ea:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  4045ee:	ea4f 50e0 	mov.w	r0, r0, asr #23
  4045f2:	d32c      	bcc.n	40464e <__ieee754_sqrtf+0x7a>
  4045f4:	387f      	subs	r0, #127	; 0x7f
  4045f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
  4045fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4045fe:	07c2      	lsls	r2, r0, #31
  404600:	bf48      	it	mi
  404602:	005b      	lslmi	r3, r3, #1
  404604:	2600      	movs	r6, #0
  404606:	1047      	asrs	r7, r0, #1
  404608:	005b      	lsls	r3, r3, #1
  40460a:	4631      	mov	r1, r6
  40460c:	2419      	movs	r4, #25
  40460e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  404612:	188d      	adds	r5, r1, r2
  404614:	429d      	cmp	r5, r3
  404616:	dc02      	bgt.n	40461e <__ieee754_sqrtf+0x4a>
  404618:	1b5b      	subs	r3, r3, r5
  40461a:	18a9      	adds	r1, r5, r2
  40461c:	4416      	add	r6, r2
  40461e:	3c01      	subs	r4, #1
  404620:	ea4f 0343 	mov.w	r3, r3, lsl #1
  404624:	ea4f 0252 	mov.w	r2, r2, lsr #1
  404628:	d1f3      	bne.n	404612 <__ieee754_sqrtf+0x3e>
  40462a:	b113      	cbz	r3, 404632 <__ieee754_sqrtf+0x5e>
  40462c:	3601      	adds	r6, #1
  40462e:	f026 0601 	bic.w	r6, r6, #1
  404632:	1070      	asrs	r0, r6, #1
  404634:	f100 507c 	add.w	r0, r0, #1056964608	; 0x3f000000
  404638:	eb00 50c7 	add.w	r0, r0, r7, lsl #23
  40463c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40463e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404640:	4601      	mov	r1, r0
  404642:	f001 f9b7 	bl	4059b4 <__aeabi_fmul>
  404646:	4621      	mov	r1, r4
  404648:	f001 f8ac 	bl	4057a4 <__addsf3>
  40464c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40464e:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
  404652:	d001      	beq.n	404658 <__ieee754_sqrtf+0x84>
  404654:	e00e      	b.n	404674 <__ieee754_sqrtf+0xa0>
  404656:	460a      	mov	r2, r1
  404658:	005b      	lsls	r3, r3, #1
  40465a:	021c      	lsls	r4, r3, #8
  40465c:	f102 0101 	add.w	r1, r2, #1
  404660:	d5f9      	bpl.n	404656 <__ieee754_sqrtf+0x82>
  404662:	1a80      	subs	r0, r0, r2
  404664:	e7c6      	b.n	4045f4 <__ieee754_sqrtf+0x20>
  404666:	4601      	mov	r1, r0
  404668:	f001 f89a 	bl	4057a0 <__aeabi_fsub>
  40466c:	4601      	mov	r1, r0
  40466e:	f001 fa55 	bl	405b1c <__aeabi_fdiv>
  404672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404674:	f04f 32ff 	mov.w	r2, #4294967295
  404678:	e7f3      	b.n	404662 <__ieee754_sqrtf+0x8e>
  40467a:	bf00      	nop

0040467c <__kernel_cosf>:
  40467c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404680:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
  404684:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
  404688:	4606      	mov	r6, r0
  40468a:	460f      	mov	r7, r1
  40468c:	da49      	bge.n	404722 <__kernel_cosf+0xa6>
  40468e:	f001 fb6d 	bl	405d6c <__aeabi_f2iz>
  404692:	2800      	cmp	r0, #0
  404694:	f000 809d 	beq.w	4047d2 <__kernel_cosf+0x156>
  404698:	4631      	mov	r1, r6
  40469a:	4630      	mov	r0, r6
  40469c:	f001 f98a 	bl	4059b4 <__aeabi_fmul>
  4046a0:	494e      	ldr	r1, [pc, #312]	; (4047dc <__kernel_cosf+0x160>)
  4046a2:	4605      	mov	r5, r0
  4046a4:	f001 f986 	bl	4059b4 <__aeabi_fmul>
  4046a8:	494d      	ldr	r1, [pc, #308]	; (4047e0 <__kernel_cosf+0x164>)
  4046aa:	f001 f87b 	bl	4057a4 <__addsf3>
  4046ae:	4629      	mov	r1, r5
  4046b0:	f001 f980 	bl	4059b4 <__aeabi_fmul>
  4046b4:	494b      	ldr	r1, [pc, #300]	; (4047e4 <__kernel_cosf+0x168>)
  4046b6:	f001 f873 	bl	4057a0 <__aeabi_fsub>
  4046ba:	4629      	mov	r1, r5
  4046bc:	f001 f97a 	bl	4059b4 <__aeabi_fmul>
  4046c0:	4949      	ldr	r1, [pc, #292]	; (4047e8 <__kernel_cosf+0x16c>)
  4046c2:	f001 f86f 	bl	4057a4 <__addsf3>
  4046c6:	4629      	mov	r1, r5
  4046c8:	f001 f974 	bl	4059b4 <__aeabi_fmul>
  4046cc:	4947      	ldr	r1, [pc, #284]	; (4047ec <__kernel_cosf+0x170>)
  4046ce:	f001 f867 	bl	4057a0 <__aeabi_fsub>
  4046d2:	4629      	mov	r1, r5
  4046d4:	f001 f96e 	bl	4059b4 <__aeabi_fmul>
  4046d8:	4945      	ldr	r1, [pc, #276]	; (4047f0 <__kernel_cosf+0x174>)
  4046da:	f001 f863 	bl	4057a4 <__addsf3>
  4046de:	4629      	mov	r1, r5
  4046e0:	f001 f968 	bl	4059b4 <__aeabi_fmul>
  4046e4:	4680      	mov	r8, r0
  4046e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  4046ea:	4628      	mov	r0, r5
  4046ec:	f001 f962 	bl	4059b4 <__aeabi_fmul>
  4046f0:	4641      	mov	r1, r8
  4046f2:	4604      	mov	r4, r0
  4046f4:	4628      	mov	r0, r5
  4046f6:	f001 f95d 	bl	4059b4 <__aeabi_fmul>
  4046fa:	4639      	mov	r1, r7
  4046fc:	4605      	mov	r5, r0
  4046fe:	4630      	mov	r0, r6
  404700:	f001 f958 	bl	4059b4 <__aeabi_fmul>
  404704:	4601      	mov	r1, r0
  404706:	4628      	mov	r0, r5
  404708:	f001 f84a 	bl	4057a0 <__aeabi_fsub>
  40470c:	4601      	mov	r1, r0
  40470e:	4620      	mov	r0, r4
  404710:	f001 f846 	bl	4057a0 <__aeabi_fsub>
  404714:	4601      	mov	r1, r0
  404716:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  40471a:	f001 f841 	bl	4057a0 <__aeabi_fsub>
  40471e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404722:	4601      	mov	r1, r0
  404724:	f001 f946 	bl	4059b4 <__aeabi_fmul>
  404728:	492c      	ldr	r1, [pc, #176]	; (4047dc <__kernel_cosf+0x160>)
  40472a:	4605      	mov	r5, r0
  40472c:	f001 f942 	bl	4059b4 <__aeabi_fmul>
  404730:	492b      	ldr	r1, [pc, #172]	; (4047e0 <__kernel_cosf+0x164>)
  404732:	f001 f837 	bl	4057a4 <__addsf3>
  404736:	4629      	mov	r1, r5
  404738:	f001 f93c 	bl	4059b4 <__aeabi_fmul>
  40473c:	4929      	ldr	r1, [pc, #164]	; (4047e4 <__kernel_cosf+0x168>)
  40473e:	f001 f82f 	bl	4057a0 <__aeabi_fsub>
  404742:	4629      	mov	r1, r5
  404744:	f001 f936 	bl	4059b4 <__aeabi_fmul>
  404748:	4927      	ldr	r1, [pc, #156]	; (4047e8 <__kernel_cosf+0x16c>)
  40474a:	f001 f82b 	bl	4057a4 <__addsf3>
  40474e:	4629      	mov	r1, r5
  404750:	f001 f930 	bl	4059b4 <__aeabi_fmul>
  404754:	4925      	ldr	r1, [pc, #148]	; (4047ec <__kernel_cosf+0x170>)
  404756:	f001 f823 	bl	4057a0 <__aeabi_fsub>
  40475a:	4629      	mov	r1, r5
  40475c:	f001 f92a 	bl	4059b4 <__aeabi_fmul>
  404760:	4923      	ldr	r1, [pc, #140]	; (4047f0 <__kernel_cosf+0x174>)
  404762:	f001 f81f 	bl	4057a4 <__addsf3>
  404766:	4629      	mov	r1, r5
  404768:	f001 f924 	bl	4059b4 <__aeabi_fmul>
  40476c:	4b21      	ldr	r3, [pc, #132]	; (4047f4 <__kernel_cosf+0x178>)
  40476e:	429c      	cmp	r4, r3
  404770:	4680      	mov	r8, r0
  404772:	ddb8      	ble.n	4046e6 <__kernel_cosf+0x6a>
  404774:	4b20      	ldr	r3, [pc, #128]	; (4047f8 <__kernel_cosf+0x17c>)
  404776:	429c      	cmp	r4, r3
  404778:	dc27      	bgt.n	4047ca <__kernel_cosf+0x14e>
  40477a:	f104 447f 	add.w	r4, r4, #4278190080	; 0xff000000
  40477e:	4621      	mov	r1, r4
  404780:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404784:	f001 f80c 	bl	4057a0 <__aeabi_fsub>
  404788:	4681      	mov	r9, r0
  40478a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  40478e:	4628      	mov	r0, r5
  404790:	f001 f910 	bl	4059b4 <__aeabi_fmul>
  404794:	4621      	mov	r1, r4
  404796:	f001 f803 	bl	4057a0 <__aeabi_fsub>
  40479a:	4641      	mov	r1, r8
  40479c:	4604      	mov	r4, r0
  40479e:	4628      	mov	r0, r5
  4047a0:	f001 f908 	bl	4059b4 <__aeabi_fmul>
  4047a4:	4639      	mov	r1, r7
  4047a6:	4605      	mov	r5, r0
  4047a8:	4630      	mov	r0, r6
  4047aa:	f001 f903 	bl	4059b4 <__aeabi_fmul>
  4047ae:	4601      	mov	r1, r0
  4047b0:	4628      	mov	r0, r5
  4047b2:	f000 fff5 	bl	4057a0 <__aeabi_fsub>
  4047b6:	4601      	mov	r1, r0
  4047b8:	4620      	mov	r0, r4
  4047ba:	f000 fff1 	bl	4057a0 <__aeabi_fsub>
  4047be:	4601      	mov	r1, r0
  4047c0:	4648      	mov	r0, r9
  4047c2:	f000 ffed 	bl	4057a0 <__aeabi_fsub>
  4047c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4047ca:	f8df 9034 	ldr.w	r9, [pc, #52]	; 404800 <__kernel_cosf+0x184>
  4047ce:	4c0b      	ldr	r4, [pc, #44]	; (4047fc <__kernel_cosf+0x180>)
  4047d0:	e7db      	b.n	40478a <__kernel_cosf+0x10e>
  4047d2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  4047d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4047da:	bf00      	nop
  4047dc:	ad47d74e 	.word	0xad47d74e
  4047e0:	310f74f6 	.word	0x310f74f6
  4047e4:	3493f27c 	.word	0x3493f27c
  4047e8:	37d00d01 	.word	0x37d00d01
  4047ec:	3ab60b61 	.word	0x3ab60b61
  4047f0:	3d2aaaab 	.word	0x3d2aaaab
  4047f4:	3e999999 	.word	0x3e999999
  4047f8:	3f480000 	.word	0x3f480000
  4047fc:	3e900000 	.word	0x3e900000
  404800:	3f380000 	.word	0x3f380000

00404804 <__kernel_rem_pio2f>:
  404804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404808:	b0dd      	sub	sp, #372	; 0x174
  40480a:	4c90      	ldr	r4, [pc, #576]	; (404a4c <__kernel_rem_pio2f+0x248>)
  40480c:	9308      	str	r3, [sp, #32]
  40480e:	3b01      	subs	r3, #1
  404810:	9301      	str	r3, [sp, #4]
  404812:	1ed3      	subs	r3, r2, #3
  404814:	bf48      	it	mi
  404816:	1d13      	addmi	r3, r2, #4
  404818:	9d66      	ldr	r5, [sp, #408]	; 0x198
  40481a:	9107      	str	r1, [sp, #28]
  40481c:	10db      	asrs	r3, r3, #3
  40481e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404822:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
  404826:	9309      	str	r3, [sp, #36]	; 0x24
  404828:	4619      	mov	r1, r3
  40482a:	3301      	adds	r3, #1
  40482c:	eba2 03c3 	sub.w	r3, r2, r3, lsl #3
  404830:	9405      	str	r4, [sp, #20]
  404832:	9a01      	ldr	r2, [sp, #4]
  404834:	9304      	str	r3, [sp, #16]
  404836:	9b05      	ldr	r3, [sp, #20]
  404838:	9002      	str	r0, [sp, #8]
  40483a:	189c      	adds	r4, r3, r2
  40483c:	eba1 0602 	sub.w	r6, r1, r2
  404840:	d417      	bmi.n	404872 <__kernel_rem_pio2f+0x6e>
  404842:	4434      	add	r4, r6
  404844:	2500      	movs	r5, #0
  404846:	3401      	adds	r4, #1
  404848:	af1f      	add	r7, sp, #124	; 0x7c
  40484a:	f8dd 819c 	ldr.w	r8, [sp, #412]	; 0x19c
  40484e:	e008      	b.n	404862 <__kernel_rem_pio2f+0x5e>
  404850:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
  404854:	f001 f85a 	bl	40590c <__aeabi_i2f>
  404858:	3601      	adds	r6, #1
  40485a:	42a6      	cmp	r6, r4
  40485c:	f847 0f04 	str.w	r0, [r7, #4]!
  404860:	d007      	beq.n	404872 <__kernel_rem_pio2f+0x6e>
  404862:	2e00      	cmp	r6, #0
  404864:	daf4      	bge.n	404850 <__kernel_rem_pio2f+0x4c>
  404866:	3601      	adds	r6, #1
  404868:	4628      	mov	r0, r5
  40486a:	42a6      	cmp	r6, r4
  40486c:	f847 0f04 	str.w	r0, [r7, #4]!
  404870:	d1f7      	bne.n	404862 <__kernel_rem_pio2f+0x5e>
  404872:	9b05      	ldr	r3, [sp, #20]
  404874:	2b00      	cmp	r3, #0
  404876:	db28      	blt.n	4048ca <__kernel_rem_pio2f+0xc6>
  404878:	9b08      	ldr	r3, [sp, #32]
  40487a:	009e      	lsls	r6, r3, #2
  40487c:	9b02      	ldr	r3, [sp, #8]
  40487e:	1f35      	subs	r5, r6, #4
  404880:	441d      	add	r5, r3
  404882:	ab20      	add	r3, sp, #128	; 0x80
  404884:	441e      	add	r6, r3
  404886:	9b05      	ldr	r3, [sp, #20]
  404888:	aa48      	add	r2, sp, #288	; 0x120
  40488a:	f04f 0900 	mov.w	r9, #0
  40488e:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  404892:	af47      	add	r7, sp, #284	; 0x11c
  404894:	9b01      	ldr	r3, [sp, #4]
  404896:	2b00      	cmp	r3, #0
  404898:	f2c0 82b9 	blt.w	404e0e <__kernel_rem_pio2f+0x60a>
  40489c:	9b02      	ldr	r3, [sp, #8]
  40489e:	46b3      	mov	fp, r6
  4048a0:	1f1c      	subs	r4, r3, #4
  4048a2:	46ca      	mov	sl, r9
  4048a4:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  4048a8:	f854 0f04 	ldr.w	r0, [r4, #4]!
  4048ac:	f001 f882 	bl	4059b4 <__aeabi_fmul>
  4048b0:	4601      	mov	r1, r0
  4048b2:	4650      	mov	r0, sl
  4048b4:	f000 ff76 	bl	4057a4 <__addsf3>
  4048b8:	42ac      	cmp	r4, r5
  4048ba:	4682      	mov	sl, r0
  4048bc:	d1f2      	bne.n	4048a4 <__kernel_rem_pio2f+0xa0>
  4048be:	f847 af04 	str.w	sl, [r7, #4]!
  4048c2:	4547      	cmp	r7, r8
  4048c4:	f106 0604 	add.w	r6, r6, #4
  4048c8:	d1e4      	bne.n	404894 <__kernel_rem_pio2f+0x90>
  4048ca:	9805      	ldr	r0, [sp, #20]
  4048cc:	9908      	ldr	r1, [sp, #32]
  4048ce:	9c02      	ldr	r4, [sp, #8]
  4048d0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  4048d4:	4603      	mov	r3, r0
  4048d6:	4413      	add	r3, r2
  4048d8:	009b      	lsls	r3, r3, #2
  4048da:	440a      	add	r2, r1
  4048dc:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
  4048e0:	1f19      	subs	r1, r3, #4
  4048e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
  4048e6:	4453      	add	r3, sl
  4048e8:	eb0a 0201 	add.w	r2, sl, r1
  4048ec:	920a      	str	r2, [sp, #40]	; 0x28
  4048ee:	930b      	str	r3, [sp, #44]	; 0x2c
  4048f0:	4680      	mov	r8, r0
  4048f2:	ea4f 0388 	mov.w	r3, r8, lsl #2
  4048f6:	aa5c      	add	r2, sp, #368	; 0x170
  4048f8:	9303      	str	r3, [sp, #12]
  4048fa:	18d3      	adds	r3, r2, r3
  4048fc:	f1b8 0f00 	cmp.w	r8, #0
  404900:	f853 9c50 	ldr.w	r9, [r3, #-80]
  404904:	dd22      	ble.n	40494c <__kernel_rem_pio2f+0x148>
  404906:	eb02 0488 	add.w	r4, r2, r8, lsl #2
  40490a:	3c54      	subs	r4, #84	; 0x54
  40490c:	ae0b      	add	r6, sp, #44	; 0x2c
  40490e:	af47      	add	r7, sp, #284	; 0x11c
  404910:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  404914:	4648      	mov	r0, r9
  404916:	f001 f84d 	bl	4059b4 <__aeabi_fmul>
  40491a:	f001 fa27 	bl	405d6c <__aeabi_f2iz>
  40491e:	f000 fff5 	bl	40590c <__aeabi_i2f>
  404922:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404926:	4683      	mov	fp, r0
  404928:	f001 f844 	bl	4059b4 <__aeabi_fmul>
  40492c:	4601      	mov	r1, r0
  40492e:	4648      	mov	r0, r9
  404930:	f000 ff36 	bl	4057a0 <__aeabi_fsub>
  404934:	f001 fa1a 	bl	405d6c <__aeabi_f2iz>
  404938:	f854 1904 	ldr.w	r1, [r4], #-4
  40493c:	f846 0f04 	str.w	r0, [r6, #4]!
  404940:	4658      	mov	r0, fp
  404942:	f000 ff2f 	bl	4057a4 <__addsf3>
  404946:	42bc      	cmp	r4, r7
  404948:	4681      	mov	r9, r0
  40494a:	d1e1      	bne.n	404910 <__kernel_rem_pio2f+0x10c>
  40494c:	9e04      	ldr	r6, [sp, #16]
  40494e:	4648      	mov	r0, r9
  404950:	4631      	mov	r1, r6
  404952:	f000 fcbb 	bl	4052cc <scalbnf>
  404956:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
  40495a:	4604      	mov	r4, r0
  40495c:	f001 f82a 	bl	4059b4 <__aeabi_fmul>
  404960:	f000 fc6e 	bl	405240 <floorf>
  404964:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
  404968:	f001 f824 	bl	4059b4 <__aeabi_fmul>
  40496c:	4601      	mov	r1, r0
  40496e:	4620      	mov	r0, r4
  404970:	f000 ff16 	bl	4057a0 <__aeabi_fsub>
  404974:	4604      	mov	r4, r0
  404976:	f001 f9f9 	bl	405d6c <__aeabi_f2iz>
  40497a:	4681      	mov	r9, r0
  40497c:	9006      	str	r0, [sp, #24]
  40497e:	f000 ffc5 	bl	40590c <__aeabi_i2f>
  404982:	4601      	mov	r1, r0
  404984:	4620      	mov	r0, r4
  404986:	f000 ff0b 	bl	4057a0 <__aeabi_fsub>
  40498a:	2e00      	cmp	r6, #0
  40498c:	4607      	mov	r7, r0
  40498e:	f340 80e6 	ble.w	404b5e <__kernel_rem_pio2f+0x35a>
  404992:	f108 31ff 	add.w	r1, r8, #4294967295
  404996:	f1c6 0308 	rsb	r3, r6, #8
  40499a:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  40499e:	fa42 f003 	asr.w	r0, r2, r3
  4049a2:	fa00 f303 	lsl.w	r3, r0, r3
  4049a6:	1ad3      	subs	r3, r2, r3
  4049a8:	464a      	mov	r2, r9
  4049aa:	f1c6 0407 	rsb	r4, r6, #7
  4049ae:	4402      	add	r2, r0
  4049b0:	f84a 3021 	str.w	r3, [sl, r1, lsl #2]
  4049b4:	9206      	str	r2, [sp, #24]
  4049b6:	fa43 f404 	asr.w	r4, r3, r4
  4049ba:	2c00      	cmp	r4, #0
  4049bc:	dd5b      	ble.n	404a76 <__kernel_rem_pio2f+0x272>
  4049be:	9b06      	ldr	r3, [sp, #24]
  4049c0:	f1b8 0f00 	cmp.w	r8, #0
  4049c4:	f103 0301 	add.w	r3, r3, #1
  4049c8:	9306      	str	r3, [sp, #24]
  4049ca:	f340 823b 	ble.w	404e44 <__kernel_rem_pio2f+0x640>
  4049ce:	f8da 6000 	ldr.w	r6, [sl]
  4049d2:	2e00      	cmp	r6, #0
  4049d4:	f040 8294 	bne.w	404f00 <__kernel_rem_pio2f+0x6fc>
  4049d8:	f1b8 0f01 	cmp.w	r8, #1
  4049dc:	f340 8255 	ble.w	404e8a <__kernel_rem_pio2f+0x686>
  4049e0:	4652      	mov	r2, sl
  4049e2:	2301      	movs	r3, #1
  4049e4:	f852 6f04 	ldr.w	r6, [r2, #4]!
  4049e8:	2e00      	cmp	r6, #0
  4049ea:	f000 824a 	beq.w	404e82 <__kernel_rem_pio2f+0x67e>
  4049ee:	1c59      	adds	r1, r3, #1
  4049f0:	f5c6 7680 	rsb	r6, r6, #256	; 0x100
  4049f4:	4588      	cmp	r8, r1
  4049f6:	f84a 6023 	str.w	r6, [sl, r3, lsl #2]
  4049fa:	dd14      	ble.n	404a26 <__kernel_rem_pio2f+0x222>
  4049fc:	f85a 2021 	ldr.w	r2, [sl, r1, lsl #2]
  404a00:	3302      	adds	r3, #2
  404a02:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  404a06:	4598      	cmp	r8, r3
  404a08:	f84a 2021 	str.w	r2, [sl, r1, lsl #2]
  404a0c:	dd0b      	ble.n	404a26 <__kernel_rem_pio2f+0x222>
  404a0e:	9a03      	ldr	r2, [sp, #12]
  404a10:	4452      	add	r2, sl
  404a12:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404a16:	4691      	mov	r9, r2
  404a18:	681a      	ldr	r2, [r3, #0]
  404a1a:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  404a1e:	f843 2b04 	str.w	r2, [r3], #4
  404a22:	454b      	cmp	r3, r9
  404a24:	d1f8      	bne.n	404a18 <__kernel_rem_pio2f+0x214>
  404a26:	9b04      	ldr	r3, [sp, #16]
  404a28:	2b00      	cmp	r3, #0
  404a2a:	dd11      	ble.n	404a50 <__kernel_rem_pio2f+0x24c>
  404a2c:	9b04      	ldr	r3, [sp, #16]
  404a2e:	2b01      	cmp	r3, #1
  404a30:	f04f 0601 	mov.w	r6, #1
  404a34:	f040 820e 	bne.w	404e54 <__kernel_rem_pio2f+0x650>
  404a38:	f108 32ff 	add.w	r2, r8, #4294967295
  404a3c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  404a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  404a44:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  404a48:	e20e      	b.n	404e68 <__kernel_rem_pio2f+0x664>
  404a4a:	bf00      	nop
  404a4c:	00409258 	.word	0x00409258
  404a50:	2c02      	cmp	r4, #2
  404a52:	d110      	bne.n	404a76 <__kernel_rem_pio2f+0x272>
  404a54:	4639      	mov	r1, r7
  404a56:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404a5a:	f000 fea1 	bl	4057a0 <__aeabi_fsub>
  404a5e:	4607      	mov	r7, r0
  404a60:	9904      	ldr	r1, [sp, #16]
  404a62:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404a66:	f000 fc31 	bl	4052cc <scalbnf>
  404a6a:	4601      	mov	r1, r0
  404a6c:	4638      	mov	r0, r7
  404a6e:	f000 fe97 	bl	4057a0 <__aeabi_fsub>
  404a72:	2402      	movs	r4, #2
  404a74:	4607      	mov	r7, r0
  404a76:	2100      	movs	r1, #0
  404a78:	4638      	mov	r0, r7
  404a7a:	f001 f92f 	bl	405cdc <__aeabi_fcmpeq>
  404a7e:	2800      	cmp	r0, #0
  404a80:	f000 8083 	beq.w	404b8a <__kernel_rem_pio2f+0x386>
  404a84:	9b05      	ldr	r3, [sp, #20]
  404a86:	f108 37ff 	add.w	r7, r8, #4294967295
  404a8a:	42bb      	cmp	r3, r7
  404a8c:	dc0f      	bgt.n	404aae <__kernel_rem_pio2f+0x2aa>
  404a8e:	f108 4380 	add.w	r3, r8, #1073741824	; 0x40000000
  404a92:	3b01      	subs	r3, #1
  404a94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404a96:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404a9a:	2200      	movs	r2, #0
  404a9c:	f853 1904 	ldr.w	r1, [r3], #-4
  404aa0:	4283      	cmp	r3, r0
  404aa2:	ea42 0201 	orr.w	r2, r2, r1
  404aa6:	d1f9      	bne.n	404a9c <__kernel_rem_pio2f+0x298>
  404aa8:	2a00      	cmp	r2, #0
  404aaa:	f040 809d 	bne.w	404be8 <__kernel_rem_pio2f+0x3e4>
  404aae:	9b05      	ldr	r3, [sp, #20]
  404ab0:	3b01      	subs	r3, #1
  404ab2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
  404ab6:	2b00      	cmp	r3, #0
  404ab8:	f040 81f4 	bne.w	404ea4 <__kernel_rem_pio2f+0x6a0>
  404abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404abe:	2301      	movs	r3, #1
  404ac0:	f852 1904 	ldr.w	r1, [r2], #-4
  404ac4:	3301      	adds	r3, #1
  404ac6:	2900      	cmp	r1, #0
  404ac8:	d0fa      	beq.n	404ac0 <__kernel_rem_pio2f+0x2bc>
  404aca:	4443      	add	r3, r8
  404acc:	461a      	mov	r2, r3
  404ace:	9306      	str	r3, [sp, #24]
  404ad0:	f108 0301 	add.w	r3, r8, #1
  404ad4:	4293      	cmp	r3, r2
  404ad6:	dc37      	bgt.n	404b48 <__kernel_rem_pio2f+0x344>
  404ad8:	9908      	ldr	r1, [sp, #32]
  404ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
  404adc:	eb01 0708 	add.w	r7, r1, r8
  404ae0:	a920      	add	r1, sp, #128	; 0x80
  404ae2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
  404ae6:	9906      	ldr	r1, [sp, #24]
  404ae8:	189e      	adds	r6, r3, r2
  404aea:	eb01 0902 	add.w	r9, r1, r2
  404aee:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
  404af2:	9a67      	ldr	r2, [sp, #412]	; 0x19c
  404af4:	3e01      	subs	r6, #1
  404af6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  404afa:	aa48      	add	r2, sp, #288	; 0x120
  404afc:	eb02 0883 	add.w	r8, r2, r3, lsl #2
  404b00:	9b67      	ldr	r3, [sp, #412]	; 0x19c
  404b02:	eb03 0389 	add.w	r3, r3, r9, lsl #2
  404b06:	9303      	str	r3, [sp, #12]
  404b08:	f856 0f04 	ldr.w	r0, [r6, #4]!
  404b0c:	f000 fefe 	bl	40590c <__aeabi_i2f>
  404b10:	9b01      	ldr	r3, [sp, #4]
  404b12:	f847 0b04 	str.w	r0, [r7], #4
  404b16:	2b00      	cmp	r3, #0
  404b18:	db19      	blt.n	404b4e <__kernel_rem_pio2f+0x34a>
  404b1a:	9b02      	ldr	r3, [sp, #8]
  404b1c:	46bb      	mov	fp, r7
  404b1e:	1f1c      	subs	r4, r3, #4
  404b20:	f04f 0900 	mov.w	r9, #0
  404b24:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
  404b28:	f854 0f04 	ldr.w	r0, [r4, #4]!
  404b2c:	f000 ff42 	bl	4059b4 <__aeabi_fmul>
  404b30:	4601      	mov	r1, r0
  404b32:	4648      	mov	r0, r9
  404b34:	f000 fe36 	bl	4057a4 <__addsf3>
  404b38:	42ac      	cmp	r4, r5
  404b3a:	4681      	mov	r9, r0
  404b3c:	d1f2      	bne.n	404b24 <__kernel_rem_pio2f+0x320>
  404b3e:	9b03      	ldr	r3, [sp, #12]
  404b40:	f848 9b04 	str.w	r9, [r8], #4
  404b44:	429e      	cmp	r6, r3
  404b46:	d1df      	bne.n	404b08 <__kernel_rem_pio2f+0x304>
  404b48:	f8dd 8018 	ldr.w	r8, [sp, #24]
  404b4c:	e6d1      	b.n	4048f2 <__kernel_rem_pio2f+0xee>
  404b4e:	9b03      	ldr	r3, [sp, #12]
  404b50:	f04f 0900 	mov.w	r9, #0
  404b54:	429e      	cmp	r6, r3
  404b56:	f848 9b04 	str.w	r9, [r8], #4
  404b5a:	d1d5      	bne.n	404b08 <__kernel_rem_pio2f+0x304>
  404b5c:	e7f4      	b.n	404b48 <__kernel_rem_pio2f+0x344>
  404b5e:	d105      	bne.n	404b6c <__kernel_rem_pio2f+0x368>
  404b60:	f108 33ff 	add.w	r3, r8, #4294967295
  404b64:	f85a 4023 	ldr.w	r4, [sl, r3, lsl #2]
  404b68:	1224      	asrs	r4, r4, #8
  404b6a:	e726      	b.n	4049ba <__kernel_rem_pio2f+0x1b6>
  404b6c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404b70:	f001 f8d2 	bl	405d18 <__aeabi_fcmpge>
  404b74:	2800      	cmp	r0, #0
  404b76:	f040 8153 	bne.w	404e20 <__kernel_rem_pio2f+0x61c>
  404b7a:	4604      	mov	r4, r0
  404b7c:	2100      	movs	r1, #0
  404b7e:	4638      	mov	r0, r7
  404b80:	f001 f8ac 	bl	405cdc <__aeabi_fcmpeq>
  404b84:	2800      	cmp	r0, #0
  404b86:	f47f af7d 	bne.w	404a84 <__kernel_rem_pio2f+0x280>
  404b8a:	9e04      	ldr	r6, [sp, #16]
  404b8c:	4638      	mov	r0, r7
  404b8e:	4271      	negs	r1, r6
  404b90:	f000 fb9c 	bl	4052cc <scalbnf>
  404b94:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404b98:	46a1      	mov	r9, r4
  404b9a:	4604      	mov	r4, r0
  404b9c:	f001 f8bc 	bl	405d18 <__aeabi_fcmpge>
  404ba0:	2800      	cmp	r0, #0
  404ba2:	f000 818d 	beq.w	404ec0 <__kernel_rem_pio2f+0x6bc>
  404ba6:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
  404baa:	4620      	mov	r0, r4
  404bac:	f000 ff02 	bl	4059b4 <__aeabi_fmul>
  404bb0:	f001 f8dc 	bl	405d6c <__aeabi_f2iz>
  404bb4:	f000 feaa 	bl	40590c <__aeabi_i2f>
  404bb8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
  404bbc:	4605      	mov	r5, r0
  404bbe:	f000 fef9 	bl	4059b4 <__aeabi_fmul>
  404bc2:	4601      	mov	r1, r0
  404bc4:	4620      	mov	r0, r4
  404bc6:	f000 fdeb 	bl	4057a0 <__aeabi_fsub>
  404bca:	f001 f8cf 	bl	405d6c <__aeabi_f2iz>
  404bce:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  404bd2:	4628      	mov	r0, r5
  404bd4:	f001 f8ca 	bl	405d6c <__aeabi_f2iz>
  404bd8:	f108 0701 	add.w	r7, r8, #1
  404bdc:	4633      	mov	r3, r6
  404bde:	3308      	adds	r3, #8
  404be0:	9304      	str	r3, [sp, #16]
  404be2:	f84a 0027 	str.w	r0, [sl, r7, lsl #2]
  404be6:	e012      	b.n	404c0e <__kernel_rem_pio2f+0x40a>
  404be8:	9a04      	ldr	r2, [sp, #16]
  404bea:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
  404bee:	3a08      	subs	r2, #8
  404bf0:	46a1      	mov	r9, r4
  404bf2:	9204      	str	r2, [sp, #16]
  404bf4:	b95b      	cbnz	r3, 404c0e <__kernel_rem_pio2f+0x40a>
  404bf6:	f107 4380 	add.w	r3, r7, #1073741824	; 0x40000000
  404bfa:	3b01      	subs	r3, #1
  404bfc:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  404c00:	f853 1904 	ldr.w	r1, [r3], #-4
  404c04:	3f01      	subs	r7, #1
  404c06:	3a08      	subs	r2, #8
  404c08:	2900      	cmp	r1, #0
  404c0a:	d0f9      	beq.n	404c00 <__kernel_rem_pio2f+0x3fc>
  404c0c:	9204      	str	r2, [sp, #16]
  404c0e:	9904      	ldr	r1, [sp, #16]
  404c10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404c14:	f000 fb5a 	bl	4052cc <scalbnf>
  404c18:	2f00      	cmp	r7, #0
  404c1a:	4604      	mov	r4, r0
  404c1c:	f2c0 815c 	blt.w	404ed8 <__kernel_rem_pio2f+0x6d4>
  404c20:	00bb      	lsls	r3, r7, #2
  404c22:	a948      	add	r1, sp, #288	; 0x120
  404c24:	1d1a      	adds	r2, r3, #4
  404c26:	eb01 0803 	add.w	r8, r1, r3
  404c2a:	9301      	str	r3, [sp, #4]
  404c2c:	9202      	str	r2, [sp, #8]
  404c2e:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
  404c32:	eb0a 0b02 	add.w	fp, sl, r2
  404c36:	f108 0504 	add.w	r5, r8, #4
  404c3a:	f85b 0d04 	ldr.w	r0, [fp, #-4]!
  404c3e:	f000 fe65 	bl	40590c <__aeabi_i2f>
  404c42:	4621      	mov	r1, r4
  404c44:	f000 feb6 	bl	4059b4 <__aeabi_fmul>
  404c48:	4631      	mov	r1, r6
  404c4a:	f845 0d04 	str.w	r0, [r5, #-4]!
  404c4e:	4620      	mov	r0, r4
  404c50:	f000 feb0 	bl	4059b4 <__aeabi_fmul>
  404c54:	45d3      	cmp	fp, sl
  404c56:	4604      	mov	r4, r0
  404c58:	d1ef      	bne.n	404c3a <__kernel_rem_pio2f+0x436>
  404c5a:	2600      	movs	r6, #0
  404c5c:	f8dd b014 	ldr.w	fp, [sp, #20]
  404c60:	9703      	str	r7, [sp, #12]
  404c62:	f1a8 0804 	sub.w	r8, r8, #4
  404c66:	46b2      	mov	sl, r6
  404c68:	f1bb 0f00 	cmp.w	fp, #0
  404c6c:	bfb8      	it	lt
  404c6e:	2500      	movlt	r5, #0
  404c70:	db15      	blt.n	404c9e <__kernel_rem_pio2f+0x49a>
  404c72:	4ea5      	ldr	r6, [pc, #660]	; (404f08 <__kernel_rem_pio2f+0x704>)
  404c74:	48a5      	ldr	r0, [pc, #660]	; (404f0c <__kernel_rem_pio2f+0x708>)
  404c76:	4647      	mov	r7, r8
  404c78:	2500      	movs	r5, #0
  404c7a:	2400      	movs	r4, #0
  404c7c:	e003      	b.n	404c86 <__kernel_rem_pio2f+0x482>
  404c7e:	4554      	cmp	r4, sl
  404c80:	dc0d      	bgt.n	404c9e <__kernel_rem_pio2f+0x49a>
  404c82:	f856 0f04 	ldr.w	r0, [r6, #4]!
  404c86:	f857 1f04 	ldr.w	r1, [r7, #4]!
  404c8a:	f000 fe93 	bl	4059b4 <__aeabi_fmul>
  404c8e:	4601      	mov	r1, r0
  404c90:	4628      	mov	r0, r5
  404c92:	f000 fd87 	bl	4057a4 <__addsf3>
  404c96:	3401      	adds	r4, #1
  404c98:	45a3      	cmp	fp, r4
  404c9a:	4605      	mov	r5, r0
  404c9c:	daef      	bge.n	404c7e <__kernel_rem_pio2f+0x47a>
  404c9e:	ab5c      	add	r3, sp, #368	; 0x170
  404ca0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
  404ca4:	f1a8 0804 	sub.w	r8, r8, #4
  404ca8:	f843 5ca0 	str.w	r5, [r3, #-160]
  404cac:	ab46      	add	r3, sp, #280	; 0x118
  404cae:	4543      	cmp	r3, r8
  404cb0:	f10a 0a01 	add.w	sl, sl, #1
  404cb4:	d1d8      	bne.n	404c68 <__kernel_rem_pio2f+0x464>
  404cb6:	9b66      	ldr	r3, [sp, #408]	; 0x198
  404cb8:	9f03      	ldr	r7, [sp, #12]
  404cba:	2b03      	cmp	r3, #3
  404cbc:	d85a      	bhi.n	404d74 <__kernel_rem_pio2f+0x570>
  404cbe:	e8df f003 	tbb	[pc, r3]
  404cc2:	5f8e      	.short	0x5f8e
  404cc4:	025f      	.short	0x025f
  404cc6:	2f00      	cmp	r7, #0
  404cc8:	f340 8104 	ble.w	404ed4 <__kernel_rem_pio2f+0x6d0>
  404ccc:	9a01      	ldr	r2, [sp, #4]
  404cce:	a95c      	add	r1, sp, #368	; 0x170
  404cd0:	188b      	adds	r3, r1, r2
  404cd2:	ac34      	add	r4, sp, #208	; 0xd0
  404cd4:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  404cd8:	18a5      	adds	r5, r4, r2
  404cda:	f855 ac04 	ldr.w	sl, [r5, #-4]
  404cde:	4631      	mov	r1, r6
  404ce0:	4650      	mov	r0, sl
  404ce2:	f000 fd5f 	bl	4057a4 <__addsf3>
  404ce6:	4680      	mov	r8, r0
  404ce8:	4601      	mov	r1, r0
  404cea:	4650      	mov	r0, sl
  404cec:	f000 fd58 	bl	4057a0 <__aeabi_fsub>
  404cf0:	4631      	mov	r1, r6
  404cf2:	f000 fd57 	bl	4057a4 <__addsf3>
  404cf6:	6028      	str	r0, [r5, #0]
  404cf8:	f845 8d04 	str.w	r8, [r5, #-4]!
  404cfc:	42ac      	cmp	r4, r5
  404cfe:	4646      	mov	r6, r8
  404d00:	d1eb      	bne.n	404cda <__kernel_rem_pio2f+0x4d6>
  404d02:	2f01      	cmp	r7, #1
  404d04:	f340 80e6 	ble.w	404ed4 <__kernel_rem_pio2f+0x6d0>
  404d08:	9a01      	ldr	r2, [sp, #4]
  404d0a:	a95c      	add	r1, sp, #368	; 0x170
  404d0c:	188b      	adds	r3, r1, r2
  404d0e:	4414      	add	r4, r2
  404d10:	f853 6ca0 	ldr.w	r6, [r3, #-160]
  404d14:	4625      	mov	r5, r4
  404d16:	f10d 0ad4 	add.w	sl, sp, #212	; 0xd4
  404d1a:	f855 8c04 	ldr.w	r8, [r5, #-4]
  404d1e:	4631      	mov	r1, r6
  404d20:	4640      	mov	r0, r8
  404d22:	f000 fd3f 	bl	4057a4 <__addsf3>
  404d26:	4607      	mov	r7, r0
  404d28:	4601      	mov	r1, r0
  404d2a:	4640      	mov	r0, r8
  404d2c:	f000 fd38 	bl	4057a0 <__aeabi_fsub>
  404d30:	4631      	mov	r1, r6
  404d32:	f000 fd37 	bl	4057a4 <__addsf3>
  404d36:	6028      	str	r0, [r5, #0]
  404d38:	f845 7d04 	str.w	r7, [r5, #-4]!
  404d3c:	45aa      	cmp	sl, r5
  404d3e:	463e      	mov	r6, r7
  404d40:	d1eb      	bne.n	404d1a <__kernel_rem_pio2f+0x516>
  404d42:	2000      	movs	r0, #0
  404d44:	3404      	adds	r4, #4
  404d46:	ad36      	add	r5, sp, #216	; 0xd8
  404d48:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  404d4c:	f000 fd2a 	bl	4057a4 <__addsf3>
  404d50:	42a5      	cmp	r5, r4
  404d52:	d1f9      	bne.n	404d48 <__kernel_rem_pio2f+0x544>
  404d54:	f1b9 0f00 	cmp.w	r9, #0
  404d58:	f000 80b9 	beq.w	404ece <__kernel_rem_pio2f+0x6ca>
  404d5c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  404d5e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  404d60:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404d64:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
  404d68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  404d6c:	9c07      	ldr	r4, [sp, #28]
  404d6e:	60a0      	str	r0, [r4, #8]
  404d70:	6022      	str	r2, [r4, #0]
  404d72:	6063      	str	r3, [r4, #4]
  404d74:	9b06      	ldr	r3, [sp, #24]
  404d76:	f003 0007 	and.w	r0, r3, #7
  404d7a:	b05d      	add	sp, #372	; 0x174
  404d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d80:	9c01      	ldr	r4, [sp, #4]
  404d82:	ad34      	add	r5, sp, #208	; 0xd0
  404d84:	3404      	adds	r4, #4
  404d86:	442c      	add	r4, r5
  404d88:	2000      	movs	r0, #0
  404d8a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  404d8e:	f000 fd09 	bl	4057a4 <__addsf3>
  404d92:	42ac      	cmp	r4, r5
  404d94:	d1f9      	bne.n	404d8a <__kernel_rem_pio2f+0x586>
  404d96:	f1b9 0f00 	cmp.w	r9, #0
  404d9a:	f000 8085 	beq.w	404ea8 <__kernel_rem_pio2f+0x6a4>
  404d9e:	9a07      	ldr	r2, [sp, #28]
  404da0:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
  404da4:	4601      	mov	r1, r0
  404da6:	6013      	str	r3, [r2, #0]
  404da8:	9834      	ldr	r0, [sp, #208]	; 0xd0
  404daa:	f000 fcf9 	bl	4057a0 <__aeabi_fsub>
  404dae:	2f00      	cmp	r7, #0
  404db0:	dd0b      	ble.n	404dca <__kernel_rem_pio2f+0x5c6>
  404db2:	ad34      	add	r5, sp, #208	; 0xd0
  404db4:	2401      	movs	r4, #1
  404db6:	3401      	adds	r4, #1
  404db8:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404dbc:	f000 fcf2 	bl	4057a4 <__addsf3>
  404dc0:	42a7      	cmp	r7, r4
  404dc2:	daf8      	bge.n	404db6 <__kernel_rem_pio2f+0x5b2>
  404dc4:	f1b9 0f00 	cmp.w	r9, #0
  404dc8:	d001      	beq.n	404dce <__kernel_rem_pio2f+0x5ca>
  404dca:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404dce:	9b07      	ldr	r3, [sp, #28]
  404dd0:	6058      	str	r0, [r3, #4]
  404dd2:	9b06      	ldr	r3, [sp, #24]
  404dd4:	f003 0007 	and.w	r0, r3, #7
  404dd8:	b05d      	add	sp, #372	; 0x174
  404dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404dde:	9b02      	ldr	r3, [sp, #8]
  404de0:	ad34      	add	r5, sp, #208	; 0xd0
  404de2:	442b      	add	r3, r5
  404de4:	2000      	movs	r0, #0
  404de6:	461c      	mov	r4, r3
  404de8:	f854 1d04 	ldr.w	r1, [r4, #-4]!
  404dec:	f000 fcda 	bl	4057a4 <__addsf3>
  404df0:	42a5      	cmp	r5, r4
  404df2:	d1f9      	bne.n	404de8 <__kernel_rem_pio2f+0x5e4>
  404df4:	f1b9 0f00 	cmp.w	r9, #0
  404df8:	d001      	beq.n	404dfe <__kernel_rem_pio2f+0x5fa>
  404dfa:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  404dfe:	9b07      	ldr	r3, [sp, #28]
  404e00:	6018      	str	r0, [r3, #0]
  404e02:	9b06      	ldr	r3, [sp, #24]
  404e04:	f003 0007 	and.w	r0, r3, #7
  404e08:	b05d      	add	sp, #372	; 0x174
  404e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e0e:	46ca      	mov	sl, r9
  404e10:	f847 af04 	str.w	sl, [r7, #4]!
  404e14:	4547      	cmp	r7, r8
  404e16:	f106 0604 	add.w	r6, r6, #4
  404e1a:	f47f ad3b 	bne.w	404894 <__kernel_rem_pio2f+0x90>
  404e1e:	e554      	b.n	4048ca <__kernel_rem_pio2f+0xc6>
  404e20:	9b06      	ldr	r3, [sp, #24]
  404e22:	f1b8 0f00 	cmp.w	r8, #0
  404e26:	f103 0301 	add.w	r3, r3, #1
  404e2a:	9306      	str	r3, [sp, #24]
  404e2c:	bfc8      	it	gt
  404e2e:	2402      	movgt	r4, #2
  404e30:	f73f adcd 	bgt.w	4049ce <__kernel_rem_pio2f+0x1ca>
  404e34:	4639      	mov	r1, r7
  404e36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404e3a:	f000 fcb1 	bl	4057a0 <__aeabi_fsub>
  404e3e:	2402      	movs	r4, #2
  404e40:	4607      	mov	r7, r0
  404e42:	e618      	b.n	404a76 <__kernel_rem_pio2f+0x272>
  404e44:	9b04      	ldr	r3, [sp, #16]
  404e46:	2b00      	cmp	r3, #0
  404e48:	dd22      	ble.n	404e90 <__kernel_rem_pio2f+0x68c>
  404e4a:	2600      	movs	r6, #0
  404e4c:	9b04      	ldr	r3, [sp, #16]
  404e4e:	2b01      	cmp	r3, #1
  404e50:	f43f adf2 	beq.w	404a38 <__kernel_rem_pio2f+0x234>
  404e54:	2b02      	cmp	r3, #2
  404e56:	d107      	bne.n	404e68 <__kernel_rem_pio2f+0x664>
  404e58:	f108 32ff 	add.w	r2, r8, #4294967295
  404e5c:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
  404e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  404e64:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  404e68:	2c02      	cmp	r4, #2
  404e6a:	f47f ae04 	bne.w	404a76 <__kernel_rem_pio2f+0x272>
  404e6e:	4639      	mov	r1, r7
  404e70:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404e74:	f000 fc94 	bl	4057a0 <__aeabi_fsub>
  404e78:	4607      	mov	r7, r0
  404e7a:	2e00      	cmp	r6, #0
  404e7c:	f43f adfb 	beq.w	404a76 <__kernel_rem_pio2f+0x272>
  404e80:	e5ee      	b.n	404a60 <__kernel_rem_pio2f+0x25c>
  404e82:	3301      	adds	r3, #1
  404e84:	4598      	cmp	r8, r3
  404e86:	f47f adad 	bne.w	4049e4 <__kernel_rem_pio2f+0x1e0>
  404e8a:	9b04      	ldr	r3, [sp, #16]
  404e8c:	2b00      	cmp	r3, #0
  404e8e:	dcdd      	bgt.n	404e4c <__kernel_rem_pio2f+0x648>
  404e90:	2c02      	cmp	r4, #2
  404e92:	f47f adf0 	bne.w	404a76 <__kernel_rem_pio2f+0x272>
  404e96:	4639      	mov	r1, r7
  404e98:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
  404e9c:	f000 fc80 	bl	4057a0 <__aeabi_fsub>
  404ea0:	4607      	mov	r7, r0
  404ea2:	e5e8      	b.n	404a76 <__kernel_rem_pio2f+0x272>
  404ea4:	2301      	movs	r3, #1
  404ea6:	e610      	b.n	404aca <__kernel_rem_pio2f+0x2c6>
  404ea8:	9b07      	ldr	r3, [sp, #28]
  404eaa:	4601      	mov	r1, r0
  404eac:	6018      	str	r0, [r3, #0]
  404eae:	9834      	ldr	r0, [sp, #208]	; 0xd0
  404eb0:	f000 fc76 	bl	4057a0 <__aeabi_fsub>
  404eb4:	2f00      	cmp	r7, #0
  404eb6:	f73f af7c 	bgt.w	404db2 <__kernel_rem_pio2f+0x5ae>
  404eba:	9b07      	ldr	r3, [sp, #28]
  404ebc:	6058      	str	r0, [r3, #4]
  404ebe:	e788      	b.n	404dd2 <__kernel_rem_pio2f+0x5ce>
  404ec0:	4620      	mov	r0, r4
  404ec2:	f000 ff53 	bl	405d6c <__aeabi_f2iz>
  404ec6:	4647      	mov	r7, r8
  404ec8:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
  404ecc:	e69f      	b.n	404c0e <__kernel_rem_pio2f+0x40a>
  404ece:	9a34      	ldr	r2, [sp, #208]	; 0xd0
  404ed0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
  404ed2:	e74b      	b.n	404d6c <__kernel_rem_pio2f+0x568>
  404ed4:	2000      	movs	r0, #0
  404ed6:	e73d      	b.n	404d54 <__kernel_rem_pio2f+0x550>
  404ed8:	9b66      	ldr	r3, [sp, #408]	; 0x198
  404eda:	2b03      	cmp	r3, #3
  404edc:	f63f af4a 	bhi.w	404d74 <__kernel_rem_pio2f+0x570>
  404ee0:	a201      	add	r2, pc, #4	; (adr r2, 404ee8 <__kernel_rem_pio2f+0x6e4>)
  404ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  404ee6:	bf00      	nop
  404ee8:	00404efd 	.word	0x00404efd
  404eec:	00404ef9 	.word	0x00404ef9
  404ef0:	00404ef9 	.word	0x00404ef9
  404ef4:	00404ed5 	.word	0x00404ed5
  404ef8:	2000      	movs	r0, #0
  404efa:	e74c      	b.n	404d96 <__kernel_rem_pio2f+0x592>
  404efc:	2000      	movs	r0, #0
  404efe:	e779      	b.n	404df4 <__kernel_rem_pio2f+0x5f0>
  404f00:	2101      	movs	r1, #1
  404f02:	2300      	movs	r3, #0
  404f04:	e574      	b.n	4049f0 <__kernel_rem_pio2f+0x1ec>
  404f06:	bf00      	nop
  404f08:	0040922c 	.word	0x0040922c
  404f0c:	3fc90000 	.word	0x3fc90000

00404f10 <__kernel_sinf>:
  404f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404f14:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
  404f18:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
  404f1c:	4604      	mov	r4, r0
  404f1e:	460f      	mov	r7, r1
  404f20:	4690      	mov	r8, r2
  404f22:	da03      	bge.n	404f2c <__kernel_sinf+0x1c>
  404f24:	f000 ff22 	bl	405d6c <__aeabi_f2iz>
  404f28:	2800      	cmp	r0, #0
  404f2a:	d058      	beq.n	404fde <__kernel_sinf+0xce>
  404f2c:	4621      	mov	r1, r4
  404f2e:	4620      	mov	r0, r4
  404f30:	f000 fd40 	bl	4059b4 <__aeabi_fmul>
  404f34:	4605      	mov	r5, r0
  404f36:	4601      	mov	r1, r0
  404f38:	4620      	mov	r0, r4
  404f3a:	f000 fd3b 	bl	4059b4 <__aeabi_fmul>
  404f3e:	4929      	ldr	r1, [pc, #164]	; (404fe4 <__kernel_sinf+0xd4>)
  404f40:	4606      	mov	r6, r0
  404f42:	4628      	mov	r0, r5
  404f44:	f000 fd36 	bl	4059b4 <__aeabi_fmul>
  404f48:	4927      	ldr	r1, [pc, #156]	; (404fe8 <__kernel_sinf+0xd8>)
  404f4a:	f000 fc29 	bl	4057a0 <__aeabi_fsub>
  404f4e:	4629      	mov	r1, r5
  404f50:	f000 fd30 	bl	4059b4 <__aeabi_fmul>
  404f54:	4925      	ldr	r1, [pc, #148]	; (404fec <__kernel_sinf+0xdc>)
  404f56:	f000 fc25 	bl	4057a4 <__addsf3>
  404f5a:	4629      	mov	r1, r5
  404f5c:	f000 fd2a 	bl	4059b4 <__aeabi_fmul>
  404f60:	4923      	ldr	r1, [pc, #140]	; (404ff0 <__kernel_sinf+0xe0>)
  404f62:	f000 fc1d 	bl	4057a0 <__aeabi_fsub>
  404f66:	4629      	mov	r1, r5
  404f68:	f000 fd24 	bl	4059b4 <__aeabi_fmul>
  404f6c:	4921      	ldr	r1, [pc, #132]	; (404ff4 <__kernel_sinf+0xe4>)
  404f6e:	f000 fc19 	bl	4057a4 <__addsf3>
  404f72:	4681      	mov	r9, r0
  404f74:	f1b8 0f00 	cmp.w	r8, #0
  404f78:	d022      	beq.n	404fc0 <__kernel_sinf+0xb0>
  404f7a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  404f7e:	4638      	mov	r0, r7
  404f80:	f000 fd18 	bl	4059b4 <__aeabi_fmul>
  404f84:	4649      	mov	r1, r9
  404f86:	4680      	mov	r8, r0
  404f88:	4630      	mov	r0, r6
  404f8a:	f000 fd13 	bl	4059b4 <__aeabi_fmul>
  404f8e:	4601      	mov	r1, r0
  404f90:	4640      	mov	r0, r8
  404f92:	f000 fc05 	bl	4057a0 <__aeabi_fsub>
  404f96:	4629      	mov	r1, r5
  404f98:	f000 fd0c 	bl	4059b4 <__aeabi_fmul>
  404f9c:	4639      	mov	r1, r7
  404f9e:	f000 fbff 	bl	4057a0 <__aeabi_fsub>
  404fa2:	4915      	ldr	r1, [pc, #84]	; (404ff8 <__kernel_sinf+0xe8>)
  404fa4:	4605      	mov	r5, r0
  404fa6:	4630      	mov	r0, r6
  404fa8:	f000 fd04 	bl	4059b4 <__aeabi_fmul>
  404fac:	4601      	mov	r1, r0
  404fae:	4628      	mov	r0, r5
  404fb0:	f000 fbf8 	bl	4057a4 <__addsf3>
  404fb4:	4601      	mov	r1, r0
  404fb6:	4620      	mov	r0, r4
  404fb8:	f000 fbf2 	bl	4057a0 <__aeabi_fsub>
  404fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fc0:	4601      	mov	r1, r0
  404fc2:	4628      	mov	r0, r5
  404fc4:	f000 fcf6 	bl	4059b4 <__aeabi_fmul>
  404fc8:	490b      	ldr	r1, [pc, #44]	; (404ff8 <__kernel_sinf+0xe8>)
  404fca:	f000 fbe9 	bl	4057a0 <__aeabi_fsub>
  404fce:	4631      	mov	r1, r6
  404fd0:	f000 fcf0 	bl	4059b4 <__aeabi_fmul>
  404fd4:	4621      	mov	r1, r4
  404fd6:	f000 fbe5 	bl	4057a4 <__addsf3>
  404fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fde:	4620      	mov	r0, r4
  404fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404fe4:	2f2ec9d3 	.word	0x2f2ec9d3
  404fe8:	32d72f34 	.word	0x32d72f34
  404fec:	3638ef1b 	.word	0x3638ef1b
  404ff0:	39500d01 	.word	0x39500d01
  404ff4:	3c088889 	.word	0x3c088889
  404ff8:	3e2aaaab 	.word	0x3e2aaaab

00404ffc <matherr>:
  404ffc:	2000      	movs	r0, #0
  404ffe:	4770      	bx	lr

00405000 <nan>:
  405000:	2000      	movs	r0, #0
  405002:	4901      	ldr	r1, [pc, #4]	; (405008 <nan+0x8>)
  405004:	4770      	bx	lr
  405006:	bf00      	nop
  405008:	7ff80000 	.word	0x7ff80000

0040500c <atanf>:
  40500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405010:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
  405014:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
  405018:	4604      	mov	r4, r0
  40501a:	4606      	mov	r6, r0
  40501c:	db08      	blt.n	405030 <atanf+0x24>
  40501e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
  405022:	dc6f      	bgt.n	405104 <atanf+0xf8>
  405024:	2800      	cmp	r0, #0
  405026:	f340 80a0 	ble.w	40516a <atanf+0x15e>
  40502a:	486f      	ldr	r0, [pc, #444]	; (4051e8 <atanf+0x1dc>)
  40502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405030:	4b6e      	ldr	r3, [pc, #440]	; (4051ec <atanf+0x1e0>)
  405032:	429d      	cmp	r5, r3
  405034:	dc77      	bgt.n	405126 <atanf+0x11a>
  405036:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
  40503a:	db68      	blt.n	40510e <atanf+0x102>
  40503c:	f04f 37ff 	mov.w	r7, #4294967295
  405040:	4621      	mov	r1, r4
  405042:	4620      	mov	r0, r4
  405044:	f000 fcb6 	bl	4059b4 <__aeabi_fmul>
  405048:	4601      	mov	r1, r0
  40504a:	4680      	mov	r8, r0
  40504c:	f000 fcb2 	bl	4059b4 <__aeabi_fmul>
  405050:	4967      	ldr	r1, [pc, #412]	; (4051f0 <atanf+0x1e4>)
  405052:	4605      	mov	r5, r0
  405054:	f000 fcae 	bl	4059b4 <__aeabi_fmul>
  405058:	4966      	ldr	r1, [pc, #408]	; (4051f4 <atanf+0x1e8>)
  40505a:	f000 fba3 	bl	4057a4 <__addsf3>
  40505e:	4629      	mov	r1, r5
  405060:	f000 fca8 	bl	4059b4 <__aeabi_fmul>
  405064:	4964      	ldr	r1, [pc, #400]	; (4051f8 <atanf+0x1ec>)
  405066:	f000 fb9d 	bl	4057a4 <__addsf3>
  40506a:	4629      	mov	r1, r5
  40506c:	f000 fca2 	bl	4059b4 <__aeabi_fmul>
  405070:	4962      	ldr	r1, [pc, #392]	; (4051fc <atanf+0x1f0>)
  405072:	f000 fb97 	bl	4057a4 <__addsf3>
  405076:	4629      	mov	r1, r5
  405078:	f000 fc9c 	bl	4059b4 <__aeabi_fmul>
  40507c:	4960      	ldr	r1, [pc, #384]	; (405200 <atanf+0x1f4>)
  40507e:	f000 fb91 	bl	4057a4 <__addsf3>
  405082:	4629      	mov	r1, r5
  405084:	f000 fc96 	bl	4059b4 <__aeabi_fmul>
  405088:	495e      	ldr	r1, [pc, #376]	; (405204 <atanf+0x1f8>)
  40508a:	f000 fb8b 	bl	4057a4 <__addsf3>
  40508e:	4641      	mov	r1, r8
  405090:	f000 fc90 	bl	4059b4 <__aeabi_fmul>
  405094:	495c      	ldr	r1, [pc, #368]	; (405208 <atanf+0x1fc>)
  405096:	4680      	mov	r8, r0
  405098:	4628      	mov	r0, r5
  40509a:	f000 fc8b 	bl	4059b4 <__aeabi_fmul>
  40509e:	495b      	ldr	r1, [pc, #364]	; (40520c <atanf+0x200>)
  4050a0:	f000 fb7e 	bl	4057a0 <__aeabi_fsub>
  4050a4:	4629      	mov	r1, r5
  4050a6:	f000 fc85 	bl	4059b4 <__aeabi_fmul>
  4050aa:	4959      	ldr	r1, [pc, #356]	; (405210 <atanf+0x204>)
  4050ac:	f000 fb78 	bl	4057a0 <__aeabi_fsub>
  4050b0:	4629      	mov	r1, r5
  4050b2:	f000 fc7f 	bl	4059b4 <__aeabi_fmul>
  4050b6:	4957      	ldr	r1, [pc, #348]	; (405214 <atanf+0x208>)
  4050b8:	f000 fb72 	bl	4057a0 <__aeabi_fsub>
  4050bc:	4629      	mov	r1, r5
  4050be:	f000 fc79 	bl	4059b4 <__aeabi_fmul>
  4050c2:	4955      	ldr	r1, [pc, #340]	; (405218 <atanf+0x20c>)
  4050c4:	f000 fb6c 	bl	4057a0 <__aeabi_fsub>
  4050c8:	4629      	mov	r1, r5
  4050ca:	f000 fc73 	bl	4059b4 <__aeabi_fmul>
  4050ce:	1c7b      	adds	r3, r7, #1
  4050d0:	4601      	mov	r1, r0
  4050d2:	4640      	mov	r0, r8
  4050d4:	d04c      	beq.n	405170 <atanf+0x164>
  4050d6:	f000 fb65 	bl	4057a4 <__addsf3>
  4050da:	4621      	mov	r1, r4
  4050dc:	f000 fc6a 	bl	4059b4 <__aeabi_fmul>
  4050e0:	4b4e      	ldr	r3, [pc, #312]	; (40521c <atanf+0x210>)
  4050e2:	4d4f      	ldr	r5, [pc, #316]	; (405220 <atanf+0x214>)
  4050e4:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
  4050e8:	f000 fb5a 	bl	4057a0 <__aeabi_fsub>
  4050ec:	4621      	mov	r1, r4
  4050ee:	f000 fb57 	bl	4057a0 <__aeabi_fsub>
  4050f2:	4601      	mov	r1, r0
  4050f4:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
  4050f8:	f000 fb52 	bl	4057a0 <__aeabi_fsub>
  4050fc:	2e00      	cmp	r6, #0
  4050fe:	db30      	blt.n	405162 <atanf+0x156>
  405100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405104:	4601      	mov	r1, r0
  405106:	f000 fb4d 	bl	4057a4 <__addsf3>
  40510a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40510e:	4945      	ldr	r1, [pc, #276]	; (405224 <atanf+0x218>)
  405110:	f000 fb48 	bl	4057a4 <__addsf3>
  405114:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405118:	f000 fe08 	bl	405d2c <__aeabi_fcmpgt>
  40511c:	2800      	cmp	r0, #0
  40511e:	d08d      	beq.n	40503c <atanf+0x30>
  405120:	4620      	mov	r0, r4
  405122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405126:	f000 f887 	bl	405238 <fabsf>
  40512a:	4b3f      	ldr	r3, [pc, #252]	; (405228 <atanf+0x21c>)
  40512c:	429d      	cmp	r5, r3
  40512e:	4604      	mov	r4, r0
  405130:	dc29      	bgt.n	405186 <atanf+0x17a>
  405132:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
  405136:	429d      	cmp	r5, r3
  405138:	dc44      	bgt.n	4051c4 <atanf+0x1b8>
  40513a:	4601      	mov	r1, r0
  40513c:	f000 fb32 	bl	4057a4 <__addsf3>
  405140:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  405144:	f000 fb2c 	bl	4057a0 <__aeabi_fsub>
  405148:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40514c:	4605      	mov	r5, r0
  40514e:	4620      	mov	r0, r4
  405150:	f000 fb28 	bl	4057a4 <__addsf3>
  405154:	4601      	mov	r1, r0
  405156:	4628      	mov	r0, r5
  405158:	f000 fce0 	bl	405b1c <__aeabi_fdiv>
  40515c:	2700      	movs	r7, #0
  40515e:	4604      	mov	r4, r0
  405160:	e76e      	b.n	405040 <atanf+0x34>
  405162:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
  405166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40516a:	4830      	ldr	r0, [pc, #192]	; (40522c <atanf+0x220>)
  40516c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405170:	f000 fb18 	bl	4057a4 <__addsf3>
  405174:	4621      	mov	r1, r4
  405176:	f000 fc1d 	bl	4059b4 <__aeabi_fmul>
  40517a:	4601      	mov	r1, r0
  40517c:	4620      	mov	r0, r4
  40517e:	f000 fb0f 	bl	4057a0 <__aeabi_fsub>
  405182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405186:	4b2a      	ldr	r3, [pc, #168]	; (405230 <atanf+0x224>)
  405188:	429d      	cmp	r5, r3
  40518a:	dc14      	bgt.n	4051b6 <atanf+0x1aa>
  40518c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405190:	f000 fb06 	bl	4057a0 <__aeabi_fsub>
  405194:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
  405198:	4605      	mov	r5, r0
  40519a:	4620      	mov	r0, r4
  40519c:	f000 fc0a 	bl	4059b4 <__aeabi_fmul>
  4051a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4051a4:	f000 fafe 	bl	4057a4 <__addsf3>
  4051a8:	4601      	mov	r1, r0
  4051aa:	4628      	mov	r0, r5
  4051ac:	f000 fcb6 	bl	405b1c <__aeabi_fdiv>
  4051b0:	2702      	movs	r7, #2
  4051b2:	4604      	mov	r4, r0
  4051b4:	e744      	b.n	405040 <atanf+0x34>
  4051b6:	4601      	mov	r1, r0
  4051b8:	481e      	ldr	r0, [pc, #120]	; (405234 <atanf+0x228>)
  4051ba:	f000 fcaf 	bl	405b1c <__aeabi_fdiv>
  4051be:	2703      	movs	r7, #3
  4051c0:	4604      	mov	r4, r0
  4051c2:	e73d      	b.n	405040 <atanf+0x34>
  4051c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4051c8:	f000 faea 	bl	4057a0 <__aeabi_fsub>
  4051cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
  4051d0:	4605      	mov	r5, r0
  4051d2:	4620      	mov	r0, r4
  4051d4:	f000 fae6 	bl	4057a4 <__addsf3>
  4051d8:	4601      	mov	r1, r0
  4051da:	4628      	mov	r0, r5
  4051dc:	f000 fc9e 	bl	405b1c <__aeabi_fdiv>
  4051e0:	2701      	movs	r7, #1
  4051e2:	4604      	mov	r4, r0
  4051e4:	e72c      	b.n	405040 <atanf+0x34>
  4051e6:	bf00      	nop
  4051e8:	3fc90fdb 	.word	0x3fc90fdb
  4051ec:	3edfffff 	.word	0x3edfffff
  4051f0:	3c8569d7 	.word	0x3c8569d7
  4051f4:	3d4bda59 	.word	0x3d4bda59
  4051f8:	3d886b35 	.word	0x3d886b35
  4051fc:	3dba2e6e 	.word	0x3dba2e6e
  405200:	3e124925 	.word	0x3e124925
  405204:	3eaaaaab 	.word	0x3eaaaaab
  405208:	bd15a221 	.word	0xbd15a221
  40520c:	3d6ef16b 	.word	0x3d6ef16b
  405210:	3d9d8795 	.word	0x3d9d8795
  405214:	3de38e38 	.word	0x3de38e38
  405218:	3e4ccccd 	.word	0x3e4ccccd
  40521c:	00409274 	.word	0x00409274
  405220:	00409264 	.word	0x00409264
  405224:	7149f2ca 	.word	0x7149f2ca
  405228:	3f97ffff 	.word	0x3f97ffff
  40522c:	bfc90fdb 	.word	0xbfc90fdb
  405230:	401bffff 	.word	0x401bffff
  405234:	bf800000 	.word	0xbf800000

00405238 <fabsf>:
  405238:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  40523c:	4770      	bx	lr
  40523e:	bf00      	nop

00405240 <floorf>:
  405240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405244:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
  405248:	0dfc      	lsrs	r4, r7, #23
  40524a:	3c7f      	subs	r4, #127	; 0x7f
  40524c:	2c16      	cmp	r4, #22
  40524e:	4605      	mov	r5, r0
  405250:	dc13      	bgt.n	40527a <floorf+0x3a>
  405252:	2c00      	cmp	r4, #0
  405254:	4680      	mov	r8, r0
  405256:	db1b      	blt.n	405290 <floorf+0x50>
  405258:	4f19      	ldr	r7, [pc, #100]	; (4052c0 <floorf+0x80>)
  40525a:	4127      	asrs	r7, r4
  40525c:	4238      	tst	r0, r7
  40525e:	d014      	beq.n	40528a <floorf+0x4a>
  405260:	4918      	ldr	r1, [pc, #96]	; (4052c4 <floorf+0x84>)
  405262:	f000 fa9f 	bl	4057a4 <__addsf3>
  405266:	2100      	movs	r1, #0
  405268:	f000 fd60 	bl	405d2c <__aeabi_fcmpgt>
  40526c:	b168      	cbz	r0, 40528a <floorf+0x4a>
  40526e:	2d00      	cmp	r5, #0
  405270:	db1b      	blt.n	4052aa <floorf+0x6a>
  405272:	ea28 0007 	bic.w	r0, r8, r7
  405276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40527a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
  40527e:	d304      	bcc.n	40528a <floorf+0x4a>
  405280:	4601      	mov	r1, r0
  405282:	f000 fa8f 	bl	4057a4 <__addsf3>
  405286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40528a:	4628      	mov	r0, r5
  40528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405290:	490c      	ldr	r1, [pc, #48]	; (4052c4 <floorf+0x84>)
  405292:	f000 fa87 	bl	4057a4 <__addsf3>
  405296:	2100      	movs	r1, #0
  405298:	f000 fd48 	bl	405d2c <__aeabi_fcmpgt>
  40529c:	2800      	cmp	r0, #0
  40529e:	d0f4      	beq.n	40528a <floorf+0x4a>
  4052a0:	2d00      	cmp	r5, #0
  4052a2:	db08      	blt.n	4052b6 <floorf+0x76>
  4052a4:	2000      	movs	r0, #0
  4052a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052aa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  4052ae:	fa43 f404 	asr.w	r4, r3, r4
  4052b2:	44a0      	add	r8, r4
  4052b4:	e7dd      	b.n	405272 <floorf+0x32>
  4052b6:	2f00      	cmp	r7, #0
  4052b8:	d0e7      	beq.n	40528a <floorf+0x4a>
  4052ba:	4803      	ldr	r0, [pc, #12]	; (4052c8 <floorf+0x88>)
  4052bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4052c0:	007fffff 	.word	0x007fffff
  4052c4:	7149f2ca 	.word	0x7149f2ca
  4052c8:	bf800000 	.word	0xbf800000

004052cc <scalbnf>:
  4052cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  4052d0:	b538      	push	{r3, r4, r5, lr}
  4052d2:	4603      	mov	r3, r0
  4052d4:	d016      	beq.n	405304 <scalbnf+0x38>
  4052d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
  4052da:	d20f      	bcs.n	4052fc <scalbnf+0x30>
  4052dc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
  4052e0:	460d      	mov	r5, r1
  4052e2:	d310      	bcc.n	405306 <scalbnf+0x3a>
  4052e4:	4604      	mov	r4, r0
  4052e6:	0dd0      	lsrs	r0, r2, #23
  4052e8:	4428      	add	r0, r5
  4052ea:	28fe      	cmp	r0, #254	; 0xfe
  4052ec:	dc2e      	bgt.n	40534c <scalbnf+0x80>
  4052ee:	2800      	cmp	r0, #0
  4052f0:	dd1d      	ble.n	40532e <scalbnf+0x62>
  4052f2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  4052f6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  4052fa:	bd38      	pop	{r3, r4, r5, pc}
  4052fc:	4601      	mov	r1, r0
  4052fe:	f000 fa51 	bl	4057a4 <__addsf3>
  405302:	bd38      	pop	{r3, r4, r5, pc}
  405304:	bd38      	pop	{r3, r4, r5, pc}
  405306:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
  40530a:	f000 fb53 	bl	4059b4 <__aeabi_fmul>
  40530e:	4a18      	ldr	r2, [pc, #96]	; (405370 <scalbnf+0xa4>)
  405310:	4295      	cmp	r5, r2
  405312:	4603      	mov	r3, r0
  405314:	db07      	blt.n	405326 <scalbnf+0x5a>
  405316:	4604      	mov	r4, r0
  405318:	f3c0 50c7 	ubfx	r0, r0, #23, #8
  40531c:	3819      	subs	r0, #25
  40531e:	e7e3      	b.n	4052e8 <scalbnf+0x1c>
  405320:	4814      	ldr	r0, [pc, #80]	; (405374 <scalbnf+0xa8>)
  405322:	f000 f82b 	bl	40537c <copysignf>
  405326:	4913      	ldr	r1, [pc, #76]	; (405374 <scalbnf+0xa8>)
  405328:	f000 fb44 	bl	4059b4 <__aeabi_fmul>
  40532c:	bd38      	pop	{r3, r4, r5, pc}
  40532e:	f110 0f16 	cmn.w	r0, #22
  405332:	da13      	bge.n	40535c <scalbnf+0x90>
  405334:	f24c 3250 	movw	r2, #50000	; 0xc350
  405338:	4295      	cmp	r5, r2
  40533a:	4619      	mov	r1, r3
  40533c:	ddf0      	ble.n	405320 <scalbnf+0x54>
  40533e:	480e      	ldr	r0, [pc, #56]	; (405378 <scalbnf+0xac>)
  405340:	f000 f81c 	bl	40537c <copysignf>
  405344:	490c      	ldr	r1, [pc, #48]	; (405378 <scalbnf+0xac>)
  405346:	f000 fb35 	bl	4059b4 <__aeabi_fmul>
  40534a:	bd38      	pop	{r3, r4, r5, pc}
  40534c:	4619      	mov	r1, r3
  40534e:	480a      	ldr	r0, [pc, #40]	; (405378 <scalbnf+0xac>)
  405350:	f000 f814 	bl	40537c <copysignf>
  405354:	4908      	ldr	r1, [pc, #32]	; (405378 <scalbnf+0xac>)
  405356:	f000 fb2d 	bl	4059b4 <__aeabi_fmul>
  40535a:	bd38      	pop	{r3, r4, r5, pc}
  40535c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
  405360:	3019      	adds	r0, #25
  405362:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
  405366:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
  40536a:	f000 fb23 	bl	4059b4 <__aeabi_fmul>
  40536e:	bd38      	pop	{r3, r4, r5, pc}
  405370:	ffff3cb0 	.word	0xffff3cb0
  405374:	0da24260 	.word	0x0da24260
  405378:	7149f2ca 	.word	0x7149f2ca

0040537c <copysignf>:
  40537c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405380:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
  405384:	4308      	orrs	r0, r1
  405386:	4770      	bx	lr

00405388 <__aeabi_drsub>:
  405388:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40538c:	e002      	b.n	405394 <__adddf3>
  40538e:	bf00      	nop

00405390 <__aeabi_dsub>:
  405390:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405394 <__adddf3>:
  405394:	b530      	push	{r4, r5, lr}
  405396:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40539a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40539e:	ea94 0f05 	teq	r4, r5
  4053a2:	bf08      	it	eq
  4053a4:	ea90 0f02 	teqeq	r0, r2
  4053a8:	bf1f      	itttt	ne
  4053aa:	ea54 0c00 	orrsne.w	ip, r4, r0
  4053ae:	ea55 0c02 	orrsne.w	ip, r5, r2
  4053b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4053b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4053ba:	f000 80e2 	beq.w	405582 <__adddf3+0x1ee>
  4053be:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4053c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4053c6:	bfb8      	it	lt
  4053c8:	426d      	neglt	r5, r5
  4053ca:	dd0c      	ble.n	4053e6 <__adddf3+0x52>
  4053cc:	442c      	add	r4, r5
  4053ce:	ea80 0202 	eor.w	r2, r0, r2
  4053d2:	ea81 0303 	eor.w	r3, r1, r3
  4053d6:	ea82 0000 	eor.w	r0, r2, r0
  4053da:	ea83 0101 	eor.w	r1, r3, r1
  4053de:	ea80 0202 	eor.w	r2, r0, r2
  4053e2:	ea81 0303 	eor.w	r3, r1, r3
  4053e6:	2d36      	cmp	r5, #54	; 0x36
  4053e8:	bf88      	it	hi
  4053ea:	bd30      	pophi	{r4, r5, pc}
  4053ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4053f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4053f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4053f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4053fc:	d002      	beq.n	405404 <__adddf3+0x70>
  4053fe:	4240      	negs	r0, r0
  405400:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405404:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405408:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40540c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405410:	d002      	beq.n	405418 <__adddf3+0x84>
  405412:	4252      	negs	r2, r2
  405414:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405418:	ea94 0f05 	teq	r4, r5
  40541c:	f000 80a7 	beq.w	40556e <__adddf3+0x1da>
  405420:	f1a4 0401 	sub.w	r4, r4, #1
  405424:	f1d5 0e20 	rsbs	lr, r5, #32
  405428:	db0d      	blt.n	405446 <__adddf3+0xb2>
  40542a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40542e:	fa22 f205 	lsr.w	r2, r2, r5
  405432:	1880      	adds	r0, r0, r2
  405434:	f141 0100 	adc.w	r1, r1, #0
  405438:	fa03 f20e 	lsl.w	r2, r3, lr
  40543c:	1880      	adds	r0, r0, r2
  40543e:	fa43 f305 	asr.w	r3, r3, r5
  405442:	4159      	adcs	r1, r3
  405444:	e00e      	b.n	405464 <__adddf3+0xd0>
  405446:	f1a5 0520 	sub.w	r5, r5, #32
  40544a:	f10e 0e20 	add.w	lr, lr, #32
  40544e:	2a01      	cmp	r2, #1
  405450:	fa03 fc0e 	lsl.w	ip, r3, lr
  405454:	bf28      	it	cs
  405456:	f04c 0c02 	orrcs.w	ip, ip, #2
  40545a:	fa43 f305 	asr.w	r3, r3, r5
  40545e:	18c0      	adds	r0, r0, r3
  405460:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405468:	d507      	bpl.n	40547a <__adddf3+0xe6>
  40546a:	f04f 0e00 	mov.w	lr, #0
  40546e:	f1dc 0c00 	rsbs	ip, ip, #0
  405472:	eb7e 0000 	sbcs.w	r0, lr, r0
  405476:	eb6e 0101 	sbc.w	r1, lr, r1
  40547a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40547e:	d31b      	bcc.n	4054b8 <__adddf3+0x124>
  405480:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405484:	d30c      	bcc.n	4054a0 <__adddf3+0x10c>
  405486:	0849      	lsrs	r1, r1, #1
  405488:	ea5f 0030 	movs.w	r0, r0, rrx
  40548c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405490:	f104 0401 	add.w	r4, r4, #1
  405494:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405498:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40549c:	f080 809a 	bcs.w	4055d4 <__adddf3+0x240>
  4054a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4054a4:	bf08      	it	eq
  4054a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4054aa:	f150 0000 	adcs.w	r0, r0, #0
  4054ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4054b2:	ea41 0105 	orr.w	r1, r1, r5
  4054b6:	bd30      	pop	{r4, r5, pc}
  4054b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4054bc:	4140      	adcs	r0, r0
  4054be:	eb41 0101 	adc.w	r1, r1, r1
  4054c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4054c6:	f1a4 0401 	sub.w	r4, r4, #1
  4054ca:	d1e9      	bne.n	4054a0 <__adddf3+0x10c>
  4054cc:	f091 0f00 	teq	r1, #0
  4054d0:	bf04      	itt	eq
  4054d2:	4601      	moveq	r1, r0
  4054d4:	2000      	moveq	r0, #0
  4054d6:	fab1 f381 	clz	r3, r1
  4054da:	bf08      	it	eq
  4054dc:	3320      	addeq	r3, #32
  4054de:	f1a3 030b 	sub.w	r3, r3, #11
  4054e2:	f1b3 0220 	subs.w	r2, r3, #32
  4054e6:	da0c      	bge.n	405502 <__adddf3+0x16e>
  4054e8:	320c      	adds	r2, #12
  4054ea:	dd08      	ble.n	4054fe <__adddf3+0x16a>
  4054ec:	f102 0c14 	add.w	ip, r2, #20
  4054f0:	f1c2 020c 	rsb	r2, r2, #12
  4054f4:	fa01 f00c 	lsl.w	r0, r1, ip
  4054f8:	fa21 f102 	lsr.w	r1, r1, r2
  4054fc:	e00c      	b.n	405518 <__adddf3+0x184>
  4054fe:	f102 0214 	add.w	r2, r2, #20
  405502:	bfd8      	it	le
  405504:	f1c2 0c20 	rsble	ip, r2, #32
  405508:	fa01 f102 	lsl.w	r1, r1, r2
  40550c:	fa20 fc0c 	lsr.w	ip, r0, ip
  405510:	bfdc      	itt	le
  405512:	ea41 010c 	orrle.w	r1, r1, ip
  405516:	4090      	lslle	r0, r2
  405518:	1ae4      	subs	r4, r4, r3
  40551a:	bfa2      	ittt	ge
  40551c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405520:	4329      	orrge	r1, r5
  405522:	bd30      	popge	{r4, r5, pc}
  405524:	ea6f 0404 	mvn.w	r4, r4
  405528:	3c1f      	subs	r4, #31
  40552a:	da1c      	bge.n	405566 <__adddf3+0x1d2>
  40552c:	340c      	adds	r4, #12
  40552e:	dc0e      	bgt.n	40554e <__adddf3+0x1ba>
  405530:	f104 0414 	add.w	r4, r4, #20
  405534:	f1c4 0220 	rsb	r2, r4, #32
  405538:	fa20 f004 	lsr.w	r0, r0, r4
  40553c:	fa01 f302 	lsl.w	r3, r1, r2
  405540:	ea40 0003 	orr.w	r0, r0, r3
  405544:	fa21 f304 	lsr.w	r3, r1, r4
  405548:	ea45 0103 	orr.w	r1, r5, r3
  40554c:	bd30      	pop	{r4, r5, pc}
  40554e:	f1c4 040c 	rsb	r4, r4, #12
  405552:	f1c4 0220 	rsb	r2, r4, #32
  405556:	fa20 f002 	lsr.w	r0, r0, r2
  40555a:	fa01 f304 	lsl.w	r3, r1, r4
  40555e:	ea40 0003 	orr.w	r0, r0, r3
  405562:	4629      	mov	r1, r5
  405564:	bd30      	pop	{r4, r5, pc}
  405566:	fa21 f004 	lsr.w	r0, r1, r4
  40556a:	4629      	mov	r1, r5
  40556c:	bd30      	pop	{r4, r5, pc}
  40556e:	f094 0f00 	teq	r4, #0
  405572:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405576:	bf06      	itte	eq
  405578:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40557c:	3401      	addeq	r4, #1
  40557e:	3d01      	subne	r5, #1
  405580:	e74e      	b.n	405420 <__adddf3+0x8c>
  405582:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405586:	bf18      	it	ne
  405588:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40558c:	d029      	beq.n	4055e2 <__adddf3+0x24e>
  40558e:	ea94 0f05 	teq	r4, r5
  405592:	bf08      	it	eq
  405594:	ea90 0f02 	teqeq	r0, r2
  405598:	d005      	beq.n	4055a6 <__adddf3+0x212>
  40559a:	ea54 0c00 	orrs.w	ip, r4, r0
  40559e:	bf04      	itt	eq
  4055a0:	4619      	moveq	r1, r3
  4055a2:	4610      	moveq	r0, r2
  4055a4:	bd30      	pop	{r4, r5, pc}
  4055a6:	ea91 0f03 	teq	r1, r3
  4055aa:	bf1e      	ittt	ne
  4055ac:	2100      	movne	r1, #0
  4055ae:	2000      	movne	r0, #0
  4055b0:	bd30      	popne	{r4, r5, pc}
  4055b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4055b6:	d105      	bne.n	4055c4 <__adddf3+0x230>
  4055b8:	0040      	lsls	r0, r0, #1
  4055ba:	4149      	adcs	r1, r1
  4055bc:	bf28      	it	cs
  4055be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4055c2:	bd30      	pop	{r4, r5, pc}
  4055c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4055c8:	bf3c      	itt	cc
  4055ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4055ce:	bd30      	popcc	{r4, r5, pc}
  4055d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4055d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4055d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4055dc:	f04f 0000 	mov.w	r0, #0
  4055e0:	bd30      	pop	{r4, r5, pc}
  4055e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4055e6:	bf1a      	itte	ne
  4055e8:	4619      	movne	r1, r3
  4055ea:	4610      	movne	r0, r2
  4055ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4055f0:	bf1c      	itt	ne
  4055f2:	460b      	movne	r3, r1
  4055f4:	4602      	movne	r2, r0
  4055f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4055fa:	bf06      	itte	eq
  4055fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405600:	ea91 0f03 	teqeq	r1, r3
  405604:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405608:	bd30      	pop	{r4, r5, pc}
  40560a:	bf00      	nop

0040560c <__aeabi_ui2d>:
  40560c:	f090 0f00 	teq	r0, #0
  405610:	bf04      	itt	eq
  405612:	2100      	moveq	r1, #0
  405614:	4770      	bxeq	lr
  405616:	b530      	push	{r4, r5, lr}
  405618:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40561c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405620:	f04f 0500 	mov.w	r5, #0
  405624:	f04f 0100 	mov.w	r1, #0
  405628:	e750      	b.n	4054cc <__adddf3+0x138>
  40562a:	bf00      	nop

0040562c <__aeabi_i2d>:
  40562c:	f090 0f00 	teq	r0, #0
  405630:	bf04      	itt	eq
  405632:	2100      	moveq	r1, #0
  405634:	4770      	bxeq	lr
  405636:	b530      	push	{r4, r5, lr}
  405638:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40563c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405640:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405644:	bf48      	it	mi
  405646:	4240      	negmi	r0, r0
  405648:	f04f 0100 	mov.w	r1, #0
  40564c:	e73e      	b.n	4054cc <__adddf3+0x138>
  40564e:	bf00      	nop

00405650 <__aeabi_f2d>:
  405650:	0042      	lsls	r2, r0, #1
  405652:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405656:	ea4f 0131 	mov.w	r1, r1, rrx
  40565a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40565e:	bf1f      	itttt	ne
  405660:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405664:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405668:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40566c:	4770      	bxne	lr
  40566e:	f092 0f00 	teq	r2, #0
  405672:	bf14      	ite	ne
  405674:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405678:	4770      	bxeq	lr
  40567a:	b530      	push	{r4, r5, lr}
  40567c:	f44f 7460 	mov.w	r4, #896	; 0x380
  405680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405688:	e720      	b.n	4054cc <__adddf3+0x138>
  40568a:	bf00      	nop

0040568c <__aeabi_ul2d>:
  40568c:	ea50 0201 	orrs.w	r2, r0, r1
  405690:	bf08      	it	eq
  405692:	4770      	bxeq	lr
  405694:	b530      	push	{r4, r5, lr}
  405696:	f04f 0500 	mov.w	r5, #0
  40569a:	e00a      	b.n	4056b2 <__aeabi_l2d+0x16>

0040569c <__aeabi_l2d>:
  40569c:	ea50 0201 	orrs.w	r2, r0, r1
  4056a0:	bf08      	it	eq
  4056a2:	4770      	bxeq	lr
  4056a4:	b530      	push	{r4, r5, lr}
  4056a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4056aa:	d502      	bpl.n	4056b2 <__aeabi_l2d+0x16>
  4056ac:	4240      	negs	r0, r0
  4056ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4056b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4056b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4056ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4056be:	f43f aedc 	beq.w	40547a <__adddf3+0xe6>
  4056c2:	f04f 0203 	mov.w	r2, #3
  4056c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4056ca:	bf18      	it	ne
  4056cc:	3203      	addne	r2, #3
  4056ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4056d2:	bf18      	it	ne
  4056d4:	3203      	addne	r2, #3
  4056d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4056da:	f1c2 0320 	rsb	r3, r2, #32
  4056de:	fa00 fc03 	lsl.w	ip, r0, r3
  4056e2:	fa20 f002 	lsr.w	r0, r0, r2
  4056e6:	fa01 fe03 	lsl.w	lr, r1, r3
  4056ea:	ea40 000e 	orr.w	r0, r0, lr
  4056ee:	fa21 f102 	lsr.w	r1, r1, r2
  4056f2:	4414      	add	r4, r2
  4056f4:	e6c1      	b.n	40547a <__adddf3+0xe6>
  4056f6:	bf00      	nop

004056f8 <__aeabi_d2f>:
  4056f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4056fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  405700:	bf24      	itt	cs
  405702:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  405706:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  40570a:	d90d      	bls.n	405728 <__aeabi_d2f+0x30>
  40570c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405710:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  405714:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  405718:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  40571c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  405720:	bf08      	it	eq
  405722:	f020 0001 	biceq.w	r0, r0, #1
  405726:	4770      	bx	lr
  405728:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  40572c:	d121      	bne.n	405772 <__aeabi_d2f+0x7a>
  40572e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  405732:	bfbc      	itt	lt
  405734:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  405738:	4770      	bxlt	lr
  40573a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40573e:	ea4f 5252 	mov.w	r2, r2, lsr #21
  405742:	f1c2 0218 	rsb	r2, r2, #24
  405746:	f1c2 0c20 	rsb	ip, r2, #32
  40574a:	fa10 f30c 	lsls.w	r3, r0, ip
  40574e:	fa20 f002 	lsr.w	r0, r0, r2
  405752:	bf18      	it	ne
  405754:	f040 0001 	orrne.w	r0, r0, #1
  405758:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40575c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  405760:	fa03 fc0c 	lsl.w	ip, r3, ip
  405764:	ea40 000c 	orr.w	r0, r0, ip
  405768:	fa23 f302 	lsr.w	r3, r3, r2
  40576c:	ea4f 0343 	mov.w	r3, r3, lsl #1
  405770:	e7cc      	b.n	40570c <__aeabi_d2f+0x14>
  405772:	ea7f 5362 	mvns.w	r3, r2, asr #21
  405776:	d107      	bne.n	405788 <__aeabi_d2f+0x90>
  405778:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  40577c:	bf1e      	ittt	ne
  40577e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  405782:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  405786:	4770      	bxne	lr
  405788:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  40578c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405790:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405794:	4770      	bx	lr
  405796:	bf00      	nop

00405798 <__aeabi_frsub>:
  405798:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
  40579c:	e002      	b.n	4057a4 <__addsf3>
  40579e:	bf00      	nop

004057a0 <__aeabi_fsub>:
  4057a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

004057a4 <__addsf3>:
  4057a4:	0042      	lsls	r2, r0, #1
  4057a6:	bf1f      	itttt	ne
  4057a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
  4057ac:	ea92 0f03 	teqne	r2, r3
  4057b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
  4057b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  4057b8:	d06a      	beq.n	405890 <__addsf3+0xec>
  4057ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
  4057be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
  4057c2:	bfc1      	itttt	gt
  4057c4:	18d2      	addgt	r2, r2, r3
  4057c6:	4041      	eorgt	r1, r0
  4057c8:	4048      	eorgt	r0, r1
  4057ca:	4041      	eorgt	r1, r0
  4057cc:	bfb8      	it	lt
  4057ce:	425b      	neglt	r3, r3
  4057d0:	2b19      	cmp	r3, #25
  4057d2:	bf88      	it	hi
  4057d4:	4770      	bxhi	lr
  4057d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  4057da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4057de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
  4057e2:	bf18      	it	ne
  4057e4:	4240      	negne	r0, r0
  4057e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4057ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  4057ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  4057f2:	bf18      	it	ne
  4057f4:	4249      	negne	r1, r1
  4057f6:	ea92 0f03 	teq	r2, r3
  4057fa:	d03f      	beq.n	40587c <__addsf3+0xd8>
  4057fc:	f1a2 0201 	sub.w	r2, r2, #1
  405800:	fa41 fc03 	asr.w	ip, r1, r3
  405804:	eb10 000c 	adds.w	r0, r0, ip
  405808:	f1c3 0320 	rsb	r3, r3, #32
  40580c:	fa01 f103 	lsl.w	r1, r1, r3
  405810:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  405814:	d502      	bpl.n	40581c <__addsf3+0x78>
  405816:	4249      	negs	r1, r1
  405818:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
  40581c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  405820:	d313      	bcc.n	40584a <__addsf3+0xa6>
  405822:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
  405826:	d306      	bcc.n	405836 <__addsf3+0x92>
  405828:	0840      	lsrs	r0, r0, #1
  40582a:	ea4f 0131 	mov.w	r1, r1, rrx
  40582e:	f102 0201 	add.w	r2, r2, #1
  405832:	2afe      	cmp	r2, #254	; 0xfe
  405834:	d251      	bcs.n	4058da <__addsf3+0x136>
  405836:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
  40583a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  40583e:	bf08      	it	eq
  405840:	f020 0001 	biceq.w	r0, r0, #1
  405844:	ea40 0003 	orr.w	r0, r0, r3
  405848:	4770      	bx	lr
  40584a:	0049      	lsls	r1, r1, #1
  40584c:	eb40 0000 	adc.w	r0, r0, r0
  405850:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
  405854:	f1a2 0201 	sub.w	r2, r2, #1
  405858:	d1ed      	bne.n	405836 <__addsf3+0x92>
  40585a:	fab0 fc80 	clz	ip, r0
  40585e:	f1ac 0c08 	sub.w	ip, ip, #8
  405862:	ebb2 020c 	subs.w	r2, r2, ip
  405866:	fa00 f00c 	lsl.w	r0, r0, ip
  40586a:	bfaa      	itet	ge
  40586c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
  405870:	4252      	neglt	r2, r2
  405872:	4318      	orrge	r0, r3
  405874:	bfbc      	itt	lt
  405876:	40d0      	lsrlt	r0, r2
  405878:	4318      	orrlt	r0, r3
  40587a:	4770      	bx	lr
  40587c:	f092 0f00 	teq	r2, #0
  405880:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
  405884:	bf06      	itte	eq
  405886:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
  40588a:	3201      	addeq	r2, #1
  40588c:	3b01      	subne	r3, #1
  40588e:	e7b5      	b.n	4057fc <__addsf3+0x58>
  405890:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405894:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405898:	bf18      	it	ne
  40589a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  40589e:	d021      	beq.n	4058e4 <__addsf3+0x140>
  4058a0:	ea92 0f03 	teq	r2, r3
  4058a4:	d004      	beq.n	4058b0 <__addsf3+0x10c>
  4058a6:	f092 0f00 	teq	r2, #0
  4058aa:	bf08      	it	eq
  4058ac:	4608      	moveq	r0, r1
  4058ae:	4770      	bx	lr
  4058b0:	ea90 0f01 	teq	r0, r1
  4058b4:	bf1c      	itt	ne
  4058b6:	2000      	movne	r0, #0
  4058b8:	4770      	bxne	lr
  4058ba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
  4058be:	d104      	bne.n	4058ca <__addsf3+0x126>
  4058c0:	0040      	lsls	r0, r0, #1
  4058c2:	bf28      	it	cs
  4058c4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
  4058c8:	4770      	bx	lr
  4058ca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
  4058ce:	bf3c      	itt	cc
  4058d0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
  4058d4:	4770      	bxcc	lr
  4058d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
  4058da:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
  4058de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  4058e2:	4770      	bx	lr
  4058e4:	ea7f 6222 	mvns.w	r2, r2, asr #24
  4058e8:	bf16      	itet	ne
  4058ea:	4608      	movne	r0, r1
  4058ec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
  4058f0:	4601      	movne	r1, r0
  4058f2:	0242      	lsls	r2, r0, #9
  4058f4:	bf06      	itte	eq
  4058f6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
  4058fa:	ea90 0f01 	teqeq	r0, r1
  4058fe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
  405902:	4770      	bx	lr

00405904 <__aeabi_ui2f>:
  405904:	f04f 0300 	mov.w	r3, #0
  405908:	e004      	b.n	405914 <__aeabi_i2f+0x8>
  40590a:	bf00      	nop

0040590c <__aeabi_i2f>:
  40590c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
  405910:	bf48      	it	mi
  405912:	4240      	negmi	r0, r0
  405914:	ea5f 0c00 	movs.w	ip, r0
  405918:	bf08      	it	eq
  40591a:	4770      	bxeq	lr
  40591c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
  405920:	4601      	mov	r1, r0
  405922:	f04f 0000 	mov.w	r0, #0
  405926:	e01c      	b.n	405962 <__aeabi_l2f+0x2a>

00405928 <__aeabi_ul2f>:
  405928:	ea50 0201 	orrs.w	r2, r0, r1
  40592c:	bf08      	it	eq
  40592e:	4770      	bxeq	lr
  405930:	f04f 0300 	mov.w	r3, #0
  405934:	e00a      	b.n	40594c <__aeabi_l2f+0x14>
  405936:	bf00      	nop

00405938 <__aeabi_l2f>:
  405938:	ea50 0201 	orrs.w	r2, r0, r1
  40593c:	bf08      	it	eq
  40593e:	4770      	bxeq	lr
  405940:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
  405944:	d502      	bpl.n	40594c <__aeabi_l2f+0x14>
  405946:	4240      	negs	r0, r0
  405948:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40594c:	ea5f 0c01 	movs.w	ip, r1
  405950:	bf02      	ittt	eq
  405952:	4684      	moveq	ip, r0
  405954:	4601      	moveq	r1, r0
  405956:	2000      	moveq	r0, #0
  405958:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
  40595c:	bf08      	it	eq
  40595e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
  405962:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
  405966:	fabc f28c 	clz	r2, ip
  40596a:	3a08      	subs	r2, #8
  40596c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
  405970:	db10      	blt.n	405994 <__aeabi_l2f+0x5c>
  405972:	fa01 fc02 	lsl.w	ip, r1, r2
  405976:	4463      	add	r3, ip
  405978:	fa00 fc02 	lsl.w	ip, r0, r2
  40597c:	f1c2 0220 	rsb	r2, r2, #32
  405980:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405984:	fa20 f202 	lsr.w	r2, r0, r2
  405988:	eb43 0002 	adc.w	r0, r3, r2
  40598c:	bf08      	it	eq
  40598e:	f020 0001 	biceq.w	r0, r0, #1
  405992:	4770      	bx	lr
  405994:	f102 0220 	add.w	r2, r2, #32
  405998:	fa01 fc02 	lsl.w	ip, r1, r2
  40599c:	f1c2 0220 	rsb	r2, r2, #32
  4059a0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
  4059a4:	fa21 f202 	lsr.w	r2, r1, r2
  4059a8:	eb43 0002 	adc.w	r0, r3, r2
  4059ac:	bf08      	it	eq
  4059ae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  4059b2:	4770      	bx	lr

004059b4 <__aeabi_fmul>:
  4059b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4059b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  4059bc:	bf1e      	ittt	ne
  4059be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  4059c2:	ea92 0f0c 	teqne	r2, ip
  4059c6:	ea93 0f0c 	teqne	r3, ip
  4059ca:	d06f      	beq.n	405aac <__aeabi_fmul+0xf8>
  4059cc:	441a      	add	r2, r3
  4059ce:	ea80 0c01 	eor.w	ip, r0, r1
  4059d2:	0240      	lsls	r0, r0, #9
  4059d4:	bf18      	it	ne
  4059d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
  4059da:	d01e      	beq.n	405a1a <__aeabi_fmul+0x66>
  4059dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  4059e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
  4059e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
  4059e8:	fba0 3101 	umull	r3, r1, r0, r1
  4059ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  4059f0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
  4059f4:	bf3e      	ittt	cc
  4059f6:	0049      	lslcc	r1, r1, #1
  4059f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
  4059fc:	005b      	lslcc	r3, r3, #1
  4059fe:	ea40 0001 	orr.w	r0, r0, r1
  405a02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
  405a06:	2afd      	cmp	r2, #253	; 0xfd
  405a08:	d81d      	bhi.n	405a46 <__aeabi_fmul+0x92>
  405a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
  405a0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405a12:	bf08      	it	eq
  405a14:	f020 0001 	biceq.w	r0, r0, #1
  405a18:	4770      	bx	lr
  405a1a:	f090 0f00 	teq	r0, #0
  405a1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405a22:	bf08      	it	eq
  405a24:	0249      	lsleq	r1, r1, #9
  405a26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405a2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
  405a2e:	3a7f      	subs	r2, #127	; 0x7f
  405a30:	bfc2      	ittt	gt
  405a32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405a36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405a3a:	4770      	bxgt	lr
  405a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405a40:	f04f 0300 	mov.w	r3, #0
  405a44:	3a01      	subs	r2, #1
  405a46:	dc5d      	bgt.n	405b04 <__aeabi_fmul+0x150>
  405a48:	f112 0f19 	cmn.w	r2, #25
  405a4c:	bfdc      	itt	le
  405a4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
  405a52:	4770      	bxle	lr
  405a54:	f1c2 0200 	rsb	r2, r2, #0
  405a58:	0041      	lsls	r1, r0, #1
  405a5a:	fa21 f102 	lsr.w	r1, r1, r2
  405a5e:	f1c2 0220 	rsb	r2, r2, #32
  405a62:	fa00 fc02 	lsl.w	ip, r0, r2
  405a66:	ea5f 0031 	movs.w	r0, r1, rrx
  405a6a:	f140 0000 	adc.w	r0, r0, #0
  405a6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
  405a72:	bf08      	it	eq
  405a74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
  405a78:	4770      	bx	lr
  405a7a:	f092 0f00 	teq	r2, #0
  405a7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405a82:	bf02      	ittt	eq
  405a84:	0040      	lsleq	r0, r0, #1
  405a86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405a8a:	3a01      	subeq	r2, #1
  405a8c:	d0f9      	beq.n	405a82 <__aeabi_fmul+0xce>
  405a8e:	ea40 000c 	orr.w	r0, r0, ip
  405a92:	f093 0f00 	teq	r3, #0
  405a96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405a9a:	bf02      	ittt	eq
  405a9c:	0049      	lsleq	r1, r1, #1
  405a9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405aa2:	3b01      	subeq	r3, #1
  405aa4:	d0f9      	beq.n	405a9a <__aeabi_fmul+0xe6>
  405aa6:	ea41 010c 	orr.w	r1, r1, ip
  405aaa:	e78f      	b.n	4059cc <__aeabi_fmul+0x18>
  405aac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405ab0:	ea92 0f0c 	teq	r2, ip
  405ab4:	bf18      	it	ne
  405ab6:	ea93 0f0c 	teqne	r3, ip
  405aba:	d00a      	beq.n	405ad2 <__aeabi_fmul+0x11e>
  405abc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405ac0:	bf18      	it	ne
  405ac2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405ac6:	d1d8      	bne.n	405a7a <__aeabi_fmul+0xc6>
  405ac8:	ea80 0001 	eor.w	r0, r0, r1
  405acc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405ad0:	4770      	bx	lr
  405ad2:	f090 0f00 	teq	r0, #0
  405ad6:	bf17      	itett	ne
  405ad8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
  405adc:	4608      	moveq	r0, r1
  405ade:	f091 0f00 	teqne	r1, #0
  405ae2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
  405ae6:	d014      	beq.n	405b12 <__aeabi_fmul+0x15e>
  405ae8:	ea92 0f0c 	teq	r2, ip
  405aec:	d101      	bne.n	405af2 <__aeabi_fmul+0x13e>
  405aee:	0242      	lsls	r2, r0, #9
  405af0:	d10f      	bne.n	405b12 <__aeabi_fmul+0x15e>
  405af2:	ea93 0f0c 	teq	r3, ip
  405af6:	d103      	bne.n	405b00 <__aeabi_fmul+0x14c>
  405af8:	024b      	lsls	r3, r1, #9
  405afa:	bf18      	it	ne
  405afc:	4608      	movne	r0, r1
  405afe:	d108      	bne.n	405b12 <__aeabi_fmul+0x15e>
  405b00:	ea80 0001 	eor.w	r0, r0, r1
  405b04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  405b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405b10:	4770      	bx	lr
  405b12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  405b16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
  405b1a:	4770      	bx	lr

00405b1c <__aeabi_fdiv>:
  405b1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405b20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
  405b24:	bf1e      	ittt	ne
  405b26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
  405b2a:	ea92 0f0c 	teqne	r2, ip
  405b2e:	ea93 0f0c 	teqne	r3, ip
  405b32:	d069      	beq.n	405c08 <__aeabi_fdiv+0xec>
  405b34:	eba2 0203 	sub.w	r2, r2, r3
  405b38:	ea80 0c01 	eor.w	ip, r0, r1
  405b3c:	0249      	lsls	r1, r1, #9
  405b3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
  405b42:	d037      	beq.n	405bb4 <__aeabi_fdiv+0x98>
  405b44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  405b48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
  405b4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
  405b50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
  405b54:	428b      	cmp	r3, r1
  405b56:	bf38      	it	cc
  405b58:	005b      	lslcc	r3, r3, #1
  405b5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
  405b5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  405b62:	428b      	cmp	r3, r1
  405b64:	bf24      	itt	cs
  405b66:	1a5b      	subcs	r3, r3, r1
  405b68:	ea40 000c 	orrcs.w	r0, r0, ip
  405b6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
  405b70:	bf24      	itt	cs
  405b72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
  405b76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  405b7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
  405b7e:	bf24      	itt	cs
  405b80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
  405b84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  405b88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
  405b8c:	bf24      	itt	cs
  405b8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
  405b92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  405b96:	011b      	lsls	r3, r3, #4
  405b98:	bf18      	it	ne
  405b9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
  405b9e:	d1e0      	bne.n	405b62 <__aeabi_fdiv+0x46>
  405ba0:	2afd      	cmp	r2, #253	; 0xfd
  405ba2:	f63f af50 	bhi.w	405a46 <__aeabi_fmul+0x92>
  405ba6:	428b      	cmp	r3, r1
  405ba8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
  405bac:	bf08      	it	eq
  405bae:	f020 0001 	biceq.w	r0, r0, #1
  405bb2:	4770      	bx	lr
  405bb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  405bb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
  405bbc:	327f      	adds	r2, #127	; 0x7f
  405bbe:	bfc2      	ittt	gt
  405bc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
  405bc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
  405bc8:	4770      	bxgt	lr
  405bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  405bce:	f04f 0300 	mov.w	r3, #0
  405bd2:	3a01      	subs	r2, #1
  405bd4:	e737      	b.n	405a46 <__aeabi_fmul+0x92>
  405bd6:	f092 0f00 	teq	r2, #0
  405bda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
  405bde:	bf02      	ittt	eq
  405be0:	0040      	lsleq	r0, r0, #1
  405be2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
  405be6:	3a01      	subeq	r2, #1
  405be8:	d0f9      	beq.n	405bde <__aeabi_fdiv+0xc2>
  405bea:	ea40 000c 	orr.w	r0, r0, ip
  405bee:	f093 0f00 	teq	r3, #0
  405bf2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  405bf6:	bf02      	ittt	eq
  405bf8:	0049      	lsleq	r1, r1, #1
  405bfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
  405bfe:	3b01      	subeq	r3, #1
  405c00:	d0f9      	beq.n	405bf6 <__aeabi_fdiv+0xda>
  405c02:	ea41 010c 	orr.w	r1, r1, ip
  405c06:	e795      	b.n	405b34 <__aeabi_fdiv+0x18>
  405c08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
  405c0c:	ea92 0f0c 	teq	r2, ip
  405c10:	d108      	bne.n	405c24 <__aeabi_fdiv+0x108>
  405c12:	0242      	lsls	r2, r0, #9
  405c14:	f47f af7d 	bne.w	405b12 <__aeabi_fmul+0x15e>
  405c18:	ea93 0f0c 	teq	r3, ip
  405c1c:	f47f af70 	bne.w	405b00 <__aeabi_fmul+0x14c>
  405c20:	4608      	mov	r0, r1
  405c22:	e776      	b.n	405b12 <__aeabi_fmul+0x15e>
  405c24:	ea93 0f0c 	teq	r3, ip
  405c28:	d104      	bne.n	405c34 <__aeabi_fdiv+0x118>
  405c2a:	024b      	lsls	r3, r1, #9
  405c2c:	f43f af4c 	beq.w	405ac8 <__aeabi_fmul+0x114>
  405c30:	4608      	mov	r0, r1
  405c32:	e76e      	b.n	405b12 <__aeabi_fmul+0x15e>
  405c34:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
  405c38:	bf18      	it	ne
  405c3a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
  405c3e:	d1ca      	bne.n	405bd6 <__aeabi_fdiv+0xba>
  405c40:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
  405c44:	f47f af5c 	bne.w	405b00 <__aeabi_fmul+0x14c>
  405c48:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
  405c4c:	f47f af3c 	bne.w	405ac8 <__aeabi_fmul+0x114>
  405c50:	e75f      	b.n	405b12 <__aeabi_fmul+0x15e>
  405c52:	bf00      	nop

00405c54 <__gesf2>:
  405c54:	f04f 3cff 	mov.w	ip, #4294967295
  405c58:	e006      	b.n	405c68 <__cmpsf2+0x4>
  405c5a:	bf00      	nop

00405c5c <__lesf2>:
  405c5c:	f04f 0c01 	mov.w	ip, #1
  405c60:	e002      	b.n	405c68 <__cmpsf2+0x4>
  405c62:	bf00      	nop

00405c64 <__cmpsf2>:
  405c64:	f04f 0c01 	mov.w	ip, #1
  405c68:	f84d cd04 	str.w	ip, [sp, #-4]!
  405c6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405c78:	bf18      	it	ne
  405c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
  405c7e:	d011      	beq.n	405ca4 <__cmpsf2+0x40>
  405c80:	b001      	add	sp, #4
  405c82:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
  405c86:	bf18      	it	ne
  405c88:	ea90 0f01 	teqne	r0, r1
  405c8c:	bf58      	it	pl
  405c8e:	ebb2 0003 	subspl.w	r0, r2, r3
  405c92:	bf88      	it	hi
  405c94:	17c8      	asrhi	r0, r1, #31
  405c96:	bf38      	it	cc
  405c98:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
  405c9c:	bf18      	it	ne
  405c9e:	f040 0001 	orrne.w	r0, r0, #1
  405ca2:	4770      	bx	lr
  405ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405ca8:	d102      	bne.n	405cb0 <__cmpsf2+0x4c>
  405caa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405cae:	d105      	bne.n	405cbc <__cmpsf2+0x58>
  405cb0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405cb4:	d1e4      	bne.n	405c80 <__cmpsf2+0x1c>
  405cb6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405cba:	d0e1      	beq.n	405c80 <__cmpsf2+0x1c>
  405cbc:	f85d 0b04 	ldr.w	r0, [sp], #4
  405cc0:	4770      	bx	lr
  405cc2:	bf00      	nop

00405cc4 <__aeabi_cfrcmple>:
  405cc4:	4684      	mov	ip, r0
  405cc6:	4608      	mov	r0, r1
  405cc8:	4661      	mov	r1, ip
  405cca:	e7ff      	b.n	405ccc <__aeabi_cfcmpeq>

00405ccc <__aeabi_cfcmpeq>:
  405ccc:	b50f      	push	{r0, r1, r2, r3, lr}
  405cce:	f7ff ffc9 	bl	405c64 <__cmpsf2>
  405cd2:	2800      	cmp	r0, #0
  405cd4:	bf48      	it	mi
  405cd6:	f110 0f00 	cmnmi.w	r0, #0
  405cda:	bd0f      	pop	{r0, r1, r2, r3, pc}

00405cdc <__aeabi_fcmpeq>:
  405cdc:	f84d ed08 	str.w	lr, [sp, #-8]!
  405ce0:	f7ff fff4 	bl	405ccc <__aeabi_cfcmpeq>
  405ce4:	bf0c      	ite	eq
  405ce6:	2001      	moveq	r0, #1
  405ce8:	2000      	movne	r0, #0
  405cea:	f85d fb08 	ldr.w	pc, [sp], #8
  405cee:	bf00      	nop

00405cf0 <__aeabi_fcmplt>:
  405cf0:	f84d ed08 	str.w	lr, [sp, #-8]!
  405cf4:	f7ff ffea 	bl	405ccc <__aeabi_cfcmpeq>
  405cf8:	bf34      	ite	cc
  405cfa:	2001      	movcc	r0, #1
  405cfc:	2000      	movcs	r0, #0
  405cfe:	f85d fb08 	ldr.w	pc, [sp], #8
  405d02:	bf00      	nop

00405d04 <__aeabi_fcmple>:
  405d04:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d08:	f7ff ffe0 	bl	405ccc <__aeabi_cfcmpeq>
  405d0c:	bf94      	ite	ls
  405d0e:	2001      	movls	r0, #1
  405d10:	2000      	movhi	r0, #0
  405d12:	f85d fb08 	ldr.w	pc, [sp], #8
  405d16:	bf00      	nop

00405d18 <__aeabi_fcmpge>:
  405d18:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d1c:	f7ff ffd2 	bl	405cc4 <__aeabi_cfrcmple>
  405d20:	bf94      	ite	ls
  405d22:	2001      	movls	r0, #1
  405d24:	2000      	movhi	r0, #0
  405d26:	f85d fb08 	ldr.w	pc, [sp], #8
  405d2a:	bf00      	nop

00405d2c <__aeabi_fcmpgt>:
  405d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
  405d30:	f7ff ffc8 	bl	405cc4 <__aeabi_cfrcmple>
  405d34:	bf34      	ite	cc
  405d36:	2001      	movcc	r0, #1
  405d38:	2000      	movcs	r0, #0
  405d3a:	f85d fb08 	ldr.w	pc, [sp], #8
  405d3e:	bf00      	nop

00405d40 <__aeabi_fcmpun>:
  405d40:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405d44:	ea4f 0341 	mov.w	r3, r1, lsl #1
  405d48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
  405d4c:	d102      	bne.n	405d54 <__aeabi_fcmpun+0x14>
  405d4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
  405d52:	d108      	bne.n	405d66 <__aeabi_fcmpun+0x26>
  405d54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
  405d58:	d102      	bne.n	405d60 <__aeabi_fcmpun+0x20>
  405d5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
  405d5e:	d102      	bne.n	405d66 <__aeabi_fcmpun+0x26>
  405d60:	f04f 0000 	mov.w	r0, #0
  405d64:	4770      	bx	lr
  405d66:	f04f 0001 	mov.w	r0, #1
  405d6a:	4770      	bx	lr

00405d6c <__aeabi_f2iz>:
  405d6c:	ea4f 0240 	mov.w	r2, r0, lsl #1
  405d70:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
  405d74:	d30f      	bcc.n	405d96 <__aeabi_f2iz+0x2a>
  405d76:	f04f 039e 	mov.w	r3, #158	; 0x9e
  405d7a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
  405d7e:	d90d      	bls.n	405d9c <__aeabi_f2iz+0x30>
  405d80:	ea4f 2300 	mov.w	r3, r0, lsl #8
  405d84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  405d88:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
  405d8c:	fa23 f002 	lsr.w	r0, r3, r2
  405d90:	bf18      	it	ne
  405d92:	4240      	negne	r0, r0
  405d94:	4770      	bx	lr
  405d96:	f04f 0000 	mov.w	r0, #0
  405d9a:	4770      	bx	lr
  405d9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
  405da0:	d101      	bne.n	405da6 <__aeabi_f2iz+0x3a>
  405da2:	0242      	lsls	r2, r0, #9
  405da4:	d105      	bne.n	405db2 <__aeabi_f2iz+0x46>
  405da6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
  405daa:	bf08      	it	eq
  405dac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  405db0:	4770      	bx	lr
  405db2:	f04f 0000 	mov.w	r0, #0
  405db6:	4770      	bx	lr

00405db8 <__errno>:
  405db8:	4b01      	ldr	r3, [pc, #4]	; (405dc0 <__errno+0x8>)
  405dba:	6818      	ldr	r0, [r3, #0]
  405dbc:	4770      	bx	lr
  405dbe:	bf00      	nop
  405dc0:	20400010 	.word	0x20400010

00405dc4 <__libc_init_array>:
  405dc4:	b570      	push	{r4, r5, r6, lr}
  405dc6:	4e0f      	ldr	r6, [pc, #60]	; (405e04 <__libc_init_array+0x40>)
  405dc8:	4d0f      	ldr	r5, [pc, #60]	; (405e08 <__libc_init_array+0x44>)
  405dca:	1b76      	subs	r6, r6, r5
  405dcc:	10b6      	asrs	r6, r6, #2
  405dce:	bf18      	it	ne
  405dd0:	2400      	movne	r4, #0
  405dd2:	d005      	beq.n	405de0 <__libc_init_array+0x1c>
  405dd4:	3401      	adds	r4, #1
  405dd6:	f855 3b04 	ldr.w	r3, [r5], #4
  405dda:	4798      	blx	r3
  405ddc:	42a6      	cmp	r6, r4
  405dde:	d1f9      	bne.n	405dd4 <__libc_init_array+0x10>
  405de0:	4e0a      	ldr	r6, [pc, #40]	; (405e0c <__libc_init_array+0x48>)
  405de2:	4d0b      	ldr	r5, [pc, #44]	; (405e10 <__libc_init_array+0x4c>)
  405de4:	1b76      	subs	r6, r6, r5
  405de6:	f003 fb01 	bl	4093ec <_init>
  405dea:	10b6      	asrs	r6, r6, #2
  405dec:	bf18      	it	ne
  405dee:	2400      	movne	r4, #0
  405df0:	d006      	beq.n	405e00 <__libc_init_array+0x3c>
  405df2:	3401      	adds	r4, #1
  405df4:	f855 3b04 	ldr.w	r3, [r5], #4
  405df8:	4798      	blx	r3
  405dfa:	42a6      	cmp	r6, r4
  405dfc:	d1f9      	bne.n	405df2 <__libc_init_array+0x2e>
  405dfe:	bd70      	pop	{r4, r5, r6, pc}
  405e00:	bd70      	pop	{r4, r5, r6, pc}
  405e02:	bf00      	nop
  405e04:	004093f8 	.word	0x004093f8
  405e08:	004093f8 	.word	0x004093f8
  405e0c:	00409400 	.word	0x00409400
  405e10:	004093f8 	.word	0x004093f8

00405e14 <iprintf>:
  405e14:	b40f      	push	{r0, r1, r2, r3}
  405e16:	b500      	push	{lr}
  405e18:	4907      	ldr	r1, [pc, #28]	; (405e38 <iprintf+0x24>)
  405e1a:	b083      	sub	sp, #12
  405e1c:	ab04      	add	r3, sp, #16
  405e1e:	6808      	ldr	r0, [r1, #0]
  405e20:	f853 2b04 	ldr.w	r2, [r3], #4
  405e24:	6881      	ldr	r1, [r0, #8]
  405e26:	9301      	str	r3, [sp, #4]
  405e28:	f000 fd58 	bl	4068dc <_vfiprintf_r>
  405e2c:	b003      	add	sp, #12
  405e2e:	f85d eb04 	ldr.w	lr, [sp], #4
  405e32:	b004      	add	sp, #16
  405e34:	4770      	bx	lr
  405e36:	bf00      	nop
  405e38:	20400010 	.word	0x20400010

00405e3c <malloc>:
  405e3c:	4b02      	ldr	r3, [pc, #8]	; (405e48 <malloc+0xc>)
  405e3e:	4601      	mov	r1, r0
  405e40:	6818      	ldr	r0, [r3, #0]
  405e42:	f000 b80b 	b.w	405e5c <_malloc_r>
  405e46:	bf00      	nop
  405e48:	20400010 	.word	0x20400010

00405e4c <free>:
  405e4c:	4b02      	ldr	r3, [pc, #8]	; (405e58 <free+0xc>)
  405e4e:	4601      	mov	r1, r0
  405e50:	6818      	ldr	r0, [r3, #0]
  405e52:	f001 be5f 	b.w	407b14 <_free_r>
  405e56:	bf00      	nop
  405e58:	20400010 	.word	0x20400010

00405e5c <_malloc_r>:
  405e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405e60:	f101 060b 	add.w	r6, r1, #11
  405e64:	2e16      	cmp	r6, #22
  405e66:	b083      	sub	sp, #12
  405e68:	4605      	mov	r5, r0
  405e6a:	f240 809e 	bls.w	405faa <_malloc_r+0x14e>
  405e6e:	f036 0607 	bics.w	r6, r6, #7
  405e72:	f100 80bd 	bmi.w	405ff0 <_malloc_r+0x194>
  405e76:	42b1      	cmp	r1, r6
  405e78:	f200 80ba 	bhi.w	405ff0 <_malloc_r+0x194>
  405e7c:	f000 fb86 	bl	40658c <__malloc_lock>
  405e80:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405e84:	f0c0 8293 	bcc.w	4063ae <_malloc_r+0x552>
  405e88:	0a73      	lsrs	r3, r6, #9
  405e8a:	f000 80b8 	beq.w	405ffe <_malloc_r+0x1a2>
  405e8e:	2b04      	cmp	r3, #4
  405e90:	f200 8179 	bhi.w	406186 <_malloc_r+0x32a>
  405e94:	09b3      	lsrs	r3, r6, #6
  405e96:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405e9a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405e9e:	00c3      	lsls	r3, r0, #3
  405ea0:	4fbf      	ldr	r7, [pc, #764]	; (4061a0 <_malloc_r+0x344>)
  405ea2:	443b      	add	r3, r7
  405ea4:	f1a3 0108 	sub.w	r1, r3, #8
  405ea8:	685c      	ldr	r4, [r3, #4]
  405eaa:	42a1      	cmp	r1, r4
  405eac:	d106      	bne.n	405ebc <_malloc_r+0x60>
  405eae:	e00c      	b.n	405eca <_malloc_r+0x6e>
  405eb0:	2a00      	cmp	r2, #0
  405eb2:	f280 80aa 	bge.w	40600a <_malloc_r+0x1ae>
  405eb6:	68e4      	ldr	r4, [r4, #12]
  405eb8:	42a1      	cmp	r1, r4
  405eba:	d006      	beq.n	405eca <_malloc_r+0x6e>
  405ebc:	6863      	ldr	r3, [r4, #4]
  405ebe:	f023 0303 	bic.w	r3, r3, #3
  405ec2:	1b9a      	subs	r2, r3, r6
  405ec4:	2a0f      	cmp	r2, #15
  405ec6:	ddf3      	ble.n	405eb0 <_malloc_r+0x54>
  405ec8:	4670      	mov	r0, lr
  405eca:	693c      	ldr	r4, [r7, #16]
  405ecc:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4061b4 <_malloc_r+0x358>
  405ed0:	4574      	cmp	r4, lr
  405ed2:	f000 81ab 	beq.w	40622c <_malloc_r+0x3d0>
  405ed6:	6863      	ldr	r3, [r4, #4]
  405ed8:	f023 0303 	bic.w	r3, r3, #3
  405edc:	1b9a      	subs	r2, r3, r6
  405ede:	2a0f      	cmp	r2, #15
  405ee0:	f300 8190 	bgt.w	406204 <_malloc_r+0x3a8>
  405ee4:	2a00      	cmp	r2, #0
  405ee6:	f8c7 e014 	str.w	lr, [r7, #20]
  405eea:	f8c7 e010 	str.w	lr, [r7, #16]
  405eee:	f280 809d 	bge.w	40602c <_malloc_r+0x1d0>
  405ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405ef6:	f080 8161 	bcs.w	4061bc <_malloc_r+0x360>
  405efa:	08db      	lsrs	r3, r3, #3
  405efc:	f103 0c01 	add.w	ip, r3, #1
  405f00:	1099      	asrs	r1, r3, #2
  405f02:	687a      	ldr	r2, [r7, #4]
  405f04:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405f08:	f8c4 8008 	str.w	r8, [r4, #8]
  405f0c:	2301      	movs	r3, #1
  405f0e:	408b      	lsls	r3, r1
  405f10:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405f14:	4313      	orrs	r3, r2
  405f16:	3908      	subs	r1, #8
  405f18:	60e1      	str	r1, [r4, #12]
  405f1a:	607b      	str	r3, [r7, #4]
  405f1c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405f20:	f8c8 400c 	str.w	r4, [r8, #12]
  405f24:	1082      	asrs	r2, r0, #2
  405f26:	2401      	movs	r4, #1
  405f28:	4094      	lsls	r4, r2
  405f2a:	429c      	cmp	r4, r3
  405f2c:	f200 808b 	bhi.w	406046 <_malloc_r+0x1ea>
  405f30:	421c      	tst	r4, r3
  405f32:	d106      	bne.n	405f42 <_malloc_r+0xe6>
  405f34:	f020 0003 	bic.w	r0, r0, #3
  405f38:	0064      	lsls	r4, r4, #1
  405f3a:	421c      	tst	r4, r3
  405f3c:	f100 0004 	add.w	r0, r0, #4
  405f40:	d0fa      	beq.n	405f38 <_malloc_r+0xdc>
  405f42:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405f46:	46cc      	mov	ip, r9
  405f48:	4680      	mov	r8, r0
  405f4a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405f4e:	459c      	cmp	ip, r3
  405f50:	d107      	bne.n	405f62 <_malloc_r+0x106>
  405f52:	e16d      	b.n	406230 <_malloc_r+0x3d4>
  405f54:	2a00      	cmp	r2, #0
  405f56:	f280 817b 	bge.w	406250 <_malloc_r+0x3f4>
  405f5a:	68db      	ldr	r3, [r3, #12]
  405f5c:	459c      	cmp	ip, r3
  405f5e:	f000 8167 	beq.w	406230 <_malloc_r+0x3d4>
  405f62:	6859      	ldr	r1, [r3, #4]
  405f64:	f021 0103 	bic.w	r1, r1, #3
  405f68:	1b8a      	subs	r2, r1, r6
  405f6a:	2a0f      	cmp	r2, #15
  405f6c:	ddf2      	ble.n	405f54 <_malloc_r+0xf8>
  405f6e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405f72:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405f76:	9300      	str	r3, [sp, #0]
  405f78:	199c      	adds	r4, r3, r6
  405f7a:	4628      	mov	r0, r5
  405f7c:	f046 0601 	orr.w	r6, r6, #1
  405f80:	f042 0501 	orr.w	r5, r2, #1
  405f84:	605e      	str	r6, [r3, #4]
  405f86:	f8c8 c00c 	str.w	ip, [r8, #12]
  405f8a:	f8cc 8008 	str.w	r8, [ip, #8]
  405f8e:	617c      	str	r4, [r7, #20]
  405f90:	613c      	str	r4, [r7, #16]
  405f92:	f8c4 e00c 	str.w	lr, [r4, #12]
  405f96:	f8c4 e008 	str.w	lr, [r4, #8]
  405f9a:	6065      	str	r5, [r4, #4]
  405f9c:	505a      	str	r2, [r3, r1]
  405f9e:	f000 fafb 	bl	406598 <__malloc_unlock>
  405fa2:	9b00      	ldr	r3, [sp, #0]
  405fa4:	f103 0408 	add.w	r4, r3, #8
  405fa8:	e01e      	b.n	405fe8 <_malloc_r+0x18c>
  405faa:	2910      	cmp	r1, #16
  405fac:	d820      	bhi.n	405ff0 <_malloc_r+0x194>
  405fae:	f000 faed 	bl	40658c <__malloc_lock>
  405fb2:	2610      	movs	r6, #16
  405fb4:	2318      	movs	r3, #24
  405fb6:	2002      	movs	r0, #2
  405fb8:	4f79      	ldr	r7, [pc, #484]	; (4061a0 <_malloc_r+0x344>)
  405fba:	443b      	add	r3, r7
  405fbc:	f1a3 0208 	sub.w	r2, r3, #8
  405fc0:	685c      	ldr	r4, [r3, #4]
  405fc2:	4294      	cmp	r4, r2
  405fc4:	f000 813d 	beq.w	406242 <_malloc_r+0x3e6>
  405fc8:	6863      	ldr	r3, [r4, #4]
  405fca:	68e1      	ldr	r1, [r4, #12]
  405fcc:	68a6      	ldr	r6, [r4, #8]
  405fce:	f023 0303 	bic.w	r3, r3, #3
  405fd2:	4423      	add	r3, r4
  405fd4:	4628      	mov	r0, r5
  405fd6:	685a      	ldr	r2, [r3, #4]
  405fd8:	60f1      	str	r1, [r6, #12]
  405fda:	f042 0201 	orr.w	r2, r2, #1
  405fde:	608e      	str	r6, [r1, #8]
  405fe0:	605a      	str	r2, [r3, #4]
  405fe2:	f000 fad9 	bl	406598 <__malloc_unlock>
  405fe6:	3408      	adds	r4, #8
  405fe8:	4620      	mov	r0, r4
  405fea:	b003      	add	sp, #12
  405fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ff0:	2400      	movs	r4, #0
  405ff2:	230c      	movs	r3, #12
  405ff4:	4620      	mov	r0, r4
  405ff6:	602b      	str	r3, [r5, #0]
  405ff8:	b003      	add	sp, #12
  405ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405ffe:	2040      	movs	r0, #64	; 0x40
  406000:	f44f 7300 	mov.w	r3, #512	; 0x200
  406004:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  406008:	e74a      	b.n	405ea0 <_malloc_r+0x44>
  40600a:	4423      	add	r3, r4
  40600c:	68e1      	ldr	r1, [r4, #12]
  40600e:	685a      	ldr	r2, [r3, #4]
  406010:	68a6      	ldr	r6, [r4, #8]
  406012:	f042 0201 	orr.w	r2, r2, #1
  406016:	60f1      	str	r1, [r6, #12]
  406018:	4628      	mov	r0, r5
  40601a:	608e      	str	r6, [r1, #8]
  40601c:	605a      	str	r2, [r3, #4]
  40601e:	f000 fabb 	bl	406598 <__malloc_unlock>
  406022:	3408      	adds	r4, #8
  406024:	4620      	mov	r0, r4
  406026:	b003      	add	sp, #12
  406028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40602c:	4423      	add	r3, r4
  40602e:	4628      	mov	r0, r5
  406030:	685a      	ldr	r2, [r3, #4]
  406032:	f042 0201 	orr.w	r2, r2, #1
  406036:	605a      	str	r2, [r3, #4]
  406038:	f000 faae 	bl	406598 <__malloc_unlock>
  40603c:	3408      	adds	r4, #8
  40603e:	4620      	mov	r0, r4
  406040:	b003      	add	sp, #12
  406042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406046:	68bc      	ldr	r4, [r7, #8]
  406048:	6863      	ldr	r3, [r4, #4]
  40604a:	f023 0803 	bic.w	r8, r3, #3
  40604e:	45b0      	cmp	r8, r6
  406050:	d304      	bcc.n	40605c <_malloc_r+0x200>
  406052:	eba8 0306 	sub.w	r3, r8, r6
  406056:	2b0f      	cmp	r3, #15
  406058:	f300 8085 	bgt.w	406166 <_malloc_r+0x30a>
  40605c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4061b8 <_malloc_r+0x35c>
  406060:	4b50      	ldr	r3, [pc, #320]	; (4061a4 <_malloc_r+0x348>)
  406062:	f8d9 2000 	ldr.w	r2, [r9]
  406066:	681b      	ldr	r3, [r3, #0]
  406068:	3201      	adds	r2, #1
  40606a:	4433      	add	r3, r6
  40606c:	eb04 0a08 	add.w	sl, r4, r8
  406070:	f000 8155 	beq.w	40631e <_malloc_r+0x4c2>
  406074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  406078:	330f      	adds	r3, #15
  40607a:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40607e:	f02b 0b0f 	bic.w	fp, fp, #15
  406082:	4659      	mov	r1, fp
  406084:	4628      	mov	r0, r5
  406086:	f000 fa8d 	bl	4065a4 <_sbrk_r>
  40608a:	1c41      	adds	r1, r0, #1
  40608c:	4602      	mov	r2, r0
  40608e:	f000 80fc 	beq.w	40628a <_malloc_r+0x42e>
  406092:	4582      	cmp	sl, r0
  406094:	f200 80f7 	bhi.w	406286 <_malloc_r+0x42a>
  406098:	4b43      	ldr	r3, [pc, #268]	; (4061a8 <_malloc_r+0x34c>)
  40609a:	6819      	ldr	r1, [r3, #0]
  40609c:	4459      	add	r1, fp
  40609e:	6019      	str	r1, [r3, #0]
  4060a0:	f000 814d 	beq.w	40633e <_malloc_r+0x4e2>
  4060a4:	f8d9 0000 	ldr.w	r0, [r9]
  4060a8:	3001      	adds	r0, #1
  4060aa:	bf1b      	ittet	ne
  4060ac:	eba2 0a0a 	subne.w	sl, r2, sl
  4060b0:	4451      	addne	r1, sl
  4060b2:	f8c9 2000 	streq.w	r2, [r9]
  4060b6:	6019      	strne	r1, [r3, #0]
  4060b8:	f012 0107 	ands.w	r1, r2, #7
  4060bc:	f000 8115 	beq.w	4062ea <_malloc_r+0x48e>
  4060c0:	f1c1 0008 	rsb	r0, r1, #8
  4060c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4060c8:	4402      	add	r2, r0
  4060ca:	3108      	adds	r1, #8
  4060cc:	eb02 090b 	add.w	r9, r2, fp
  4060d0:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4060d4:	eba1 0909 	sub.w	r9, r1, r9
  4060d8:	4649      	mov	r1, r9
  4060da:	4628      	mov	r0, r5
  4060dc:	9301      	str	r3, [sp, #4]
  4060de:	9200      	str	r2, [sp, #0]
  4060e0:	f000 fa60 	bl	4065a4 <_sbrk_r>
  4060e4:	1c43      	adds	r3, r0, #1
  4060e6:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4060ea:	f000 8143 	beq.w	406374 <_malloc_r+0x518>
  4060ee:	1a80      	subs	r0, r0, r2
  4060f0:	4448      	add	r0, r9
  4060f2:	f040 0001 	orr.w	r0, r0, #1
  4060f6:	6819      	ldr	r1, [r3, #0]
  4060f8:	60ba      	str	r2, [r7, #8]
  4060fa:	4449      	add	r1, r9
  4060fc:	42bc      	cmp	r4, r7
  4060fe:	6050      	str	r0, [r2, #4]
  406100:	6019      	str	r1, [r3, #0]
  406102:	d017      	beq.n	406134 <_malloc_r+0x2d8>
  406104:	f1b8 0f0f 	cmp.w	r8, #15
  406108:	f240 80fb 	bls.w	406302 <_malloc_r+0x4a6>
  40610c:	6860      	ldr	r0, [r4, #4]
  40610e:	f1a8 020c 	sub.w	r2, r8, #12
  406112:	f022 0207 	bic.w	r2, r2, #7
  406116:	eb04 0e02 	add.w	lr, r4, r2
  40611a:	f000 0001 	and.w	r0, r0, #1
  40611e:	f04f 0c05 	mov.w	ip, #5
  406122:	4310      	orrs	r0, r2
  406124:	2a0f      	cmp	r2, #15
  406126:	6060      	str	r0, [r4, #4]
  406128:	f8ce c004 	str.w	ip, [lr, #4]
  40612c:	f8ce c008 	str.w	ip, [lr, #8]
  406130:	f200 8117 	bhi.w	406362 <_malloc_r+0x506>
  406134:	4b1d      	ldr	r3, [pc, #116]	; (4061ac <_malloc_r+0x350>)
  406136:	68bc      	ldr	r4, [r7, #8]
  406138:	681a      	ldr	r2, [r3, #0]
  40613a:	4291      	cmp	r1, r2
  40613c:	bf88      	it	hi
  40613e:	6019      	strhi	r1, [r3, #0]
  406140:	4b1b      	ldr	r3, [pc, #108]	; (4061b0 <_malloc_r+0x354>)
  406142:	681a      	ldr	r2, [r3, #0]
  406144:	4291      	cmp	r1, r2
  406146:	6862      	ldr	r2, [r4, #4]
  406148:	bf88      	it	hi
  40614a:	6019      	strhi	r1, [r3, #0]
  40614c:	f022 0203 	bic.w	r2, r2, #3
  406150:	4296      	cmp	r6, r2
  406152:	eba2 0306 	sub.w	r3, r2, r6
  406156:	d801      	bhi.n	40615c <_malloc_r+0x300>
  406158:	2b0f      	cmp	r3, #15
  40615a:	dc04      	bgt.n	406166 <_malloc_r+0x30a>
  40615c:	4628      	mov	r0, r5
  40615e:	f000 fa1b 	bl	406598 <__malloc_unlock>
  406162:	2400      	movs	r4, #0
  406164:	e740      	b.n	405fe8 <_malloc_r+0x18c>
  406166:	19a2      	adds	r2, r4, r6
  406168:	f043 0301 	orr.w	r3, r3, #1
  40616c:	f046 0601 	orr.w	r6, r6, #1
  406170:	6066      	str	r6, [r4, #4]
  406172:	4628      	mov	r0, r5
  406174:	60ba      	str	r2, [r7, #8]
  406176:	6053      	str	r3, [r2, #4]
  406178:	f000 fa0e 	bl	406598 <__malloc_unlock>
  40617c:	3408      	adds	r4, #8
  40617e:	4620      	mov	r0, r4
  406180:	b003      	add	sp, #12
  406182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406186:	2b14      	cmp	r3, #20
  406188:	d971      	bls.n	40626e <_malloc_r+0x412>
  40618a:	2b54      	cmp	r3, #84	; 0x54
  40618c:	f200 80a3 	bhi.w	4062d6 <_malloc_r+0x47a>
  406190:	0b33      	lsrs	r3, r6, #12
  406192:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  406196:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40619a:	00c3      	lsls	r3, r0, #3
  40619c:	e680      	b.n	405ea0 <_malloc_r+0x44>
  40619e:	bf00      	nop
  4061a0:	20400440 	.word	0x20400440
  4061a4:	20400bcc 	.word	0x20400bcc
  4061a8:	20400b9c 	.word	0x20400b9c
  4061ac:	20400bc4 	.word	0x20400bc4
  4061b0:	20400bc8 	.word	0x20400bc8
  4061b4:	20400448 	.word	0x20400448
  4061b8:	20400848 	.word	0x20400848
  4061bc:	0a5a      	lsrs	r2, r3, #9
  4061be:	2a04      	cmp	r2, #4
  4061c0:	d95b      	bls.n	40627a <_malloc_r+0x41e>
  4061c2:	2a14      	cmp	r2, #20
  4061c4:	f200 80ae 	bhi.w	406324 <_malloc_r+0x4c8>
  4061c8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4061cc:	00c9      	lsls	r1, r1, #3
  4061ce:	325b      	adds	r2, #91	; 0x5b
  4061d0:	eb07 0c01 	add.w	ip, r7, r1
  4061d4:	5879      	ldr	r1, [r7, r1]
  4061d6:	f1ac 0c08 	sub.w	ip, ip, #8
  4061da:	458c      	cmp	ip, r1
  4061dc:	f000 8088 	beq.w	4062f0 <_malloc_r+0x494>
  4061e0:	684a      	ldr	r2, [r1, #4]
  4061e2:	f022 0203 	bic.w	r2, r2, #3
  4061e6:	4293      	cmp	r3, r2
  4061e8:	d273      	bcs.n	4062d2 <_malloc_r+0x476>
  4061ea:	6889      	ldr	r1, [r1, #8]
  4061ec:	458c      	cmp	ip, r1
  4061ee:	d1f7      	bne.n	4061e0 <_malloc_r+0x384>
  4061f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4061f4:	687b      	ldr	r3, [r7, #4]
  4061f6:	60e2      	str	r2, [r4, #12]
  4061f8:	f8c4 c008 	str.w	ip, [r4, #8]
  4061fc:	6094      	str	r4, [r2, #8]
  4061fe:	f8cc 400c 	str.w	r4, [ip, #12]
  406202:	e68f      	b.n	405f24 <_malloc_r+0xc8>
  406204:	19a1      	adds	r1, r4, r6
  406206:	f046 0c01 	orr.w	ip, r6, #1
  40620a:	f042 0601 	orr.w	r6, r2, #1
  40620e:	f8c4 c004 	str.w	ip, [r4, #4]
  406212:	4628      	mov	r0, r5
  406214:	6179      	str	r1, [r7, #20]
  406216:	6139      	str	r1, [r7, #16]
  406218:	f8c1 e00c 	str.w	lr, [r1, #12]
  40621c:	f8c1 e008 	str.w	lr, [r1, #8]
  406220:	604e      	str	r6, [r1, #4]
  406222:	50e2      	str	r2, [r4, r3]
  406224:	f000 f9b8 	bl	406598 <__malloc_unlock>
  406228:	3408      	adds	r4, #8
  40622a:	e6dd      	b.n	405fe8 <_malloc_r+0x18c>
  40622c:	687b      	ldr	r3, [r7, #4]
  40622e:	e679      	b.n	405f24 <_malloc_r+0xc8>
  406230:	f108 0801 	add.w	r8, r8, #1
  406234:	f018 0f03 	tst.w	r8, #3
  406238:	f10c 0c08 	add.w	ip, ip, #8
  40623c:	f47f ae85 	bne.w	405f4a <_malloc_r+0xee>
  406240:	e02d      	b.n	40629e <_malloc_r+0x442>
  406242:	68dc      	ldr	r4, [r3, #12]
  406244:	42a3      	cmp	r3, r4
  406246:	bf08      	it	eq
  406248:	3002      	addeq	r0, #2
  40624a:	f43f ae3e 	beq.w	405eca <_malloc_r+0x6e>
  40624e:	e6bb      	b.n	405fc8 <_malloc_r+0x16c>
  406250:	4419      	add	r1, r3
  406252:	461c      	mov	r4, r3
  406254:	684a      	ldr	r2, [r1, #4]
  406256:	68db      	ldr	r3, [r3, #12]
  406258:	f854 6f08 	ldr.w	r6, [r4, #8]!
  40625c:	f042 0201 	orr.w	r2, r2, #1
  406260:	604a      	str	r2, [r1, #4]
  406262:	4628      	mov	r0, r5
  406264:	60f3      	str	r3, [r6, #12]
  406266:	609e      	str	r6, [r3, #8]
  406268:	f000 f996 	bl	406598 <__malloc_unlock>
  40626c:	e6bc      	b.n	405fe8 <_malloc_r+0x18c>
  40626e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  406272:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  406276:	00c3      	lsls	r3, r0, #3
  406278:	e612      	b.n	405ea0 <_malloc_r+0x44>
  40627a:	099a      	lsrs	r2, r3, #6
  40627c:	f102 0139 	add.w	r1, r2, #57	; 0x39
  406280:	00c9      	lsls	r1, r1, #3
  406282:	3238      	adds	r2, #56	; 0x38
  406284:	e7a4      	b.n	4061d0 <_malloc_r+0x374>
  406286:	42bc      	cmp	r4, r7
  406288:	d054      	beq.n	406334 <_malloc_r+0x4d8>
  40628a:	68bc      	ldr	r4, [r7, #8]
  40628c:	6862      	ldr	r2, [r4, #4]
  40628e:	f022 0203 	bic.w	r2, r2, #3
  406292:	e75d      	b.n	406150 <_malloc_r+0x2f4>
  406294:	f859 3908 	ldr.w	r3, [r9], #-8
  406298:	4599      	cmp	r9, r3
  40629a:	f040 8086 	bne.w	4063aa <_malloc_r+0x54e>
  40629e:	f010 0f03 	tst.w	r0, #3
  4062a2:	f100 30ff 	add.w	r0, r0, #4294967295
  4062a6:	d1f5      	bne.n	406294 <_malloc_r+0x438>
  4062a8:	687b      	ldr	r3, [r7, #4]
  4062aa:	ea23 0304 	bic.w	r3, r3, r4
  4062ae:	607b      	str	r3, [r7, #4]
  4062b0:	0064      	lsls	r4, r4, #1
  4062b2:	429c      	cmp	r4, r3
  4062b4:	f63f aec7 	bhi.w	406046 <_malloc_r+0x1ea>
  4062b8:	2c00      	cmp	r4, #0
  4062ba:	f43f aec4 	beq.w	406046 <_malloc_r+0x1ea>
  4062be:	421c      	tst	r4, r3
  4062c0:	4640      	mov	r0, r8
  4062c2:	f47f ae3e 	bne.w	405f42 <_malloc_r+0xe6>
  4062c6:	0064      	lsls	r4, r4, #1
  4062c8:	421c      	tst	r4, r3
  4062ca:	f100 0004 	add.w	r0, r0, #4
  4062ce:	d0fa      	beq.n	4062c6 <_malloc_r+0x46a>
  4062d0:	e637      	b.n	405f42 <_malloc_r+0xe6>
  4062d2:	468c      	mov	ip, r1
  4062d4:	e78c      	b.n	4061f0 <_malloc_r+0x394>
  4062d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4062da:	d815      	bhi.n	406308 <_malloc_r+0x4ac>
  4062dc:	0bf3      	lsrs	r3, r6, #15
  4062de:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4062e2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4062e6:	00c3      	lsls	r3, r0, #3
  4062e8:	e5da      	b.n	405ea0 <_malloc_r+0x44>
  4062ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4062ee:	e6ed      	b.n	4060cc <_malloc_r+0x270>
  4062f0:	687b      	ldr	r3, [r7, #4]
  4062f2:	1092      	asrs	r2, r2, #2
  4062f4:	2101      	movs	r1, #1
  4062f6:	fa01 f202 	lsl.w	r2, r1, r2
  4062fa:	4313      	orrs	r3, r2
  4062fc:	607b      	str	r3, [r7, #4]
  4062fe:	4662      	mov	r2, ip
  406300:	e779      	b.n	4061f6 <_malloc_r+0x39a>
  406302:	2301      	movs	r3, #1
  406304:	6053      	str	r3, [r2, #4]
  406306:	e729      	b.n	40615c <_malloc_r+0x300>
  406308:	f240 5254 	movw	r2, #1364	; 0x554
  40630c:	4293      	cmp	r3, r2
  40630e:	d822      	bhi.n	406356 <_malloc_r+0x4fa>
  406310:	0cb3      	lsrs	r3, r6, #18
  406312:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  406316:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40631a:	00c3      	lsls	r3, r0, #3
  40631c:	e5c0      	b.n	405ea0 <_malloc_r+0x44>
  40631e:	f103 0b10 	add.w	fp, r3, #16
  406322:	e6ae      	b.n	406082 <_malloc_r+0x226>
  406324:	2a54      	cmp	r2, #84	; 0x54
  406326:	d829      	bhi.n	40637c <_malloc_r+0x520>
  406328:	0b1a      	lsrs	r2, r3, #12
  40632a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40632e:	00c9      	lsls	r1, r1, #3
  406330:	326e      	adds	r2, #110	; 0x6e
  406332:	e74d      	b.n	4061d0 <_malloc_r+0x374>
  406334:	4b20      	ldr	r3, [pc, #128]	; (4063b8 <_malloc_r+0x55c>)
  406336:	6819      	ldr	r1, [r3, #0]
  406338:	4459      	add	r1, fp
  40633a:	6019      	str	r1, [r3, #0]
  40633c:	e6b2      	b.n	4060a4 <_malloc_r+0x248>
  40633e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  406342:	2800      	cmp	r0, #0
  406344:	f47f aeae 	bne.w	4060a4 <_malloc_r+0x248>
  406348:	eb08 030b 	add.w	r3, r8, fp
  40634c:	68ba      	ldr	r2, [r7, #8]
  40634e:	f043 0301 	orr.w	r3, r3, #1
  406352:	6053      	str	r3, [r2, #4]
  406354:	e6ee      	b.n	406134 <_malloc_r+0x2d8>
  406356:	207f      	movs	r0, #127	; 0x7f
  406358:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  40635c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  406360:	e59e      	b.n	405ea0 <_malloc_r+0x44>
  406362:	f104 0108 	add.w	r1, r4, #8
  406366:	4628      	mov	r0, r5
  406368:	9300      	str	r3, [sp, #0]
  40636a:	f001 fbd3 	bl	407b14 <_free_r>
  40636e:	9b00      	ldr	r3, [sp, #0]
  406370:	6819      	ldr	r1, [r3, #0]
  406372:	e6df      	b.n	406134 <_malloc_r+0x2d8>
  406374:	2001      	movs	r0, #1
  406376:	f04f 0900 	mov.w	r9, #0
  40637a:	e6bc      	b.n	4060f6 <_malloc_r+0x29a>
  40637c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406380:	d805      	bhi.n	40638e <_malloc_r+0x532>
  406382:	0bda      	lsrs	r2, r3, #15
  406384:	f102 0178 	add.w	r1, r2, #120	; 0x78
  406388:	00c9      	lsls	r1, r1, #3
  40638a:	3277      	adds	r2, #119	; 0x77
  40638c:	e720      	b.n	4061d0 <_malloc_r+0x374>
  40638e:	f240 5154 	movw	r1, #1364	; 0x554
  406392:	428a      	cmp	r2, r1
  406394:	d805      	bhi.n	4063a2 <_malloc_r+0x546>
  406396:	0c9a      	lsrs	r2, r3, #18
  406398:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40639c:	00c9      	lsls	r1, r1, #3
  40639e:	327c      	adds	r2, #124	; 0x7c
  4063a0:	e716      	b.n	4061d0 <_malloc_r+0x374>
  4063a2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4063a6:	227e      	movs	r2, #126	; 0x7e
  4063a8:	e712      	b.n	4061d0 <_malloc_r+0x374>
  4063aa:	687b      	ldr	r3, [r7, #4]
  4063ac:	e780      	b.n	4062b0 <_malloc_r+0x454>
  4063ae:	08f0      	lsrs	r0, r6, #3
  4063b0:	f106 0308 	add.w	r3, r6, #8
  4063b4:	e600      	b.n	405fb8 <_malloc_r+0x15c>
  4063b6:	bf00      	nop
  4063b8:	20400b9c 	.word	0x20400b9c

004063bc <memcpy>:
  4063bc:	4684      	mov	ip, r0
  4063be:	ea41 0300 	orr.w	r3, r1, r0
  4063c2:	f013 0303 	ands.w	r3, r3, #3
  4063c6:	d16d      	bne.n	4064a4 <memcpy+0xe8>
  4063c8:	3a40      	subs	r2, #64	; 0x40
  4063ca:	d341      	bcc.n	406450 <memcpy+0x94>
  4063cc:	f851 3b04 	ldr.w	r3, [r1], #4
  4063d0:	f840 3b04 	str.w	r3, [r0], #4
  4063d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063d8:	f840 3b04 	str.w	r3, [r0], #4
  4063dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4063e0:	f840 3b04 	str.w	r3, [r0], #4
  4063e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063e8:	f840 3b04 	str.w	r3, [r0], #4
  4063ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f0:	f840 3b04 	str.w	r3, [r0], #4
  4063f4:	f851 3b04 	ldr.w	r3, [r1], #4
  4063f8:	f840 3b04 	str.w	r3, [r0], #4
  4063fc:	f851 3b04 	ldr.w	r3, [r1], #4
  406400:	f840 3b04 	str.w	r3, [r0], #4
  406404:	f851 3b04 	ldr.w	r3, [r1], #4
  406408:	f840 3b04 	str.w	r3, [r0], #4
  40640c:	f851 3b04 	ldr.w	r3, [r1], #4
  406410:	f840 3b04 	str.w	r3, [r0], #4
  406414:	f851 3b04 	ldr.w	r3, [r1], #4
  406418:	f840 3b04 	str.w	r3, [r0], #4
  40641c:	f851 3b04 	ldr.w	r3, [r1], #4
  406420:	f840 3b04 	str.w	r3, [r0], #4
  406424:	f851 3b04 	ldr.w	r3, [r1], #4
  406428:	f840 3b04 	str.w	r3, [r0], #4
  40642c:	f851 3b04 	ldr.w	r3, [r1], #4
  406430:	f840 3b04 	str.w	r3, [r0], #4
  406434:	f851 3b04 	ldr.w	r3, [r1], #4
  406438:	f840 3b04 	str.w	r3, [r0], #4
  40643c:	f851 3b04 	ldr.w	r3, [r1], #4
  406440:	f840 3b04 	str.w	r3, [r0], #4
  406444:	f851 3b04 	ldr.w	r3, [r1], #4
  406448:	f840 3b04 	str.w	r3, [r0], #4
  40644c:	3a40      	subs	r2, #64	; 0x40
  40644e:	d2bd      	bcs.n	4063cc <memcpy+0x10>
  406450:	3230      	adds	r2, #48	; 0x30
  406452:	d311      	bcc.n	406478 <memcpy+0xbc>
  406454:	f851 3b04 	ldr.w	r3, [r1], #4
  406458:	f840 3b04 	str.w	r3, [r0], #4
  40645c:	f851 3b04 	ldr.w	r3, [r1], #4
  406460:	f840 3b04 	str.w	r3, [r0], #4
  406464:	f851 3b04 	ldr.w	r3, [r1], #4
  406468:	f840 3b04 	str.w	r3, [r0], #4
  40646c:	f851 3b04 	ldr.w	r3, [r1], #4
  406470:	f840 3b04 	str.w	r3, [r0], #4
  406474:	3a10      	subs	r2, #16
  406476:	d2ed      	bcs.n	406454 <memcpy+0x98>
  406478:	320c      	adds	r2, #12
  40647a:	d305      	bcc.n	406488 <memcpy+0xcc>
  40647c:	f851 3b04 	ldr.w	r3, [r1], #4
  406480:	f840 3b04 	str.w	r3, [r0], #4
  406484:	3a04      	subs	r2, #4
  406486:	d2f9      	bcs.n	40647c <memcpy+0xc0>
  406488:	3204      	adds	r2, #4
  40648a:	d008      	beq.n	40649e <memcpy+0xe2>
  40648c:	07d2      	lsls	r2, r2, #31
  40648e:	bf1c      	itt	ne
  406490:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406494:	f800 3b01 	strbne.w	r3, [r0], #1
  406498:	d301      	bcc.n	40649e <memcpy+0xe2>
  40649a:	880b      	ldrh	r3, [r1, #0]
  40649c:	8003      	strh	r3, [r0, #0]
  40649e:	4660      	mov	r0, ip
  4064a0:	4770      	bx	lr
  4064a2:	bf00      	nop
  4064a4:	2a08      	cmp	r2, #8
  4064a6:	d313      	bcc.n	4064d0 <memcpy+0x114>
  4064a8:	078b      	lsls	r3, r1, #30
  4064aa:	d08d      	beq.n	4063c8 <memcpy+0xc>
  4064ac:	f010 0303 	ands.w	r3, r0, #3
  4064b0:	d08a      	beq.n	4063c8 <memcpy+0xc>
  4064b2:	f1c3 0304 	rsb	r3, r3, #4
  4064b6:	1ad2      	subs	r2, r2, r3
  4064b8:	07db      	lsls	r3, r3, #31
  4064ba:	bf1c      	itt	ne
  4064bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4064c0:	f800 3b01 	strbne.w	r3, [r0], #1
  4064c4:	d380      	bcc.n	4063c8 <memcpy+0xc>
  4064c6:	f831 3b02 	ldrh.w	r3, [r1], #2
  4064ca:	f820 3b02 	strh.w	r3, [r0], #2
  4064ce:	e77b      	b.n	4063c8 <memcpy+0xc>
  4064d0:	3a04      	subs	r2, #4
  4064d2:	d3d9      	bcc.n	406488 <memcpy+0xcc>
  4064d4:	3a01      	subs	r2, #1
  4064d6:	f811 3b01 	ldrb.w	r3, [r1], #1
  4064da:	f800 3b01 	strb.w	r3, [r0], #1
  4064de:	d2f9      	bcs.n	4064d4 <memcpy+0x118>
  4064e0:	780b      	ldrb	r3, [r1, #0]
  4064e2:	7003      	strb	r3, [r0, #0]
  4064e4:	784b      	ldrb	r3, [r1, #1]
  4064e6:	7043      	strb	r3, [r0, #1]
  4064e8:	788b      	ldrb	r3, [r1, #2]
  4064ea:	7083      	strb	r3, [r0, #2]
  4064ec:	4660      	mov	r0, ip
  4064ee:	4770      	bx	lr

004064f0 <memset>:
  4064f0:	b470      	push	{r4, r5, r6}
  4064f2:	0786      	lsls	r6, r0, #30
  4064f4:	d046      	beq.n	406584 <memset+0x94>
  4064f6:	1e54      	subs	r4, r2, #1
  4064f8:	2a00      	cmp	r2, #0
  4064fa:	d041      	beq.n	406580 <memset+0x90>
  4064fc:	b2ca      	uxtb	r2, r1
  4064fe:	4603      	mov	r3, r0
  406500:	e002      	b.n	406508 <memset+0x18>
  406502:	f114 34ff 	adds.w	r4, r4, #4294967295
  406506:	d33b      	bcc.n	406580 <memset+0x90>
  406508:	f803 2b01 	strb.w	r2, [r3], #1
  40650c:	079d      	lsls	r5, r3, #30
  40650e:	d1f8      	bne.n	406502 <memset+0x12>
  406510:	2c03      	cmp	r4, #3
  406512:	d92e      	bls.n	406572 <memset+0x82>
  406514:	b2cd      	uxtb	r5, r1
  406516:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40651a:	2c0f      	cmp	r4, #15
  40651c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406520:	d919      	bls.n	406556 <memset+0x66>
  406522:	f103 0210 	add.w	r2, r3, #16
  406526:	4626      	mov	r6, r4
  406528:	3e10      	subs	r6, #16
  40652a:	2e0f      	cmp	r6, #15
  40652c:	f842 5c10 	str.w	r5, [r2, #-16]
  406530:	f842 5c0c 	str.w	r5, [r2, #-12]
  406534:	f842 5c08 	str.w	r5, [r2, #-8]
  406538:	f842 5c04 	str.w	r5, [r2, #-4]
  40653c:	f102 0210 	add.w	r2, r2, #16
  406540:	d8f2      	bhi.n	406528 <memset+0x38>
  406542:	f1a4 0210 	sub.w	r2, r4, #16
  406546:	f022 020f 	bic.w	r2, r2, #15
  40654a:	f004 040f 	and.w	r4, r4, #15
  40654e:	3210      	adds	r2, #16
  406550:	2c03      	cmp	r4, #3
  406552:	4413      	add	r3, r2
  406554:	d90d      	bls.n	406572 <memset+0x82>
  406556:	461e      	mov	r6, r3
  406558:	4622      	mov	r2, r4
  40655a:	3a04      	subs	r2, #4
  40655c:	2a03      	cmp	r2, #3
  40655e:	f846 5b04 	str.w	r5, [r6], #4
  406562:	d8fa      	bhi.n	40655a <memset+0x6a>
  406564:	1f22      	subs	r2, r4, #4
  406566:	f022 0203 	bic.w	r2, r2, #3
  40656a:	3204      	adds	r2, #4
  40656c:	4413      	add	r3, r2
  40656e:	f004 0403 	and.w	r4, r4, #3
  406572:	b12c      	cbz	r4, 406580 <memset+0x90>
  406574:	b2c9      	uxtb	r1, r1
  406576:	441c      	add	r4, r3
  406578:	f803 1b01 	strb.w	r1, [r3], #1
  40657c:	429c      	cmp	r4, r3
  40657e:	d1fb      	bne.n	406578 <memset+0x88>
  406580:	bc70      	pop	{r4, r5, r6}
  406582:	4770      	bx	lr
  406584:	4614      	mov	r4, r2
  406586:	4603      	mov	r3, r0
  406588:	e7c2      	b.n	406510 <memset+0x20>
  40658a:	bf00      	nop

0040658c <__malloc_lock>:
  40658c:	4801      	ldr	r0, [pc, #4]	; (406594 <__malloc_lock+0x8>)
  40658e:	f001 bd5b 	b.w	408048 <__retarget_lock_acquire_recursive>
  406592:	bf00      	nop
  406594:	20400c34 	.word	0x20400c34

00406598 <__malloc_unlock>:
  406598:	4801      	ldr	r0, [pc, #4]	; (4065a0 <__malloc_unlock+0x8>)
  40659a:	f001 bd57 	b.w	40804c <__retarget_lock_release_recursive>
  40659e:	bf00      	nop
  4065a0:	20400c34 	.word	0x20400c34

004065a4 <_sbrk_r>:
  4065a4:	b538      	push	{r3, r4, r5, lr}
  4065a6:	4c07      	ldr	r4, [pc, #28]	; (4065c4 <_sbrk_r+0x20>)
  4065a8:	2300      	movs	r3, #0
  4065aa:	4605      	mov	r5, r0
  4065ac:	4608      	mov	r0, r1
  4065ae:	6023      	str	r3, [r4, #0]
  4065b0:	f7fb f818 	bl	4015e4 <_sbrk>
  4065b4:	1c43      	adds	r3, r0, #1
  4065b6:	d000      	beq.n	4065ba <_sbrk_r+0x16>
  4065b8:	bd38      	pop	{r3, r4, r5, pc}
  4065ba:	6823      	ldr	r3, [r4, #0]
  4065bc:	2b00      	cmp	r3, #0
  4065be:	d0fb      	beq.n	4065b8 <_sbrk_r+0x14>
  4065c0:	602b      	str	r3, [r5, #0]
  4065c2:	bd38      	pop	{r3, r4, r5, pc}
  4065c4:	20400c48 	.word	0x20400c48

004065c8 <setbuf>:
  4065c8:	2900      	cmp	r1, #0
  4065ca:	bf0c      	ite	eq
  4065cc:	2202      	moveq	r2, #2
  4065ce:	2200      	movne	r2, #0
  4065d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4065d4:	f000 b800 	b.w	4065d8 <setvbuf>

004065d8 <setvbuf>:
  4065d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4065dc:	4c61      	ldr	r4, [pc, #388]	; (406764 <setvbuf+0x18c>)
  4065de:	6825      	ldr	r5, [r4, #0]
  4065e0:	b083      	sub	sp, #12
  4065e2:	4604      	mov	r4, r0
  4065e4:	460f      	mov	r7, r1
  4065e6:	4690      	mov	r8, r2
  4065e8:	461e      	mov	r6, r3
  4065ea:	b115      	cbz	r5, 4065f2 <setvbuf+0x1a>
  4065ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4065ee:	2b00      	cmp	r3, #0
  4065f0:	d064      	beq.n	4066bc <setvbuf+0xe4>
  4065f2:	f1b8 0f02 	cmp.w	r8, #2
  4065f6:	d006      	beq.n	406606 <setvbuf+0x2e>
  4065f8:	f1b8 0f01 	cmp.w	r8, #1
  4065fc:	f200 809f 	bhi.w	40673e <setvbuf+0x166>
  406600:	2e00      	cmp	r6, #0
  406602:	f2c0 809c 	blt.w	40673e <setvbuf+0x166>
  406606:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406608:	07d8      	lsls	r0, r3, #31
  40660a:	d534      	bpl.n	406676 <setvbuf+0x9e>
  40660c:	4621      	mov	r1, r4
  40660e:	4628      	mov	r0, r5
  406610:	f001 f902 	bl	407818 <_fflush_r>
  406614:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406616:	b141      	cbz	r1, 40662a <setvbuf+0x52>
  406618:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40661c:	4299      	cmp	r1, r3
  40661e:	d002      	beq.n	406626 <setvbuf+0x4e>
  406620:	4628      	mov	r0, r5
  406622:	f001 fa77 	bl	407b14 <_free_r>
  406626:	2300      	movs	r3, #0
  406628:	6323      	str	r3, [r4, #48]	; 0x30
  40662a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40662e:	2200      	movs	r2, #0
  406630:	61a2      	str	r2, [r4, #24]
  406632:	6062      	str	r2, [r4, #4]
  406634:	061a      	lsls	r2, r3, #24
  406636:	d43a      	bmi.n	4066ae <setvbuf+0xd6>
  406638:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  40663c:	f023 0303 	bic.w	r3, r3, #3
  406640:	f1b8 0f02 	cmp.w	r8, #2
  406644:	81a3      	strh	r3, [r4, #12]
  406646:	d01d      	beq.n	406684 <setvbuf+0xac>
  406648:	ab01      	add	r3, sp, #4
  40664a:	466a      	mov	r2, sp
  40664c:	4621      	mov	r1, r4
  40664e:	4628      	mov	r0, r5
  406650:	f001 fcfe 	bl	408050 <__swhatbuf_r>
  406654:	89a3      	ldrh	r3, [r4, #12]
  406656:	4318      	orrs	r0, r3
  406658:	81a0      	strh	r0, [r4, #12]
  40665a:	2e00      	cmp	r6, #0
  40665c:	d132      	bne.n	4066c4 <setvbuf+0xec>
  40665e:	9e00      	ldr	r6, [sp, #0]
  406660:	4630      	mov	r0, r6
  406662:	f7ff fbeb 	bl	405e3c <malloc>
  406666:	4607      	mov	r7, r0
  406668:	2800      	cmp	r0, #0
  40666a:	d06b      	beq.n	406744 <setvbuf+0x16c>
  40666c:	89a3      	ldrh	r3, [r4, #12]
  40666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406672:	81a3      	strh	r3, [r4, #12]
  406674:	e028      	b.n	4066c8 <setvbuf+0xf0>
  406676:	89a3      	ldrh	r3, [r4, #12]
  406678:	0599      	lsls	r1, r3, #22
  40667a:	d4c7      	bmi.n	40660c <setvbuf+0x34>
  40667c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40667e:	f001 fce3 	bl	408048 <__retarget_lock_acquire_recursive>
  406682:	e7c3      	b.n	40660c <setvbuf+0x34>
  406684:	2500      	movs	r5, #0
  406686:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406688:	2600      	movs	r6, #0
  40668a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40668e:	f043 0302 	orr.w	r3, r3, #2
  406692:	2001      	movs	r0, #1
  406694:	60a6      	str	r6, [r4, #8]
  406696:	07ce      	lsls	r6, r1, #31
  406698:	81a3      	strh	r3, [r4, #12]
  40669a:	6022      	str	r2, [r4, #0]
  40669c:	6122      	str	r2, [r4, #16]
  40669e:	6160      	str	r0, [r4, #20]
  4066a0:	d401      	bmi.n	4066a6 <setvbuf+0xce>
  4066a2:	0598      	lsls	r0, r3, #22
  4066a4:	d53e      	bpl.n	406724 <setvbuf+0x14c>
  4066a6:	4628      	mov	r0, r5
  4066a8:	b003      	add	sp, #12
  4066aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4066ae:	6921      	ldr	r1, [r4, #16]
  4066b0:	4628      	mov	r0, r5
  4066b2:	f001 fa2f 	bl	407b14 <_free_r>
  4066b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4066ba:	e7bd      	b.n	406638 <setvbuf+0x60>
  4066bc:	4628      	mov	r0, r5
  4066be:	f001 f903 	bl	4078c8 <__sinit>
  4066c2:	e796      	b.n	4065f2 <setvbuf+0x1a>
  4066c4:	2f00      	cmp	r7, #0
  4066c6:	d0cb      	beq.n	406660 <setvbuf+0x88>
  4066c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4066ca:	2b00      	cmp	r3, #0
  4066cc:	d033      	beq.n	406736 <setvbuf+0x15e>
  4066ce:	9b00      	ldr	r3, [sp, #0]
  4066d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4066d4:	6027      	str	r7, [r4, #0]
  4066d6:	429e      	cmp	r6, r3
  4066d8:	bf1c      	itt	ne
  4066da:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4066de:	81a2      	strhne	r2, [r4, #12]
  4066e0:	f1b8 0f01 	cmp.w	r8, #1
  4066e4:	bf04      	itt	eq
  4066e6:	f042 0201 	orreq.w	r2, r2, #1
  4066ea:	81a2      	strheq	r2, [r4, #12]
  4066ec:	b292      	uxth	r2, r2
  4066ee:	f012 0308 	ands.w	r3, r2, #8
  4066f2:	6127      	str	r7, [r4, #16]
  4066f4:	6166      	str	r6, [r4, #20]
  4066f6:	d00e      	beq.n	406716 <setvbuf+0x13e>
  4066f8:	07d1      	lsls	r1, r2, #31
  4066fa:	d51a      	bpl.n	406732 <setvbuf+0x15a>
  4066fc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4066fe:	4276      	negs	r6, r6
  406700:	2300      	movs	r3, #0
  406702:	f015 0501 	ands.w	r5, r5, #1
  406706:	61a6      	str	r6, [r4, #24]
  406708:	60a3      	str	r3, [r4, #8]
  40670a:	d009      	beq.n	406720 <setvbuf+0x148>
  40670c:	2500      	movs	r5, #0
  40670e:	4628      	mov	r0, r5
  406710:	b003      	add	sp, #12
  406712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406716:	60a3      	str	r3, [r4, #8]
  406718:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40671a:	f015 0501 	ands.w	r5, r5, #1
  40671e:	d1f5      	bne.n	40670c <setvbuf+0x134>
  406720:	0593      	lsls	r3, r2, #22
  406722:	d4c0      	bmi.n	4066a6 <setvbuf+0xce>
  406724:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406726:	f001 fc91 	bl	40804c <__retarget_lock_release_recursive>
  40672a:	4628      	mov	r0, r5
  40672c:	b003      	add	sp, #12
  40672e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406732:	60a6      	str	r6, [r4, #8]
  406734:	e7f0      	b.n	406718 <setvbuf+0x140>
  406736:	4628      	mov	r0, r5
  406738:	f001 f8c6 	bl	4078c8 <__sinit>
  40673c:	e7c7      	b.n	4066ce <setvbuf+0xf6>
  40673e:	f04f 35ff 	mov.w	r5, #4294967295
  406742:	e7b0      	b.n	4066a6 <setvbuf+0xce>
  406744:	f8dd 9000 	ldr.w	r9, [sp]
  406748:	45b1      	cmp	r9, r6
  40674a:	d004      	beq.n	406756 <setvbuf+0x17e>
  40674c:	4648      	mov	r0, r9
  40674e:	f7ff fb75 	bl	405e3c <malloc>
  406752:	4607      	mov	r7, r0
  406754:	b920      	cbnz	r0, 406760 <setvbuf+0x188>
  406756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40675a:	f04f 35ff 	mov.w	r5, #4294967295
  40675e:	e792      	b.n	406686 <setvbuf+0xae>
  406760:	464e      	mov	r6, r9
  406762:	e783      	b.n	40666c <setvbuf+0x94>
  406764:	20400010 	.word	0x20400010
	...

00406780 <strlen>:
  406780:	f890 f000 	pld	[r0]
  406784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406788:	f020 0107 	bic.w	r1, r0, #7
  40678c:	f06f 0c00 	mvn.w	ip, #0
  406790:	f010 0407 	ands.w	r4, r0, #7
  406794:	f891 f020 	pld	[r1, #32]
  406798:	f040 8049 	bne.w	40682e <strlen+0xae>
  40679c:	f04f 0400 	mov.w	r4, #0
  4067a0:	f06f 0007 	mvn.w	r0, #7
  4067a4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4067a8:	f891 f040 	pld	[r1, #64]	; 0x40
  4067ac:	f100 0008 	add.w	r0, r0, #8
  4067b0:	fa82 f24c 	uadd8	r2, r2, ip
  4067b4:	faa4 f28c 	sel	r2, r4, ip
  4067b8:	fa83 f34c 	uadd8	r3, r3, ip
  4067bc:	faa2 f38c 	sel	r3, r2, ip
  4067c0:	bb4b      	cbnz	r3, 406816 <strlen+0x96>
  4067c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  4067c6:	fa82 f24c 	uadd8	r2, r2, ip
  4067ca:	f100 0008 	add.w	r0, r0, #8
  4067ce:	faa4 f28c 	sel	r2, r4, ip
  4067d2:	fa83 f34c 	uadd8	r3, r3, ip
  4067d6:	faa2 f38c 	sel	r3, r2, ip
  4067da:	b9e3      	cbnz	r3, 406816 <strlen+0x96>
  4067dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4067e0:	fa82 f24c 	uadd8	r2, r2, ip
  4067e4:	f100 0008 	add.w	r0, r0, #8
  4067e8:	faa4 f28c 	sel	r2, r4, ip
  4067ec:	fa83 f34c 	uadd8	r3, r3, ip
  4067f0:	faa2 f38c 	sel	r3, r2, ip
  4067f4:	b97b      	cbnz	r3, 406816 <strlen+0x96>
  4067f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4067fa:	f101 0120 	add.w	r1, r1, #32
  4067fe:	fa82 f24c 	uadd8	r2, r2, ip
  406802:	f100 0008 	add.w	r0, r0, #8
  406806:	faa4 f28c 	sel	r2, r4, ip
  40680a:	fa83 f34c 	uadd8	r3, r3, ip
  40680e:	faa2 f38c 	sel	r3, r2, ip
  406812:	2b00      	cmp	r3, #0
  406814:	d0c6      	beq.n	4067a4 <strlen+0x24>
  406816:	2a00      	cmp	r2, #0
  406818:	bf04      	itt	eq
  40681a:	3004      	addeq	r0, #4
  40681c:	461a      	moveq	r2, r3
  40681e:	ba12      	rev	r2, r2
  406820:	fab2 f282 	clz	r2, r2
  406824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  406828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40682c:	4770      	bx	lr
  40682e:	e9d1 2300 	ldrd	r2, r3, [r1]
  406832:	f004 0503 	and.w	r5, r4, #3
  406836:	f1c4 0000 	rsb	r0, r4, #0
  40683a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40683e:	f014 0f04 	tst.w	r4, #4
  406842:	f891 f040 	pld	[r1, #64]	; 0x40
  406846:	fa0c f505 	lsl.w	r5, ip, r5
  40684a:	ea62 0205 	orn	r2, r2, r5
  40684e:	bf1c      	itt	ne
  406850:	ea63 0305 	ornne	r3, r3, r5
  406854:	4662      	movne	r2, ip
  406856:	f04f 0400 	mov.w	r4, #0
  40685a:	e7a9      	b.n	4067b0 <strlen+0x30>

0040685c <__sprint_r.part.0>:
  40685c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406860:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  406862:	049c      	lsls	r4, r3, #18
  406864:	4693      	mov	fp, r2
  406866:	d52f      	bpl.n	4068c8 <__sprint_r.part.0+0x6c>
  406868:	6893      	ldr	r3, [r2, #8]
  40686a:	6812      	ldr	r2, [r2, #0]
  40686c:	b353      	cbz	r3, 4068c4 <__sprint_r.part.0+0x68>
  40686e:	460e      	mov	r6, r1
  406870:	4607      	mov	r7, r0
  406872:	f102 0908 	add.w	r9, r2, #8
  406876:	e919 0420 	ldmdb	r9, {r5, sl}
  40687a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40687e:	d017      	beq.n	4068b0 <__sprint_r.part.0+0x54>
  406880:	3d04      	subs	r5, #4
  406882:	2400      	movs	r4, #0
  406884:	e001      	b.n	40688a <__sprint_r.part.0+0x2e>
  406886:	45a0      	cmp	r8, r4
  406888:	d010      	beq.n	4068ac <__sprint_r.part.0+0x50>
  40688a:	4632      	mov	r2, r6
  40688c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  406890:	4638      	mov	r0, r7
  406892:	f001 f8bb 	bl	407a0c <_fputwc_r>
  406896:	1c43      	adds	r3, r0, #1
  406898:	f104 0401 	add.w	r4, r4, #1
  40689c:	d1f3      	bne.n	406886 <__sprint_r.part.0+0x2a>
  40689e:	2300      	movs	r3, #0
  4068a0:	f8cb 3008 	str.w	r3, [fp, #8]
  4068a4:	f8cb 3004 	str.w	r3, [fp, #4]
  4068a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068ac:	f8db 3008 	ldr.w	r3, [fp, #8]
  4068b0:	f02a 0a03 	bic.w	sl, sl, #3
  4068b4:	eba3 030a 	sub.w	r3, r3, sl
  4068b8:	f8cb 3008 	str.w	r3, [fp, #8]
  4068bc:	f109 0908 	add.w	r9, r9, #8
  4068c0:	2b00      	cmp	r3, #0
  4068c2:	d1d8      	bne.n	406876 <__sprint_r.part.0+0x1a>
  4068c4:	2000      	movs	r0, #0
  4068c6:	e7ea      	b.n	40689e <__sprint_r.part.0+0x42>
  4068c8:	f001 fa0a 	bl	407ce0 <__sfvwrite_r>
  4068cc:	2300      	movs	r3, #0
  4068ce:	f8cb 3008 	str.w	r3, [fp, #8]
  4068d2:	f8cb 3004 	str.w	r3, [fp, #4]
  4068d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4068da:	bf00      	nop

004068dc <_vfiprintf_r>:
  4068dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4068e0:	b0ad      	sub	sp, #180	; 0xb4
  4068e2:	461d      	mov	r5, r3
  4068e4:	468b      	mov	fp, r1
  4068e6:	4690      	mov	r8, r2
  4068e8:	9307      	str	r3, [sp, #28]
  4068ea:	9006      	str	r0, [sp, #24]
  4068ec:	b118      	cbz	r0, 4068f6 <_vfiprintf_r+0x1a>
  4068ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4068f0:	2b00      	cmp	r3, #0
  4068f2:	f000 80f3 	beq.w	406adc <_vfiprintf_r+0x200>
  4068f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4068fa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4068fe:	07df      	lsls	r7, r3, #31
  406900:	b281      	uxth	r1, r0
  406902:	d402      	bmi.n	40690a <_vfiprintf_r+0x2e>
  406904:	058e      	lsls	r6, r1, #22
  406906:	f140 80fc 	bpl.w	406b02 <_vfiprintf_r+0x226>
  40690a:	048c      	lsls	r4, r1, #18
  40690c:	d40a      	bmi.n	406924 <_vfiprintf_r+0x48>
  40690e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406912:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  406916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40691a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40691e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  406922:	b289      	uxth	r1, r1
  406924:	0708      	lsls	r0, r1, #28
  406926:	f140 80b3 	bpl.w	406a90 <_vfiprintf_r+0x1b4>
  40692a:	f8db 3010 	ldr.w	r3, [fp, #16]
  40692e:	2b00      	cmp	r3, #0
  406930:	f000 80ae 	beq.w	406a90 <_vfiprintf_r+0x1b4>
  406934:	f001 031a 	and.w	r3, r1, #26
  406938:	2b0a      	cmp	r3, #10
  40693a:	f000 80b5 	beq.w	406aa8 <_vfiprintf_r+0x1cc>
  40693e:	2300      	movs	r3, #0
  406940:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  406944:	930b      	str	r3, [sp, #44]	; 0x2c
  406946:	9311      	str	r3, [sp, #68]	; 0x44
  406948:	9310      	str	r3, [sp, #64]	; 0x40
  40694a:	9303      	str	r3, [sp, #12]
  40694c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  406950:	46ca      	mov	sl, r9
  406952:	f8cd b010 	str.w	fp, [sp, #16]
  406956:	f898 3000 	ldrb.w	r3, [r8]
  40695a:	4644      	mov	r4, r8
  40695c:	b1fb      	cbz	r3, 40699e <_vfiprintf_r+0xc2>
  40695e:	2b25      	cmp	r3, #37	; 0x25
  406960:	d102      	bne.n	406968 <_vfiprintf_r+0x8c>
  406962:	e01c      	b.n	40699e <_vfiprintf_r+0xc2>
  406964:	2b25      	cmp	r3, #37	; 0x25
  406966:	d003      	beq.n	406970 <_vfiprintf_r+0x94>
  406968:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40696c:	2b00      	cmp	r3, #0
  40696e:	d1f9      	bne.n	406964 <_vfiprintf_r+0x88>
  406970:	eba4 0508 	sub.w	r5, r4, r8
  406974:	b19d      	cbz	r5, 40699e <_vfiprintf_r+0xc2>
  406976:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406978:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40697a:	f8ca 8000 	str.w	r8, [sl]
  40697e:	3301      	adds	r3, #1
  406980:	442a      	add	r2, r5
  406982:	2b07      	cmp	r3, #7
  406984:	f8ca 5004 	str.w	r5, [sl, #4]
  406988:	9211      	str	r2, [sp, #68]	; 0x44
  40698a:	9310      	str	r3, [sp, #64]	; 0x40
  40698c:	dd7a      	ble.n	406a84 <_vfiprintf_r+0x1a8>
  40698e:	2a00      	cmp	r2, #0
  406990:	f040 84b0 	bne.w	4072f4 <_vfiprintf_r+0xa18>
  406994:	9b03      	ldr	r3, [sp, #12]
  406996:	9210      	str	r2, [sp, #64]	; 0x40
  406998:	442b      	add	r3, r5
  40699a:	46ca      	mov	sl, r9
  40699c:	9303      	str	r3, [sp, #12]
  40699e:	7823      	ldrb	r3, [r4, #0]
  4069a0:	2b00      	cmp	r3, #0
  4069a2:	f000 83e0 	beq.w	407166 <_vfiprintf_r+0x88a>
  4069a6:	2000      	movs	r0, #0
  4069a8:	f04f 0300 	mov.w	r3, #0
  4069ac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4069b0:	f104 0801 	add.w	r8, r4, #1
  4069b4:	7862      	ldrb	r2, [r4, #1]
  4069b6:	4605      	mov	r5, r0
  4069b8:	4606      	mov	r6, r0
  4069ba:	4603      	mov	r3, r0
  4069bc:	f04f 34ff 	mov.w	r4, #4294967295
  4069c0:	f108 0801 	add.w	r8, r8, #1
  4069c4:	f1a2 0120 	sub.w	r1, r2, #32
  4069c8:	2958      	cmp	r1, #88	; 0x58
  4069ca:	f200 82de 	bhi.w	406f8a <_vfiprintf_r+0x6ae>
  4069ce:	e8df f011 	tbh	[pc, r1, lsl #1]
  4069d2:	0221      	.short	0x0221
  4069d4:	02dc02dc 	.word	0x02dc02dc
  4069d8:	02dc0229 	.word	0x02dc0229
  4069dc:	02dc02dc 	.word	0x02dc02dc
  4069e0:	02dc02dc 	.word	0x02dc02dc
  4069e4:	028902dc 	.word	0x028902dc
  4069e8:	02dc0295 	.word	0x02dc0295
  4069ec:	02bd00a2 	.word	0x02bd00a2
  4069f0:	019f02dc 	.word	0x019f02dc
  4069f4:	01a401a4 	.word	0x01a401a4
  4069f8:	01a401a4 	.word	0x01a401a4
  4069fc:	01a401a4 	.word	0x01a401a4
  406a00:	01a401a4 	.word	0x01a401a4
  406a04:	02dc01a4 	.word	0x02dc01a4
  406a08:	02dc02dc 	.word	0x02dc02dc
  406a0c:	02dc02dc 	.word	0x02dc02dc
  406a10:	02dc02dc 	.word	0x02dc02dc
  406a14:	02dc02dc 	.word	0x02dc02dc
  406a18:	01b202dc 	.word	0x01b202dc
  406a1c:	02dc02dc 	.word	0x02dc02dc
  406a20:	02dc02dc 	.word	0x02dc02dc
  406a24:	02dc02dc 	.word	0x02dc02dc
  406a28:	02dc02dc 	.word	0x02dc02dc
  406a2c:	02dc02dc 	.word	0x02dc02dc
  406a30:	02dc0197 	.word	0x02dc0197
  406a34:	02dc02dc 	.word	0x02dc02dc
  406a38:	02dc02dc 	.word	0x02dc02dc
  406a3c:	02dc019b 	.word	0x02dc019b
  406a40:	025302dc 	.word	0x025302dc
  406a44:	02dc02dc 	.word	0x02dc02dc
  406a48:	02dc02dc 	.word	0x02dc02dc
  406a4c:	02dc02dc 	.word	0x02dc02dc
  406a50:	02dc02dc 	.word	0x02dc02dc
  406a54:	02dc02dc 	.word	0x02dc02dc
  406a58:	021b025a 	.word	0x021b025a
  406a5c:	02dc02dc 	.word	0x02dc02dc
  406a60:	026e02dc 	.word	0x026e02dc
  406a64:	02dc021b 	.word	0x02dc021b
  406a68:	027302dc 	.word	0x027302dc
  406a6c:	01f502dc 	.word	0x01f502dc
  406a70:	02090182 	.word	0x02090182
  406a74:	02dc02d7 	.word	0x02dc02d7
  406a78:	02dc029a 	.word	0x02dc029a
  406a7c:	02dc00a7 	.word	0x02dc00a7
  406a80:	022e02dc 	.word	0x022e02dc
  406a84:	f10a 0a08 	add.w	sl, sl, #8
  406a88:	9b03      	ldr	r3, [sp, #12]
  406a8a:	442b      	add	r3, r5
  406a8c:	9303      	str	r3, [sp, #12]
  406a8e:	e786      	b.n	40699e <_vfiprintf_r+0xc2>
  406a90:	4659      	mov	r1, fp
  406a92:	9806      	ldr	r0, [sp, #24]
  406a94:	f000 fdac 	bl	4075f0 <__swsetup_r>
  406a98:	bb18      	cbnz	r0, 406ae2 <_vfiprintf_r+0x206>
  406a9a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  406a9e:	f001 031a 	and.w	r3, r1, #26
  406aa2:	2b0a      	cmp	r3, #10
  406aa4:	f47f af4b 	bne.w	40693e <_vfiprintf_r+0x62>
  406aa8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  406aac:	2b00      	cmp	r3, #0
  406aae:	f6ff af46 	blt.w	40693e <_vfiprintf_r+0x62>
  406ab2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406ab6:	07db      	lsls	r3, r3, #31
  406ab8:	d405      	bmi.n	406ac6 <_vfiprintf_r+0x1ea>
  406aba:	058f      	lsls	r7, r1, #22
  406abc:	d403      	bmi.n	406ac6 <_vfiprintf_r+0x1ea>
  406abe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406ac2:	f001 fac3 	bl	40804c <__retarget_lock_release_recursive>
  406ac6:	462b      	mov	r3, r5
  406ac8:	4642      	mov	r2, r8
  406aca:	4659      	mov	r1, fp
  406acc:	9806      	ldr	r0, [sp, #24]
  406ace:	f000 fd4d 	bl	40756c <__sbprintf>
  406ad2:	9003      	str	r0, [sp, #12]
  406ad4:	9803      	ldr	r0, [sp, #12]
  406ad6:	b02d      	add	sp, #180	; 0xb4
  406ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406adc:	f000 fef4 	bl	4078c8 <__sinit>
  406ae0:	e709      	b.n	4068f6 <_vfiprintf_r+0x1a>
  406ae2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406ae6:	07d9      	lsls	r1, r3, #31
  406ae8:	d404      	bmi.n	406af4 <_vfiprintf_r+0x218>
  406aea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  406aee:	059a      	lsls	r2, r3, #22
  406af0:	f140 84aa 	bpl.w	407448 <_vfiprintf_r+0xb6c>
  406af4:	f04f 33ff 	mov.w	r3, #4294967295
  406af8:	9303      	str	r3, [sp, #12]
  406afa:	9803      	ldr	r0, [sp, #12]
  406afc:	b02d      	add	sp, #180	; 0xb4
  406afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406b06:	f001 fa9f 	bl	408048 <__retarget_lock_acquire_recursive>
  406b0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  406b0e:	b281      	uxth	r1, r0
  406b10:	e6fb      	b.n	40690a <_vfiprintf_r+0x2e>
  406b12:	4276      	negs	r6, r6
  406b14:	9207      	str	r2, [sp, #28]
  406b16:	f043 0304 	orr.w	r3, r3, #4
  406b1a:	f898 2000 	ldrb.w	r2, [r8]
  406b1e:	e74f      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406b20:	9608      	str	r6, [sp, #32]
  406b22:	069e      	lsls	r6, r3, #26
  406b24:	f100 8450 	bmi.w	4073c8 <_vfiprintf_r+0xaec>
  406b28:	9907      	ldr	r1, [sp, #28]
  406b2a:	06dd      	lsls	r5, r3, #27
  406b2c:	460a      	mov	r2, r1
  406b2e:	f100 83ef 	bmi.w	407310 <_vfiprintf_r+0xa34>
  406b32:	0658      	lsls	r0, r3, #25
  406b34:	f140 83ec 	bpl.w	407310 <_vfiprintf_r+0xa34>
  406b38:	880e      	ldrh	r6, [r1, #0]
  406b3a:	3104      	adds	r1, #4
  406b3c:	2700      	movs	r7, #0
  406b3e:	2201      	movs	r2, #1
  406b40:	9107      	str	r1, [sp, #28]
  406b42:	f04f 0100 	mov.w	r1, #0
  406b46:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  406b4a:	2500      	movs	r5, #0
  406b4c:	1c61      	adds	r1, r4, #1
  406b4e:	f000 8116 	beq.w	406d7e <_vfiprintf_r+0x4a2>
  406b52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  406b56:	9102      	str	r1, [sp, #8]
  406b58:	ea56 0107 	orrs.w	r1, r6, r7
  406b5c:	f040 8114 	bne.w	406d88 <_vfiprintf_r+0x4ac>
  406b60:	2c00      	cmp	r4, #0
  406b62:	f040 835c 	bne.w	40721e <_vfiprintf_r+0x942>
  406b66:	2a00      	cmp	r2, #0
  406b68:	f040 83b7 	bne.w	4072da <_vfiprintf_r+0x9fe>
  406b6c:	f013 0301 	ands.w	r3, r3, #1
  406b70:	9305      	str	r3, [sp, #20]
  406b72:	f000 8457 	beq.w	407424 <_vfiprintf_r+0xb48>
  406b76:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406b7a:	2330      	movs	r3, #48	; 0x30
  406b7c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  406b80:	9b05      	ldr	r3, [sp, #20]
  406b82:	42a3      	cmp	r3, r4
  406b84:	bfb8      	it	lt
  406b86:	4623      	movlt	r3, r4
  406b88:	9301      	str	r3, [sp, #4]
  406b8a:	b10d      	cbz	r5, 406b90 <_vfiprintf_r+0x2b4>
  406b8c:	3301      	adds	r3, #1
  406b8e:	9301      	str	r3, [sp, #4]
  406b90:	9b02      	ldr	r3, [sp, #8]
  406b92:	f013 0302 	ands.w	r3, r3, #2
  406b96:	9309      	str	r3, [sp, #36]	; 0x24
  406b98:	d002      	beq.n	406ba0 <_vfiprintf_r+0x2c4>
  406b9a:	9b01      	ldr	r3, [sp, #4]
  406b9c:	3302      	adds	r3, #2
  406b9e:	9301      	str	r3, [sp, #4]
  406ba0:	9b02      	ldr	r3, [sp, #8]
  406ba2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  406ba6:	930a      	str	r3, [sp, #40]	; 0x28
  406ba8:	f040 8217 	bne.w	406fda <_vfiprintf_r+0x6fe>
  406bac:	9b08      	ldr	r3, [sp, #32]
  406bae:	9a01      	ldr	r2, [sp, #4]
  406bb0:	1a9d      	subs	r5, r3, r2
  406bb2:	2d00      	cmp	r5, #0
  406bb4:	f340 8211 	ble.w	406fda <_vfiprintf_r+0x6fe>
  406bb8:	2d10      	cmp	r5, #16
  406bba:	f340 8490 	ble.w	4074de <_vfiprintf_r+0xc02>
  406bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  406bc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406bc2:	4ec4      	ldr	r6, [pc, #784]	; (406ed4 <_vfiprintf_r+0x5f8>)
  406bc4:	46d6      	mov	lr, sl
  406bc6:	2710      	movs	r7, #16
  406bc8:	46a2      	mov	sl, r4
  406bca:	4619      	mov	r1, r3
  406bcc:	9c06      	ldr	r4, [sp, #24]
  406bce:	e007      	b.n	406be0 <_vfiprintf_r+0x304>
  406bd0:	f101 0c02 	add.w	ip, r1, #2
  406bd4:	f10e 0e08 	add.w	lr, lr, #8
  406bd8:	4601      	mov	r1, r0
  406bda:	3d10      	subs	r5, #16
  406bdc:	2d10      	cmp	r5, #16
  406bde:	dd11      	ble.n	406c04 <_vfiprintf_r+0x328>
  406be0:	1c48      	adds	r0, r1, #1
  406be2:	3210      	adds	r2, #16
  406be4:	2807      	cmp	r0, #7
  406be6:	9211      	str	r2, [sp, #68]	; 0x44
  406be8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  406bec:	9010      	str	r0, [sp, #64]	; 0x40
  406bee:	ddef      	ble.n	406bd0 <_vfiprintf_r+0x2f4>
  406bf0:	2a00      	cmp	r2, #0
  406bf2:	f040 81e4 	bne.w	406fbe <_vfiprintf_r+0x6e2>
  406bf6:	3d10      	subs	r5, #16
  406bf8:	2d10      	cmp	r5, #16
  406bfa:	4611      	mov	r1, r2
  406bfc:	f04f 0c01 	mov.w	ip, #1
  406c00:	46ce      	mov	lr, r9
  406c02:	dced      	bgt.n	406be0 <_vfiprintf_r+0x304>
  406c04:	4654      	mov	r4, sl
  406c06:	4661      	mov	r1, ip
  406c08:	46f2      	mov	sl, lr
  406c0a:	442a      	add	r2, r5
  406c0c:	2907      	cmp	r1, #7
  406c0e:	9211      	str	r2, [sp, #68]	; 0x44
  406c10:	f8ca 6000 	str.w	r6, [sl]
  406c14:	f8ca 5004 	str.w	r5, [sl, #4]
  406c18:	9110      	str	r1, [sp, #64]	; 0x40
  406c1a:	f300 82ec 	bgt.w	4071f6 <_vfiprintf_r+0x91a>
  406c1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406c22:	f10a 0a08 	add.w	sl, sl, #8
  406c26:	1c48      	adds	r0, r1, #1
  406c28:	2d00      	cmp	r5, #0
  406c2a:	f040 81de 	bne.w	406fea <_vfiprintf_r+0x70e>
  406c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406c30:	2b00      	cmp	r3, #0
  406c32:	f000 81f8 	beq.w	407026 <_vfiprintf_r+0x74a>
  406c36:	3202      	adds	r2, #2
  406c38:	a90e      	add	r1, sp, #56	; 0x38
  406c3a:	2302      	movs	r3, #2
  406c3c:	2807      	cmp	r0, #7
  406c3e:	9211      	str	r2, [sp, #68]	; 0x44
  406c40:	9010      	str	r0, [sp, #64]	; 0x40
  406c42:	e88a 000a 	stmia.w	sl, {r1, r3}
  406c46:	f340 81ea 	ble.w	40701e <_vfiprintf_r+0x742>
  406c4a:	2a00      	cmp	r2, #0
  406c4c:	f040 838c 	bne.w	407368 <_vfiprintf_r+0xa8c>
  406c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406c52:	2b80      	cmp	r3, #128	; 0x80
  406c54:	f04f 0001 	mov.w	r0, #1
  406c58:	4611      	mov	r1, r2
  406c5a:	46ca      	mov	sl, r9
  406c5c:	f040 81e7 	bne.w	40702e <_vfiprintf_r+0x752>
  406c60:	9b08      	ldr	r3, [sp, #32]
  406c62:	9d01      	ldr	r5, [sp, #4]
  406c64:	1b5e      	subs	r6, r3, r5
  406c66:	2e00      	cmp	r6, #0
  406c68:	f340 81e1 	ble.w	40702e <_vfiprintf_r+0x752>
  406c6c:	2e10      	cmp	r6, #16
  406c6e:	4d9a      	ldr	r5, [pc, #616]	; (406ed8 <_vfiprintf_r+0x5fc>)
  406c70:	f340 8450 	ble.w	407514 <_vfiprintf_r+0xc38>
  406c74:	46d4      	mov	ip, sl
  406c76:	2710      	movs	r7, #16
  406c78:	46a2      	mov	sl, r4
  406c7a:	9c06      	ldr	r4, [sp, #24]
  406c7c:	e007      	b.n	406c8e <_vfiprintf_r+0x3b2>
  406c7e:	f101 0e02 	add.w	lr, r1, #2
  406c82:	f10c 0c08 	add.w	ip, ip, #8
  406c86:	4601      	mov	r1, r0
  406c88:	3e10      	subs	r6, #16
  406c8a:	2e10      	cmp	r6, #16
  406c8c:	dd11      	ble.n	406cb2 <_vfiprintf_r+0x3d6>
  406c8e:	1c48      	adds	r0, r1, #1
  406c90:	3210      	adds	r2, #16
  406c92:	2807      	cmp	r0, #7
  406c94:	9211      	str	r2, [sp, #68]	; 0x44
  406c96:	e88c 00a0 	stmia.w	ip, {r5, r7}
  406c9a:	9010      	str	r0, [sp, #64]	; 0x40
  406c9c:	ddef      	ble.n	406c7e <_vfiprintf_r+0x3a2>
  406c9e:	2a00      	cmp	r2, #0
  406ca0:	f040 829d 	bne.w	4071de <_vfiprintf_r+0x902>
  406ca4:	3e10      	subs	r6, #16
  406ca6:	2e10      	cmp	r6, #16
  406ca8:	f04f 0e01 	mov.w	lr, #1
  406cac:	4611      	mov	r1, r2
  406cae:	46cc      	mov	ip, r9
  406cb0:	dced      	bgt.n	406c8e <_vfiprintf_r+0x3b2>
  406cb2:	4654      	mov	r4, sl
  406cb4:	46e2      	mov	sl, ip
  406cb6:	4432      	add	r2, r6
  406cb8:	f1be 0f07 	cmp.w	lr, #7
  406cbc:	9211      	str	r2, [sp, #68]	; 0x44
  406cbe:	e88a 0060 	stmia.w	sl, {r5, r6}
  406cc2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  406cc6:	f300 8369 	bgt.w	40739c <_vfiprintf_r+0xac0>
  406cca:	f10a 0a08 	add.w	sl, sl, #8
  406cce:	f10e 0001 	add.w	r0, lr, #1
  406cd2:	4671      	mov	r1, lr
  406cd4:	e1ab      	b.n	40702e <_vfiprintf_r+0x752>
  406cd6:	9608      	str	r6, [sp, #32]
  406cd8:	f013 0220 	ands.w	r2, r3, #32
  406cdc:	f040 838c 	bne.w	4073f8 <_vfiprintf_r+0xb1c>
  406ce0:	f013 0110 	ands.w	r1, r3, #16
  406ce4:	f040 831a 	bne.w	40731c <_vfiprintf_r+0xa40>
  406ce8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  406cec:	f000 8316 	beq.w	40731c <_vfiprintf_r+0xa40>
  406cf0:	9807      	ldr	r0, [sp, #28]
  406cf2:	460a      	mov	r2, r1
  406cf4:	4601      	mov	r1, r0
  406cf6:	3104      	adds	r1, #4
  406cf8:	8806      	ldrh	r6, [r0, #0]
  406cfa:	9107      	str	r1, [sp, #28]
  406cfc:	2700      	movs	r7, #0
  406cfe:	e720      	b.n	406b42 <_vfiprintf_r+0x266>
  406d00:	9608      	str	r6, [sp, #32]
  406d02:	f043 0310 	orr.w	r3, r3, #16
  406d06:	e7e7      	b.n	406cd8 <_vfiprintf_r+0x3fc>
  406d08:	9608      	str	r6, [sp, #32]
  406d0a:	f043 0310 	orr.w	r3, r3, #16
  406d0e:	e708      	b.n	406b22 <_vfiprintf_r+0x246>
  406d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406d14:	f898 2000 	ldrb.w	r2, [r8]
  406d18:	e652      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406d1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406d1e:	2600      	movs	r6, #0
  406d20:	f818 2b01 	ldrb.w	r2, [r8], #1
  406d24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406d28:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406d2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406d30:	2909      	cmp	r1, #9
  406d32:	d9f5      	bls.n	406d20 <_vfiprintf_r+0x444>
  406d34:	e646      	b.n	4069c4 <_vfiprintf_r+0xe8>
  406d36:	9608      	str	r6, [sp, #32]
  406d38:	2800      	cmp	r0, #0
  406d3a:	f040 8408 	bne.w	40754e <_vfiprintf_r+0xc72>
  406d3e:	f043 0310 	orr.w	r3, r3, #16
  406d42:	069e      	lsls	r6, r3, #26
  406d44:	f100 834c 	bmi.w	4073e0 <_vfiprintf_r+0xb04>
  406d48:	06dd      	lsls	r5, r3, #27
  406d4a:	f100 82f3 	bmi.w	407334 <_vfiprintf_r+0xa58>
  406d4e:	0658      	lsls	r0, r3, #25
  406d50:	f140 82f0 	bpl.w	407334 <_vfiprintf_r+0xa58>
  406d54:	9d07      	ldr	r5, [sp, #28]
  406d56:	f9b5 6000 	ldrsh.w	r6, [r5]
  406d5a:	462a      	mov	r2, r5
  406d5c:	17f7      	asrs	r7, r6, #31
  406d5e:	3204      	adds	r2, #4
  406d60:	4630      	mov	r0, r6
  406d62:	4639      	mov	r1, r7
  406d64:	9207      	str	r2, [sp, #28]
  406d66:	2800      	cmp	r0, #0
  406d68:	f171 0200 	sbcs.w	r2, r1, #0
  406d6c:	f2c0 835d 	blt.w	40742a <_vfiprintf_r+0xb4e>
  406d70:	1c61      	adds	r1, r4, #1
  406d72:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406d76:	f04f 0201 	mov.w	r2, #1
  406d7a:	f47f aeea 	bne.w	406b52 <_vfiprintf_r+0x276>
  406d7e:	ea56 0107 	orrs.w	r1, r6, r7
  406d82:	f000 824d 	beq.w	407220 <_vfiprintf_r+0x944>
  406d86:	9302      	str	r3, [sp, #8]
  406d88:	2a01      	cmp	r2, #1
  406d8a:	f000 828c 	beq.w	4072a6 <_vfiprintf_r+0x9ca>
  406d8e:	2a02      	cmp	r2, #2
  406d90:	f040 825c 	bne.w	40724c <_vfiprintf_r+0x970>
  406d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406d96:	46cb      	mov	fp, r9
  406d98:	0933      	lsrs	r3, r6, #4
  406d9a:	f006 010f 	and.w	r1, r6, #15
  406d9e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  406da2:	093a      	lsrs	r2, r7, #4
  406da4:	461e      	mov	r6, r3
  406da6:	4617      	mov	r7, r2
  406da8:	5c43      	ldrb	r3, [r0, r1]
  406daa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  406dae:	ea56 0307 	orrs.w	r3, r6, r7
  406db2:	d1f1      	bne.n	406d98 <_vfiprintf_r+0x4bc>
  406db4:	eba9 030b 	sub.w	r3, r9, fp
  406db8:	9305      	str	r3, [sp, #20]
  406dba:	e6e1      	b.n	406b80 <_vfiprintf_r+0x2a4>
  406dbc:	2800      	cmp	r0, #0
  406dbe:	f040 83c0 	bne.w	407542 <_vfiprintf_r+0xc66>
  406dc2:	0699      	lsls	r1, r3, #26
  406dc4:	f100 8367 	bmi.w	407496 <_vfiprintf_r+0xbba>
  406dc8:	06da      	lsls	r2, r3, #27
  406dca:	f100 80f1 	bmi.w	406fb0 <_vfiprintf_r+0x6d4>
  406dce:	065b      	lsls	r3, r3, #25
  406dd0:	f140 80ee 	bpl.w	406fb0 <_vfiprintf_r+0x6d4>
  406dd4:	9a07      	ldr	r2, [sp, #28]
  406dd6:	6813      	ldr	r3, [r2, #0]
  406dd8:	3204      	adds	r2, #4
  406dda:	9207      	str	r2, [sp, #28]
  406ddc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  406de0:	801a      	strh	r2, [r3, #0]
  406de2:	e5b8      	b.n	406956 <_vfiprintf_r+0x7a>
  406de4:	9807      	ldr	r0, [sp, #28]
  406de6:	4a3d      	ldr	r2, [pc, #244]	; (406edc <_vfiprintf_r+0x600>)
  406de8:	9608      	str	r6, [sp, #32]
  406dea:	920b      	str	r2, [sp, #44]	; 0x2c
  406dec:	6806      	ldr	r6, [r0, #0]
  406dee:	2278      	movs	r2, #120	; 0x78
  406df0:	2130      	movs	r1, #48	; 0x30
  406df2:	3004      	adds	r0, #4
  406df4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406df8:	f043 0302 	orr.w	r3, r3, #2
  406dfc:	9007      	str	r0, [sp, #28]
  406dfe:	2700      	movs	r7, #0
  406e00:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406e04:	2202      	movs	r2, #2
  406e06:	e69c      	b.n	406b42 <_vfiprintf_r+0x266>
  406e08:	9608      	str	r6, [sp, #32]
  406e0a:	2800      	cmp	r0, #0
  406e0c:	d099      	beq.n	406d42 <_vfiprintf_r+0x466>
  406e0e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406e12:	e796      	b.n	406d42 <_vfiprintf_r+0x466>
  406e14:	f898 2000 	ldrb.w	r2, [r8]
  406e18:	2d00      	cmp	r5, #0
  406e1a:	f47f add1 	bne.w	4069c0 <_vfiprintf_r+0xe4>
  406e1e:	2001      	movs	r0, #1
  406e20:	2520      	movs	r5, #32
  406e22:	e5cd      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406e24:	f043 0301 	orr.w	r3, r3, #1
  406e28:	f898 2000 	ldrb.w	r2, [r8]
  406e2c:	e5c8      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406e2e:	9608      	str	r6, [sp, #32]
  406e30:	2800      	cmp	r0, #0
  406e32:	f040 8393 	bne.w	40755c <_vfiprintf_r+0xc80>
  406e36:	4929      	ldr	r1, [pc, #164]	; (406edc <_vfiprintf_r+0x600>)
  406e38:	910b      	str	r1, [sp, #44]	; 0x2c
  406e3a:	069f      	lsls	r7, r3, #26
  406e3c:	f100 82e8 	bmi.w	407410 <_vfiprintf_r+0xb34>
  406e40:	9807      	ldr	r0, [sp, #28]
  406e42:	06de      	lsls	r6, r3, #27
  406e44:	4601      	mov	r1, r0
  406e46:	f100 8270 	bmi.w	40732a <_vfiprintf_r+0xa4e>
  406e4a:	065d      	lsls	r5, r3, #25
  406e4c:	f140 826d 	bpl.w	40732a <_vfiprintf_r+0xa4e>
  406e50:	3104      	adds	r1, #4
  406e52:	8806      	ldrh	r6, [r0, #0]
  406e54:	9107      	str	r1, [sp, #28]
  406e56:	2700      	movs	r7, #0
  406e58:	07d8      	lsls	r0, r3, #31
  406e5a:	f140 8222 	bpl.w	4072a2 <_vfiprintf_r+0x9c6>
  406e5e:	ea56 0107 	orrs.w	r1, r6, r7
  406e62:	f000 821e 	beq.w	4072a2 <_vfiprintf_r+0x9c6>
  406e66:	2130      	movs	r1, #48	; 0x30
  406e68:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406e6c:	f043 0302 	orr.w	r3, r3, #2
  406e70:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406e74:	2202      	movs	r2, #2
  406e76:	e664      	b.n	406b42 <_vfiprintf_r+0x266>
  406e78:	9608      	str	r6, [sp, #32]
  406e7a:	2800      	cmp	r0, #0
  406e7c:	f040 836b 	bne.w	407556 <_vfiprintf_r+0xc7a>
  406e80:	4917      	ldr	r1, [pc, #92]	; (406ee0 <_vfiprintf_r+0x604>)
  406e82:	910b      	str	r1, [sp, #44]	; 0x2c
  406e84:	e7d9      	b.n	406e3a <_vfiprintf_r+0x55e>
  406e86:	9907      	ldr	r1, [sp, #28]
  406e88:	9608      	str	r6, [sp, #32]
  406e8a:	680a      	ldr	r2, [r1, #0]
  406e8c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406e90:	f04f 0000 	mov.w	r0, #0
  406e94:	460a      	mov	r2, r1
  406e96:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406e9a:	3204      	adds	r2, #4
  406e9c:	2001      	movs	r0, #1
  406e9e:	9001      	str	r0, [sp, #4]
  406ea0:	9207      	str	r2, [sp, #28]
  406ea2:	9005      	str	r0, [sp, #20]
  406ea4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406ea8:	9302      	str	r3, [sp, #8]
  406eaa:	2400      	movs	r4, #0
  406eac:	e670      	b.n	406b90 <_vfiprintf_r+0x2b4>
  406eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406eb2:	f898 2000 	ldrb.w	r2, [r8]
  406eb6:	e583      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406eb8:	f898 2000 	ldrb.w	r2, [r8]
  406ebc:	2a6c      	cmp	r2, #108	; 0x6c
  406ebe:	bf03      	ittte	eq
  406ec0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  406ec4:	f043 0320 	orreq.w	r3, r3, #32
  406ec8:	f108 0801 	addeq.w	r8, r8, #1
  406ecc:	f043 0310 	orrne.w	r3, r3, #16
  406ed0:	e576      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406ed2:	bf00      	nop
  406ed4:	004092b8 	.word	0x004092b8
  406ed8:	004092c8 	.word	0x004092c8
  406edc:	0040929c 	.word	0x0040929c
  406ee0:	00409288 	.word	0x00409288
  406ee4:	9907      	ldr	r1, [sp, #28]
  406ee6:	680e      	ldr	r6, [r1, #0]
  406ee8:	460a      	mov	r2, r1
  406eea:	2e00      	cmp	r6, #0
  406eec:	f102 0204 	add.w	r2, r2, #4
  406ef0:	f6ff ae0f 	blt.w	406b12 <_vfiprintf_r+0x236>
  406ef4:	9207      	str	r2, [sp, #28]
  406ef6:	f898 2000 	ldrb.w	r2, [r8]
  406efa:	e561      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406efc:	f898 2000 	ldrb.w	r2, [r8]
  406f00:	2001      	movs	r0, #1
  406f02:	252b      	movs	r5, #43	; 0x2b
  406f04:	e55c      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406f06:	9907      	ldr	r1, [sp, #28]
  406f08:	9608      	str	r6, [sp, #32]
  406f0a:	f8d1 b000 	ldr.w	fp, [r1]
  406f0e:	f04f 0200 	mov.w	r2, #0
  406f12:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406f16:	1d0e      	adds	r6, r1, #4
  406f18:	f1bb 0f00 	cmp.w	fp, #0
  406f1c:	f000 82e5 	beq.w	4074ea <_vfiprintf_r+0xc0e>
  406f20:	1c67      	adds	r7, r4, #1
  406f22:	f000 82c4 	beq.w	4074ae <_vfiprintf_r+0xbd2>
  406f26:	4622      	mov	r2, r4
  406f28:	2100      	movs	r1, #0
  406f2a:	4658      	mov	r0, fp
  406f2c:	9301      	str	r3, [sp, #4]
  406f2e:	f001 f91f 	bl	408170 <memchr>
  406f32:	9b01      	ldr	r3, [sp, #4]
  406f34:	2800      	cmp	r0, #0
  406f36:	f000 82e5 	beq.w	407504 <_vfiprintf_r+0xc28>
  406f3a:	eba0 020b 	sub.w	r2, r0, fp
  406f3e:	9205      	str	r2, [sp, #20]
  406f40:	9607      	str	r6, [sp, #28]
  406f42:	9302      	str	r3, [sp, #8]
  406f44:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406f48:	2400      	movs	r4, #0
  406f4a:	e619      	b.n	406b80 <_vfiprintf_r+0x2a4>
  406f4c:	f898 2000 	ldrb.w	r2, [r8]
  406f50:	2a2a      	cmp	r2, #42	; 0x2a
  406f52:	f108 0701 	add.w	r7, r8, #1
  406f56:	f000 82e9 	beq.w	40752c <_vfiprintf_r+0xc50>
  406f5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406f5e:	2909      	cmp	r1, #9
  406f60:	46b8      	mov	r8, r7
  406f62:	f04f 0400 	mov.w	r4, #0
  406f66:	f63f ad2d 	bhi.w	4069c4 <_vfiprintf_r+0xe8>
  406f6a:	f818 2b01 	ldrb.w	r2, [r8], #1
  406f6e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  406f72:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406f76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406f7a:	2909      	cmp	r1, #9
  406f7c:	d9f5      	bls.n	406f6a <_vfiprintf_r+0x68e>
  406f7e:	e521      	b.n	4069c4 <_vfiprintf_r+0xe8>
  406f80:	f043 0320 	orr.w	r3, r3, #32
  406f84:	f898 2000 	ldrb.w	r2, [r8]
  406f88:	e51a      	b.n	4069c0 <_vfiprintf_r+0xe4>
  406f8a:	9608      	str	r6, [sp, #32]
  406f8c:	2800      	cmp	r0, #0
  406f8e:	f040 82db 	bne.w	407548 <_vfiprintf_r+0xc6c>
  406f92:	2a00      	cmp	r2, #0
  406f94:	f000 80e7 	beq.w	407166 <_vfiprintf_r+0x88a>
  406f98:	2101      	movs	r1, #1
  406f9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  406f9e:	f04f 0200 	mov.w	r2, #0
  406fa2:	9101      	str	r1, [sp, #4]
  406fa4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406fa8:	9105      	str	r1, [sp, #20]
  406faa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406fae:	e77b      	b.n	406ea8 <_vfiprintf_r+0x5cc>
  406fb0:	9a07      	ldr	r2, [sp, #28]
  406fb2:	6813      	ldr	r3, [r2, #0]
  406fb4:	3204      	adds	r2, #4
  406fb6:	9207      	str	r2, [sp, #28]
  406fb8:	9a03      	ldr	r2, [sp, #12]
  406fba:	601a      	str	r2, [r3, #0]
  406fbc:	e4cb      	b.n	406956 <_vfiprintf_r+0x7a>
  406fbe:	aa0f      	add	r2, sp, #60	; 0x3c
  406fc0:	9904      	ldr	r1, [sp, #16]
  406fc2:	4620      	mov	r0, r4
  406fc4:	f7ff fc4a 	bl	40685c <__sprint_r.part.0>
  406fc8:	2800      	cmp	r0, #0
  406fca:	f040 8139 	bne.w	407240 <_vfiprintf_r+0x964>
  406fce:	9910      	ldr	r1, [sp, #64]	; 0x40
  406fd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fd2:	f101 0c01 	add.w	ip, r1, #1
  406fd6:	46ce      	mov	lr, r9
  406fd8:	e5ff      	b.n	406bda <_vfiprintf_r+0x2fe>
  406fda:	9910      	ldr	r1, [sp, #64]	; 0x40
  406fdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406fde:	1c48      	adds	r0, r1, #1
  406fe0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406fe4:	2d00      	cmp	r5, #0
  406fe6:	f43f ae22 	beq.w	406c2e <_vfiprintf_r+0x352>
  406fea:	3201      	adds	r2, #1
  406fec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  406ff0:	2101      	movs	r1, #1
  406ff2:	2807      	cmp	r0, #7
  406ff4:	9211      	str	r2, [sp, #68]	; 0x44
  406ff6:	9010      	str	r0, [sp, #64]	; 0x40
  406ff8:	f8ca 5000 	str.w	r5, [sl]
  406ffc:	f8ca 1004 	str.w	r1, [sl, #4]
  407000:	f340 8108 	ble.w	407214 <_vfiprintf_r+0x938>
  407004:	2a00      	cmp	r2, #0
  407006:	f040 81bc 	bne.w	407382 <_vfiprintf_r+0xaa6>
  40700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40700c:	2b00      	cmp	r3, #0
  40700e:	f43f ae1f 	beq.w	406c50 <_vfiprintf_r+0x374>
  407012:	ab0e      	add	r3, sp, #56	; 0x38
  407014:	2202      	movs	r2, #2
  407016:	4608      	mov	r0, r1
  407018:	931c      	str	r3, [sp, #112]	; 0x70
  40701a:	921d      	str	r2, [sp, #116]	; 0x74
  40701c:	46ca      	mov	sl, r9
  40701e:	4601      	mov	r1, r0
  407020:	f10a 0a08 	add.w	sl, sl, #8
  407024:	3001      	adds	r0, #1
  407026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407028:	2b80      	cmp	r3, #128	; 0x80
  40702a:	f43f ae19 	beq.w	406c60 <_vfiprintf_r+0x384>
  40702e:	9b05      	ldr	r3, [sp, #20]
  407030:	1ae4      	subs	r4, r4, r3
  407032:	2c00      	cmp	r4, #0
  407034:	dd2e      	ble.n	407094 <_vfiprintf_r+0x7b8>
  407036:	2c10      	cmp	r4, #16
  407038:	4db3      	ldr	r5, [pc, #716]	; (407308 <_vfiprintf_r+0xa2c>)
  40703a:	dd1e      	ble.n	40707a <_vfiprintf_r+0x79e>
  40703c:	46d6      	mov	lr, sl
  40703e:	2610      	movs	r6, #16
  407040:	9f06      	ldr	r7, [sp, #24]
  407042:	f8dd a010 	ldr.w	sl, [sp, #16]
  407046:	e006      	b.n	407056 <_vfiprintf_r+0x77a>
  407048:	1c88      	adds	r0, r1, #2
  40704a:	f10e 0e08 	add.w	lr, lr, #8
  40704e:	4619      	mov	r1, r3
  407050:	3c10      	subs	r4, #16
  407052:	2c10      	cmp	r4, #16
  407054:	dd10      	ble.n	407078 <_vfiprintf_r+0x79c>
  407056:	1c4b      	adds	r3, r1, #1
  407058:	3210      	adds	r2, #16
  40705a:	2b07      	cmp	r3, #7
  40705c:	9211      	str	r2, [sp, #68]	; 0x44
  40705e:	e88e 0060 	stmia.w	lr, {r5, r6}
  407062:	9310      	str	r3, [sp, #64]	; 0x40
  407064:	ddf0      	ble.n	407048 <_vfiprintf_r+0x76c>
  407066:	2a00      	cmp	r2, #0
  407068:	d165      	bne.n	407136 <_vfiprintf_r+0x85a>
  40706a:	3c10      	subs	r4, #16
  40706c:	2c10      	cmp	r4, #16
  40706e:	f04f 0001 	mov.w	r0, #1
  407072:	4611      	mov	r1, r2
  407074:	46ce      	mov	lr, r9
  407076:	dcee      	bgt.n	407056 <_vfiprintf_r+0x77a>
  407078:	46f2      	mov	sl, lr
  40707a:	4422      	add	r2, r4
  40707c:	2807      	cmp	r0, #7
  40707e:	9211      	str	r2, [sp, #68]	; 0x44
  407080:	f8ca 5000 	str.w	r5, [sl]
  407084:	f8ca 4004 	str.w	r4, [sl, #4]
  407088:	9010      	str	r0, [sp, #64]	; 0x40
  40708a:	f300 8085 	bgt.w	407198 <_vfiprintf_r+0x8bc>
  40708e:	f10a 0a08 	add.w	sl, sl, #8
  407092:	3001      	adds	r0, #1
  407094:	9905      	ldr	r1, [sp, #20]
  407096:	f8ca b000 	str.w	fp, [sl]
  40709a:	440a      	add	r2, r1
  40709c:	2807      	cmp	r0, #7
  40709e:	9211      	str	r2, [sp, #68]	; 0x44
  4070a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4070a4:	9010      	str	r0, [sp, #64]	; 0x40
  4070a6:	f340 8082 	ble.w	4071ae <_vfiprintf_r+0x8d2>
  4070aa:	2a00      	cmp	r2, #0
  4070ac:	f040 8118 	bne.w	4072e0 <_vfiprintf_r+0xa04>
  4070b0:	9b02      	ldr	r3, [sp, #8]
  4070b2:	9210      	str	r2, [sp, #64]	; 0x40
  4070b4:	0758      	lsls	r0, r3, #29
  4070b6:	d535      	bpl.n	407124 <_vfiprintf_r+0x848>
  4070b8:	9b08      	ldr	r3, [sp, #32]
  4070ba:	9901      	ldr	r1, [sp, #4]
  4070bc:	1a5c      	subs	r4, r3, r1
  4070be:	2c00      	cmp	r4, #0
  4070c0:	f340 80e7 	ble.w	407292 <_vfiprintf_r+0x9b6>
  4070c4:	46ca      	mov	sl, r9
  4070c6:	2c10      	cmp	r4, #16
  4070c8:	f340 8218 	ble.w	4074fc <_vfiprintf_r+0xc20>
  4070cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4070ce:	4e8f      	ldr	r6, [pc, #572]	; (40730c <_vfiprintf_r+0xa30>)
  4070d0:	9f06      	ldr	r7, [sp, #24]
  4070d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4070d6:	2510      	movs	r5, #16
  4070d8:	e006      	b.n	4070e8 <_vfiprintf_r+0x80c>
  4070da:	1c88      	adds	r0, r1, #2
  4070dc:	f10a 0a08 	add.w	sl, sl, #8
  4070e0:	4619      	mov	r1, r3
  4070e2:	3c10      	subs	r4, #16
  4070e4:	2c10      	cmp	r4, #16
  4070e6:	dd11      	ble.n	40710c <_vfiprintf_r+0x830>
  4070e8:	1c4b      	adds	r3, r1, #1
  4070ea:	3210      	adds	r2, #16
  4070ec:	2b07      	cmp	r3, #7
  4070ee:	9211      	str	r2, [sp, #68]	; 0x44
  4070f0:	f8ca 6000 	str.w	r6, [sl]
  4070f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4070f8:	9310      	str	r3, [sp, #64]	; 0x40
  4070fa:	ddee      	ble.n	4070da <_vfiprintf_r+0x7fe>
  4070fc:	bb42      	cbnz	r2, 407150 <_vfiprintf_r+0x874>
  4070fe:	3c10      	subs	r4, #16
  407100:	2c10      	cmp	r4, #16
  407102:	f04f 0001 	mov.w	r0, #1
  407106:	4611      	mov	r1, r2
  407108:	46ca      	mov	sl, r9
  40710a:	dced      	bgt.n	4070e8 <_vfiprintf_r+0x80c>
  40710c:	4422      	add	r2, r4
  40710e:	2807      	cmp	r0, #7
  407110:	9211      	str	r2, [sp, #68]	; 0x44
  407112:	f8ca 6000 	str.w	r6, [sl]
  407116:	f8ca 4004 	str.w	r4, [sl, #4]
  40711a:	9010      	str	r0, [sp, #64]	; 0x40
  40711c:	dd51      	ble.n	4071c2 <_vfiprintf_r+0x8e6>
  40711e:	2a00      	cmp	r2, #0
  407120:	f040 819b 	bne.w	40745a <_vfiprintf_r+0xb7e>
  407124:	9b03      	ldr	r3, [sp, #12]
  407126:	9a08      	ldr	r2, [sp, #32]
  407128:	9901      	ldr	r1, [sp, #4]
  40712a:	428a      	cmp	r2, r1
  40712c:	bfac      	ite	ge
  40712e:	189b      	addge	r3, r3, r2
  407130:	185b      	addlt	r3, r3, r1
  407132:	9303      	str	r3, [sp, #12]
  407134:	e04e      	b.n	4071d4 <_vfiprintf_r+0x8f8>
  407136:	aa0f      	add	r2, sp, #60	; 0x3c
  407138:	4651      	mov	r1, sl
  40713a:	4638      	mov	r0, r7
  40713c:	f7ff fb8e 	bl	40685c <__sprint_r.part.0>
  407140:	2800      	cmp	r0, #0
  407142:	f040 813f 	bne.w	4073c4 <_vfiprintf_r+0xae8>
  407146:	9910      	ldr	r1, [sp, #64]	; 0x40
  407148:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40714a:	1c48      	adds	r0, r1, #1
  40714c:	46ce      	mov	lr, r9
  40714e:	e77f      	b.n	407050 <_vfiprintf_r+0x774>
  407150:	aa0f      	add	r2, sp, #60	; 0x3c
  407152:	4659      	mov	r1, fp
  407154:	4638      	mov	r0, r7
  407156:	f7ff fb81 	bl	40685c <__sprint_r.part.0>
  40715a:	b960      	cbnz	r0, 407176 <_vfiprintf_r+0x89a>
  40715c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40715e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407160:	1c48      	adds	r0, r1, #1
  407162:	46ca      	mov	sl, r9
  407164:	e7bd      	b.n	4070e2 <_vfiprintf_r+0x806>
  407166:	9b11      	ldr	r3, [sp, #68]	; 0x44
  407168:	f8dd b010 	ldr.w	fp, [sp, #16]
  40716c:	2b00      	cmp	r3, #0
  40716e:	f040 81d4 	bne.w	40751a <_vfiprintf_r+0xc3e>
  407172:	2300      	movs	r3, #0
  407174:	9310      	str	r3, [sp, #64]	; 0x40
  407176:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40717a:	f013 0f01 	tst.w	r3, #1
  40717e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407182:	d102      	bne.n	40718a <_vfiprintf_r+0x8ae>
  407184:	059a      	lsls	r2, r3, #22
  407186:	f140 80de 	bpl.w	407346 <_vfiprintf_r+0xa6a>
  40718a:	065b      	lsls	r3, r3, #25
  40718c:	f53f acb2 	bmi.w	406af4 <_vfiprintf_r+0x218>
  407190:	9803      	ldr	r0, [sp, #12]
  407192:	b02d      	add	sp, #180	; 0xb4
  407194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407198:	2a00      	cmp	r2, #0
  40719a:	f040 8106 	bne.w	4073aa <_vfiprintf_r+0xace>
  40719e:	9a05      	ldr	r2, [sp, #20]
  4071a0:	921d      	str	r2, [sp, #116]	; 0x74
  4071a2:	2301      	movs	r3, #1
  4071a4:	9211      	str	r2, [sp, #68]	; 0x44
  4071a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4071aa:	9310      	str	r3, [sp, #64]	; 0x40
  4071ac:	46ca      	mov	sl, r9
  4071ae:	f10a 0a08 	add.w	sl, sl, #8
  4071b2:	9b02      	ldr	r3, [sp, #8]
  4071b4:	0759      	lsls	r1, r3, #29
  4071b6:	d504      	bpl.n	4071c2 <_vfiprintf_r+0x8e6>
  4071b8:	9b08      	ldr	r3, [sp, #32]
  4071ba:	9901      	ldr	r1, [sp, #4]
  4071bc:	1a5c      	subs	r4, r3, r1
  4071be:	2c00      	cmp	r4, #0
  4071c0:	dc81      	bgt.n	4070c6 <_vfiprintf_r+0x7ea>
  4071c2:	9b03      	ldr	r3, [sp, #12]
  4071c4:	9908      	ldr	r1, [sp, #32]
  4071c6:	9801      	ldr	r0, [sp, #4]
  4071c8:	4281      	cmp	r1, r0
  4071ca:	bfac      	ite	ge
  4071cc:	185b      	addge	r3, r3, r1
  4071ce:	181b      	addlt	r3, r3, r0
  4071d0:	9303      	str	r3, [sp, #12]
  4071d2:	bb72      	cbnz	r2, 407232 <_vfiprintf_r+0x956>
  4071d4:	2300      	movs	r3, #0
  4071d6:	9310      	str	r3, [sp, #64]	; 0x40
  4071d8:	46ca      	mov	sl, r9
  4071da:	f7ff bbbc 	b.w	406956 <_vfiprintf_r+0x7a>
  4071de:	aa0f      	add	r2, sp, #60	; 0x3c
  4071e0:	9904      	ldr	r1, [sp, #16]
  4071e2:	4620      	mov	r0, r4
  4071e4:	f7ff fb3a 	bl	40685c <__sprint_r.part.0>
  4071e8:	bb50      	cbnz	r0, 407240 <_vfiprintf_r+0x964>
  4071ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4071ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4071ee:	f101 0e01 	add.w	lr, r1, #1
  4071f2:	46cc      	mov	ip, r9
  4071f4:	e548      	b.n	406c88 <_vfiprintf_r+0x3ac>
  4071f6:	2a00      	cmp	r2, #0
  4071f8:	f040 8140 	bne.w	40747c <_vfiprintf_r+0xba0>
  4071fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  407200:	2900      	cmp	r1, #0
  407202:	f000 811b 	beq.w	40743c <_vfiprintf_r+0xb60>
  407206:	2201      	movs	r2, #1
  407208:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40720c:	4610      	mov	r0, r2
  40720e:	921d      	str	r2, [sp, #116]	; 0x74
  407210:	911c      	str	r1, [sp, #112]	; 0x70
  407212:	46ca      	mov	sl, r9
  407214:	4601      	mov	r1, r0
  407216:	f10a 0a08 	add.w	sl, sl, #8
  40721a:	3001      	adds	r0, #1
  40721c:	e507      	b.n	406c2e <_vfiprintf_r+0x352>
  40721e:	9b02      	ldr	r3, [sp, #8]
  407220:	2a01      	cmp	r2, #1
  407222:	f000 8098 	beq.w	407356 <_vfiprintf_r+0xa7a>
  407226:	2a02      	cmp	r2, #2
  407228:	d10d      	bne.n	407246 <_vfiprintf_r+0x96a>
  40722a:	9302      	str	r3, [sp, #8]
  40722c:	2600      	movs	r6, #0
  40722e:	2700      	movs	r7, #0
  407230:	e5b0      	b.n	406d94 <_vfiprintf_r+0x4b8>
  407232:	aa0f      	add	r2, sp, #60	; 0x3c
  407234:	9904      	ldr	r1, [sp, #16]
  407236:	9806      	ldr	r0, [sp, #24]
  407238:	f7ff fb10 	bl	40685c <__sprint_r.part.0>
  40723c:	2800      	cmp	r0, #0
  40723e:	d0c9      	beq.n	4071d4 <_vfiprintf_r+0x8f8>
  407240:	f8dd b010 	ldr.w	fp, [sp, #16]
  407244:	e797      	b.n	407176 <_vfiprintf_r+0x89a>
  407246:	9302      	str	r3, [sp, #8]
  407248:	2600      	movs	r6, #0
  40724a:	2700      	movs	r7, #0
  40724c:	4649      	mov	r1, r9
  40724e:	e000      	b.n	407252 <_vfiprintf_r+0x976>
  407250:	4659      	mov	r1, fp
  407252:	08f2      	lsrs	r2, r6, #3
  407254:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  407258:	08f8      	lsrs	r0, r7, #3
  40725a:	f006 0307 	and.w	r3, r6, #7
  40725e:	4607      	mov	r7, r0
  407260:	4616      	mov	r6, r2
  407262:	3330      	adds	r3, #48	; 0x30
  407264:	ea56 0207 	orrs.w	r2, r6, r7
  407268:	f801 3c01 	strb.w	r3, [r1, #-1]
  40726c:	f101 3bff 	add.w	fp, r1, #4294967295
  407270:	d1ee      	bne.n	407250 <_vfiprintf_r+0x974>
  407272:	9a02      	ldr	r2, [sp, #8]
  407274:	07d6      	lsls	r6, r2, #31
  407276:	f57f ad9d 	bpl.w	406db4 <_vfiprintf_r+0x4d8>
  40727a:	2b30      	cmp	r3, #48	; 0x30
  40727c:	f43f ad9a 	beq.w	406db4 <_vfiprintf_r+0x4d8>
  407280:	3902      	subs	r1, #2
  407282:	2330      	movs	r3, #48	; 0x30
  407284:	f80b 3c01 	strb.w	r3, [fp, #-1]
  407288:	eba9 0301 	sub.w	r3, r9, r1
  40728c:	9305      	str	r3, [sp, #20]
  40728e:	468b      	mov	fp, r1
  407290:	e476      	b.n	406b80 <_vfiprintf_r+0x2a4>
  407292:	9b03      	ldr	r3, [sp, #12]
  407294:	9a08      	ldr	r2, [sp, #32]
  407296:	428a      	cmp	r2, r1
  407298:	bfac      	ite	ge
  40729a:	189b      	addge	r3, r3, r2
  40729c:	185b      	addlt	r3, r3, r1
  40729e:	9303      	str	r3, [sp, #12]
  4072a0:	e798      	b.n	4071d4 <_vfiprintf_r+0x8f8>
  4072a2:	2202      	movs	r2, #2
  4072a4:	e44d      	b.n	406b42 <_vfiprintf_r+0x266>
  4072a6:	2f00      	cmp	r7, #0
  4072a8:	bf08      	it	eq
  4072aa:	2e0a      	cmpeq	r6, #10
  4072ac:	d352      	bcc.n	407354 <_vfiprintf_r+0xa78>
  4072ae:	46cb      	mov	fp, r9
  4072b0:	4630      	mov	r0, r6
  4072b2:	4639      	mov	r1, r7
  4072b4:	220a      	movs	r2, #10
  4072b6:	2300      	movs	r3, #0
  4072b8:	f001 fbc6 	bl	408a48 <__aeabi_uldivmod>
  4072bc:	3230      	adds	r2, #48	; 0x30
  4072be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4072c2:	4630      	mov	r0, r6
  4072c4:	4639      	mov	r1, r7
  4072c6:	2300      	movs	r3, #0
  4072c8:	220a      	movs	r2, #10
  4072ca:	f001 fbbd 	bl	408a48 <__aeabi_uldivmod>
  4072ce:	4606      	mov	r6, r0
  4072d0:	460f      	mov	r7, r1
  4072d2:	ea56 0307 	orrs.w	r3, r6, r7
  4072d6:	d1eb      	bne.n	4072b0 <_vfiprintf_r+0x9d4>
  4072d8:	e56c      	b.n	406db4 <_vfiprintf_r+0x4d8>
  4072da:	9405      	str	r4, [sp, #20]
  4072dc:	46cb      	mov	fp, r9
  4072de:	e44f      	b.n	406b80 <_vfiprintf_r+0x2a4>
  4072e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4072e2:	9904      	ldr	r1, [sp, #16]
  4072e4:	9806      	ldr	r0, [sp, #24]
  4072e6:	f7ff fab9 	bl	40685c <__sprint_r.part.0>
  4072ea:	2800      	cmp	r0, #0
  4072ec:	d1a8      	bne.n	407240 <_vfiprintf_r+0x964>
  4072ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4072f0:	46ca      	mov	sl, r9
  4072f2:	e75e      	b.n	4071b2 <_vfiprintf_r+0x8d6>
  4072f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4072f6:	9904      	ldr	r1, [sp, #16]
  4072f8:	9806      	ldr	r0, [sp, #24]
  4072fa:	f7ff faaf 	bl	40685c <__sprint_r.part.0>
  4072fe:	2800      	cmp	r0, #0
  407300:	d19e      	bne.n	407240 <_vfiprintf_r+0x964>
  407302:	46ca      	mov	sl, r9
  407304:	f7ff bbc0 	b.w	406a88 <_vfiprintf_r+0x1ac>
  407308:	004092c8 	.word	0x004092c8
  40730c:	004092b8 	.word	0x004092b8
  407310:	3104      	adds	r1, #4
  407312:	6816      	ldr	r6, [r2, #0]
  407314:	9107      	str	r1, [sp, #28]
  407316:	2201      	movs	r2, #1
  407318:	2700      	movs	r7, #0
  40731a:	e412      	b.n	406b42 <_vfiprintf_r+0x266>
  40731c:	9807      	ldr	r0, [sp, #28]
  40731e:	4601      	mov	r1, r0
  407320:	3104      	adds	r1, #4
  407322:	6806      	ldr	r6, [r0, #0]
  407324:	9107      	str	r1, [sp, #28]
  407326:	2700      	movs	r7, #0
  407328:	e40b      	b.n	406b42 <_vfiprintf_r+0x266>
  40732a:	680e      	ldr	r6, [r1, #0]
  40732c:	3104      	adds	r1, #4
  40732e:	9107      	str	r1, [sp, #28]
  407330:	2700      	movs	r7, #0
  407332:	e591      	b.n	406e58 <_vfiprintf_r+0x57c>
  407334:	9907      	ldr	r1, [sp, #28]
  407336:	680e      	ldr	r6, [r1, #0]
  407338:	460a      	mov	r2, r1
  40733a:	17f7      	asrs	r7, r6, #31
  40733c:	3204      	adds	r2, #4
  40733e:	9207      	str	r2, [sp, #28]
  407340:	4630      	mov	r0, r6
  407342:	4639      	mov	r1, r7
  407344:	e50f      	b.n	406d66 <_vfiprintf_r+0x48a>
  407346:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40734a:	f000 fe7f 	bl	40804c <__retarget_lock_release_recursive>
  40734e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  407352:	e71a      	b.n	40718a <_vfiprintf_r+0x8ae>
  407354:	9b02      	ldr	r3, [sp, #8]
  407356:	9302      	str	r3, [sp, #8]
  407358:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40735c:	3630      	adds	r6, #48	; 0x30
  40735e:	2301      	movs	r3, #1
  407360:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  407364:	9305      	str	r3, [sp, #20]
  407366:	e40b      	b.n	406b80 <_vfiprintf_r+0x2a4>
  407368:	aa0f      	add	r2, sp, #60	; 0x3c
  40736a:	9904      	ldr	r1, [sp, #16]
  40736c:	9806      	ldr	r0, [sp, #24]
  40736e:	f7ff fa75 	bl	40685c <__sprint_r.part.0>
  407372:	2800      	cmp	r0, #0
  407374:	f47f af64 	bne.w	407240 <_vfiprintf_r+0x964>
  407378:	9910      	ldr	r1, [sp, #64]	; 0x40
  40737a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40737c:	1c48      	adds	r0, r1, #1
  40737e:	46ca      	mov	sl, r9
  407380:	e651      	b.n	407026 <_vfiprintf_r+0x74a>
  407382:	aa0f      	add	r2, sp, #60	; 0x3c
  407384:	9904      	ldr	r1, [sp, #16]
  407386:	9806      	ldr	r0, [sp, #24]
  407388:	f7ff fa68 	bl	40685c <__sprint_r.part.0>
  40738c:	2800      	cmp	r0, #0
  40738e:	f47f af57 	bne.w	407240 <_vfiprintf_r+0x964>
  407392:	9910      	ldr	r1, [sp, #64]	; 0x40
  407394:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407396:	1c48      	adds	r0, r1, #1
  407398:	46ca      	mov	sl, r9
  40739a:	e448      	b.n	406c2e <_vfiprintf_r+0x352>
  40739c:	2a00      	cmp	r2, #0
  40739e:	f040 8091 	bne.w	4074c4 <_vfiprintf_r+0xbe8>
  4073a2:	2001      	movs	r0, #1
  4073a4:	4611      	mov	r1, r2
  4073a6:	46ca      	mov	sl, r9
  4073a8:	e641      	b.n	40702e <_vfiprintf_r+0x752>
  4073aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4073ac:	9904      	ldr	r1, [sp, #16]
  4073ae:	9806      	ldr	r0, [sp, #24]
  4073b0:	f7ff fa54 	bl	40685c <__sprint_r.part.0>
  4073b4:	2800      	cmp	r0, #0
  4073b6:	f47f af43 	bne.w	407240 <_vfiprintf_r+0x964>
  4073ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4073bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4073be:	3001      	adds	r0, #1
  4073c0:	46ca      	mov	sl, r9
  4073c2:	e667      	b.n	407094 <_vfiprintf_r+0x7b8>
  4073c4:	46d3      	mov	fp, sl
  4073c6:	e6d6      	b.n	407176 <_vfiprintf_r+0x89a>
  4073c8:	9e07      	ldr	r6, [sp, #28]
  4073ca:	3607      	adds	r6, #7
  4073cc:	f026 0207 	bic.w	r2, r6, #7
  4073d0:	f102 0108 	add.w	r1, r2, #8
  4073d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4073d8:	9107      	str	r1, [sp, #28]
  4073da:	2201      	movs	r2, #1
  4073dc:	f7ff bbb1 	b.w	406b42 <_vfiprintf_r+0x266>
  4073e0:	9e07      	ldr	r6, [sp, #28]
  4073e2:	3607      	adds	r6, #7
  4073e4:	f026 0607 	bic.w	r6, r6, #7
  4073e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4073ec:	f106 0208 	add.w	r2, r6, #8
  4073f0:	9207      	str	r2, [sp, #28]
  4073f2:	4606      	mov	r6, r0
  4073f4:	460f      	mov	r7, r1
  4073f6:	e4b6      	b.n	406d66 <_vfiprintf_r+0x48a>
  4073f8:	9e07      	ldr	r6, [sp, #28]
  4073fa:	3607      	adds	r6, #7
  4073fc:	f026 0207 	bic.w	r2, r6, #7
  407400:	f102 0108 	add.w	r1, r2, #8
  407404:	e9d2 6700 	ldrd	r6, r7, [r2]
  407408:	9107      	str	r1, [sp, #28]
  40740a:	2200      	movs	r2, #0
  40740c:	f7ff bb99 	b.w	406b42 <_vfiprintf_r+0x266>
  407410:	9e07      	ldr	r6, [sp, #28]
  407412:	3607      	adds	r6, #7
  407414:	f026 0107 	bic.w	r1, r6, #7
  407418:	f101 0008 	add.w	r0, r1, #8
  40741c:	9007      	str	r0, [sp, #28]
  40741e:	e9d1 6700 	ldrd	r6, r7, [r1]
  407422:	e519      	b.n	406e58 <_vfiprintf_r+0x57c>
  407424:	46cb      	mov	fp, r9
  407426:	f7ff bbab 	b.w	406b80 <_vfiprintf_r+0x2a4>
  40742a:	252d      	movs	r5, #45	; 0x2d
  40742c:	4276      	negs	r6, r6
  40742e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  407432:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407436:	2201      	movs	r2, #1
  407438:	f7ff bb88 	b.w	406b4c <_vfiprintf_r+0x270>
  40743c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40743e:	b9b3      	cbnz	r3, 40746e <_vfiprintf_r+0xb92>
  407440:	4611      	mov	r1, r2
  407442:	2001      	movs	r0, #1
  407444:	46ca      	mov	sl, r9
  407446:	e5f2      	b.n	40702e <_vfiprintf_r+0x752>
  407448:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40744c:	f000 fdfe 	bl	40804c <__retarget_lock_release_recursive>
  407450:	f04f 33ff 	mov.w	r3, #4294967295
  407454:	9303      	str	r3, [sp, #12]
  407456:	f7ff bb50 	b.w	406afa <_vfiprintf_r+0x21e>
  40745a:	aa0f      	add	r2, sp, #60	; 0x3c
  40745c:	9904      	ldr	r1, [sp, #16]
  40745e:	9806      	ldr	r0, [sp, #24]
  407460:	f7ff f9fc 	bl	40685c <__sprint_r.part.0>
  407464:	2800      	cmp	r0, #0
  407466:	f47f aeeb 	bne.w	407240 <_vfiprintf_r+0x964>
  40746a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40746c:	e6a9      	b.n	4071c2 <_vfiprintf_r+0x8e6>
  40746e:	ab0e      	add	r3, sp, #56	; 0x38
  407470:	2202      	movs	r2, #2
  407472:	931c      	str	r3, [sp, #112]	; 0x70
  407474:	921d      	str	r2, [sp, #116]	; 0x74
  407476:	2001      	movs	r0, #1
  407478:	46ca      	mov	sl, r9
  40747a:	e5d0      	b.n	40701e <_vfiprintf_r+0x742>
  40747c:	aa0f      	add	r2, sp, #60	; 0x3c
  40747e:	9904      	ldr	r1, [sp, #16]
  407480:	9806      	ldr	r0, [sp, #24]
  407482:	f7ff f9eb 	bl	40685c <__sprint_r.part.0>
  407486:	2800      	cmp	r0, #0
  407488:	f47f aeda 	bne.w	407240 <_vfiprintf_r+0x964>
  40748c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40748e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  407490:	1c48      	adds	r0, r1, #1
  407492:	46ca      	mov	sl, r9
  407494:	e5a4      	b.n	406fe0 <_vfiprintf_r+0x704>
  407496:	9a07      	ldr	r2, [sp, #28]
  407498:	9903      	ldr	r1, [sp, #12]
  40749a:	6813      	ldr	r3, [r2, #0]
  40749c:	17cd      	asrs	r5, r1, #31
  40749e:	4608      	mov	r0, r1
  4074a0:	3204      	adds	r2, #4
  4074a2:	4629      	mov	r1, r5
  4074a4:	9207      	str	r2, [sp, #28]
  4074a6:	e9c3 0100 	strd	r0, r1, [r3]
  4074aa:	f7ff ba54 	b.w	406956 <_vfiprintf_r+0x7a>
  4074ae:	4658      	mov	r0, fp
  4074b0:	9607      	str	r6, [sp, #28]
  4074b2:	9302      	str	r3, [sp, #8]
  4074b4:	f7ff f964 	bl	406780 <strlen>
  4074b8:	2400      	movs	r4, #0
  4074ba:	9005      	str	r0, [sp, #20]
  4074bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4074c0:	f7ff bb5e 	b.w	406b80 <_vfiprintf_r+0x2a4>
  4074c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4074c6:	9904      	ldr	r1, [sp, #16]
  4074c8:	9806      	ldr	r0, [sp, #24]
  4074ca:	f7ff f9c7 	bl	40685c <__sprint_r.part.0>
  4074ce:	2800      	cmp	r0, #0
  4074d0:	f47f aeb6 	bne.w	407240 <_vfiprintf_r+0x964>
  4074d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4074d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4074d8:	1c48      	adds	r0, r1, #1
  4074da:	46ca      	mov	sl, r9
  4074dc:	e5a7      	b.n	40702e <_vfiprintf_r+0x752>
  4074de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4074e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4074e2:	4e20      	ldr	r6, [pc, #128]	; (407564 <_vfiprintf_r+0xc88>)
  4074e4:	3101      	adds	r1, #1
  4074e6:	f7ff bb90 	b.w	406c0a <_vfiprintf_r+0x32e>
  4074ea:	2c06      	cmp	r4, #6
  4074ec:	bf28      	it	cs
  4074ee:	2406      	movcs	r4, #6
  4074f0:	9405      	str	r4, [sp, #20]
  4074f2:	9607      	str	r6, [sp, #28]
  4074f4:	9401      	str	r4, [sp, #4]
  4074f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 407568 <_vfiprintf_r+0xc8c>
  4074fa:	e4d5      	b.n	406ea8 <_vfiprintf_r+0x5cc>
  4074fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4074fe:	4e19      	ldr	r6, [pc, #100]	; (407564 <_vfiprintf_r+0xc88>)
  407500:	3001      	adds	r0, #1
  407502:	e603      	b.n	40710c <_vfiprintf_r+0x830>
  407504:	9405      	str	r4, [sp, #20]
  407506:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40750a:	9607      	str	r6, [sp, #28]
  40750c:	9302      	str	r3, [sp, #8]
  40750e:	4604      	mov	r4, r0
  407510:	f7ff bb36 	b.w	406b80 <_vfiprintf_r+0x2a4>
  407514:	4686      	mov	lr, r0
  407516:	f7ff bbce 	b.w	406cb6 <_vfiprintf_r+0x3da>
  40751a:	9806      	ldr	r0, [sp, #24]
  40751c:	aa0f      	add	r2, sp, #60	; 0x3c
  40751e:	4659      	mov	r1, fp
  407520:	f7ff f99c 	bl	40685c <__sprint_r.part.0>
  407524:	2800      	cmp	r0, #0
  407526:	f43f ae24 	beq.w	407172 <_vfiprintf_r+0x896>
  40752a:	e624      	b.n	407176 <_vfiprintf_r+0x89a>
  40752c:	9907      	ldr	r1, [sp, #28]
  40752e:	f898 2001 	ldrb.w	r2, [r8, #1]
  407532:	680c      	ldr	r4, [r1, #0]
  407534:	3104      	adds	r1, #4
  407536:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40753a:	46b8      	mov	r8, r7
  40753c:	9107      	str	r1, [sp, #28]
  40753e:	f7ff ba3f 	b.w	4069c0 <_vfiprintf_r+0xe4>
  407542:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407546:	e43c      	b.n	406dc2 <_vfiprintf_r+0x4e6>
  407548:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40754c:	e521      	b.n	406f92 <_vfiprintf_r+0x6b6>
  40754e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407552:	f7ff bbf4 	b.w	406d3e <_vfiprintf_r+0x462>
  407556:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40755a:	e491      	b.n	406e80 <_vfiprintf_r+0x5a4>
  40755c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  407560:	e469      	b.n	406e36 <_vfiprintf_r+0x55a>
  407562:	bf00      	nop
  407564:	004092b8 	.word	0x004092b8
  407568:	004092b0 	.word	0x004092b0

0040756c <__sbprintf>:
  40756c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407570:	460c      	mov	r4, r1
  407572:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  407576:	8989      	ldrh	r1, [r1, #12]
  407578:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40757a:	89e5      	ldrh	r5, [r4, #14]
  40757c:	9619      	str	r6, [sp, #100]	; 0x64
  40757e:	f021 0102 	bic.w	r1, r1, #2
  407582:	4606      	mov	r6, r0
  407584:	69e0      	ldr	r0, [r4, #28]
  407586:	f8ad 100c 	strh.w	r1, [sp, #12]
  40758a:	4617      	mov	r7, r2
  40758c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  407590:	6a62      	ldr	r2, [r4, #36]	; 0x24
  407592:	f8ad 500e 	strh.w	r5, [sp, #14]
  407596:	4698      	mov	r8, r3
  407598:	ad1a      	add	r5, sp, #104	; 0x68
  40759a:	2300      	movs	r3, #0
  40759c:	9007      	str	r0, [sp, #28]
  40759e:	a816      	add	r0, sp, #88	; 0x58
  4075a0:	9209      	str	r2, [sp, #36]	; 0x24
  4075a2:	9306      	str	r3, [sp, #24]
  4075a4:	9500      	str	r5, [sp, #0]
  4075a6:	9504      	str	r5, [sp, #16]
  4075a8:	9102      	str	r1, [sp, #8]
  4075aa:	9105      	str	r1, [sp, #20]
  4075ac:	f000 fd48 	bl	408040 <__retarget_lock_init_recursive>
  4075b0:	4643      	mov	r3, r8
  4075b2:	463a      	mov	r2, r7
  4075b4:	4669      	mov	r1, sp
  4075b6:	4630      	mov	r0, r6
  4075b8:	f7ff f990 	bl	4068dc <_vfiprintf_r>
  4075bc:	1e05      	subs	r5, r0, #0
  4075be:	db07      	blt.n	4075d0 <__sbprintf+0x64>
  4075c0:	4630      	mov	r0, r6
  4075c2:	4669      	mov	r1, sp
  4075c4:	f000 f928 	bl	407818 <_fflush_r>
  4075c8:	2800      	cmp	r0, #0
  4075ca:	bf18      	it	ne
  4075cc:	f04f 35ff 	movne.w	r5, #4294967295
  4075d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4075d4:	065b      	lsls	r3, r3, #25
  4075d6:	d503      	bpl.n	4075e0 <__sbprintf+0x74>
  4075d8:	89a3      	ldrh	r3, [r4, #12]
  4075da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4075de:	81a3      	strh	r3, [r4, #12]
  4075e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4075e2:	f000 fd2f 	bl	408044 <__retarget_lock_close_recursive>
  4075e6:	4628      	mov	r0, r5
  4075e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4075ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004075f0 <__swsetup_r>:
  4075f0:	b538      	push	{r3, r4, r5, lr}
  4075f2:	4b30      	ldr	r3, [pc, #192]	; (4076b4 <__swsetup_r+0xc4>)
  4075f4:	681b      	ldr	r3, [r3, #0]
  4075f6:	4605      	mov	r5, r0
  4075f8:	460c      	mov	r4, r1
  4075fa:	b113      	cbz	r3, 407602 <__swsetup_r+0x12>
  4075fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4075fe:	2a00      	cmp	r2, #0
  407600:	d038      	beq.n	407674 <__swsetup_r+0x84>
  407602:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407606:	b293      	uxth	r3, r2
  407608:	0718      	lsls	r0, r3, #28
  40760a:	d50c      	bpl.n	407626 <__swsetup_r+0x36>
  40760c:	6920      	ldr	r0, [r4, #16]
  40760e:	b1a8      	cbz	r0, 40763c <__swsetup_r+0x4c>
  407610:	f013 0201 	ands.w	r2, r3, #1
  407614:	d01e      	beq.n	407654 <__swsetup_r+0x64>
  407616:	6963      	ldr	r3, [r4, #20]
  407618:	2200      	movs	r2, #0
  40761a:	425b      	negs	r3, r3
  40761c:	61a3      	str	r3, [r4, #24]
  40761e:	60a2      	str	r2, [r4, #8]
  407620:	b1f0      	cbz	r0, 407660 <__swsetup_r+0x70>
  407622:	2000      	movs	r0, #0
  407624:	bd38      	pop	{r3, r4, r5, pc}
  407626:	06d9      	lsls	r1, r3, #27
  407628:	d53c      	bpl.n	4076a4 <__swsetup_r+0xb4>
  40762a:	0758      	lsls	r0, r3, #29
  40762c:	d426      	bmi.n	40767c <__swsetup_r+0x8c>
  40762e:	6920      	ldr	r0, [r4, #16]
  407630:	f042 0308 	orr.w	r3, r2, #8
  407634:	81a3      	strh	r3, [r4, #12]
  407636:	b29b      	uxth	r3, r3
  407638:	2800      	cmp	r0, #0
  40763a:	d1e9      	bne.n	407610 <__swsetup_r+0x20>
  40763c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  407640:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  407644:	d0e4      	beq.n	407610 <__swsetup_r+0x20>
  407646:	4628      	mov	r0, r5
  407648:	4621      	mov	r1, r4
  40764a:	f000 fd2f 	bl	4080ac <__smakebuf_r>
  40764e:	89a3      	ldrh	r3, [r4, #12]
  407650:	6920      	ldr	r0, [r4, #16]
  407652:	e7dd      	b.n	407610 <__swsetup_r+0x20>
  407654:	0799      	lsls	r1, r3, #30
  407656:	bf58      	it	pl
  407658:	6962      	ldrpl	r2, [r4, #20]
  40765a:	60a2      	str	r2, [r4, #8]
  40765c:	2800      	cmp	r0, #0
  40765e:	d1e0      	bne.n	407622 <__swsetup_r+0x32>
  407660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407664:	061a      	lsls	r2, r3, #24
  407666:	d5dd      	bpl.n	407624 <__swsetup_r+0x34>
  407668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40766c:	81a3      	strh	r3, [r4, #12]
  40766e:	f04f 30ff 	mov.w	r0, #4294967295
  407672:	bd38      	pop	{r3, r4, r5, pc}
  407674:	4618      	mov	r0, r3
  407676:	f000 f927 	bl	4078c8 <__sinit>
  40767a:	e7c2      	b.n	407602 <__swsetup_r+0x12>
  40767c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40767e:	b151      	cbz	r1, 407696 <__swsetup_r+0xa6>
  407680:	f104 0340 	add.w	r3, r4, #64	; 0x40
  407684:	4299      	cmp	r1, r3
  407686:	d004      	beq.n	407692 <__swsetup_r+0xa2>
  407688:	4628      	mov	r0, r5
  40768a:	f000 fa43 	bl	407b14 <_free_r>
  40768e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  407692:	2300      	movs	r3, #0
  407694:	6323      	str	r3, [r4, #48]	; 0x30
  407696:	2300      	movs	r3, #0
  407698:	6920      	ldr	r0, [r4, #16]
  40769a:	6063      	str	r3, [r4, #4]
  40769c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4076a0:	6020      	str	r0, [r4, #0]
  4076a2:	e7c5      	b.n	407630 <__swsetup_r+0x40>
  4076a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4076a8:	2309      	movs	r3, #9
  4076aa:	602b      	str	r3, [r5, #0]
  4076ac:	f04f 30ff 	mov.w	r0, #4294967295
  4076b0:	81a2      	strh	r2, [r4, #12]
  4076b2:	bd38      	pop	{r3, r4, r5, pc}
  4076b4:	20400010 	.word	0x20400010

004076b8 <register_fini>:
  4076b8:	4b02      	ldr	r3, [pc, #8]	; (4076c4 <register_fini+0xc>)
  4076ba:	b113      	cbz	r3, 4076c2 <register_fini+0xa>
  4076bc:	4802      	ldr	r0, [pc, #8]	; (4076c8 <register_fini+0x10>)
  4076be:	f000 b805 	b.w	4076cc <atexit>
  4076c2:	4770      	bx	lr
  4076c4:	00000000 	.word	0x00000000
  4076c8:	00407939 	.word	0x00407939

004076cc <atexit>:
  4076cc:	2300      	movs	r3, #0
  4076ce:	4601      	mov	r1, r0
  4076d0:	461a      	mov	r2, r3
  4076d2:	4618      	mov	r0, r3
  4076d4:	f001 b890 	b.w	4087f8 <__register_exitproc>

004076d8 <__sflush_r>:
  4076d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4076dc:	b29a      	uxth	r2, r3
  4076de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4076e2:	460d      	mov	r5, r1
  4076e4:	0711      	lsls	r1, r2, #28
  4076e6:	4680      	mov	r8, r0
  4076e8:	d43a      	bmi.n	407760 <__sflush_r+0x88>
  4076ea:	686a      	ldr	r2, [r5, #4]
  4076ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4076f0:	2a00      	cmp	r2, #0
  4076f2:	81ab      	strh	r3, [r5, #12]
  4076f4:	dd6f      	ble.n	4077d6 <__sflush_r+0xfe>
  4076f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4076f8:	2c00      	cmp	r4, #0
  4076fa:	d049      	beq.n	407790 <__sflush_r+0xb8>
  4076fc:	2200      	movs	r2, #0
  4076fe:	b29b      	uxth	r3, r3
  407700:	f8d8 6000 	ldr.w	r6, [r8]
  407704:	f8c8 2000 	str.w	r2, [r8]
  407708:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40770c:	d067      	beq.n	4077de <__sflush_r+0x106>
  40770e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  407710:	075f      	lsls	r7, r3, #29
  407712:	d505      	bpl.n	407720 <__sflush_r+0x48>
  407714:	6869      	ldr	r1, [r5, #4]
  407716:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407718:	1a52      	subs	r2, r2, r1
  40771a:	b10b      	cbz	r3, 407720 <__sflush_r+0x48>
  40771c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40771e:	1ad2      	subs	r2, r2, r3
  407720:	2300      	movs	r3, #0
  407722:	69e9      	ldr	r1, [r5, #28]
  407724:	4640      	mov	r0, r8
  407726:	47a0      	blx	r4
  407728:	1c44      	adds	r4, r0, #1
  40772a:	d03c      	beq.n	4077a6 <__sflush_r+0xce>
  40772c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  407730:	692a      	ldr	r2, [r5, #16]
  407732:	602a      	str	r2, [r5, #0]
  407734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407738:	2200      	movs	r2, #0
  40773a:	81ab      	strh	r3, [r5, #12]
  40773c:	04db      	lsls	r3, r3, #19
  40773e:	606a      	str	r2, [r5, #4]
  407740:	d447      	bmi.n	4077d2 <__sflush_r+0xfa>
  407742:	6b29      	ldr	r1, [r5, #48]	; 0x30
  407744:	f8c8 6000 	str.w	r6, [r8]
  407748:	b311      	cbz	r1, 407790 <__sflush_r+0xb8>
  40774a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40774e:	4299      	cmp	r1, r3
  407750:	d002      	beq.n	407758 <__sflush_r+0x80>
  407752:	4640      	mov	r0, r8
  407754:	f000 f9de 	bl	407b14 <_free_r>
  407758:	2000      	movs	r0, #0
  40775a:	6328      	str	r0, [r5, #48]	; 0x30
  40775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407760:	692e      	ldr	r6, [r5, #16]
  407762:	b1ae      	cbz	r6, 407790 <__sflush_r+0xb8>
  407764:	682c      	ldr	r4, [r5, #0]
  407766:	602e      	str	r6, [r5, #0]
  407768:	0791      	lsls	r1, r2, #30
  40776a:	bf0c      	ite	eq
  40776c:	696b      	ldreq	r3, [r5, #20]
  40776e:	2300      	movne	r3, #0
  407770:	1ba4      	subs	r4, r4, r6
  407772:	60ab      	str	r3, [r5, #8]
  407774:	e00a      	b.n	40778c <__sflush_r+0xb4>
  407776:	4623      	mov	r3, r4
  407778:	4632      	mov	r2, r6
  40777a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40777c:	69e9      	ldr	r1, [r5, #28]
  40777e:	4640      	mov	r0, r8
  407780:	47b8      	blx	r7
  407782:	2800      	cmp	r0, #0
  407784:	eba4 0400 	sub.w	r4, r4, r0
  407788:	4406      	add	r6, r0
  40778a:	dd04      	ble.n	407796 <__sflush_r+0xbe>
  40778c:	2c00      	cmp	r4, #0
  40778e:	dcf2      	bgt.n	407776 <__sflush_r+0x9e>
  407790:	2000      	movs	r0, #0
  407792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407796:	89ab      	ldrh	r3, [r5, #12]
  407798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40779c:	81ab      	strh	r3, [r5, #12]
  40779e:	f04f 30ff 	mov.w	r0, #4294967295
  4077a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4077a6:	f8d8 4000 	ldr.w	r4, [r8]
  4077aa:	2c1d      	cmp	r4, #29
  4077ac:	d8f3      	bhi.n	407796 <__sflush_r+0xbe>
  4077ae:	4b19      	ldr	r3, [pc, #100]	; (407814 <__sflush_r+0x13c>)
  4077b0:	40e3      	lsrs	r3, r4
  4077b2:	43db      	mvns	r3, r3
  4077b4:	f013 0301 	ands.w	r3, r3, #1
  4077b8:	d1ed      	bne.n	407796 <__sflush_r+0xbe>
  4077ba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  4077be:	606b      	str	r3, [r5, #4]
  4077c0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  4077c4:	6929      	ldr	r1, [r5, #16]
  4077c6:	81ab      	strh	r3, [r5, #12]
  4077c8:	04da      	lsls	r2, r3, #19
  4077ca:	6029      	str	r1, [r5, #0]
  4077cc:	d5b9      	bpl.n	407742 <__sflush_r+0x6a>
  4077ce:	2c00      	cmp	r4, #0
  4077d0:	d1b7      	bne.n	407742 <__sflush_r+0x6a>
  4077d2:	6528      	str	r0, [r5, #80]	; 0x50
  4077d4:	e7b5      	b.n	407742 <__sflush_r+0x6a>
  4077d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  4077d8:	2a00      	cmp	r2, #0
  4077da:	dc8c      	bgt.n	4076f6 <__sflush_r+0x1e>
  4077dc:	e7d8      	b.n	407790 <__sflush_r+0xb8>
  4077de:	2301      	movs	r3, #1
  4077e0:	69e9      	ldr	r1, [r5, #28]
  4077e2:	4640      	mov	r0, r8
  4077e4:	47a0      	blx	r4
  4077e6:	1c43      	adds	r3, r0, #1
  4077e8:	4602      	mov	r2, r0
  4077ea:	d002      	beq.n	4077f2 <__sflush_r+0x11a>
  4077ec:	89ab      	ldrh	r3, [r5, #12]
  4077ee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4077f0:	e78e      	b.n	407710 <__sflush_r+0x38>
  4077f2:	f8d8 3000 	ldr.w	r3, [r8]
  4077f6:	2b00      	cmp	r3, #0
  4077f8:	d0f8      	beq.n	4077ec <__sflush_r+0x114>
  4077fa:	2b1d      	cmp	r3, #29
  4077fc:	d001      	beq.n	407802 <__sflush_r+0x12a>
  4077fe:	2b16      	cmp	r3, #22
  407800:	d102      	bne.n	407808 <__sflush_r+0x130>
  407802:	f8c8 6000 	str.w	r6, [r8]
  407806:	e7c3      	b.n	407790 <__sflush_r+0xb8>
  407808:	89ab      	ldrh	r3, [r5, #12]
  40780a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40780e:	81ab      	strh	r3, [r5, #12]
  407810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407814:	20400001 	.word	0x20400001

00407818 <_fflush_r>:
  407818:	b538      	push	{r3, r4, r5, lr}
  40781a:	460d      	mov	r5, r1
  40781c:	4604      	mov	r4, r0
  40781e:	b108      	cbz	r0, 407824 <_fflush_r+0xc>
  407820:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407822:	b1bb      	cbz	r3, 407854 <_fflush_r+0x3c>
  407824:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407828:	b188      	cbz	r0, 40784e <_fflush_r+0x36>
  40782a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40782c:	07db      	lsls	r3, r3, #31
  40782e:	d401      	bmi.n	407834 <_fflush_r+0x1c>
  407830:	0581      	lsls	r1, r0, #22
  407832:	d517      	bpl.n	407864 <_fflush_r+0x4c>
  407834:	4620      	mov	r0, r4
  407836:	4629      	mov	r1, r5
  407838:	f7ff ff4e 	bl	4076d8 <__sflush_r>
  40783c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  40783e:	07da      	lsls	r2, r3, #31
  407840:	4604      	mov	r4, r0
  407842:	d402      	bmi.n	40784a <_fflush_r+0x32>
  407844:	89ab      	ldrh	r3, [r5, #12]
  407846:	059b      	lsls	r3, r3, #22
  407848:	d507      	bpl.n	40785a <_fflush_r+0x42>
  40784a:	4620      	mov	r0, r4
  40784c:	bd38      	pop	{r3, r4, r5, pc}
  40784e:	4604      	mov	r4, r0
  407850:	4620      	mov	r0, r4
  407852:	bd38      	pop	{r3, r4, r5, pc}
  407854:	f000 f838 	bl	4078c8 <__sinit>
  407858:	e7e4      	b.n	407824 <_fflush_r+0xc>
  40785a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40785c:	f000 fbf6 	bl	40804c <__retarget_lock_release_recursive>
  407860:	4620      	mov	r0, r4
  407862:	bd38      	pop	{r3, r4, r5, pc}
  407864:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407866:	f000 fbef 	bl	408048 <__retarget_lock_acquire_recursive>
  40786a:	e7e3      	b.n	407834 <_fflush_r+0x1c>

0040786c <_cleanup_r>:
  40786c:	4901      	ldr	r1, [pc, #4]	; (407874 <_cleanup_r+0x8>)
  40786e:	f000 bbaf 	b.w	407fd0 <_fwalk_reent>
  407872:	bf00      	nop
  407874:	004088e1 	.word	0x004088e1

00407878 <std.isra.0>:
  407878:	b510      	push	{r4, lr}
  40787a:	2300      	movs	r3, #0
  40787c:	4604      	mov	r4, r0
  40787e:	8181      	strh	r1, [r0, #12]
  407880:	81c2      	strh	r2, [r0, #14]
  407882:	6003      	str	r3, [r0, #0]
  407884:	6043      	str	r3, [r0, #4]
  407886:	6083      	str	r3, [r0, #8]
  407888:	6643      	str	r3, [r0, #100]	; 0x64
  40788a:	6103      	str	r3, [r0, #16]
  40788c:	6143      	str	r3, [r0, #20]
  40788e:	6183      	str	r3, [r0, #24]
  407890:	4619      	mov	r1, r3
  407892:	2208      	movs	r2, #8
  407894:	305c      	adds	r0, #92	; 0x5c
  407896:	f7fe fe2b 	bl	4064f0 <memset>
  40789a:	4807      	ldr	r0, [pc, #28]	; (4078b8 <std.isra.0+0x40>)
  40789c:	4907      	ldr	r1, [pc, #28]	; (4078bc <std.isra.0+0x44>)
  40789e:	4a08      	ldr	r2, [pc, #32]	; (4078c0 <std.isra.0+0x48>)
  4078a0:	4b08      	ldr	r3, [pc, #32]	; (4078c4 <std.isra.0+0x4c>)
  4078a2:	6220      	str	r0, [r4, #32]
  4078a4:	61e4      	str	r4, [r4, #28]
  4078a6:	6261      	str	r1, [r4, #36]	; 0x24
  4078a8:	62a2      	str	r2, [r4, #40]	; 0x28
  4078aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  4078ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  4078b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4078b4:	f000 bbc4 	b.w	408040 <__retarget_lock_init_recursive>
  4078b8:	00408625 	.word	0x00408625
  4078bc:	00408649 	.word	0x00408649
  4078c0:	00408685 	.word	0x00408685
  4078c4:	004086a5 	.word	0x004086a5

004078c8 <__sinit>:
  4078c8:	b510      	push	{r4, lr}
  4078ca:	4604      	mov	r4, r0
  4078cc:	4812      	ldr	r0, [pc, #72]	; (407918 <__sinit+0x50>)
  4078ce:	f000 fbbb 	bl	408048 <__retarget_lock_acquire_recursive>
  4078d2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4078d4:	b9d2      	cbnz	r2, 40790c <__sinit+0x44>
  4078d6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  4078da:	4810      	ldr	r0, [pc, #64]	; (40791c <__sinit+0x54>)
  4078dc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4078e0:	2103      	movs	r1, #3
  4078e2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4078e6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4078e8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4078ec:	6860      	ldr	r0, [r4, #4]
  4078ee:	2104      	movs	r1, #4
  4078f0:	f7ff ffc2 	bl	407878 <std.isra.0>
  4078f4:	2201      	movs	r2, #1
  4078f6:	2109      	movs	r1, #9
  4078f8:	68a0      	ldr	r0, [r4, #8]
  4078fa:	f7ff ffbd 	bl	407878 <std.isra.0>
  4078fe:	2202      	movs	r2, #2
  407900:	2112      	movs	r1, #18
  407902:	68e0      	ldr	r0, [r4, #12]
  407904:	f7ff ffb8 	bl	407878 <std.isra.0>
  407908:	2301      	movs	r3, #1
  40790a:	63a3      	str	r3, [r4, #56]	; 0x38
  40790c:	4802      	ldr	r0, [pc, #8]	; (407918 <__sinit+0x50>)
  40790e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407912:	f000 bb9b 	b.w	40804c <__retarget_lock_release_recursive>
  407916:	bf00      	nop
  407918:	20400c30 	.word	0x20400c30
  40791c:	0040786d 	.word	0x0040786d

00407920 <__sfp_lock_acquire>:
  407920:	4801      	ldr	r0, [pc, #4]	; (407928 <__sfp_lock_acquire+0x8>)
  407922:	f000 bb91 	b.w	408048 <__retarget_lock_acquire_recursive>
  407926:	bf00      	nop
  407928:	20400c44 	.word	0x20400c44

0040792c <__sfp_lock_release>:
  40792c:	4801      	ldr	r0, [pc, #4]	; (407934 <__sfp_lock_release+0x8>)
  40792e:	f000 bb8d 	b.w	40804c <__retarget_lock_release_recursive>
  407932:	bf00      	nop
  407934:	20400c44 	.word	0x20400c44

00407938 <__libc_fini_array>:
  407938:	b538      	push	{r3, r4, r5, lr}
  40793a:	4c0a      	ldr	r4, [pc, #40]	; (407964 <__libc_fini_array+0x2c>)
  40793c:	4d0a      	ldr	r5, [pc, #40]	; (407968 <__libc_fini_array+0x30>)
  40793e:	1b64      	subs	r4, r4, r5
  407940:	10a4      	asrs	r4, r4, #2
  407942:	d00a      	beq.n	40795a <__libc_fini_array+0x22>
  407944:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407948:	3b01      	subs	r3, #1
  40794a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40794e:	3c01      	subs	r4, #1
  407950:	f855 3904 	ldr.w	r3, [r5], #-4
  407954:	4798      	blx	r3
  407956:	2c00      	cmp	r4, #0
  407958:	d1f9      	bne.n	40794e <__libc_fini_array+0x16>
  40795a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40795e:	f001 bd4f 	b.w	409400 <_fini>
  407962:	bf00      	nop
  407964:	00409410 	.word	0x00409410
  407968:	0040940c 	.word	0x0040940c

0040796c <__fputwc>:
  40796c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407970:	b082      	sub	sp, #8
  407972:	4680      	mov	r8, r0
  407974:	4689      	mov	r9, r1
  407976:	4614      	mov	r4, r2
  407978:	f000 fb54 	bl	408024 <__locale_mb_cur_max>
  40797c:	2801      	cmp	r0, #1
  40797e:	d036      	beq.n	4079ee <__fputwc+0x82>
  407980:	464a      	mov	r2, r9
  407982:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407986:	a901      	add	r1, sp, #4
  407988:	4640      	mov	r0, r8
  40798a:	f000 fee7 	bl	40875c <_wcrtomb_r>
  40798e:	1c42      	adds	r2, r0, #1
  407990:	4606      	mov	r6, r0
  407992:	d025      	beq.n	4079e0 <__fputwc+0x74>
  407994:	b3a8      	cbz	r0, 407a02 <__fputwc+0x96>
  407996:	f89d e004 	ldrb.w	lr, [sp, #4]
  40799a:	2500      	movs	r5, #0
  40799c:	f10d 0a04 	add.w	sl, sp, #4
  4079a0:	e009      	b.n	4079b6 <__fputwc+0x4a>
  4079a2:	6823      	ldr	r3, [r4, #0]
  4079a4:	1c5a      	adds	r2, r3, #1
  4079a6:	6022      	str	r2, [r4, #0]
  4079a8:	f883 e000 	strb.w	lr, [r3]
  4079ac:	3501      	adds	r5, #1
  4079ae:	42b5      	cmp	r5, r6
  4079b0:	d227      	bcs.n	407a02 <__fputwc+0x96>
  4079b2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  4079b6:	68a3      	ldr	r3, [r4, #8]
  4079b8:	3b01      	subs	r3, #1
  4079ba:	2b00      	cmp	r3, #0
  4079bc:	60a3      	str	r3, [r4, #8]
  4079be:	daf0      	bge.n	4079a2 <__fputwc+0x36>
  4079c0:	69a7      	ldr	r7, [r4, #24]
  4079c2:	42bb      	cmp	r3, r7
  4079c4:	4671      	mov	r1, lr
  4079c6:	4622      	mov	r2, r4
  4079c8:	4640      	mov	r0, r8
  4079ca:	db02      	blt.n	4079d2 <__fputwc+0x66>
  4079cc:	f1be 0f0a 	cmp.w	lr, #10
  4079d0:	d1e7      	bne.n	4079a2 <__fputwc+0x36>
  4079d2:	f000 fe6b 	bl	4086ac <__swbuf_r>
  4079d6:	1c43      	adds	r3, r0, #1
  4079d8:	d1e8      	bne.n	4079ac <__fputwc+0x40>
  4079da:	b002      	add	sp, #8
  4079dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4079e0:	89a3      	ldrh	r3, [r4, #12]
  4079e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4079e6:	81a3      	strh	r3, [r4, #12]
  4079e8:	b002      	add	sp, #8
  4079ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4079ee:	f109 33ff 	add.w	r3, r9, #4294967295
  4079f2:	2bfe      	cmp	r3, #254	; 0xfe
  4079f4:	d8c4      	bhi.n	407980 <__fputwc+0x14>
  4079f6:	fa5f fe89 	uxtb.w	lr, r9
  4079fa:	4606      	mov	r6, r0
  4079fc:	f88d e004 	strb.w	lr, [sp, #4]
  407a00:	e7cb      	b.n	40799a <__fputwc+0x2e>
  407a02:	4648      	mov	r0, r9
  407a04:	b002      	add	sp, #8
  407a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407a0a:	bf00      	nop

00407a0c <_fputwc_r>:
  407a0c:	b530      	push	{r4, r5, lr}
  407a0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407a10:	f013 0f01 	tst.w	r3, #1
  407a14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407a18:	4614      	mov	r4, r2
  407a1a:	b083      	sub	sp, #12
  407a1c:	4605      	mov	r5, r0
  407a1e:	b29a      	uxth	r2, r3
  407a20:	d101      	bne.n	407a26 <_fputwc_r+0x1a>
  407a22:	0590      	lsls	r0, r2, #22
  407a24:	d51c      	bpl.n	407a60 <_fputwc_r+0x54>
  407a26:	0490      	lsls	r0, r2, #18
  407a28:	d406      	bmi.n	407a38 <_fputwc_r+0x2c>
  407a2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407a30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407a34:	81a3      	strh	r3, [r4, #12]
  407a36:	6662      	str	r2, [r4, #100]	; 0x64
  407a38:	4628      	mov	r0, r5
  407a3a:	4622      	mov	r2, r4
  407a3c:	f7ff ff96 	bl	40796c <__fputwc>
  407a40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407a42:	07da      	lsls	r2, r3, #31
  407a44:	4605      	mov	r5, r0
  407a46:	d402      	bmi.n	407a4e <_fputwc_r+0x42>
  407a48:	89a3      	ldrh	r3, [r4, #12]
  407a4a:	059b      	lsls	r3, r3, #22
  407a4c:	d502      	bpl.n	407a54 <_fputwc_r+0x48>
  407a4e:	4628      	mov	r0, r5
  407a50:	b003      	add	sp, #12
  407a52:	bd30      	pop	{r4, r5, pc}
  407a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a56:	f000 faf9 	bl	40804c <__retarget_lock_release_recursive>
  407a5a:	4628      	mov	r0, r5
  407a5c:	b003      	add	sp, #12
  407a5e:	bd30      	pop	{r4, r5, pc}
  407a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407a62:	9101      	str	r1, [sp, #4]
  407a64:	f000 faf0 	bl	408048 <__retarget_lock_acquire_recursive>
  407a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407a6c:	9901      	ldr	r1, [sp, #4]
  407a6e:	b29a      	uxth	r2, r3
  407a70:	e7d9      	b.n	407a26 <_fputwc_r+0x1a>
  407a72:	bf00      	nop

00407a74 <_malloc_trim_r>:
  407a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407a76:	4f24      	ldr	r7, [pc, #144]	; (407b08 <_malloc_trim_r+0x94>)
  407a78:	460c      	mov	r4, r1
  407a7a:	4606      	mov	r6, r0
  407a7c:	f7fe fd86 	bl	40658c <__malloc_lock>
  407a80:	68bb      	ldr	r3, [r7, #8]
  407a82:	685d      	ldr	r5, [r3, #4]
  407a84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407a88:	310f      	adds	r1, #15
  407a8a:	f025 0503 	bic.w	r5, r5, #3
  407a8e:	4429      	add	r1, r5
  407a90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407a94:	f021 010f 	bic.w	r1, r1, #15
  407a98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407a9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407aa0:	db07      	blt.n	407ab2 <_malloc_trim_r+0x3e>
  407aa2:	2100      	movs	r1, #0
  407aa4:	4630      	mov	r0, r6
  407aa6:	f7fe fd7d 	bl	4065a4 <_sbrk_r>
  407aaa:	68bb      	ldr	r3, [r7, #8]
  407aac:	442b      	add	r3, r5
  407aae:	4298      	cmp	r0, r3
  407ab0:	d004      	beq.n	407abc <_malloc_trim_r+0x48>
  407ab2:	4630      	mov	r0, r6
  407ab4:	f7fe fd70 	bl	406598 <__malloc_unlock>
  407ab8:	2000      	movs	r0, #0
  407aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407abc:	4261      	negs	r1, r4
  407abe:	4630      	mov	r0, r6
  407ac0:	f7fe fd70 	bl	4065a4 <_sbrk_r>
  407ac4:	3001      	adds	r0, #1
  407ac6:	d00d      	beq.n	407ae4 <_malloc_trim_r+0x70>
  407ac8:	4b10      	ldr	r3, [pc, #64]	; (407b0c <_malloc_trim_r+0x98>)
  407aca:	68ba      	ldr	r2, [r7, #8]
  407acc:	6819      	ldr	r1, [r3, #0]
  407ace:	1b2d      	subs	r5, r5, r4
  407ad0:	f045 0501 	orr.w	r5, r5, #1
  407ad4:	4630      	mov	r0, r6
  407ad6:	1b09      	subs	r1, r1, r4
  407ad8:	6055      	str	r5, [r2, #4]
  407ada:	6019      	str	r1, [r3, #0]
  407adc:	f7fe fd5c 	bl	406598 <__malloc_unlock>
  407ae0:	2001      	movs	r0, #1
  407ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407ae4:	2100      	movs	r1, #0
  407ae6:	4630      	mov	r0, r6
  407ae8:	f7fe fd5c 	bl	4065a4 <_sbrk_r>
  407aec:	68ba      	ldr	r2, [r7, #8]
  407aee:	1a83      	subs	r3, r0, r2
  407af0:	2b0f      	cmp	r3, #15
  407af2:	ddde      	ble.n	407ab2 <_malloc_trim_r+0x3e>
  407af4:	4c06      	ldr	r4, [pc, #24]	; (407b10 <_malloc_trim_r+0x9c>)
  407af6:	4905      	ldr	r1, [pc, #20]	; (407b0c <_malloc_trim_r+0x98>)
  407af8:	6824      	ldr	r4, [r4, #0]
  407afa:	f043 0301 	orr.w	r3, r3, #1
  407afe:	1b00      	subs	r0, r0, r4
  407b00:	6053      	str	r3, [r2, #4]
  407b02:	6008      	str	r0, [r1, #0]
  407b04:	e7d5      	b.n	407ab2 <_malloc_trim_r+0x3e>
  407b06:	bf00      	nop
  407b08:	20400440 	.word	0x20400440
  407b0c:	20400b9c 	.word	0x20400b9c
  407b10:	20400848 	.word	0x20400848

00407b14 <_free_r>:
  407b14:	2900      	cmp	r1, #0
  407b16:	d044      	beq.n	407ba2 <_free_r+0x8e>
  407b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407b1c:	460d      	mov	r5, r1
  407b1e:	4680      	mov	r8, r0
  407b20:	f7fe fd34 	bl	40658c <__malloc_lock>
  407b24:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407b28:	4969      	ldr	r1, [pc, #420]	; (407cd0 <_free_r+0x1bc>)
  407b2a:	f027 0301 	bic.w	r3, r7, #1
  407b2e:	f1a5 0408 	sub.w	r4, r5, #8
  407b32:	18e2      	adds	r2, r4, r3
  407b34:	688e      	ldr	r6, [r1, #8]
  407b36:	6850      	ldr	r0, [r2, #4]
  407b38:	42b2      	cmp	r2, r6
  407b3a:	f020 0003 	bic.w	r0, r0, #3
  407b3e:	d05e      	beq.n	407bfe <_free_r+0xea>
  407b40:	07fe      	lsls	r6, r7, #31
  407b42:	6050      	str	r0, [r2, #4]
  407b44:	d40b      	bmi.n	407b5e <_free_r+0x4a>
  407b46:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407b4a:	1be4      	subs	r4, r4, r7
  407b4c:	f101 0e08 	add.w	lr, r1, #8
  407b50:	68a5      	ldr	r5, [r4, #8]
  407b52:	4575      	cmp	r5, lr
  407b54:	443b      	add	r3, r7
  407b56:	d06d      	beq.n	407c34 <_free_r+0x120>
  407b58:	68e7      	ldr	r7, [r4, #12]
  407b5a:	60ef      	str	r7, [r5, #12]
  407b5c:	60bd      	str	r5, [r7, #8]
  407b5e:	1815      	adds	r5, r2, r0
  407b60:	686d      	ldr	r5, [r5, #4]
  407b62:	07ed      	lsls	r5, r5, #31
  407b64:	d53e      	bpl.n	407be4 <_free_r+0xd0>
  407b66:	f043 0201 	orr.w	r2, r3, #1
  407b6a:	6062      	str	r2, [r4, #4]
  407b6c:	50e3      	str	r3, [r4, r3]
  407b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407b72:	d217      	bcs.n	407ba4 <_free_r+0x90>
  407b74:	08db      	lsrs	r3, r3, #3
  407b76:	1c58      	adds	r0, r3, #1
  407b78:	109a      	asrs	r2, r3, #2
  407b7a:	684d      	ldr	r5, [r1, #4]
  407b7c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407b80:	60a7      	str	r7, [r4, #8]
  407b82:	2301      	movs	r3, #1
  407b84:	4093      	lsls	r3, r2
  407b86:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407b8a:	432b      	orrs	r3, r5
  407b8c:	3a08      	subs	r2, #8
  407b8e:	60e2      	str	r2, [r4, #12]
  407b90:	604b      	str	r3, [r1, #4]
  407b92:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407b96:	60fc      	str	r4, [r7, #12]
  407b98:	4640      	mov	r0, r8
  407b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407b9e:	f7fe bcfb 	b.w	406598 <__malloc_unlock>
  407ba2:	4770      	bx	lr
  407ba4:	0a5a      	lsrs	r2, r3, #9
  407ba6:	2a04      	cmp	r2, #4
  407ba8:	d852      	bhi.n	407c50 <_free_r+0x13c>
  407baa:	099a      	lsrs	r2, r3, #6
  407bac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407bb0:	00ff      	lsls	r7, r7, #3
  407bb2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407bb6:	19c8      	adds	r0, r1, r7
  407bb8:	59ca      	ldr	r2, [r1, r7]
  407bba:	3808      	subs	r0, #8
  407bbc:	4290      	cmp	r0, r2
  407bbe:	d04f      	beq.n	407c60 <_free_r+0x14c>
  407bc0:	6851      	ldr	r1, [r2, #4]
  407bc2:	f021 0103 	bic.w	r1, r1, #3
  407bc6:	428b      	cmp	r3, r1
  407bc8:	d232      	bcs.n	407c30 <_free_r+0x11c>
  407bca:	6892      	ldr	r2, [r2, #8]
  407bcc:	4290      	cmp	r0, r2
  407bce:	d1f7      	bne.n	407bc0 <_free_r+0xac>
  407bd0:	68c3      	ldr	r3, [r0, #12]
  407bd2:	60a0      	str	r0, [r4, #8]
  407bd4:	60e3      	str	r3, [r4, #12]
  407bd6:	609c      	str	r4, [r3, #8]
  407bd8:	60c4      	str	r4, [r0, #12]
  407bda:	4640      	mov	r0, r8
  407bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407be0:	f7fe bcda 	b.w	406598 <__malloc_unlock>
  407be4:	6895      	ldr	r5, [r2, #8]
  407be6:	4f3b      	ldr	r7, [pc, #236]	; (407cd4 <_free_r+0x1c0>)
  407be8:	42bd      	cmp	r5, r7
  407bea:	4403      	add	r3, r0
  407bec:	d040      	beq.n	407c70 <_free_r+0x15c>
  407bee:	68d0      	ldr	r0, [r2, #12]
  407bf0:	60e8      	str	r0, [r5, #12]
  407bf2:	f043 0201 	orr.w	r2, r3, #1
  407bf6:	6085      	str	r5, [r0, #8]
  407bf8:	6062      	str	r2, [r4, #4]
  407bfa:	50e3      	str	r3, [r4, r3]
  407bfc:	e7b7      	b.n	407b6e <_free_r+0x5a>
  407bfe:	07ff      	lsls	r7, r7, #31
  407c00:	4403      	add	r3, r0
  407c02:	d407      	bmi.n	407c14 <_free_r+0x100>
  407c04:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407c08:	1aa4      	subs	r4, r4, r2
  407c0a:	4413      	add	r3, r2
  407c0c:	68a0      	ldr	r0, [r4, #8]
  407c0e:	68e2      	ldr	r2, [r4, #12]
  407c10:	60c2      	str	r2, [r0, #12]
  407c12:	6090      	str	r0, [r2, #8]
  407c14:	4a30      	ldr	r2, [pc, #192]	; (407cd8 <_free_r+0x1c4>)
  407c16:	6812      	ldr	r2, [r2, #0]
  407c18:	f043 0001 	orr.w	r0, r3, #1
  407c1c:	4293      	cmp	r3, r2
  407c1e:	6060      	str	r0, [r4, #4]
  407c20:	608c      	str	r4, [r1, #8]
  407c22:	d3b9      	bcc.n	407b98 <_free_r+0x84>
  407c24:	4b2d      	ldr	r3, [pc, #180]	; (407cdc <_free_r+0x1c8>)
  407c26:	4640      	mov	r0, r8
  407c28:	6819      	ldr	r1, [r3, #0]
  407c2a:	f7ff ff23 	bl	407a74 <_malloc_trim_r>
  407c2e:	e7b3      	b.n	407b98 <_free_r+0x84>
  407c30:	4610      	mov	r0, r2
  407c32:	e7cd      	b.n	407bd0 <_free_r+0xbc>
  407c34:	1811      	adds	r1, r2, r0
  407c36:	6849      	ldr	r1, [r1, #4]
  407c38:	07c9      	lsls	r1, r1, #31
  407c3a:	d444      	bmi.n	407cc6 <_free_r+0x1b2>
  407c3c:	6891      	ldr	r1, [r2, #8]
  407c3e:	68d2      	ldr	r2, [r2, #12]
  407c40:	60ca      	str	r2, [r1, #12]
  407c42:	4403      	add	r3, r0
  407c44:	f043 0001 	orr.w	r0, r3, #1
  407c48:	6091      	str	r1, [r2, #8]
  407c4a:	6060      	str	r0, [r4, #4]
  407c4c:	50e3      	str	r3, [r4, r3]
  407c4e:	e7a3      	b.n	407b98 <_free_r+0x84>
  407c50:	2a14      	cmp	r2, #20
  407c52:	d816      	bhi.n	407c82 <_free_r+0x16e>
  407c54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407c58:	00ff      	lsls	r7, r7, #3
  407c5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407c5e:	e7aa      	b.n	407bb6 <_free_r+0xa2>
  407c60:	10aa      	asrs	r2, r5, #2
  407c62:	2301      	movs	r3, #1
  407c64:	684d      	ldr	r5, [r1, #4]
  407c66:	4093      	lsls	r3, r2
  407c68:	432b      	orrs	r3, r5
  407c6a:	604b      	str	r3, [r1, #4]
  407c6c:	4603      	mov	r3, r0
  407c6e:	e7b0      	b.n	407bd2 <_free_r+0xbe>
  407c70:	f043 0201 	orr.w	r2, r3, #1
  407c74:	614c      	str	r4, [r1, #20]
  407c76:	610c      	str	r4, [r1, #16]
  407c78:	60e5      	str	r5, [r4, #12]
  407c7a:	60a5      	str	r5, [r4, #8]
  407c7c:	6062      	str	r2, [r4, #4]
  407c7e:	50e3      	str	r3, [r4, r3]
  407c80:	e78a      	b.n	407b98 <_free_r+0x84>
  407c82:	2a54      	cmp	r2, #84	; 0x54
  407c84:	d806      	bhi.n	407c94 <_free_r+0x180>
  407c86:	0b1a      	lsrs	r2, r3, #12
  407c88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407c8c:	00ff      	lsls	r7, r7, #3
  407c8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407c92:	e790      	b.n	407bb6 <_free_r+0xa2>
  407c94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407c98:	d806      	bhi.n	407ca8 <_free_r+0x194>
  407c9a:	0bda      	lsrs	r2, r3, #15
  407c9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407ca0:	00ff      	lsls	r7, r7, #3
  407ca2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407ca6:	e786      	b.n	407bb6 <_free_r+0xa2>
  407ca8:	f240 5054 	movw	r0, #1364	; 0x554
  407cac:	4282      	cmp	r2, r0
  407cae:	d806      	bhi.n	407cbe <_free_r+0x1aa>
  407cb0:	0c9a      	lsrs	r2, r3, #18
  407cb2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407cb6:	00ff      	lsls	r7, r7, #3
  407cb8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407cbc:	e77b      	b.n	407bb6 <_free_r+0xa2>
  407cbe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407cc2:	257e      	movs	r5, #126	; 0x7e
  407cc4:	e777      	b.n	407bb6 <_free_r+0xa2>
  407cc6:	f043 0101 	orr.w	r1, r3, #1
  407cca:	6061      	str	r1, [r4, #4]
  407ccc:	6013      	str	r3, [r2, #0]
  407cce:	e763      	b.n	407b98 <_free_r+0x84>
  407cd0:	20400440 	.word	0x20400440
  407cd4:	20400448 	.word	0x20400448
  407cd8:	2040084c 	.word	0x2040084c
  407cdc:	20400bcc 	.word	0x20400bcc

00407ce0 <__sfvwrite_r>:
  407ce0:	6893      	ldr	r3, [r2, #8]
  407ce2:	2b00      	cmp	r3, #0
  407ce4:	d073      	beq.n	407dce <__sfvwrite_r+0xee>
  407ce6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407cea:	898b      	ldrh	r3, [r1, #12]
  407cec:	b083      	sub	sp, #12
  407cee:	460c      	mov	r4, r1
  407cf0:	0719      	lsls	r1, r3, #28
  407cf2:	9000      	str	r0, [sp, #0]
  407cf4:	4616      	mov	r6, r2
  407cf6:	d526      	bpl.n	407d46 <__sfvwrite_r+0x66>
  407cf8:	6922      	ldr	r2, [r4, #16]
  407cfa:	b322      	cbz	r2, 407d46 <__sfvwrite_r+0x66>
  407cfc:	f013 0002 	ands.w	r0, r3, #2
  407d00:	6835      	ldr	r5, [r6, #0]
  407d02:	d02c      	beq.n	407d5e <__sfvwrite_r+0x7e>
  407d04:	f04f 0900 	mov.w	r9, #0
  407d08:	4fb0      	ldr	r7, [pc, #704]	; (407fcc <__sfvwrite_r+0x2ec>)
  407d0a:	46c8      	mov	r8, r9
  407d0c:	46b2      	mov	sl, r6
  407d0e:	45b8      	cmp	r8, r7
  407d10:	4643      	mov	r3, r8
  407d12:	464a      	mov	r2, r9
  407d14:	bf28      	it	cs
  407d16:	463b      	movcs	r3, r7
  407d18:	9800      	ldr	r0, [sp, #0]
  407d1a:	f1b8 0f00 	cmp.w	r8, #0
  407d1e:	d050      	beq.n	407dc2 <__sfvwrite_r+0xe2>
  407d20:	69e1      	ldr	r1, [r4, #28]
  407d22:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407d24:	47b0      	blx	r6
  407d26:	2800      	cmp	r0, #0
  407d28:	dd58      	ble.n	407ddc <__sfvwrite_r+0xfc>
  407d2a:	f8da 3008 	ldr.w	r3, [sl, #8]
  407d2e:	1a1b      	subs	r3, r3, r0
  407d30:	4481      	add	r9, r0
  407d32:	eba8 0800 	sub.w	r8, r8, r0
  407d36:	f8ca 3008 	str.w	r3, [sl, #8]
  407d3a:	2b00      	cmp	r3, #0
  407d3c:	d1e7      	bne.n	407d0e <__sfvwrite_r+0x2e>
  407d3e:	2000      	movs	r0, #0
  407d40:	b003      	add	sp, #12
  407d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407d46:	4621      	mov	r1, r4
  407d48:	9800      	ldr	r0, [sp, #0]
  407d4a:	f7ff fc51 	bl	4075f0 <__swsetup_r>
  407d4e:	2800      	cmp	r0, #0
  407d50:	f040 8133 	bne.w	407fba <__sfvwrite_r+0x2da>
  407d54:	89a3      	ldrh	r3, [r4, #12]
  407d56:	6835      	ldr	r5, [r6, #0]
  407d58:	f013 0002 	ands.w	r0, r3, #2
  407d5c:	d1d2      	bne.n	407d04 <__sfvwrite_r+0x24>
  407d5e:	f013 0901 	ands.w	r9, r3, #1
  407d62:	d145      	bne.n	407df0 <__sfvwrite_r+0x110>
  407d64:	464f      	mov	r7, r9
  407d66:	9601      	str	r6, [sp, #4]
  407d68:	b337      	cbz	r7, 407db8 <__sfvwrite_r+0xd8>
  407d6a:	059a      	lsls	r2, r3, #22
  407d6c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407d70:	f140 8083 	bpl.w	407e7a <__sfvwrite_r+0x19a>
  407d74:	4547      	cmp	r7, r8
  407d76:	46c3      	mov	fp, r8
  407d78:	f0c0 80ab 	bcc.w	407ed2 <__sfvwrite_r+0x1f2>
  407d7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407d80:	f040 80ac 	bne.w	407edc <__sfvwrite_r+0x1fc>
  407d84:	6820      	ldr	r0, [r4, #0]
  407d86:	46ba      	mov	sl, r7
  407d88:	465a      	mov	r2, fp
  407d8a:	4649      	mov	r1, r9
  407d8c:	f000 fa40 	bl	408210 <memmove>
  407d90:	68a2      	ldr	r2, [r4, #8]
  407d92:	6823      	ldr	r3, [r4, #0]
  407d94:	eba2 0208 	sub.w	r2, r2, r8
  407d98:	445b      	add	r3, fp
  407d9a:	60a2      	str	r2, [r4, #8]
  407d9c:	6023      	str	r3, [r4, #0]
  407d9e:	9a01      	ldr	r2, [sp, #4]
  407da0:	6893      	ldr	r3, [r2, #8]
  407da2:	eba3 030a 	sub.w	r3, r3, sl
  407da6:	44d1      	add	r9, sl
  407da8:	eba7 070a 	sub.w	r7, r7, sl
  407dac:	6093      	str	r3, [r2, #8]
  407dae:	2b00      	cmp	r3, #0
  407db0:	d0c5      	beq.n	407d3e <__sfvwrite_r+0x5e>
  407db2:	89a3      	ldrh	r3, [r4, #12]
  407db4:	2f00      	cmp	r7, #0
  407db6:	d1d8      	bne.n	407d6a <__sfvwrite_r+0x8a>
  407db8:	f8d5 9000 	ldr.w	r9, [r5]
  407dbc:	686f      	ldr	r7, [r5, #4]
  407dbe:	3508      	adds	r5, #8
  407dc0:	e7d2      	b.n	407d68 <__sfvwrite_r+0x88>
  407dc2:	f8d5 9000 	ldr.w	r9, [r5]
  407dc6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  407dca:	3508      	adds	r5, #8
  407dcc:	e79f      	b.n	407d0e <__sfvwrite_r+0x2e>
  407dce:	2000      	movs	r0, #0
  407dd0:	4770      	bx	lr
  407dd2:	4621      	mov	r1, r4
  407dd4:	9800      	ldr	r0, [sp, #0]
  407dd6:	f7ff fd1f 	bl	407818 <_fflush_r>
  407dda:	b370      	cbz	r0, 407e3a <__sfvwrite_r+0x15a>
  407ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407de4:	f04f 30ff 	mov.w	r0, #4294967295
  407de8:	81a3      	strh	r3, [r4, #12]
  407dea:	b003      	add	sp, #12
  407dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407df0:	4681      	mov	r9, r0
  407df2:	4633      	mov	r3, r6
  407df4:	464e      	mov	r6, r9
  407df6:	46a8      	mov	r8, r5
  407df8:	469a      	mov	sl, r3
  407dfa:	464d      	mov	r5, r9
  407dfc:	b34e      	cbz	r6, 407e52 <__sfvwrite_r+0x172>
  407dfe:	b380      	cbz	r0, 407e62 <__sfvwrite_r+0x182>
  407e00:	6820      	ldr	r0, [r4, #0]
  407e02:	6923      	ldr	r3, [r4, #16]
  407e04:	6962      	ldr	r2, [r4, #20]
  407e06:	45b1      	cmp	r9, r6
  407e08:	46cb      	mov	fp, r9
  407e0a:	bf28      	it	cs
  407e0c:	46b3      	movcs	fp, r6
  407e0e:	4298      	cmp	r0, r3
  407e10:	465f      	mov	r7, fp
  407e12:	d904      	bls.n	407e1e <__sfvwrite_r+0x13e>
  407e14:	68a3      	ldr	r3, [r4, #8]
  407e16:	4413      	add	r3, r2
  407e18:	459b      	cmp	fp, r3
  407e1a:	f300 80a6 	bgt.w	407f6a <__sfvwrite_r+0x28a>
  407e1e:	4593      	cmp	fp, r2
  407e20:	db4b      	blt.n	407eba <__sfvwrite_r+0x1da>
  407e22:	4613      	mov	r3, r2
  407e24:	6a67      	ldr	r7, [r4, #36]	; 0x24
  407e26:	69e1      	ldr	r1, [r4, #28]
  407e28:	9800      	ldr	r0, [sp, #0]
  407e2a:	462a      	mov	r2, r5
  407e2c:	47b8      	blx	r7
  407e2e:	1e07      	subs	r7, r0, #0
  407e30:	ddd4      	ble.n	407ddc <__sfvwrite_r+0xfc>
  407e32:	ebb9 0907 	subs.w	r9, r9, r7
  407e36:	d0cc      	beq.n	407dd2 <__sfvwrite_r+0xf2>
  407e38:	2001      	movs	r0, #1
  407e3a:	f8da 3008 	ldr.w	r3, [sl, #8]
  407e3e:	1bdb      	subs	r3, r3, r7
  407e40:	443d      	add	r5, r7
  407e42:	1bf6      	subs	r6, r6, r7
  407e44:	f8ca 3008 	str.w	r3, [sl, #8]
  407e48:	2b00      	cmp	r3, #0
  407e4a:	f43f af78 	beq.w	407d3e <__sfvwrite_r+0x5e>
  407e4e:	2e00      	cmp	r6, #0
  407e50:	d1d5      	bne.n	407dfe <__sfvwrite_r+0x11e>
  407e52:	f108 0308 	add.w	r3, r8, #8
  407e56:	e913 0060 	ldmdb	r3, {r5, r6}
  407e5a:	4698      	mov	r8, r3
  407e5c:	3308      	adds	r3, #8
  407e5e:	2e00      	cmp	r6, #0
  407e60:	d0f9      	beq.n	407e56 <__sfvwrite_r+0x176>
  407e62:	4632      	mov	r2, r6
  407e64:	210a      	movs	r1, #10
  407e66:	4628      	mov	r0, r5
  407e68:	f000 f982 	bl	408170 <memchr>
  407e6c:	2800      	cmp	r0, #0
  407e6e:	f000 80a1 	beq.w	407fb4 <__sfvwrite_r+0x2d4>
  407e72:	3001      	adds	r0, #1
  407e74:	eba0 0905 	sub.w	r9, r0, r5
  407e78:	e7c2      	b.n	407e00 <__sfvwrite_r+0x120>
  407e7a:	6820      	ldr	r0, [r4, #0]
  407e7c:	6923      	ldr	r3, [r4, #16]
  407e7e:	4298      	cmp	r0, r3
  407e80:	d802      	bhi.n	407e88 <__sfvwrite_r+0x1a8>
  407e82:	6963      	ldr	r3, [r4, #20]
  407e84:	429f      	cmp	r7, r3
  407e86:	d25d      	bcs.n	407f44 <__sfvwrite_r+0x264>
  407e88:	45b8      	cmp	r8, r7
  407e8a:	bf28      	it	cs
  407e8c:	46b8      	movcs	r8, r7
  407e8e:	4642      	mov	r2, r8
  407e90:	4649      	mov	r1, r9
  407e92:	f000 f9bd 	bl	408210 <memmove>
  407e96:	68a3      	ldr	r3, [r4, #8]
  407e98:	6822      	ldr	r2, [r4, #0]
  407e9a:	eba3 0308 	sub.w	r3, r3, r8
  407e9e:	4442      	add	r2, r8
  407ea0:	60a3      	str	r3, [r4, #8]
  407ea2:	6022      	str	r2, [r4, #0]
  407ea4:	b10b      	cbz	r3, 407eaa <__sfvwrite_r+0x1ca>
  407ea6:	46c2      	mov	sl, r8
  407ea8:	e779      	b.n	407d9e <__sfvwrite_r+0xbe>
  407eaa:	4621      	mov	r1, r4
  407eac:	9800      	ldr	r0, [sp, #0]
  407eae:	f7ff fcb3 	bl	407818 <_fflush_r>
  407eb2:	2800      	cmp	r0, #0
  407eb4:	d192      	bne.n	407ddc <__sfvwrite_r+0xfc>
  407eb6:	46c2      	mov	sl, r8
  407eb8:	e771      	b.n	407d9e <__sfvwrite_r+0xbe>
  407eba:	465a      	mov	r2, fp
  407ebc:	4629      	mov	r1, r5
  407ebe:	f000 f9a7 	bl	408210 <memmove>
  407ec2:	68a2      	ldr	r2, [r4, #8]
  407ec4:	6823      	ldr	r3, [r4, #0]
  407ec6:	eba2 020b 	sub.w	r2, r2, fp
  407eca:	445b      	add	r3, fp
  407ecc:	60a2      	str	r2, [r4, #8]
  407ece:	6023      	str	r3, [r4, #0]
  407ed0:	e7af      	b.n	407e32 <__sfvwrite_r+0x152>
  407ed2:	6820      	ldr	r0, [r4, #0]
  407ed4:	46b8      	mov	r8, r7
  407ed6:	46ba      	mov	sl, r7
  407ed8:	46bb      	mov	fp, r7
  407eda:	e755      	b.n	407d88 <__sfvwrite_r+0xa8>
  407edc:	6962      	ldr	r2, [r4, #20]
  407ede:	6820      	ldr	r0, [r4, #0]
  407ee0:	6921      	ldr	r1, [r4, #16]
  407ee2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  407ee6:	eba0 0a01 	sub.w	sl, r0, r1
  407eea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  407eee:	f10a 0001 	add.w	r0, sl, #1
  407ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
  407ef6:	4438      	add	r0, r7
  407ef8:	4540      	cmp	r0, r8
  407efa:	4642      	mov	r2, r8
  407efc:	bf84      	itt	hi
  407efe:	4680      	movhi	r8, r0
  407f00:	4642      	movhi	r2, r8
  407f02:	055b      	lsls	r3, r3, #21
  407f04:	d544      	bpl.n	407f90 <__sfvwrite_r+0x2b0>
  407f06:	4611      	mov	r1, r2
  407f08:	9800      	ldr	r0, [sp, #0]
  407f0a:	f7fd ffa7 	bl	405e5c <_malloc_r>
  407f0e:	4683      	mov	fp, r0
  407f10:	2800      	cmp	r0, #0
  407f12:	d055      	beq.n	407fc0 <__sfvwrite_r+0x2e0>
  407f14:	4652      	mov	r2, sl
  407f16:	6921      	ldr	r1, [r4, #16]
  407f18:	f7fe fa50 	bl	4063bc <memcpy>
  407f1c:	89a3      	ldrh	r3, [r4, #12]
  407f1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  407f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  407f26:	81a3      	strh	r3, [r4, #12]
  407f28:	eb0b 000a 	add.w	r0, fp, sl
  407f2c:	eba8 030a 	sub.w	r3, r8, sl
  407f30:	f8c4 b010 	str.w	fp, [r4, #16]
  407f34:	f8c4 8014 	str.w	r8, [r4, #20]
  407f38:	6020      	str	r0, [r4, #0]
  407f3a:	60a3      	str	r3, [r4, #8]
  407f3c:	46b8      	mov	r8, r7
  407f3e:	46ba      	mov	sl, r7
  407f40:	46bb      	mov	fp, r7
  407f42:	e721      	b.n	407d88 <__sfvwrite_r+0xa8>
  407f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  407f48:	42b9      	cmp	r1, r7
  407f4a:	bf28      	it	cs
  407f4c:	4639      	movcs	r1, r7
  407f4e:	464a      	mov	r2, r9
  407f50:	fb91 f1f3 	sdiv	r1, r1, r3
  407f54:	9800      	ldr	r0, [sp, #0]
  407f56:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407f58:	fb03 f301 	mul.w	r3, r3, r1
  407f5c:	69e1      	ldr	r1, [r4, #28]
  407f5e:	47b0      	blx	r6
  407f60:	f1b0 0a00 	subs.w	sl, r0, #0
  407f64:	f73f af1b 	bgt.w	407d9e <__sfvwrite_r+0xbe>
  407f68:	e738      	b.n	407ddc <__sfvwrite_r+0xfc>
  407f6a:	461a      	mov	r2, r3
  407f6c:	4629      	mov	r1, r5
  407f6e:	9301      	str	r3, [sp, #4]
  407f70:	f000 f94e 	bl	408210 <memmove>
  407f74:	6822      	ldr	r2, [r4, #0]
  407f76:	9b01      	ldr	r3, [sp, #4]
  407f78:	9800      	ldr	r0, [sp, #0]
  407f7a:	441a      	add	r2, r3
  407f7c:	6022      	str	r2, [r4, #0]
  407f7e:	4621      	mov	r1, r4
  407f80:	f7ff fc4a 	bl	407818 <_fflush_r>
  407f84:	9b01      	ldr	r3, [sp, #4]
  407f86:	2800      	cmp	r0, #0
  407f88:	f47f af28 	bne.w	407ddc <__sfvwrite_r+0xfc>
  407f8c:	461f      	mov	r7, r3
  407f8e:	e750      	b.n	407e32 <__sfvwrite_r+0x152>
  407f90:	9800      	ldr	r0, [sp, #0]
  407f92:	f000 f9a1 	bl	4082d8 <_realloc_r>
  407f96:	4683      	mov	fp, r0
  407f98:	2800      	cmp	r0, #0
  407f9a:	d1c5      	bne.n	407f28 <__sfvwrite_r+0x248>
  407f9c:	9d00      	ldr	r5, [sp, #0]
  407f9e:	6921      	ldr	r1, [r4, #16]
  407fa0:	4628      	mov	r0, r5
  407fa2:	f7ff fdb7 	bl	407b14 <_free_r>
  407fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407faa:	220c      	movs	r2, #12
  407fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  407fb0:	602a      	str	r2, [r5, #0]
  407fb2:	e715      	b.n	407de0 <__sfvwrite_r+0x100>
  407fb4:	f106 0901 	add.w	r9, r6, #1
  407fb8:	e722      	b.n	407e00 <__sfvwrite_r+0x120>
  407fba:	f04f 30ff 	mov.w	r0, #4294967295
  407fbe:	e6bf      	b.n	407d40 <__sfvwrite_r+0x60>
  407fc0:	9a00      	ldr	r2, [sp, #0]
  407fc2:	230c      	movs	r3, #12
  407fc4:	6013      	str	r3, [r2, #0]
  407fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407fca:	e709      	b.n	407de0 <__sfvwrite_r+0x100>
  407fcc:	7ffffc00 	.word	0x7ffffc00

00407fd0 <_fwalk_reent>:
  407fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  407fd4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  407fd8:	d01f      	beq.n	40801a <_fwalk_reent+0x4a>
  407fda:	4688      	mov	r8, r1
  407fdc:	4606      	mov	r6, r0
  407fde:	f04f 0900 	mov.w	r9, #0
  407fe2:	687d      	ldr	r5, [r7, #4]
  407fe4:	68bc      	ldr	r4, [r7, #8]
  407fe6:	3d01      	subs	r5, #1
  407fe8:	d411      	bmi.n	40800e <_fwalk_reent+0x3e>
  407fea:	89a3      	ldrh	r3, [r4, #12]
  407fec:	2b01      	cmp	r3, #1
  407fee:	f105 35ff 	add.w	r5, r5, #4294967295
  407ff2:	d908      	bls.n	408006 <_fwalk_reent+0x36>
  407ff4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  407ff8:	3301      	adds	r3, #1
  407ffa:	4621      	mov	r1, r4
  407ffc:	4630      	mov	r0, r6
  407ffe:	d002      	beq.n	408006 <_fwalk_reent+0x36>
  408000:	47c0      	blx	r8
  408002:	ea49 0900 	orr.w	r9, r9, r0
  408006:	1c6b      	adds	r3, r5, #1
  408008:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40800c:	d1ed      	bne.n	407fea <_fwalk_reent+0x1a>
  40800e:	683f      	ldr	r7, [r7, #0]
  408010:	2f00      	cmp	r7, #0
  408012:	d1e6      	bne.n	407fe2 <_fwalk_reent+0x12>
  408014:	4648      	mov	r0, r9
  408016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40801a:	46b9      	mov	r9, r7
  40801c:	4648      	mov	r0, r9
  40801e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408022:	bf00      	nop

00408024 <__locale_mb_cur_max>:
  408024:	4b04      	ldr	r3, [pc, #16]	; (408038 <__locale_mb_cur_max+0x14>)
  408026:	4a05      	ldr	r2, [pc, #20]	; (40803c <__locale_mb_cur_max+0x18>)
  408028:	681b      	ldr	r3, [r3, #0]
  40802a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40802c:	2b00      	cmp	r3, #0
  40802e:	bf08      	it	eq
  408030:	4613      	moveq	r3, r2
  408032:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408036:	4770      	bx	lr
  408038:	20400010 	.word	0x20400010
  40803c:	20400854 	.word	0x20400854

00408040 <__retarget_lock_init_recursive>:
  408040:	4770      	bx	lr
  408042:	bf00      	nop

00408044 <__retarget_lock_close_recursive>:
  408044:	4770      	bx	lr
  408046:	bf00      	nop

00408048 <__retarget_lock_acquire_recursive>:
  408048:	4770      	bx	lr
  40804a:	bf00      	nop

0040804c <__retarget_lock_release_recursive>:
  40804c:	4770      	bx	lr
  40804e:	bf00      	nop

00408050 <__swhatbuf_r>:
  408050:	b570      	push	{r4, r5, r6, lr}
  408052:	460c      	mov	r4, r1
  408054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408058:	2900      	cmp	r1, #0
  40805a:	b090      	sub	sp, #64	; 0x40
  40805c:	4615      	mov	r5, r2
  40805e:	461e      	mov	r6, r3
  408060:	db14      	blt.n	40808c <__swhatbuf_r+0x3c>
  408062:	aa01      	add	r2, sp, #4
  408064:	f000 fc9e 	bl	4089a4 <_fstat_r>
  408068:	2800      	cmp	r0, #0
  40806a:	db0f      	blt.n	40808c <__swhatbuf_r+0x3c>
  40806c:	9a02      	ldr	r2, [sp, #8]
  40806e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  408072:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  408076:	fab2 f282 	clz	r2, r2
  40807a:	0952      	lsrs	r2, r2, #5
  40807c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  408080:	f44f 6000 	mov.w	r0, #2048	; 0x800
  408084:	6032      	str	r2, [r6, #0]
  408086:	602b      	str	r3, [r5, #0]
  408088:	b010      	add	sp, #64	; 0x40
  40808a:	bd70      	pop	{r4, r5, r6, pc}
  40808c:	89a2      	ldrh	r2, [r4, #12]
  40808e:	2300      	movs	r3, #0
  408090:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  408094:	6033      	str	r3, [r6, #0]
  408096:	d004      	beq.n	4080a2 <__swhatbuf_r+0x52>
  408098:	2240      	movs	r2, #64	; 0x40
  40809a:	4618      	mov	r0, r3
  40809c:	602a      	str	r2, [r5, #0]
  40809e:	b010      	add	sp, #64	; 0x40
  4080a0:	bd70      	pop	{r4, r5, r6, pc}
  4080a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4080a6:	602b      	str	r3, [r5, #0]
  4080a8:	b010      	add	sp, #64	; 0x40
  4080aa:	bd70      	pop	{r4, r5, r6, pc}

004080ac <__smakebuf_r>:
  4080ac:	898a      	ldrh	r2, [r1, #12]
  4080ae:	0792      	lsls	r2, r2, #30
  4080b0:	460b      	mov	r3, r1
  4080b2:	d506      	bpl.n	4080c2 <__smakebuf_r+0x16>
  4080b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4080b8:	2101      	movs	r1, #1
  4080ba:	601a      	str	r2, [r3, #0]
  4080bc:	611a      	str	r2, [r3, #16]
  4080be:	6159      	str	r1, [r3, #20]
  4080c0:	4770      	bx	lr
  4080c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4080c4:	b083      	sub	sp, #12
  4080c6:	ab01      	add	r3, sp, #4
  4080c8:	466a      	mov	r2, sp
  4080ca:	460c      	mov	r4, r1
  4080cc:	4606      	mov	r6, r0
  4080ce:	f7ff ffbf 	bl	408050 <__swhatbuf_r>
  4080d2:	9900      	ldr	r1, [sp, #0]
  4080d4:	4605      	mov	r5, r0
  4080d6:	4630      	mov	r0, r6
  4080d8:	f7fd fec0 	bl	405e5c <_malloc_r>
  4080dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4080e0:	b1d8      	cbz	r0, 40811a <__smakebuf_r+0x6e>
  4080e2:	9a01      	ldr	r2, [sp, #4]
  4080e4:	4f15      	ldr	r7, [pc, #84]	; (40813c <__smakebuf_r+0x90>)
  4080e6:	9900      	ldr	r1, [sp, #0]
  4080e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4080ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4080ee:	81a3      	strh	r3, [r4, #12]
  4080f0:	6020      	str	r0, [r4, #0]
  4080f2:	6120      	str	r0, [r4, #16]
  4080f4:	6161      	str	r1, [r4, #20]
  4080f6:	b91a      	cbnz	r2, 408100 <__smakebuf_r+0x54>
  4080f8:	432b      	orrs	r3, r5
  4080fa:	81a3      	strh	r3, [r4, #12]
  4080fc:	b003      	add	sp, #12
  4080fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408100:	4630      	mov	r0, r6
  408102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408106:	f000 fc61 	bl	4089cc <_isatty_r>
  40810a:	b1a0      	cbz	r0, 408136 <__smakebuf_r+0x8a>
  40810c:	89a3      	ldrh	r3, [r4, #12]
  40810e:	f023 0303 	bic.w	r3, r3, #3
  408112:	f043 0301 	orr.w	r3, r3, #1
  408116:	b21b      	sxth	r3, r3
  408118:	e7ee      	b.n	4080f8 <__smakebuf_r+0x4c>
  40811a:	059a      	lsls	r2, r3, #22
  40811c:	d4ee      	bmi.n	4080fc <__smakebuf_r+0x50>
  40811e:	f023 0303 	bic.w	r3, r3, #3
  408122:	f104 0243 	add.w	r2, r4, #67	; 0x43
  408126:	f043 0302 	orr.w	r3, r3, #2
  40812a:	2101      	movs	r1, #1
  40812c:	81a3      	strh	r3, [r4, #12]
  40812e:	6022      	str	r2, [r4, #0]
  408130:	6122      	str	r2, [r4, #16]
  408132:	6161      	str	r1, [r4, #20]
  408134:	e7e2      	b.n	4080fc <__smakebuf_r+0x50>
  408136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40813a:	e7dd      	b.n	4080f8 <__smakebuf_r+0x4c>
  40813c:	0040786d 	.word	0x0040786d

00408140 <__ascii_mbtowc>:
  408140:	b082      	sub	sp, #8
  408142:	b149      	cbz	r1, 408158 <__ascii_mbtowc+0x18>
  408144:	b15a      	cbz	r2, 40815e <__ascii_mbtowc+0x1e>
  408146:	b16b      	cbz	r3, 408164 <__ascii_mbtowc+0x24>
  408148:	7813      	ldrb	r3, [r2, #0]
  40814a:	600b      	str	r3, [r1, #0]
  40814c:	7812      	ldrb	r2, [r2, #0]
  40814e:	1c10      	adds	r0, r2, #0
  408150:	bf18      	it	ne
  408152:	2001      	movne	r0, #1
  408154:	b002      	add	sp, #8
  408156:	4770      	bx	lr
  408158:	a901      	add	r1, sp, #4
  40815a:	2a00      	cmp	r2, #0
  40815c:	d1f3      	bne.n	408146 <__ascii_mbtowc+0x6>
  40815e:	4610      	mov	r0, r2
  408160:	b002      	add	sp, #8
  408162:	4770      	bx	lr
  408164:	f06f 0001 	mvn.w	r0, #1
  408168:	e7f4      	b.n	408154 <__ascii_mbtowc+0x14>
  40816a:	bf00      	nop
  40816c:	0000      	movs	r0, r0
	...

00408170 <memchr>:
  408170:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  408174:	2a10      	cmp	r2, #16
  408176:	db2b      	blt.n	4081d0 <memchr+0x60>
  408178:	f010 0f07 	tst.w	r0, #7
  40817c:	d008      	beq.n	408190 <memchr+0x20>
  40817e:	f810 3b01 	ldrb.w	r3, [r0], #1
  408182:	3a01      	subs	r2, #1
  408184:	428b      	cmp	r3, r1
  408186:	d02d      	beq.n	4081e4 <memchr+0x74>
  408188:	f010 0f07 	tst.w	r0, #7
  40818c:	b342      	cbz	r2, 4081e0 <memchr+0x70>
  40818e:	d1f6      	bne.n	40817e <memchr+0xe>
  408190:	b4f0      	push	{r4, r5, r6, r7}
  408192:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408196:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40819a:	f022 0407 	bic.w	r4, r2, #7
  40819e:	f07f 0700 	mvns.w	r7, #0
  4081a2:	2300      	movs	r3, #0
  4081a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4081a8:	3c08      	subs	r4, #8
  4081aa:	ea85 0501 	eor.w	r5, r5, r1
  4081ae:	ea86 0601 	eor.w	r6, r6, r1
  4081b2:	fa85 f547 	uadd8	r5, r5, r7
  4081b6:	faa3 f587 	sel	r5, r3, r7
  4081ba:	fa86 f647 	uadd8	r6, r6, r7
  4081be:	faa5 f687 	sel	r6, r5, r7
  4081c2:	b98e      	cbnz	r6, 4081e8 <memchr+0x78>
  4081c4:	d1ee      	bne.n	4081a4 <memchr+0x34>
  4081c6:	bcf0      	pop	{r4, r5, r6, r7}
  4081c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4081cc:	f002 0207 	and.w	r2, r2, #7
  4081d0:	b132      	cbz	r2, 4081e0 <memchr+0x70>
  4081d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4081d6:	3a01      	subs	r2, #1
  4081d8:	ea83 0301 	eor.w	r3, r3, r1
  4081dc:	b113      	cbz	r3, 4081e4 <memchr+0x74>
  4081de:	d1f8      	bne.n	4081d2 <memchr+0x62>
  4081e0:	2000      	movs	r0, #0
  4081e2:	4770      	bx	lr
  4081e4:	3801      	subs	r0, #1
  4081e6:	4770      	bx	lr
  4081e8:	2d00      	cmp	r5, #0
  4081ea:	bf06      	itte	eq
  4081ec:	4635      	moveq	r5, r6
  4081ee:	3803      	subeq	r0, #3
  4081f0:	3807      	subne	r0, #7
  4081f2:	f015 0f01 	tst.w	r5, #1
  4081f6:	d107      	bne.n	408208 <memchr+0x98>
  4081f8:	3001      	adds	r0, #1
  4081fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4081fe:	bf02      	ittt	eq
  408200:	3001      	addeq	r0, #1
  408202:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408206:	3001      	addeq	r0, #1
  408208:	bcf0      	pop	{r4, r5, r6, r7}
  40820a:	3801      	subs	r0, #1
  40820c:	4770      	bx	lr
  40820e:	bf00      	nop

00408210 <memmove>:
  408210:	4288      	cmp	r0, r1
  408212:	b5f0      	push	{r4, r5, r6, r7, lr}
  408214:	d90d      	bls.n	408232 <memmove+0x22>
  408216:	188b      	adds	r3, r1, r2
  408218:	4298      	cmp	r0, r3
  40821a:	d20a      	bcs.n	408232 <memmove+0x22>
  40821c:	1884      	adds	r4, r0, r2
  40821e:	2a00      	cmp	r2, #0
  408220:	d051      	beq.n	4082c6 <memmove+0xb6>
  408222:	4622      	mov	r2, r4
  408224:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  408228:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40822c:	4299      	cmp	r1, r3
  40822e:	d1f9      	bne.n	408224 <memmove+0x14>
  408230:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408232:	2a0f      	cmp	r2, #15
  408234:	d948      	bls.n	4082c8 <memmove+0xb8>
  408236:	ea41 0300 	orr.w	r3, r1, r0
  40823a:	079b      	lsls	r3, r3, #30
  40823c:	d146      	bne.n	4082cc <memmove+0xbc>
  40823e:	f100 0410 	add.w	r4, r0, #16
  408242:	f101 0310 	add.w	r3, r1, #16
  408246:	4615      	mov	r5, r2
  408248:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40824c:	f844 6c10 	str.w	r6, [r4, #-16]
  408250:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  408254:	f844 6c0c 	str.w	r6, [r4, #-12]
  408258:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40825c:	f844 6c08 	str.w	r6, [r4, #-8]
  408260:	3d10      	subs	r5, #16
  408262:	f853 6c04 	ldr.w	r6, [r3, #-4]
  408266:	f844 6c04 	str.w	r6, [r4, #-4]
  40826a:	2d0f      	cmp	r5, #15
  40826c:	f103 0310 	add.w	r3, r3, #16
  408270:	f104 0410 	add.w	r4, r4, #16
  408274:	d8e8      	bhi.n	408248 <memmove+0x38>
  408276:	f1a2 0310 	sub.w	r3, r2, #16
  40827a:	f023 030f 	bic.w	r3, r3, #15
  40827e:	f002 0e0f 	and.w	lr, r2, #15
  408282:	3310      	adds	r3, #16
  408284:	f1be 0f03 	cmp.w	lr, #3
  408288:	4419      	add	r1, r3
  40828a:	4403      	add	r3, r0
  40828c:	d921      	bls.n	4082d2 <memmove+0xc2>
  40828e:	1f1e      	subs	r6, r3, #4
  408290:	460d      	mov	r5, r1
  408292:	4674      	mov	r4, lr
  408294:	3c04      	subs	r4, #4
  408296:	f855 7b04 	ldr.w	r7, [r5], #4
  40829a:	f846 7f04 	str.w	r7, [r6, #4]!
  40829e:	2c03      	cmp	r4, #3
  4082a0:	d8f8      	bhi.n	408294 <memmove+0x84>
  4082a2:	f1ae 0404 	sub.w	r4, lr, #4
  4082a6:	f024 0403 	bic.w	r4, r4, #3
  4082aa:	3404      	adds	r4, #4
  4082ac:	4421      	add	r1, r4
  4082ae:	4423      	add	r3, r4
  4082b0:	f002 0203 	and.w	r2, r2, #3
  4082b4:	b162      	cbz	r2, 4082d0 <memmove+0xc0>
  4082b6:	3b01      	subs	r3, #1
  4082b8:	440a      	add	r2, r1
  4082ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4082be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4082c2:	428a      	cmp	r2, r1
  4082c4:	d1f9      	bne.n	4082ba <memmove+0xaa>
  4082c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4082c8:	4603      	mov	r3, r0
  4082ca:	e7f3      	b.n	4082b4 <memmove+0xa4>
  4082cc:	4603      	mov	r3, r0
  4082ce:	e7f2      	b.n	4082b6 <memmove+0xa6>
  4082d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4082d2:	4672      	mov	r2, lr
  4082d4:	e7ee      	b.n	4082b4 <memmove+0xa4>
  4082d6:	bf00      	nop

004082d8 <_realloc_r>:
  4082d8:	2900      	cmp	r1, #0
  4082da:	f000 8095 	beq.w	408408 <_realloc_r+0x130>
  4082de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4082e2:	460d      	mov	r5, r1
  4082e4:	4616      	mov	r6, r2
  4082e6:	b083      	sub	sp, #12
  4082e8:	4680      	mov	r8, r0
  4082ea:	f106 070b 	add.w	r7, r6, #11
  4082ee:	f7fe f94d 	bl	40658c <__malloc_lock>
  4082f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4082f6:	2f16      	cmp	r7, #22
  4082f8:	f02e 0403 	bic.w	r4, lr, #3
  4082fc:	f1a5 0908 	sub.w	r9, r5, #8
  408300:	d83c      	bhi.n	40837c <_realloc_r+0xa4>
  408302:	2210      	movs	r2, #16
  408304:	4617      	mov	r7, r2
  408306:	42be      	cmp	r6, r7
  408308:	d83d      	bhi.n	408386 <_realloc_r+0xae>
  40830a:	4294      	cmp	r4, r2
  40830c:	da43      	bge.n	408396 <_realloc_r+0xbe>
  40830e:	4bc4      	ldr	r3, [pc, #784]	; (408620 <_realloc_r+0x348>)
  408310:	6899      	ldr	r1, [r3, #8]
  408312:	eb09 0004 	add.w	r0, r9, r4
  408316:	4288      	cmp	r0, r1
  408318:	f000 80b4 	beq.w	408484 <_realloc_r+0x1ac>
  40831c:	6843      	ldr	r3, [r0, #4]
  40831e:	f023 0101 	bic.w	r1, r3, #1
  408322:	4401      	add	r1, r0
  408324:	6849      	ldr	r1, [r1, #4]
  408326:	07c9      	lsls	r1, r1, #31
  408328:	d54c      	bpl.n	4083c4 <_realloc_r+0xec>
  40832a:	f01e 0f01 	tst.w	lr, #1
  40832e:	f000 809b 	beq.w	408468 <_realloc_r+0x190>
  408332:	4631      	mov	r1, r6
  408334:	4640      	mov	r0, r8
  408336:	f7fd fd91 	bl	405e5c <_malloc_r>
  40833a:	4606      	mov	r6, r0
  40833c:	2800      	cmp	r0, #0
  40833e:	d03a      	beq.n	4083b6 <_realloc_r+0xde>
  408340:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408344:	f023 0301 	bic.w	r3, r3, #1
  408348:	444b      	add	r3, r9
  40834a:	f1a0 0208 	sub.w	r2, r0, #8
  40834e:	429a      	cmp	r2, r3
  408350:	f000 8121 	beq.w	408596 <_realloc_r+0x2be>
  408354:	1f22      	subs	r2, r4, #4
  408356:	2a24      	cmp	r2, #36	; 0x24
  408358:	f200 8107 	bhi.w	40856a <_realloc_r+0x292>
  40835c:	2a13      	cmp	r2, #19
  40835e:	f200 80db 	bhi.w	408518 <_realloc_r+0x240>
  408362:	4603      	mov	r3, r0
  408364:	462a      	mov	r2, r5
  408366:	6811      	ldr	r1, [r2, #0]
  408368:	6019      	str	r1, [r3, #0]
  40836a:	6851      	ldr	r1, [r2, #4]
  40836c:	6059      	str	r1, [r3, #4]
  40836e:	6892      	ldr	r2, [r2, #8]
  408370:	609a      	str	r2, [r3, #8]
  408372:	4629      	mov	r1, r5
  408374:	4640      	mov	r0, r8
  408376:	f7ff fbcd 	bl	407b14 <_free_r>
  40837a:	e01c      	b.n	4083b6 <_realloc_r+0xde>
  40837c:	f027 0707 	bic.w	r7, r7, #7
  408380:	2f00      	cmp	r7, #0
  408382:	463a      	mov	r2, r7
  408384:	dabf      	bge.n	408306 <_realloc_r+0x2e>
  408386:	2600      	movs	r6, #0
  408388:	230c      	movs	r3, #12
  40838a:	4630      	mov	r0, r6
  40838c:	f8c8 3000 	str.w	r3, [r8]
  408390:	b003      	add	sp, #12
  408392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408396:	462e      	mov	r6, r5
  408398:	1be3      	subs	r3, r4, r7
  40839a:	2b0f      	cmp	r3, #15
  40839c:	d81e      	bhi.n	4083dc <_realloc_r+0x104>
  40839e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4083a2:	f003 0301 	and.w	r3, r3, #1
  4083a6:	4323      	orrs	r3, r4
  4083a8:	444c      	add	r4, r9
  4083aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4083ae:	6863      	ldr	r3, [r4, #4]
  4083b0:	f043 0301 	orr.w	r3, r3, #1
  4083b4:	6063      	str	r3, [r4, #4]
  4083b6:	4640      	mov	r0, r8
  4083b8:	f7fe f8ee 	bl	406598 <__malloc_unlock>
  4083bc:	4630      	mov	r0, r6
  4083be:	b003      	add	sp, #12
  4083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4083c4:	f023 0303 	bic.w	r3, r3, #3
  4083c8:	18e1      	adds	r1, r4, r3
  4083ca:	4291      	cmp	r1, r2
  4083cc:	db1f      	blt.n	40840e <_realloc_r+0x136>
  4083ce:	68c3      	ldr	r3, [r0, #12]
  4083d0:	6882      	ldr	r2, [r0, #8]
  4083d2:	462e      	mov	r6, r5
  4083d4:	60d3      	str	r3, [r2, #12]
  4083d6:	460c      	mov	r4, r1
  4083d8:	609a      	str	r2, [r3, #8]
  4083da:	e7dd      	b.n	408398 <_realloc_r+0xc0>
  4083dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4083e0:	eb09 0107 	add.w	r1, r9, r7
  4083e4:	f002 0201 	and.w	r2, r2, #1
  4083e8:	444c      	add	r4, r9
  4083ea:	f043 0301 	orr.w	r3, r3, #1
  4083ee:	4317      	orrs	r7, r2
  4083f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4083f4:	604b      	str	r3, [r1, #4]
  4083f6:	6863      	ldr	r3, [r4, #4]
  4083f8:	f043 0301 	orr.w	r3, r3, #1
  4083fc:	3108      	adds	r1, #8
  4083fe:	6063      	str	r3, [r4, #4]
  408400:	4640      	mov	r0, r8
  408402:	f7ff fb87 	bl	407b14 <_free_r>
  408406:	e7d6      	b.n	4083b6 <_realloc_r+0xde>
  408408:	4611      	mov	r1, r2
  40840a:	f7fd bd27 	b.w	405e5c <_malloc_r>
  40840e:	f01e 0f01 	tst.w	lr, #1
  408412:	d18e      	bne.n	408332 <_realloc_r+0x5a>
  408414:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408418:	eba9 0a01 	sub.w	sl, r9, r1
  40841c:	f8da 1004 	ldr.w	r1, [sl, #4]
  408420:	f021 0103 	bic.w	r1, r1, #3
  408424:	440b      	add	r3, r1
  408426:	4423      	add	r3, r4
  408428:	4293      	cmp	r3, r2
  40842a:	db25      	blt.n	408478 <_realloc_r+0x1a0>
  40842c:	68c2      	ldr	r2, [r0, #12]
  40842e:	6881      	ldr	r1, [r0, #8]
  408430:	4656      	mov	r6, sl
  408432:	60ca      	str	r2, [r1, #12]
  408434:	6091      	str	r1, [r2, #8]
  408436:	f8da 100c 	ldr.w	r1, [sl, #12]
  40843a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40843e:	1f22      	subs	r2, r4, #4
  408440:	2a24      	cmp	r2, #36	; 0x24
  408442:	60c1      	str	r1, [r0, #12]
  408444:	6088      	str	r0, [r1, #8]
  408446:	f200 8094 	bhi.w	408572 <_realloc_r+0x29a>
  40844a:	2a13      	cmp	r2, #19
  40844c:	d96f      	bls.n	40852e <_realloc_r+0x256>
  40844e:	6829      	ldr	r1, [r5, #0]
  408450:	f8ca 1008 	str.w	r1, [sl, #8]
  408454:	6869      	ldr	r1, [r5, #4]
  408456:	f8ca 100c 	str.w	r1, [sl, #12]
  40845a:	2a1b      	cmp	r2, #27
  40845c:	f200 80a2 	bhi.w	4085a4 <_realloc_r+0x2cc>
  408460:	3508      	adds	r5, #8
  408462:	f10a 0210 	add.w	r2, sl, #16
  408466:	e063      	b.n	408530 <_realloc_r+0x258>
  408468:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40846c:	eba9 0a03 	sub.w	sl, r9, r3
  408470:	f8da 1004 	ldr.w	r1, [sl, #4]
  408474:	f021 0103 	bic.w	r1, r1, #3
  408478:	1863      	adds	r3, r4, r1
  40847a:	4293      	cmp	r3, r2
  40847c:	f6ff af59 	blt.w	408332 <_realloc_r+0x5a>
  408480:	4656      	mov	r6, sl
  408482:	e7d8      	b.n	408436 <_realloc_r+0x15e>
  408484:	6841      	ldr	r1, [r0, #4]
  408486:	f021 0b03 	bic.w	fp, r1, #3
  40848a:	44a3      	add	fp, r4
  40848c:	f107 0010 	add.w	r0, r7, #16
  408490:	4583      	cmp	fp, r0
  408492:	da56      	bge.n	408542 <_realloc_r+0x26a>
  408494:	f01e 0f01 	tst.w	lr, #1
  408498:	f47f af4b 	bne.w	408332 <_realloc_r+0x5a>
  40849c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4084a0:	eba9 0a01 	sub.w	sl, r9, r1
  4084a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4084a8:	f021 0103 	bic.w	r1, r1, #3
  4084ac:	448b      	add	fp, r1
  4084ae:	4558      	cmp	r0, fp
  4084b0:	dce2      	bgt.n	408478 <_realloc_r+0x1a0>
  4084b2:	4656      	mov	r6, sl
  4084b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4084b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4084bc:	1f22      	subs	r2, r4, #4
  4084be:	2a24      	cmp	r2, #36	; 0x24
  4084c0:	60c1      	str	r1, [r0, #12]
  4084c2:	6088      	str	r0, [r1, #8]
  4084c4:	f200 808f 	bhi.w	4085e6 <_realloc_r+0x30e>
  4084c8:	2a13      	cmp	r2, #19
  4084ca:	f240 808a 	bls.w	4085e2 <_realloc_r+0x30a>
  4084ce:	6829      	ldr	r1, [r5, #0]
  4084d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4084d4:	6869      	ldr	r1, [r5, #4]
  4084d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4084da:	2a1b      	cmp	r2, #27
  4084dc:	f200 808a 	bhi.w	4085f4 <_realloc_r+0x31c>
  4084e0:	3508      	adds	r5, #8
  4084e2:	f10a 0210 	add.w	r2, sl, #16
  4084e6:	6829      	ldr	r1, [r5, #0]
  4084e8:	6011      	str	r1, [r2, #0]
  4084ea:	6869      	ldr	r1, [r5, #4]
  4084ec:	6051      	str	r1, [r2, #4]
  4084ee:	68a9      	ldr	r1, [r5, #8]
  4084f0:	6091      	str	r1, [r2, #8]
  4084f2:	eb0a 0107 	add.w	r1, sl, r7
  4084f6:	ebab 0207 	sub.w	r2, fp, r7
  4084fa:	f042 0201 	orr.w	r2, r2, #1
  4084fe:	6099      	str	r1, [r3, #8]
  408500:	604a      	str	r2, [r1, #4]
  408502:	f8da 3004 	ldr.w	r3, [sl, #4]
  408506:	f003 0301 	and.w	r3, r3, #1
  40850a:	431f      	orrs	r7, r3
  40850c:	4640      	mov	r0, r8
  40850e:	f8ca 7004 	str.w	r7, [sl, #4]
  408512:	f7fe f841 	bl	406598 <__malloc_unlock>
  408516:	e751      	b.n	4083bc <_realloc_r+0xe4>
  408518:	682b      	ldr	r3, [r5, #0]
  40851a:	6003      	str	r3, [r0, #0]
  40851c:	686b      	ldr	r3, [r5, #4]
  40851e:	6043      	str	r3, [r0, #4]
  408520:	2a1b      	cmp	r2, #27
  408522:	d82d      	bhi.n	408580 <_realloc_r+0x2a8>
  408524:	f100 0308 	add.w	r3, r0, #8
  408528:	f105 0208 	add.w	r2, r5, #8
  40852c:	e71b      	b.n	408366 <_realloc_r+0x8e>
  40852e:	4632      	mov	r2, r6
  408530:	6829      	ldr	r1, [r5, #0]
  408532:	6011      	str	r1, [r2, #0]
  408534:	6869      	ldr	r1, [r5, #4]
  408536:	6051      	str	r1, [r2, #4]
  408538:	68a9      	ldr	r1, [r5, #8]
  40853a:	6091      	str	r1, [r2, #8]
  40853c:	461c      	mov	r4, r3
  40853e:	46d1      	mov	r9, sl
  408540:	e72a      	b.n	408398 <_realloc_r+0xc0>
  408542:	eb09 0107 	add.w	r1, r9, r7
  408546:	ebab 0b07 	sub.w	fp, fp, r7
  40854a:	f04b 0201 	orr.w	r2, fp, #1
  40854e:	6099      	str	r1, [r3, #8]
  408550:	604a      	str	r2, [r1, #4]
  408552:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408556:	f003 0301 	and.w	r3, r3, #1
  40855a:	431f      	orrs	r7, r3
  40855c:	4640      	mov	r0, r8
  40855e:	f845 7c04 	str.w	r7, [r5, #-4]
  408562:	f7fe f819 	bl	406598 <__malloc_unlock>
  408566:	462e      	mov	r6, r5
  408568:	e728      	b.n	4083bc <_realloc_r+0xe4>
  40856a:	4629      	mov	r1, r5
  40856c:	f7ff fe50 	bl	408210 <memmove>
  408570:	e6ff      	b.n	408372 <_realloc_r+0x9a>
  408572:	4629      	mov	r1, r5
  408574:	4630      	mov	r0, r6
  408576:	461c      	mov	r4, r3
  408578:	46d1      	mov	r9, sl
  40857a:	f7ff fe49 	bl	408210 <memmove>
  40857e:	e70b      	b.n	408398 <_realloc_r+0xc0>
  408580:	68ab      	ldr	r3, [r5, #8]
  408582:	6083      	str	r3, [r0, #8]
  408584:	68eb      	ldr	r3, [r5, #12]
  408586:	60c3      	str	r3, [r0, #12]
  408588:	2a24      	cmp	r2, #36	; 0x24
  40858a:	d017      	beq.n	4085bc <_realloc_r+0x2e4>
  40858c:	f100 0310 	add.w	r3, r0, #16
  408590:	f105 0210 	add.w	r2, r5, #16
  408594:	e6e7      	b.n	408366 <_realloc_r+0x8e>
  408596:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40859a:	f023 0303 	bic.w	r3, r3, #3
  40859e:	441c      	add	r4, r3
  4085a0:	462e      	mov	r6, r5
  4085a2:	e6f9      	b.n	408398 <_realloc_r+0xc0>
  4085a4:	68a9      	ldr	r1, [r5, #8]
  4085a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4085aa:	68e9      	ldr	r1, [r5, #12]
  4085ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4085b0:	2a24      	cmp	r2, #36	; 0x24
  4085b2:	d00c      	beq.n	4085ce <_realloc_r+0x2f6>
  4085b4:	3510      	adds	r5, #16
  4085b6:	f10a 0218 	add.w	r2, sl, #24
  4085ba:	e7b9      	b.n	408530 <_realloc_r+0x258>
  4085bc:	692b      	ldr	r3, [r5, #16]
  4085be:	6103      	str	r3, [r0, #16]
  4085c0:	696b      	ldr	r3, [r5, #20]
  4085c2:	6143      	str	r3, [r0, #20]
  4085c4:	f105 0218 	add.w	r2, r5, #24
  4085c8:	f100 0318 	add.w	r3, r0, #24
  4085cc:	e6cb      	b.n	408366 <_realloc_r+0x8e>
  4085ce:	692a      	ldr	r2, [r5, #16]
  4085d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4085d4:	696a      	ldr	r2, [r5, #20]
  4085d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4085da:	3518      	adds	r5, #24
  4085dc:	f10a 0220 	add.w	r2, sl, #32
  4085e0:	e7a6      	b.n	408530 <_realloc_r+0x258>
  4085e2:	4632      	mov	r2, r6
  4085e4:	e77f      	b.n	4084e6 <_realloc_r+0x20e>
  4085e6:	4629      	mov	r1, r5
  4085e8:	4630      	mov	r0, r6
  4085ea:	9301      	str	r3, [sp, #4]
  4085ec:	f7ff fe10 	bl	408210 <memmove>
  4085f0:	9b01      	ldr	r3, [sp, #4]
  4085f2:	e77e      	b.n	4084f2 <_realloc_r+0x21a>
  4085f4:	68a9      	ldr	r1, [r5, #8]
  4085f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4085fa:	68e9      	ldr	r1, [r5, #12]
  4085fc:	f8ca 1014 	str.w	r1, [sl, #20]
  408600:	2a24      	cmp	r2, #36	; 0x24
  408602:	d003      	beq.n	40860c <_realloc_r+0x334>
  408604:	3510      	adds	r5, #16
  408606:	f10a 0218 	add.w	r2, sl, #24
  40860a:	e76c      	b.n	4084e6 <_realloc_r+0x20e>
  40860c:	692a      	ldr	r2, [r5, #16]
  40860e:	f8ca 2018 	str.w	r2, [sl, #24]
  408612:	696a      	ldr	r2, [r5, #20]
  408614:	f8ca 201c 	str.w	r2, [sl, #28]
  408618:	3518      	adds	r5, #24
  40861a:	f10a 0220 	add.w	r2, sl, #32
  40861e:	e762      	b.n	4084e6 <_realloc_r+0x20e>
  408620:	20400440 	.word	0x20400440

00408624 <__sread>:
  408624:	b510      	push	{r4, lr}
  408626:	460c      	mov	r4, r1
  408628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40862c:	f000 f9f6 	bl	408a1c <_read_r>
  408630:	2800      	cmp	r0, #0
  408632:	db03      	blt.n	40863c <__sread+0x18>
  408634:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408636:	4403      	add	r3, r0
  408638:	6523      	str	r3, [r4, #80]	; 0x50
  40863a:	bd10      	pop	{r4, pc}
  40863c:	89a3      	ldrh	r3, [r4, #12]
  40863e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408642:	81a3      	strh	r3, [r4, #12]
  408644:	bd10      	pop	{r4, pc}
  408646:	bf00      	nop

00408648 <__swrite>:
  408648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40864c:	4616      	mov	r6, r2
  40864e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408652:	461f      	mov	r7, r3
  408654:	05d3      	lsls	r3, r2, #23
  408656:	460c      	mov	r4, r1
  408658:	4605      	mov	r5, r0
  40865a:	d507      	bpl.n	40866c <__swrite+0x24>
  40865c:	2200      	movs	r2, #0
  40865e:	2302      	movs	r3, #2
  408660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408664:	f000 f9c4 	bl	4089f0 <_lseek_r>
  408668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40866c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408670:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408674:	81a2      	strh	r2, [r4, #12]
  408676:	463b      	mov	r3, r7
  408678:	4632      	mov	r2, r6
  40867a:	4628      	mov	r0, r5
  40867c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408680:	f000 b8a4 	b.w	4087cc <_write_r>

00408684 <__sseek>:
  408684:	b510      	push	{r4, lr}
  408686:	460c      	mov	r4, r1
  408688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40868c:	f000 f9b0 	bl	4089f0 <_lseek_r>
  408690:	89a3      	ldrh	r3, [r4, #12]
  408692:	1c42      	adds	r2, r0, #1
  408694:	bf0e      	itee	eq
  408696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40869a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40869e:	6520      	strne	r0, [r4, #80]	; 0x50
  4086a0:	81a3      	strh	r3, [r4, #12]
  4086a2:	bd10      	pop	{r4, pc}

004086a4 <__sclose>:
  4086a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4086a8:	f000 b908 	b.w	4088bc <_close_r>

004086ac <__swbuf_r>:
  4086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4086ae:	460d      	mov	r5, r1
  4086b0:	4614      	mov	r4, r2
  4086b2:	4606      	mov	r6, r0
  4086b4:	b110      	cbz	r0, 4086bc <__swbuf_r+0x10>
  4086b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4086b8:	2b00      	cmp	r3, #0
  4086ba:	d04b      	beq.n	408754 <__swbuf_r+0xa8>
  4086bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4086c0:	69a3      	ldr	r3, [r4, #24]
  4086c2:	60a3      	str	r3, [r4, #8]
  4086c4:	b291      	uxth	r1, r2
  4086c6:	0708      	lsls	r0, r1, #28
  4086c8:	d539      	bpl.n	40873e <__swbuf_r+0x92>
  4086ca:	6923      	ldr	r3, [r4, #16]
  4086cc:	2b00      	cmp	r3, #0
  4086ce:	d036      	beq.n	40873e <__swbuf_r+0x92>
  4086d0:	b2ed      	uxtb	r5, r5
  4086d2:	0489      	lsls	r1, r1, #18
  4086d4:	462f      	mov	r7, r5
  4086d6:	d515      	bpl.n	408704 <__swbuf_r+0x58>
  4086d8:	6822      	ldr	r2, [r4, #0]
  4086da:	6961      	ldr	r1, [r4, #20]
  4086dc:	1ad3      	subs	r3, r2, r3
  4086de:	428b      	cmp	r3, r1
  4086e0:	da1c      	bge.n	40871c <__swbuf_r+0x70>
  4086e2:	3301      	adds	r3, #1
  4086e4:	68a1      	ldr	r1, [r4, #8]
  4086e6:	1c50      	adds	r0, r2, #1
  4086e8:	3901      	subs	r1, #1
  4086ea:	60a1      	str	r1, [r4, #8]
  4086ec:	6020      	str	r0, [r4, #0]
  4086ee:	7015      	strb	r5, [r2, #0]
  4086f0:	6962      	ldr	r2, [r4, #20]
  4086f2:	429a      	cmp	r2, r3
  4086f4:	d01a      	beq.n	40872c <__swbuf_r+0x80>
  4086f6:	89a3      	ldrh	r3, [r4, #12]
  4086f8:	07db      	lsls	r3, r3, #31
  4086fa:	d501      	bpl.n	408700 <__swbuf_r+0x54>
  4086fc:	2d0a      	cmp	r5, #10
  4086fe:	d015      	beq.n	40872c <__swbuf_r+0x80>
  408700:	4638      	mov	r0, r7
  408702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408704:	6e61      	ldr	r1, [r4, #100]	; 0x64
  408706:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40870a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40870e:	81a2      	strh	r2, [r4, #12]
  408710:	6822      	ldr	r2, [r4, #0]
  408712:	6661      	str	r1, [r4, #100]	; 0x64
  408714:	6961      	ldr	r1, [r4, #20]
  408716:	1ad3      	subs	r3, r2, r3
  408718:	428b      	cmp	r3, r1
  40871a:	dbe2      	blt.n	4086e2 <__swbuf_r+0x36>
  40871c:	4621      	mov	r1, r4
  40871e:	4630      	mov	r0, r6
  408720:	f7ff f87a 	bl	407818 <_fflush_r>
  408724:	b940      	cbnz	r0, 408738 <__swbuf_r+0x8c>
  408726:	6822      	ldr	r2, [r4, #0]
  408728:	2301      	movs	r3, #1
  40872a:	e7db      	b.n	4086e4 <__swbuf_r+0x38>
  40872c:	4621      	mov	r1, r4
  40872e:	4630      	mov	r0, r6
  408730:	f7ff f872 	bl	407818 <_fflush_r>
  408734:	2800      	cmp	r0, #0
  408736:	d0e3      	beq.n	408700 <__swbuf_r+0x54>
  408738:	f04f 37ff 	mov.w	r7, #4294967295
  40873c:	e7e0      	b.n	408700 <__swbuf_r+0x54>
  40873e:	4621      	mov	r1, r4
  408740:	4630      	mov	r0, r6
  408742:	f7fe ff55 	bl	4075f0 <__swsetup_r>
  408746:	2800      	cmp	r0, #0
  408748:	d1f6      	bne.n	408738 <__swbuf_r+0x8c>
  40874a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40874e:	6923      	ldr	r3, [r4, #16]
  408750:	b291      	uxth	r1, r2
  408752:	e7bd      	b.n	4086d0 <__swbuf_r+0x24>
  408754:	f7ff f8b8 	bl	4078c8 <__sinit>
  408758:	e7b0      	b.n	4086bc <__swbuf_r+0x10>
  40875a:	bf00      	nop

0040875c <_wcrtomb_r>:
  40875c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40875e:	4606      	mov	r6, r0
  408760:	b085      	sub	sp, #20
  408762:	461f      	mov	r7, r3
  408764:	b189      	cbz	r1, 40878a <_wcrtomb_r+0x2e>
  408766:	4c10      	ldr	r4, [pc, #64]	; (4087a8 <_wcrtomb_r+0x4c>)
  408768:	4d10      	ldr	r5, [pc, #64]	; (4087ac <_wcrtomb_r+0x50>)
  40876a:	6824      	ldr	r4, [r4, #0]
  40876c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40876e:	2c00      	cmp	r4, #0
  408770:	bf08      	it	eq
  408772:	462c      	moveq	r4, r5
  408774:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  408778:	47a0      	blx	r4
  40877a:	1c43      	adds	r3, r0, #1
  40877c:	d103      	bne.n	408786 <_wcrtomb_r+0x2a>
  40877e:	2200      	movs	r2, #0
  408780:	238a      	movs	r3, #138	; 0x8a
  408782:	603a      	str	r2, [r7, #0]
  408784:	6033      	str	r3, [r6, #0]
  408786:	b005      	add	sp, #20
  408788:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40878a:	460c      	mov	r4, r1
  40878c:	4906      	ldr	r1, [pc, #24]	; (4087a8 <_wcrtomb_r+0x4c>)
  40878e:	4a07      	ldr	r2, [pc, #28]	; (4087ac <_wcrtomb_r+0x50>)
  408790:	6809      	ldr	r1, [r1, #0]
  408792:	6b49      	ldr	r1, [r1, #52]	; 0x34
  408794:	2900      	cmp	r1, #0
  408796:	bf08      	it	eq
  408798:	4611      	moveq	r1, r2
  40879a:	4622      	mov	r2, r4
  40879c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  4087a0:	a901      	add	r1, sp, #4
  4087a2:	47a0      	blx	r4
  4087a4:	e7e9      	b.n	40877a <_wcrtomb_r+0x1e>
  4087a6:	bf00      	nop
  4087a8:	20400010 	.word	0x20400010
  4087ac:	20400854 	.word	0x20400854

004087b0 <__ascii_wctomb>:
  4087b0:	b121      	cbz	r1, 4087bc <__ascii_wctomb+0xc>
  4087b2:	2aff      	cmp	r2, #255	; 0xff
  4087b4:	d804      	bhi.n	4087c0 <__ascii_wctomb+0x10>
  4087b6:	700a      	strb	r2, [r1, #0]
  4087b8:	2001      	movs	r0, #1
  4087ba:	4770      	bx	lr
  4087bc:	4608      	mov	r0, r1
  4087be:	4770      	bx	lr
  4087c0:	238a      	movs	r3, #138	; 0x8a
  4087c2:	6003      	str	r3, [r0, #0]
  4087c4:	f04f 30ff 	mov.w	r0, #4294967295
  4087c8:	4770      	bx	lr
  4087ca:	bf00      	nop

004087cc <_write_r>:
  4087cc:	b570      	push	{r4, r5, r6, lr}
  4087ce:	460d      	mov	r5, r1
  4087d0:	4c08      	ldr	r4, [pc, #32]	; (4087f4 <_write_r+0x28>)
  4087d2:	4611      	mov	r1, r2
  4087d4:	4606      	mov	r6, r0
  4087d6:	461a      	mov	r2, r3
  4087d8:	4628      	mov	r0, r5
  4087da:	2300      	movs	r3, #0
  4087dc:	6023      	str	r3, [r4, #0]
  4087de:	f7f8 f9b3 	bl	400b48 <_write>
  4087e2:	1c43      	adds	r3, r0, #1
  4087e4:	d000      	beq.n	4087e8 <_write_r+0x1c>
  4087e6:	bd70      	pop	{r4, r5, r6, pc}
  4087e8:	6823      	ldr	r3, [r4, #0]
  4087ea:	2b00      	cmp	r3, #0
  4087ec:	d0fb      	beq.n	4087e6 <_write_r+0x1a>
  4087ee:	6033      	str	r3, [r6, #0]
  4087f0:	bd70      	pop	{r4, r5, r6, pc}
  4087f2:	bf00      	nop
  4087f4:	20400c48 	.word	0x20400c48

004087f8 <__register_exitproc>:
  4087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4087fc:	4d2c      	ldr	r5, [pc, #176]	; (4088b0 <__register_exitproc+0xb8>)
  4087fe:	4606      	mov	r6, r0
  408800:	6828      	ldr	r0, [r5, #0]
  408802:	4698      	mov	r8, r3
  408804:	460f      	mov	r7, r1
  408806:	4691      	mov	r9, r2
  408808:	f7ff fc1e 	bl	408048 <__retarget_lock_acquire_recursive>
  40880c:	4b29      	ldr	r3, [pc, #164]	; (4088b4 <__register_exitproc+0xbc>)
  40880e:	681c      	ldr	r4, [r3, #0]
  408810:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  408814:	2b00      	cmp	r3, #0
  408816:	d03e      	beq.n	408896 <__register_exitproc+0x9e>
  408818:	685a      	ldr	r2, [r3, #4]
  40881a:	2a1f      	cmp	r2, #31
  40881c:	dc1c      	bgt.n	408858 <__register_exitproc+0x60>
  40881e:	f102 0e01 	add.w	lr, r2, #1
  408822:	b176      	cbz	r6, 408842 <__register_exitproc+0x4a>
  408824:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  408828:	2401      	movs	r4, #1
  40882a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40882e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  408832:	4094      	lsls	r4, r2
  408834:	4320      	orrs	r0, r4
  408836:	2e02      	cmp	r6, #2
  408838:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40883c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  408840:	d023      	beq.n	40888a <__register_exitproc+0x92>
  408842:	3202      	adds	r2, #2
  408844:	f8c3 e004 	str.w	lr, [r3, #4]
  408848:	6828      	ldr	r0, [r5, #0]
  40884a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40884e:	f7ff fbfd 	bl	40804c <__retarget_lock_release_recursive>
  408852:	2000      	movs	r0, #0
  408854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408858:	4b17      	ldr	r3, [pc, #92]	; (4088b8 <__register_exitproc+0xc0>)
  40885a:	b30b      	cbz	r3, 4088a0 <__register_exitproc+0xa8>
  40885c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  408860:	f7fd faec 	bl	405e3c <malloc>
  408864:	4603      	mov	r3, r0
  408866:	b1d8      	cbz	r0, 4088a0 <__register_exitproc+0xa8>
  408868:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40886c:	6002      	str	r2, [r0, #0]
  40886e:	2100      	movs	r1, #0
  408870:	6041      	str	r1, [r0, #4]
  408872:	460a      	mov	r2, r1
  408874:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  408878:	f04f 0e01 	mov.w	lr, #1
  40887c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  408880:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  408884:	2e00      	cmp	r6, #0
  408886:	d0dc      	beq.n	408842 <__register_exitproc+0x4a>
  408888:	e7cc      	b.n	408824 <__register_exitproc+0x2c>
  40888a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40888e:	430c      	orrs	r4, r1
  408890:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  408894:	e7d5      	b.n	408842 <__register_exitproc+0x4a>
  408896:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40889a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40889e:	e7bb      	b.n	408818 <__register_exitproc+0x20>
  4088a0:	6828      	ldr	r0, [r5, #0]
  4088a2:	f7ff fbd3 	bl	40804c <__retarget_lock_release_recursive>
  4088a6:	f04f 30ff 	mov.w	r0, #4294967295
  4088aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4088ae:	bf00      	nop
  4088b0:	20400850 	.word	0x20400850
  4088b4:	00409284 	.word	0x00409284
  4088b8:	00405e3d 	.word	0x00405e3d

004088bc <_close_r>:
  4088bc:	b538      	push	{r3, r4, r5, lr}
  4088be:	4c07      	ldr	r4, [pc, #28]	; (4088dc <_close_r+0x20>)
  4088c0:	2300      	movs	r3, #0
  4088c2:	4605      	mov	r5, r0
  4088c4:	4608      	mov	r0, r1
  4088c6:	6023      	str	r3, [r4, #0]
  4088c8:	f7f8 fea8 	bl	40161c <_close>
  4088cc:	1c43      	adds	r3, r0, #1
  4088ce:	d000      	beq.n	4088d2 <_close_r+0x16>
  4088d0:	bd38      	pop	{r3, r4, r5, pc}
  4088d2:	6823      	ldr	r3, [r4, #0]
  4088d4:	2b00      	cmp	r3, #0
  4088d6:	d0fb      	beq.n	4088d0 <_close_r+0x14>
  4088d8:	602b      	str	r3, [r5, #0]
  4088da:	bd38      	pop	{r3, r4, r5, pc}
  4088dc:	20400c48 	.word	0x20400c48

004088e0 <_fclose_r>:
  4088e0:	b570      	push	{r4, r5, r6, lr}
  4088e2:	b159      	cbz	r1, 4088fc <_fclose_r+0x1c>
  4088e4:	4605      	mov	r5, r0
  4088e6:	460c      	mov	r4, r1
  4088e8:	b110      	cbz	r0, 4088f0 <_fclose_r+0x10>
  4088ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4088ec:	2b00      	cmp	r3, #0
  4088ee:	d03c      	beq.n	40896a <_fclose_r+0x8a>
  4088f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4088f2:	07d8      	lsls	r0, r3, #31
  4088f4:	d505      	bpl.n	408902 <_fclose_r+0x22>
  4088f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4088fa:	b92b      	cbnz	r3, 408908 <_fclose_r+0x28>
  4088fc:	2600      	movs	r6, #0
  4088fe:	4630      	mov	r0, r6
  408900:	bd70      	pop	{r4, r5, r6, pc}
  408902:	89a3      	ldrh	r3, [r4, #12]
  408904:	0599      	lsls	r1, r3, #22
  408906:	d53c      	bpl.n	408982 <_fclose_r+0xa2>
  408908:	4621      	mov	r1, r4
  40890a:	4628      	mov	r0, r5
  40890c:	f7fe fee4 	bl	4076d8 <__sflush_r>
  408910:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  408912:	4606      	mov	r6, r0
  408914:	b133      	cbz	r3, 408924 <_fclose_r+0x44>
  408916:	69e1      	ldr	r1, [r4, #28]
  408918:	4628      	mov	r0, r5
  40891a:	4798      	blx	r3
  40891c:	2800      	cmp	r0, #0
  40891e:	bfb8      	it	lt
  408920:	f04f 36ff 	movlt.w	r6, #4294967295
  408924:	89a3      	ldrh	r3, [r4, #12]
  408926:	061a      	lsls	r2, r3, #24
  408928:	d422      	bmi.n	408970 <_fclose_r+0x90>
  40892a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40892c:	b141      	cbz	r1, 408940 <_fclose_r+0x60>
  40892e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  408932:	4299      	cmp	r1, r3
  408934:	d002      	beq.n	40893c <_fclose_r+0x5c>
  408936:	4628      	mov	r0, r5
  408938:	f7ff f8ec 	bl	407b14 <_free_r>
  40893c:	2300      	movs	r3, #0
  40893e:	6323      	str	r3, [r4, #48]	; 0x30
  408940:	6c61      	ldr	r1, [r4, #68]	; 0x44
  408942:	b121      	cbz	r1, 40894e <_fclose_r+0x6e>
  408944:	4628      	mov	r0, r5
  408946:	f7ff f8e5 	bl	407b14 <_free_r>
  40894a:	2300      	movs	r3, #0
  40894c:	6463      	str	r3, [r4, #68]	; 0x44
  40894e:	f7fe ffe7 	bl	407920 <__sfp_lock_acquire>
  408952:	6e63      	ldr	r3, [r4, #100]	; 0x64
  408954:	2200      	movs	r2, #0
  408956:	07db      	lsls	r3, r3, #31
  408958:	81a2      	strh	r2, [r4, #12]
  40895a:	d50e      	bpl.n	40897a <_fclose_r+0x9a>
  40895c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40895e:	f7ff fb71 	bl	408044 <__retarget_lock_close_recursive>
  408962:	f7fe ffe3 	bl	40792c <__sfp_lock_release>
  408966:	4630      	mov	r0, r6
  408968:	bd70      	pop	{r4, r5, r6, pc}
  40896a:	f7fe ffad 	bl	4078c8 <__sinit>
  40896e:	e7bf      	b.n	4088f0 <_fclose_r+0x10>
  408970:	6921      	ldr	r1, [r4, #16]
  408972:	4628      	mov	r0, r5
  408974:	f7ff f8ce 	bl	407b14 <_free_r>
  408978:	e7d7      	b.n	40892a <_fclose_r+0x4a>
  40897a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40897c:	f7ff fb66 	bl	40804c <__retarget_lock_release_recursive>
  408980:	e7ec      	b.n	40895c <_fclose_r+0x7c>
  408982:	6da0      	ldr	r0, [r4, #88]	; 0x58
  408984:	f7ff fb60 	bl	408048 <__retarget_lock_acquire_recursive>
  408988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40898c:	2b00      	cmp	r3, #0
  40898e:	d1bb      	bne.n	408908 <_fclose_r+0x28>
  408990:	6e66      	ldr	r6, [r4, #100]	; 0x64
  408992:	f016 0601 	ands.w	r6, r6, #1
  408996:	d1b1      	bne.n	4088fc <_fclose_r+0x1c>
  408998:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40899a:	f7ff fb57 	bl	40804c <__retarget_lock_release_recursive>
  40899e:	4630      	mov	r0, r6
  4089a0:	bd70      	pop	{r4, r5, r6, pc}
  4089a2:	bf00      	nop

004089a4 <_fstat_r>:
  4089a4:	b538      	push	{r3, r4, r5, lr}
  4089a6:	460b      	mov	r3, r1
  4089a8:	4c07      	ldr	r4, [pc, #28]	; (4089c8 <_fstat_r+0x24>)
  4089aa:	4605      	mov	r5, r0
  4089ac:	4611      	mov	r1, r2
  4089ae:	4618      	mov	r0, r3
  4089b0:	2300      	movs	r3, #0
  4089b2:	6023      	str	r3, [r4, #0]
  4089b4:	f7f8 fe35 	bl	401622 <_fstat>
  4089b8:	1c43      	adds	r3, r0, #1
  4089ba:	d000      	beq.n	4089be <_fstat_r+0x1a>
  4089bc:	bd38      	pop	{r3, r4, r5, pc}
  4089be:	6823      	ldr	r3, [r4, #0]
  4089c0:	2b00      	cmp	r3, #0
  4089c2:	d0fb      	beq.n	4089bc <_fstat_r+0x18>
  4089c4:	602b      	str	r3, [r5, #0]
  4089c6:	bd38      	pop	{r3, r4, r5, pc}
  4089c8:	20400c48 	.word	0x20400c48

004089cc <_isatty_r>:
  4089cc:	b538      	push	{r3, r4, r5, lr}
  4089ce:	4c07      	ldr	r4, [pc, #28]	; (4089ec <_isatty_r+0x20>)
  4089d0:	2300      	movs	r3, #0
  4089d2:	4605      	mov	r5, r0
  4089d4:	4608      	mov	r0, r1
  4089d6:	6023      	str	r3, [r4, #0]
  4089d8:	f7f8 fe28 	bl	40162c <_isatty>
  4089dc:	1c43      	adds	r3, r0, #1
  4089de:	d000      	beq.n	4089e2 <_isatty_r+0x16>
  4089e0:	bd38      	pop	{r3, r4, r5, pc}
  4089e2:	6823      	ldr	r3, [r4, #0]
  4089e4:	2b00      	cmp	r3, #0
  4089e6:	d0fb      	beq.n	4089e0 <_isatty_r+0x14>
  4089e8:	602b      	str	r3, [r5, #0]
  4089ea:	bd38      	pop	{r3, r4, r5, pc}
  4089ec:	20400c48 	.word	0x20400c48

004089f0 <_lseek_r>:
  4089f0:	b570      	push	{r4, r5, r6, lr}
  4089f2:	460d      	mov	r5, r1
  4089f4:	4c08      	ldr	r4, [pc, #32]	; (408a18 <_lseek_r+0x28>)
  4089f6:	4611      	mov	r1, r2
  4089f8:	4606      	mov	r6, r0
  4089fa:	461a      	mov	r2, r3
  4089fc:	4628      	mov	r0, r5
  4089fe:	2300      	movs	r3, #0
  408a00:	6023      	str	r3, [r4, #0]
  408a02:	f7f8 fe15 	bl	401630 <_lseek>
  408a06:	1c43      	adds	r3, r0, #1
  408a08:	d000      	beq.n	408a0c <_lseek_r+0x1c>
  408a0a:	bd70      	pop	{r4, r5, r6, pc}
  408a0c:	6823      	ldr	r3, [r4, #0]
  408a0e:	2b00      	cmp	r3, #0
  408a10:	d0fb      	beq.n	408a0a <_lseek_r+0x1a>
  408a12:	6033      	str	r3, [r6, #0]
  408a14:	bd70      	pop	{r4, r5, r6, pc}
  408a16:	bf00      	nop
  408a18:	20400c48 	.word	0x20400c48

00408a1c <_read_r>:
  408a1c:	b570      	push	{r4, r5, r6, lr}
  408a1e:	460d      	mov	r5, r1
  408a20:	4c08      	ldr	r4, [pc, #32]	; (408a44 <_read_r+0x28>)
  408a22:	4611      	mov	r1, r2
  408a24:	4606      	mov	r6, r0
  408a26:	461a      	mov	r2, r3
  408a28:	4628      	mov	r0, r5
  408a2a:	2300      	movs	r3, #0
  408a2c:	6023      	str	r3, [r4, #0]
  408a2e:	f7f8 f86d 	bl	400b0c <_read>
  408a32:	1c43      	adds	r3, r0, #1
  408a34:	d000      	beq.n	408a38 <_read_r+0x1c>
  408a36:	bd70      	pop	{r4, r5, r6, pc}
  408a38:	6823      	ldr	r3, [r4, #0]
  408a3a:	2b00      	cmp	r3, #0
  408a3c:	d0fb      	beq.n	408a36 <_read_r+0x1a>
  408a3e:	6033      	str	r3, [r6, #0]
  408a40:	bd70      	pop	{r4, r5, r6, pc}
  408a42:	bf00      	nop
  408a44:	20400c48 	.word	0x20400c48

00408a48 <__aeabi_uldivmod>:
  408a48:	b953      	cbnz	r3, 408a60 <__aeabi_uldivmod+0x18>
  408a4a:	b94a      	cbnz	r2, 408a60 <__aeabi_uldivmod+0x18>
  408a4c:	2900      	cmp	r1, #0
  408a4e:	bf08      	it	eq
  408a50:	2800      	cmpeq	r0, #0
  408a52:	bf1c      	itt	ne
  408a54:	f04f 31ff 	movne.w	r1, #4294967295
  408a58:	f04f 30ff 	movne.w	r0, #4294967295
  408a5c:	f000 b97a 	b.w	408d54 <__aeabi_idiv0>
  408a60:	f1ad 0c08 	sub.w	ip, sp, #8
  408a64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  408a68:	f000 f806 	bl	408a78 <__udivmoddi4>
  408a6c:	f8dd e004 	ldr.w	lr, [sp, #4]
  408a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  408a74:	b004      	add	sp, #16
  408a76:	4770      	bx	lr

00408a78 <__udivmoddi4>:
  408a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408a7c:	468c      	mov	ip, r1
  408a7e:	460d      	mov	r5, r1
  408a80:	4604      	mov	r4, r0
  408a82:	9e08      	ldr	r6, [sp, #32]
  408a84:	2b00      	cmp	r3, #0
  408a86:	d151      	bne.n	408b2c <__udivmoddi4+0xb4>
  408a88:	428a      	cmp	r2, r1
  408a8a:	4617      	mov	r7, r2
  408a8c:	d96d      	bls.n	408b6a <__udivmoddi4+0xf2>
  408a8e:	fab2 fe82 	clz	lr, r2
  408a92:	f1be 0f00 	cmp.w	lr, #0
  408a96:	d00b      	beq.n	408ab0 <__udivmoddi4+0x38>
  408a98:	f1ce 0c20 	rsb	ip, lr, #32
  408a9c:	fa01 f50e 	lsl.w	r5, r1, lr
  408aa0:	fa20 fc0c 	lsr.w	ip, r0, ip
  408aa4:	fa02 f70e 	lsl.w	r7, r2, lr
  408aa8:	ea4c 0c05 	orr.w	ip, ip, r5
  408aac:	fa00 f40e 	lsl.w	r4, r0, lr
  408ab0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  408ab4:	0c25      	lsrs	r5, r4, #16
  408ab6:	fbbc f8fa 	udiv	r8, ip, sl
  408aba:	fa1f f987 	uxth.w	r9, r7
  408abe:	fb0a cc18 	mls	ip, sl, r8, ip
  408ac2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  408ac6:	fb08 f309 	mul.w	r3, r8, r9
  408aca:	42ab      	cmp	r3, r5
  408acc:	d90a      	bls.n	408ae4 <__udivmoddi4+0x6c>
  408ace:	19ed      	adds	r5, r5, r7
  408ad0:	f108 32ff 	add.w	r2, r8, #4294967295
  408ad4:	f080 8123 	bcs.w	408d1e <__udivmoddi4+0x2a6>
  408ad8:	42ab      	cmp	r3, r5
  408ada:	f240 8120 	bls.w	408d1e <__udivmoddi4+0x2a6>
  408ade:	f1a8 0802 	sub.w	r8, r8, #2
  408ae2:	443d      	add	r5, r7
  408ae4:	1aed      	subs	r5, r5, r3
  408ae6:	b2a4      	uxth	r4, r4
  408ae8:	fbb5 f0fa 	udiv	r0, r5, sl
  408aec:	fb0a 5510 	mls	r5, sl, r0, r5
  408af0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  408af4:	fb00 f909 	mul.w	r9, r0, r9
  408af8:	45a1      	cmp	r9, r4
  408afa:	d909      	bls.n	408b10 <__udivmoddi4+0x98>
  408afc:	19e4      	adds	r4, r4, r7
  408afe:	f100 33ff 	add.w	r3, r0, #4294967295
  408b02:	f080 810a 	bcs.w	408d1a <__udivmoddi4+0x2a2>
  408b06:	45a1      	cmp	r9, r4
  408b08:	f240 8107 	bls.w	408d1a <__udivmoddi4+0x2a2>
  408b0c:	3802      	subs	r0, #2
  408b0e:	443c      	add	r4, r7
  408b10:	eba4 0409 	sub.w	r4, r4, r9
  408b14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408b18:	2100      	movs	r1, #0
  408b1a:	2e00      	cmp	r6, #0
  408b1c:	d061      	beq.n	408be2 <__udivmoddi4+0x16a>
  408b1e:	fa24 f40e 	lsr.w	r4, r4, lr
  408b22:	2300      	movs	r3, #0
  408b24:	6034      	str	r4, [r6, #0]
  408b26:	6073      	str	r3, [r6, #4]
  408b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b2c:	428b      	cmp	r3, r1
  408b2e:	d907      	bls.n	408b40 <__udivmoddi4+0xc8>
  408b30:	2e00      	cmp	r6, #0
  408b32:	d054      	beq.n	408bde <__udivmoddi4+0x166>
  408b34:	2100      	movs	r1, #0
  408b36:	e886 0021 	stmia.w	r6, {r0, r5}
  408b3a:	4608      	mov	r0, r1
  408b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b40:	fab3 f183 	clz	r1, r3
  408b44:	2900      	cmp	r1, #0
  408b46:	f040 808e 	bne.w	408c66 <__udivmoddi4+0x1ee>
  408b4a:	42ab      	cmp	r3, r5
  408b4c:	d302      	bcc.n	408b54 <__udivmoddi4+0xdc>
  408b4e:	4282      	cmp	r2, r0
  408b50:	f200 80fa 	bhi.w	408d48 <__udivmoddi4+0x2d0>
  408b54:	1a84      	subs	r4, r0, r2
  408b56:	eb65 0503 	sbc.w	r5, r5, r3
  408b5a:	2001      	movs	r0, #1
  408b5c:	46ac      	mov	ip, r5
  408b5e:	2e00      	cmp	r6, #0
  408b60:	d03f      	beq.n	408be2 <__udivmoddi4+0x16a>
  408b62:	e886 1010 	stmia.w	r6, {r4, ip}
  408b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408b6a:	b912      	cbnz	r2, 408b72 <__udivmoddi4+0xfa>
  408b6c:	2701      	movs	r7, #1
  408b6e:	fbb7 f7f2 	udiv	r7, r7, r2
  408b72:	fab7 fe87 	clz	lr, r7
  408b76:	f1be 0f00 	cmp.w	lr, #0
  408b7a:	d134      	bne.n	408be6 <__udivmoddi4+0x16e>
  408b7c:	1beb      	subs	r3, r5, r7
  408b7e:	0c3a      	lsrs	r2, r7, #16
  408b80:	fa1f fc87 	uxth.w	ip, r7
  408b84:	2101      	movs	r1, #1
  408b86:	fbb3 f8f2 	udiv	r8, r3, r2
  408b8a:	0c25      	lsrs	r5, r4, #16
  408b8c:	fb02 3318 	mls	r3, r2, r8, r3
  408b90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408b94:	fb0c f308 	mul.w	r3, ip, r8
  408b98:	42ab      	cmp	r3, r5
  408b9a:	d907      	bls.n	408bac <__udivmoddi4+0x134>
  408b9c:	19ed      	adds	r5, r5, r7
  408b9e:	f108 30ff 	add.w	r0, r8, #4294967295
  408ba2:	d202      	bcs.n	408baa <__udivmoddi4+0x132>
  408ba4:	42ab      	cmp	r3, r5
  408ba6:	f200 80d1 	bhi.w	408d4c <__udivmoddi4+0x2d4>
  408baa:	4680      	mov	r8, r0
  408bac:	1aed      	subs	r5, r5, r3
  408bae:	b2a3      	uxth	r3, r4
  408bb0:	fbb5 f0f2 	udiv	r0, r5, r2
  408bb4:	fb02 5510 	mls	r5, r2, r0, r5
  408bb8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  408bbc:	fb0c fc00 	mul.w	ip, ip, r0
  408bc0:	45a4      	cmp	ip, r4
  408bc2:	d907      	bls.n	408bd4 <__udivmoddi4+0x15c>
  408bc4:	19e4      	adds	r4, r4, r7
  408bc6:	f100 33ff 	add.w	r3, r0, #4294967295
  408bca:	d202      	bcs.n	408bd2 <__udivmoddi4+0x15a>
  408bcc:	45a4      	cmp	ip, r4
  408bce:	f200 80b8 	bhi.w	408d42 <__udivmoddi4+0x2ca>
  408bd2:	4618      	mov	r0, r3
  408bd4:	eba4 040c 	sub.w	r4, r4, ip
  408bd8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  408bdc:	e79d      	b.n	408b1a <__udivmoddi4+0xa2>
  408bde:	4631      	mov	r1, r6
  408be0:	4630      	mov	r0, r6
  408be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408be6:	f1ce 0420 	rsb	r4, lr, #32
  408bea:	fa05 f30e 	lsl.w	r3, r5, lr
  408bee:	fa07 f70e 	lsl.w	r7, r7, lr
  408bf2:	fa20 f804 	lsr.w	r8, r0, r4
  408bf6:	0c3a      	lsrs	r2, r7, #16
  408bf8:	fa25 f404 	lsr.w	r4, r5, r4
  408bfc:	ea48 0803 	orr.w	r8, r8, r3
  408c00:	fbb4 f1f2 	udiv	r1, r4, r2
  408c04:	ea4f 4518 	mov.w	r5, r8, lsr #16
  408c08:	fb02 4411 	mls	r4, r2, r1, r4
  408c0c:	fa1f fc87 	uxth.w	ip, r7
  408c10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  408c14:	fb01 f30c 	mul.w	r3, r1, ip
  408c18:	42ab      	cmp	r3, r5
  408c1a:	fa00 f40e 	lsl.w	r4, r0, lr
  408c1e:	d909      	bls.n	408c34 <__udivmoddi4+0x1bc>
  408c20:	19ed      	adds	r5, r5, r7
  408c22:	f101 30ff 	add.w	r0, r1, #4294967295
  408c26:	f080 808a 	bcs.w	408d3e <__udivmoddi4+0x2c6>
  408c2a:	42ab      	cmp	r3, r5
  408c2c:	f240 8087 	bls.w	408d3e <__udivmoddi4+0x2c6>
  408c30:	3902      	subs	r1, #2
  408c32:	443d      	add	r5, r7
  408c34:	1aeb      	subs	r3, r5, r3
  408c36:	fa1f f588 	uxth.w	r5, r8
  408c3a:	fbb3 f0f2 	udiv	r0, r3, r2
  408c3e:	fb02 3310 	mls	r3, r2, r0, r3
  408c42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  408c46:	fb00 f30c 	mul.w	r3, r0, ip
  408c4a:	42ab      	cmp	r3, r5
  408c4c:	d907      	bls.n	408c5e <__udivmoddi4+0x1e6>
  408c4e:	19ed      	adds	r5, r5, r7
  408c50:	f100 38ff 	add.w	r8, r0, #4294967295
  408c54:	d26f      	bcs.n	408d36 <__udivmoddi4+0x2be>
  408c56:	42ab      	cmp	r3, r5
  408c58:	d96d      	bls.n	408d36 <__udivmoddi4+0x2be>
  408c5a:	3802      	subs	r0, #2
  408c5c:	443d      	add	r5, r7
  408c5e:	1aeb      	subs	r3, r5, r3
  408c60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  408c64:	e78f      	b.n	408b86 <__udivmoddi4+0x10e>
  408c66:	f1c1 0720 	rsb	r7, r1, #32
  408c6a:	fa22 f807 	lsr.w	r8, r2, r7
  408c6e:	408b      	lsls	r3, r1
  408c70:	fa05 f401 	lsl.w	r4, r5, r1
  408c74:	ea48 0303 	orr.w	r3, r8, r3
  408c78:	fa20 fe07 	lsr.w	lr, r0, r7
  408c7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  408c80:	40fd      	lsrs	r5, r7
  408c82:	ea4e 0e04 	orr.w	lr, lr, r4
  408c86:	fbb5 f9fc 	udiv	r9, r5, ip
  408c8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  408c8e:	fb0c 5519 	mls	r5, ip, r9, r5
  408c92:	fa1f f883 	uxth.w	r8, r3
  408c96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  408c9a:	fb09 f408 	mul.w	r4, r9, r8
  408c9e:	42ac      	cmp	r4, r5
  408ca0:	fa02 f201 	lsl.w	r2, r2, r1
  408ca4:	fa00 fa01 	lsl.w	sl, r0, r1
  408ca8:	d908      	bls.n	408cbc <__udivmoddi4+0x244>
  408caa:	18ed      	adds	r5, r5, r3
  408cac:	f109 30ff 	add.w	r0, r9, #4294967295
  408cb0:	d243      	bcs.n	408d3a <__udivmoddi4+0x2c2>
  408cb2:	42ac      	cmp	r4, r5
  408cb4:	d941      	bls.n	408d3a <__udivmoddi4+0x2c2>
  408cb6:	f1a9 0902 	sub.w	r9, r9, #2
  408cba:	441d      	add	r5, r3
  408cbc:	1b2d      	subs	r5, r5, r4
  408cbe:	fa1f fe8e 	uxth.w	lr, lr
  408cc2:	fbb5 f0fc 	udiv	r0, r5, ip
  408cc6:	fb0c 5510 	mls	r5, ip, r0, r5
  408cca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  408cce:	fb00 f808 	mul.w	r8, r0, r8
  408cd2:	45a0      	cmp	r8, r4
  408cd4:	d907      	bls.n	408ce6 <__udivmoddi4+0x26e>
  408cd6:	18e4      	adds	r4, r4, r3
  408cd8:	f100 35ff 	add.w	r5, r0, #4294967295
  408cdc:	d229      	bcs.n	408d32 <__udivmoddi4+0x2ba>
  408cde:	45a0      	cmp	r8, r4
  408ce0:	d927      	bls.n	408d32 <__udivmoddi4+0x2ba>
  408ce2:	3802      	subs	r0, #2
  408ce4:	441c      	add	r4, r3
  408ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  408cea:	eba4 0408 	sub.w	r4, r4, r8
  408cee:	fba0 8902 	umull	r8, r9, r0, r2
  408cf2:	454c      	cmp	r4, r9
  408cf4:	46c6      	mov	lr, r8
  408cf6:	464d      	mov	r5, r9
  408cf8:	d315      	bcc.n	408d26 <__udivmoddi4+0x2ae>
  408cfa:	d012      	beq.n	408d22 <__udivmoddi4+0x2aa>
  408cfc:	b156      	cbz	r6, 408d14 <__udivmoddi4+0x29c>
  408cfe:	ebba 030e 	subs.w	r3, sl, lr
  408d02:	eb64 0405 	sbc.w	r4, r4, r5
  408d06:	fa04 f707 	lsl.w	r7, r4, r7
  408d0a:	40cb      	lsrs	r3, r1
  408d0c:	431f      	orrs	r7, r3
  408d0e:	40cc      	lsrs	r4, r1
  408d10:	6037      	str	r7, [r6, #0]
  408d12:	6074      	str	r4, [r6, #4]
  408d14:	2100      	movs	r1, #0
  408d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d1a:	4618      	mov	r0, r3
  408d1c:	e6f8      	b.n	408b10 <__udivmoddi4+0x98>
  408d1e:	4690      	mov	r8, r2
  408d20:	e6e0      	b.n	408ae4 <__udivmoddi4+0x6c>
  408d22:	45c2      	cmp	sl, r8
  408d24:	d2ea      	bcs.n	408cfc <__udivmoddi4+0x284>
  408d26:	ebb8 0e02 	subs.w	lr, r8, r2
  408d2a:	eb69 0503 	sbc.w	r5, r9, r3
  408d2e:	3801      	subs	r0, #1
  408d30:	e7e4      	b.n	408cfc <__udivmoddi4+0x284>
  408d32:	4628      	mov	r0, r5
  408d34:	e7d7      	b.n	408ce6 <__udivmoddi4+0x26e>
  408d36:	4640      	mov	r0, r8
  408d38:	e791      	b.n	408c5e <__udivmoddi4+0x1e6>
  408d3a:	4681      	mov	r9, r0
  408d3c:	e7be      	b.n	408cbc <__udivmoddi4+0x244>
  408d3e:	4601      	mov	r1, r0
  408d40:	e778      	b.n	408c34 <__udivmoddi4+0x1bc>
  408d42:	3802      	subs	r0, #2
  408d44:	443c      	add	r4, r7
  408d46:	e745      	b.n	408bd4 <__udivmoddi4+0x15c>
  408d48:	4608      	mov	r0, r1
  408d4a:	e708      	b.n	408b5e <__udivmoddi4+0xe6>
  408d4c:	f1a8 0802 	sub.w	r8, r8, #2
  408d50:	443d      	add	r5, r7
  408d52:	e72b      	b.n	408bac <__udivmoddi4+0x134>

00408d54 <__aeabi_idiv0>:
  408d54:	4770      	bx	lr
  408d56:	bf00      	nop
  408d58:	3f000000 	.word	0x3f000000
  408d5c:	42b40000 	.word	0x42b40000
  408d60:	42b40000 	.word	0x42b40000
  408d64:	00000000 	.word	0x00000000
  408d68:	454c4449 	.word	0x454c4449
  408d6c:	00000000 	.word	0x00000000
  408d70:	51726d54 	.word	0x51726d54
  408d74:	00000000 	.word	0x00000000
  408d78:	20726d54 	.word	0x20726d54
  408d7c:	00637653 	.word	0x00637653
  408d80:	64656c6f 	.word	0x64656c6f
  408d84:	00000000 	.word	0x00000000
  408d88:	6c696146 	.word	0x6c696146
  408d8c:	74206465 	.word	0x74206465
  408d90:	7263206f 	.word	0x7263206f
  408d94:	65746165 	.word	0x65746165
  408d98:	756d6920 	.word	0x756d6920
  408d9c:	73617420 	.word	0x73617420
  408da0:	000a0d6b 	.word	0x000a0d6b
  408da4:	686c6166 	.word	0x686c6166
  408da8:	6d652061 	.word	0x6d652061
  408dac:	69726320 	.word	0x69726320
  408db0:	61207261 	.word	0x61207261
  408db4:	75712073 	.word	0x75712073
  408db8:	73657565 	.word	0x73657565
  408dbc:	00000a20 	.word	0x00000a20
  408dc0:	73756f68 	.word	0x73756f68
  408dc4:	6f645f65 	.word	0x6f645f65
  408dc8:	00006e77 	.word	0x00006e77
  408dcc:	6569726f 	.word	0x6569726f
  408dd0:	6361746e 	.word	0x6361746e
  408dd4:	00006f61 	.word	0x00006f61
  408dd8:	686c6166 	.word	0x686c6166
  408ddc:	6d652061 	.word	0x6d652061
  408de0:	69726320 	.word	0x69726320
  408de4:	6f207261 	.word	0x6f207261
  408de8:	65732073 	.word	0x65732073
  408dec:	6f66616d 	.word	0x6f66616d
  408df0:	0d736f72 	.word	0x0d736f72
  408df4:	0000000a 	.word	0x0000000a
  408df8:	75696143 	.word	0x75696143
  408dfc:	00000a0d 	.word	0x00000a0d
  408e00:	5252455b 	.word	0x5252455b
  408e04:	5b205d4f 	.word	0x5b205d4f
  408e08:	5d633269 	.word	0x5d633269
  408e0c:	72705b20 	.word	0x72705b20
  408e10:	5d65626f 	.word	0x5d65626f
  408e14:	00000a20 	.word	0x00000a20
  408e18:	4441445b 	.word	0x4441445b
  408e1c:	5b205d4f 	.word	0x5b205d4f
  408e20:	5d633269 	.word	0x5d633269
  408e24:	6f727020 	.word	0x6f727020
  408e28:	4f206562 	.word	0x4f206562
  408e2c:	00000a4b 	.word	0x00000a4b
  408e30:	5252455b 	.word	0x5252455b
  408e34:	5b205d4f 	.word	0x5b205d4f
  408e38:	5d633269 	.word	0x5d633269
  408e3c:	65725b20 	.word	0x65725b20
  408e40:	205d6461 	.word	0x205d6461
  408e44:	0000000a 	.word	0x0000000a
  408e48:	4441445b 	.word	0x4441445b
  408e4c:	5b205d4f 	.word	0x5b205d4f
  408e50:	5d633269 	.word	0x5d633269
  408e54:	3a782520 	.word	0x3a782520
  408e58:	00007825 	.word	0x00007825
  408e5c:	5252455b 	.word	0x5252455b
  408e60:	5b205d4f 	.word	0x5b205d4f
  408e64:	5d633269 	.word	0x5d633269
  408e68:	72775b20 	.word	0x72775b20
  408e6c:	5d657469 	.word	0x5d657469
  408e70:	00000a20 	.word	0x00000a20
  408e74:	63617473 	.word	0x63617473
  408e78:	766f206b 	.word	0x766f206b
  408e7c:	6c667265 	.word	0x6c667265
  408e80:	2520776f 	.word	0x2520776f
  408e84:	73252078 	.word	0x73252078
  408e88:	00000a0d 	.word	0x00000a0d
  408e8c:	6e697361 	.word	0x6e697361
  408e90:	00000066 	.word	0x00000066

00408e94 <npio2_hw>:
  408e94:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
  408ea4:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
  408eb4:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
  408ec4:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
  408ed4:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
  408ee4:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
  408ef4:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
  408f04:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

00408f14 <two_over_pi>:
  408f14:	000000a2 000000f9 00000083 0000006e     ............n...
  408f24:	0000004e 00000044 00000015 00000029     N...D.......)...
  408f34:	000000fc 00000027 00000057 000000d1     ....'...W.......
  408f44:	000000f5 00000034 000000dd 000000c0     ....4...........
  408f54:	000000db 00000062 00000095 00000099     ....b...........
  408f64:	0000003c 00000043 00000090 00000041     <...C.......A...
  408f74:	000000fe 00000051 00000063 000000ab     ....Q...c.......
  408f84:	000000de 000000bb 000000c5 00000061     ............a...
  408f94:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
  408fa4:	00000042 0000004d 000000d2 000000e0     B...M...........
  408fb4:	00000006 00000049 0000002e 000000ea     ....I...........
  408fc4:	00000009 000000d1 00000092 0000001c     ................
  408fd4:	000000fe 0000001d 000000eb 0000001c     ................
  408fe4:	000000b1 00000029 000000a7 0000003e     ....).......>...
  408ff4:	000000e8 00000082 00000035 000000f5     ........5.......
  409004:	0000002e 000000bb 00000044 00000084     ........D.......
  409014:	000000e9 0000009c 00000070 00000026     ........p...&...
  409024:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
  409034:	00000039 00000091 000000d6 00000039     9...........9...
  409044:	00000083 00000053 00000039 000000f4     ....S...9.......
  409054:	0000009c 00000084 0000005f 0000008b     ........_.......
  409064:	000000bd 000000f9 00000028 0000003b     ........(...;...
  409074:	0000001f 000000f8 00000097 000000ff     ................
  409084:	000000de 00000005 00000098 0000000f     ................
  409094:	000000ef 0000002f 00000011 0000008b     ..../...........
  4090a4:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
  4090b4:	0000006d 00000036 0000007e 000000cf     m...6...~.......
  4090c4:	00000027 000000cb 00000009 000000b7     '...............
  4090d4:	0000004f 00000046 0000003f 00000066     O...F...?...f...
  4090e4:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
  4090f4:	00000075 00000027 000000ba 000000c7     u...'...........
  409104:	000000eb 000000e5 000000f1 0000007b     ............{...
  409114:	0000003d 00000007 00000039 000000f7     =.......9.......
  409124:	0000008a 00000052 00000092 000000ea     ....R...........
  409134:	0000006b 000000fb 0000005f 000000b1     k......._.......
  409144:	0000001f 0000008d 0000005d 00000008     ........].......
  409154:	00000056 00000003 00000030 00000046     V.......0...F...
  409164:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
  409174:	000000f0 000000cf 000000bc 00000020     ............ ...
  409184:	0000009a 000000f4 00000036 0000001d     ........6.......
  409194:	000000a9 000000e3 00000091 00000061     ............a...
  4091a4:	0000005e 000000e6 0000001b 00000008     ^...............
  4091b4:	00000065 00000099 00000085 0000005f     e..........._...
  4091c4:	00000014 000000a0 00000068 00000040     ........h...@...
  4091d4:	0000008d 000000ff 000000d8 00000080     ................
  4091e4:	0000004d 00000073 00000027 00000031     M...s...'...1...
  4091f4:	00000006 00000006 00000015 00000056     ............V...
  409204:	000000ca 00000073 000000a8 000000c9     ....s...........
  409214:	00000060 000000e2 0000007b 000000c0     `.......{.......
  409224:	0000008c 0000006b                       ....k...

0040922c <PIo2>:
  40922c:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
  40923c:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
  40924c:	1fc40000 1bc60000 17440000              ..........D.

00409258 <init_jk>:
  409258:	00000004 00000007 00000009              ............

00409264 <atanhi>:
  409264:	3eed6338 3f490fda 3f7b985e 3fc90fda     8c.>..I?^.{?...?

00409274 <atanlo>:
  409274:	31ac3769 33222168 33140fb4 33a22168     i7.1h!"3...3h!.3

00409284 <_global_impure_ptr>:
  409284:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  409294:	46454443 00000000 33323130 37363534     CDEF....01234567
  4092a4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  4092b4:	0000296c                                l)..

004092b8 <blanks.7217>:
  4092b8:	20202020 20202020 20202020 20202020                     

004092c8 <zeroes.7218>:
  4092c8:	30303030 30303030 30303030 30303030     0000000000000000
  4092d8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

004092e8 <_ctype_>:
  4092e8:	20202000 20202020 28282020 20282828     .         ((((( 
  4092f8:	20202020 20202020 20202020 20202020                     
  409308:	10108820 10101010 10101010 10101010      ...............
  409318:	04040410 04040404 10040404 10101010     ................
  409328:	41411010 41414141 01010101 01010101     ..AAAAAA........
  409338:	01010101 01010101 01010101 10101010     ................
  409348:	42421010 42424242 02020202 02020202     ..BBBBBB........
  409358:	02020202 02020202 02020202 10101010     ................
  409368:	00000020 00000000 00000000 00000000      ...............
	...

004093ec <_init>:
  4093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4093ee:	bf00      	nop
  4093f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4093f2:	bc08      	pop	{r3}
  4093f4:	469e      	mov	lr, r3
  4093f6:	4770      	bx	lr

004093f8 <__init_array_start>:
  4093f8:	004076b9 	.word	0x004076b9

004093fc <__frame_dummy_init_array_entry>:
  4093fc:	0040018d                                ..@.

00409400 <_fini>:
  409400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  409402:	bf00      	nop
  409404:	bcf8      	pop	{r3, r4, r5, r6, r7}
  409406:	bc08      	pop	{r3}
  409408:	469e      	mov	lr, r3
  40940a:	4770      	bx	lr

0040940c <__fini_array_start>:
  40940c:	00400169 	.word	0x00400169
